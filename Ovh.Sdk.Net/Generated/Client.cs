//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ovh.Sdk.Net {
    using System.Net.Http;
    using System.Net.Http.Json;
    
    
    public class Client {
        
        private HttpClient _client;
        
        public Client(HttpClient client) {
            this._client = client;
        }
        
        // Path: /allDom
        public Task<System.String[]> GetAllDomAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/allDom?{queryParameters}", queryParameters));
        }
        
        // Path: /allDom/{serviceName}
        public Task<_allDom.AllDomWithIAM> GetAllDomServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_allDom.AllDomWithIAM>(string.Format("/allDom/{serviceName}", serviceName));
        }
        
        // Path: /allDom/{serviceName}/domain
        public Task<System.String[]> GetAllDomServiceNameDomainAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/allDom/{serviceName}/domain?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /allDom/{serviceName}/domain/{domain}
        public Task<_allDom.AllDomDomain> GetAllDomServiceNameDomainDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_allDom.AllDomDomain>(string.Format("/allDom/{serviceName}/domain/{domain}", domain, serviceName));
        }
        
        // Path: /allDom/{serviceName}/serviceInfos
        public Task<_services.Service> GetAllDomServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/allDom/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /allDom/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutAllDomServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /auth/credential
        public Task<_auth.ApiCredentialRequest> PostAuthCredentialAsync(_auth.ApiCredentialRequestParams body) {
            return default(Task<_auth.ApiCredentialRequest>);
        }
        
        // Path: /auth/currentCredential
        public Task<_auth.ApiCredential> GetAuthCurrentCredentialAsync() {
            return _client.GetFromJsonAsync<_auth.ApiCredential>("/auth/currentCredential");
        }
        
        // Path: /auth/details
        public Task<_auth.Details> GetAuthDetailsAsync() {
            return _client.GetFromJsonAsync<_auth.Details>("/auth/details");
        }
        
        // Path: /auth/logout
        public System.Threading.Tasks.Task PostAuthLogoutAsync() {
            return Task.CompletedTask;
        }
        
        // Path: /auth/time
        public Task<System.Int64> GetAuthTimeAsync() {
            return _client.GetFromJsonAsync<long>("/auth/time");
        }
        
        // Path: /cdn/dedicated
        public Task<System.String[]> GetCdnDedicatedAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cdn/dedicated?{queryParameters}", queryParameters));
        }
        
        // Path: /cdn/dedicated/pops
        public Task<System.String[]> GetCdnDedicatedPopsAsync() {
            return _client.GetFromJsonAsync<string[]>("/cdn/dedicated/pops");
        }
        
        // Path: /cdn/dedicated/pops/{name}
        public Task<_cdnanycast.Pop> GetCdnDedicatedPopsNameAsync(string name) {
            return _client.GetFromJsonAsync<_cdnanycast.Pop>(string.Format("/cdn/dedicated/pops/{name}", name));
        }
        
        // Path: /cdn/dedicated/{serviceName}
        public Task<_cdnanycast.AnycastWithIAM> GetCdnDedicatedServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.AnycastWithIAM>(string.Format("/cdn/dedicated/{serviceName}", serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/changeContact
        public Task<System.Int64[]> PostCdnDedicatedServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains
        public Task<System.String[]> GetCdnDedicatedServiceNameDomainsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cdn/dedicated/{serviceName}/domains", serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains
        public Task<_cdnanycast.Domain> PostCdnDedicatedServiceNameDomainsAsync(string domain, string serviceName) {
            return default(Task<_cdnanycast.Domain>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        public Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameDomainsDomainAsync(string domain, string serviceName) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        public Task<_cdnanycast.Domain> GetCdnDedicatedServiceNameDomainsDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.Domain>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}", domain, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        public System.Threading.Tasks.Task PutCdnDedicatedServiceNameDomainsDomainAsync(_cdnanycast.Domain body, string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends
        public Task<System.String[]> GetCdnDedicatedServiceNameDomainsDomainBackendsAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/backends", domain, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends
        public Task<_cdnanycast.Backend> PostCdnDedicatedServiceNameDomainsDomainBackendsAsync(string domain, string ip, string serviceName) {
            return default(Task<_cdnanycast.Backend>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        public Task<System.String> DeleteCdnDedicatedServiceNameDomainsDomainBackendsIpAsync(string domain, string ip, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        public Task<_cdnanycast.Backend> GetCdnDedicatedServiceNameDomainsDomainBackendsIpAsync(string domain, string ip, string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.Backend>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}", domain, ip, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        public Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainCacheRulesAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string fileMatch) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules?{queryParameters}", domain, serviceName, queryParameters));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        public Task<_cdnanycast.CacheRule> PostCdnDedicatedServiceNameDomainsDomainCacheRulesAsync(_cdnanycast.CacheRuleCacheTypeEnum cacheType, string domain, string fileMatch, _cdnanycast.CacheRuleFileTypeEnum fileType, string serviceName, long ttl) {
            return default(Task<_cdnanycast.CacheRule>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(long cacheRuleId, string domain, string serviceName) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public Task<_cdnanycast.CacheRule> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(long cacheRuleId, string domain, string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.CacheRule>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}", cacheRuleId, domain, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        public System.Threading.Tasks.Task PutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync(_cdnanycast.CacheRule body, long cacheRuleId, string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/flush
        public Task<_cdnanycast.Task> PostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushAsync(long cacheRuleId, string domain, string serviceName) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks
        public Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksAsync(long cacheRuleId, string domain, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks", cacheRuleId, domain, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{taskId}
        public Task<_cdnanycast.Task> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdAsync(long cacheRuleId, string domain, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_cdnanycast.Task>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{tas" +
                        "kId}", cacheRuleId, domain, serviceName, taskId));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/flush
        public Task<_cdnanycast.Task> PostCdnDedicatedServiceNameDomainsDomainFlushAsync(string domain, string serviceName) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/logs
        public Task<_cdnanycast.LogsURL> PostCdnDedicatedServiceNameDomainsDomainLogsAsync(string domain, string serviceName) {
            return default(Task<_cdnanycast.LogsURL>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/statistics
        public Task<_cdnanycast.StatsDataType[]> GetCdnDedicatedServiceNameDomainsDomainStatisticsAsync(string domain, _cdnanycast.StatsPeriodEnum period, string serviceName, _cdnanycast.StatsTypeEnum type, _cdnanycast.StatsValueEnum value) {
            return _client.GetFromJsonAsync<_cdnanycast.StatsDataType[]>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/statistics?{queryParameters}", domain, serviceName, queryParameters));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/tasks
        public Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainTasksAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/tasks", domain, serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}
        public Task<_cdnanycast.Task> GetCdnDedicatedServiceNameDomainsDomainTasksTaskIdAsync(string domain, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_cdnanycast.Task>(string.Format("/cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}", domain, serviceName, taskId));
        }
        
        // Path: /cdn/dedicated/{serviceName}/logs
        public Task<_cdnanycast.LogsURL> PostCdnDedicatedServiceNameLogsAsync(string serviceName) {
            return default(Task<_cdnanycast.LogsURL>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/quota
        public Task<_cdnanycast.StatsDataType[]> GetCdnDedicatedServiceNameQuotaAsync(_cdnanycast.StatsPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.StatsDataType[]>(string.Format("/cdn/dedicated/{serviceName}/quota?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cdn/dedicated/{serviceName}/serviceInfos
        public Task<_services.Service> GetCdnDedicatedServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/cdn/dedicated/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutCdnDedicatedServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameSslAsync(string serviceName) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Ssl> GetCdnDedicatedServiceNameSslAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cdnanycast.Ssl>(string.Format("/cdn/dedicated/{serviceName}/ssl", serviceName));
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        public Task<_cdnanycast.Ssl> PostCdnDedicatedServiceNameSslAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string certificate, [System.Runtime.InteropServices.OptionalAttribute()] string chain, [System.Runtime.InteropServices.OptionalAttribute()] string key) {
            return default(Task<_cdnanycast.Ssl>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/tasks
        public Task<System.Int64[]> GetCdnDedicatedServiceNameSslTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cdnanycast.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _cdnanycast.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cdn/dedicated/{serviceName}/ssl/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/tasks/{taskId}
        public Task<_cdnanycast.Task> GetCdnDedicatedServiceNameSslTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_cdnanycast.Task>(string.Format("/cdn/dedicated/{serviceName}/ssl/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/update
        public Task<_cdnanycast.Task> PostCdnDedicatedServiceNameSslUpdateAsync(string certificate, string key, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string chain) {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cloud/agreements
        public Task<_cloud_project.ProductAgreements> GetCloudAgreementsAsync(_cloud_project.ProductNameEnum product) {
            return _client.GetFromJsonAsync<_cloud_project.ProductAgreements>(string.Format("/cloud/agreements?{queryParameters}", queryParameters));
        }
        
        // Path: /cloud/eligibility
        public Task<_cloud_project.EligibilityInfo> GetCloudEligibilityAsync([System.Runtime.InteropServices.OptionalAttribute()] string voucher) {
            return _client.GetFromJsonAsync<_cloud_project.EligibilityInfo>(string.Format("/cloud/eligibility?{queryParameters}", queryParameters));
        }
        
        // Path: /cloud/order
        public Task<_cloud_order.Order[]> GetCloudOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_cloud_order.Order[]>(string.Format("/cloud/order?{queryParameters}", queryParameters));
        }
        
        // Path: /cloud/order/rule/availability
        public Task<_cloud_order_rule.Availability> GetCloudOrderRuleAvailabilityAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, [System.Runtime.InteropServices.OptionalAttribute()] string addonFamily, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_cloud_order_rule.Availability>(string.Format("/cloud/order/rule/availability?{queryParameters}", queryParameters));
        }
        
        // Path: /cloud/order/rule/instanceCategory
        public Task<_cloud_order_rule.InstanceCategories> GetCloudOrderRuleInstanceCategoryAsync() {
            return _client.GetFromJsonAsync<_cloud_order_rule.InstanceCategories>("/cloud/order/rule/instanceCategory");
        }
        
        // Path: /cloud/project
        public Task<System.String[]> GetCloudProjectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project?{queryParameters}", queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}
        public Task<_cloud.ProjectWithIAM> GetCloudProjectServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.ProjectWithIAM>(string.Format("/cloud/project/{serviceName}", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAsync(_cloud.Project body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/acl
        public Task<System.String[]> GetCloudProjectServiceNameAclAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud.AclTypeEnum type) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/acl?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/acl
        public Task<_cloud.Acl> PostCloudProjectServiceNameAclAsync(string accountId, string serviceName, _cloud.AclTypeEnum type) {
            return default(Task<_cloud.Acl>);
        }
        
        // Path: /cloud/project/{serviceName}/acl/{accountId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAclAccountIdAsync(string accountId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/acl/{accountId}
        public Task<_cloud.Acl> GetCloudProjectServiceNameAclAccountIdAsync(string accountId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Acl>(string.Format("/cloud/project/{serviceName}/acl/{accountId}", accountId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/activateMonthlyBilling
        public Task<_cloud_instance.InstanceDetail[]> PostCloudProjectServiceNameActivateMonthlyBillingAsync(_cloud.ProjectActivateMonthlyBillingCreation body, string serviceName) {
            return default(Task<_cloud_instance.InstanceDetail[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app
        public Task<_cloud_project_ai_app.App[]> GetCloudProjectServiceNameAiAppAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum order, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long size, [System.Runtime.InteropServices.OptionalAttribute()] string sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_app.AppStateEnum[] statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] string userName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_app.App[]>(string.Format("/cloud/project/{serviceName}/ai/app?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/app
        public Task<_cloud_project_ai_app.App> PostCloudProjectServiceNameAiAppAsync(_cloud_project_ai_app.AppSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai_app.App>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/command
        public Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiAppCommandAsync(_cloud_project_ai_app.AppSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiAppAppIdAsync(System.Guid appId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool force) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        public Task<_cloud_project_ai_app.App> GetCloudProjectServiceNameAiAppAppIdAsync(System.Guid appId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_app.App>(string.Format("/cloud/project/{serviceName}/ai/app/{appId}", appId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        public Task<_cloud_project_ai_app.App> PutCloudProjectServiceNameAiAppAppIdAsync(_cloud_project_ai_app.UpdateInput body, System.Guid appId, string serviceName) {
            return default(Task<_cloud_project_ai_app.App>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiAppAppIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec body, System.Guid appId, string serviceName) {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/image
        public Task<_cloud_project_ai.GenericResponse> PutCloudProjectServiceNameAiAppAppIdImageAsync(_cloud_project_ai_app.AppImageInput body, System.Guid appId, string serviceName) {
            return default(Task<_cloud_project_ai.GenericResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/label
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiAppAppIdLabelAsync(_cloud_project_ai.Label body, System.Guid appId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/log
        public Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiAppAppIdLogAsync(System.Guid appId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] string replica, [System.Runtime.InteropServices.OptionalAttribute()] long size) {
            return _client.GetFromJsonAsync<_cloud_project_ai.Logs>(string.Format("/cloud/project/{serviceName}/ai/app/{appId}/log?{queryParameters}", appId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/scalingstrategy
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiAppAppIdScalingstrategyAsync(_cloud_project_ai_app.ScalingStrategyInput body, System.Guid appId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/start
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiAppAppIdStartAsync(System.Guid appId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/stop
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiAppAppIdStopAsync(System.Guid appId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/authorization
        public Task<_cloud_project_ai.AuthorizationStatus> GetCloudProjectServiceNameAiAuthorizationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai.AuthorizationStatus>(string.Format("/cloud/project/{serviceName}/ai/authorization", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/authorization
        public System.Threading.Tasks.Task PostCloudProjectServiceNameAiAuthorizationAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/feature
        public Task<_cloud_project_ai_capabilities.Features> GetCloudProjectServiceNameAiCapabilitiesFeatureAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Features>(string.Format("/cloud/project/{serviceName}/ai/capabilities/feature", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/quota
        public Task<_cloud_project_ai_capabilities.ProjectQuotas> GetCloudProjectServiceNameAiCapabilitiesQuotaAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.ProjectQuotas>(string.Format("/cloud/project/{serviceName}/ai/capabilities/quota", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiCapabilitiesRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region[]>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiCapabilitiesRegionRegionAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image
        public Task<_cloud_project_ai_capabilities_app.Image[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionAppImageAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities_app.Image[]>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region
        public Task<System.String[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionDataRegionAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor
        public Task<_cloud_project_ai_capabilities.Flavor[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionFlavorAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Flavor[]>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}
        public Task<_cloud_project_ai_capabilities.Flavor> GetCloudProjectServiceNameAiCapabilitiesRegionRegionFlavorFlavorIdAsync(string flavorId, string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Flavor>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}", flavorId, region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/preset
        public Task<_cloud_project_ai_capabilities.Preset[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionPresetAsync(string region, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string type) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Preset[]>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset?{queryParamet" +
                        "ers}", region, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}
        public Task<_cloud_project_ai_capabilities.Preset> GetCloudProjectServiceNameAiCapabilitiesRegionRegionPresetPresetIdAsync(string presetId, string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Preset>(string.Format("/cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}", presetId, region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiDataRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region[]>(string.Format("/cloud/project/{serviceName}/ai/data/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiDataRegionRegionAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region>(string.Format("/cloud/project/{serviceName}/ai/data/region/{region}", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias
        public Task<_cloud_project_ai.DataStore[]> GetCloudProjectServiceNameAiDataRegionRegionAliasAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai.DataStore[]>(string.Format("/cloud/project/{serviceName}/ai/data/region/{region}/alias", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias
        public Task<_cloud_project_ai.DataStore> PostCloudProjectServiceNameAiDataRegionRegionAliasAsync(_cloud_project_ai.DataStoreInput body, string region, string serviceName) {
            return default(Task<_cloud_project_ai.DataStore>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(string alias, string region, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public Task<_cloud_project_ai.DataStore> GetCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(string alias, string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai.DataStore>(string.Format("/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}", alias, region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync(_cloud_project_ai.DataStoreInput body, string alias, string region, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth
        public Task<_cloud_project_ai.DataStoreAuth> GetCloudProjectServiceNameAiDataRegionRegionAliasAliasAuthAsync(string alias, string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai.DataStoreAuth>(string.Format("/cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth", alias, region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/job
        public Task<_cloud_project_ai_job.Job[]> GetCloudProjectServiceNameAiJobAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum order, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long size, [System.Runtime.InteropServices.OptionalAttribute()] string sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_job.JobStateEnum[] statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] string userName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_job.Job[]>(string.Format("/cloud/project/{serviceName}/ai/job?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/job
        public Task<_cloud_project_ai_job.Job> PostCloudProjectServiceNameAiJobAsync(_cloud_project_ai_job.JobSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai_job.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/capabilities/presetImage
        public Task<_cloud_project_ai_job.PresetImage[]> GetCloudProjectServiceNameAiJobCapabilitiesPresetImageAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_job.PresetImage[]>(string.Format("/cloud/project/{serviceName}/ai/job/capabilities/presetImage", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/command
        public Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiJobCommandAsync(_cloud_project_ai_job.JobSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiJobJobIdAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool force) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}
        public Task<_cloud_project_ai_job.Job> GetCloudProjectServiceNameAiJobJobIdAsync(System.Guid jobId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_job.Job>(string.Format("/cloud/project/{serviceName}/ai/job/{jobId}", jobId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiJobJobIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec body, System.Guid jobId, string serviceName) {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/kill
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiJobJobIdKillAsync(System.Guid jobId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/label
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiJobJobIdLabelAsync(_cloud_project_ai.Label body, System.Guid jobId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/log
        public Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiJobJobIdLogAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long size) {
            return _client.GetFromJsonAsync<_cloud_project_ai.Logs>(string.Format("/cloud/project/{serviceName}/ai/job/{jobId}/log?{queryParameters}", jobId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook
        public Task<_cloud_project_ai_notebook.Notebook[]> GetCloudProjectServiceNameAiNotebookAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string labelSelector, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum order, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long size, [System.Runtime.InteropServices.OptionalAttribute()] string sort, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai_notebook.NotebookStateEnum[] statusState, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedBefore, [System.Runtime.InteropServices.OptionalAttribute()] string userName, [System.Runtime.InteropServices.OptionalAttribute()] bool withSpark) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Notebook[]>(string.Format("/cloud/project/{serviceName}/ai/notebook?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook
        public Task<_cloud_project_ai_notebook.Notebook> PostCloudProjectServiceNameAiNotebookAsync(_cloud_project_ai_notebook.NotebookSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/capabilities/editor
        public Task<_cloud_project_ai_notebook.Editor[]> GetCloudProjectServiceNameAiNotebookCapabilitiesEditorAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string compatibleWithFramework) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Editor[]>(string.Format("/cloud/project/{serviceName}/ai/notebook/capabilities/editor?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/capabilities/framework
        public Task<_cloud_project_ai_notebook.Framework[]> GetCloudProjectServiceNameAiNotebookCapabilitiesFrameworkAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string compatibleWithEditor) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Framework[]>(string.Format("/cloud/project/{serviceName}/ai/notebook/capabilities/framework?{queryParameters}" +
                        "", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/command
        public Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiNotebookCommandAsync(_cloud_project_ai_notebook.NotebookSpecInput body, string serviceName) {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiNotebookNotebookIdAsync(string notebookId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool force) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        public Task<_cloud_project_ai_notebook.Notebook> GetCloudProjectServiceNameAiNotebookNotebookIdAsync(string notebookId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Notebook>(string.Format("/cloud/project/{serviceName}/ai/notebook/{notebookId}", notebookId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiNotebookNotebookIdAsync(_cloud_project_ai_notebook.NotebookUpdate body, string notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup
        public Task<_cloud_project_ai_notebook.Backup[]> GetCloudProjectServiceNameAiNotebookNotebookIdBackupAsync(string notebookId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_ai.OrderEnum order, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long size, [System.Runtime.InteropServices.OptionalAttribute()] string sort, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedAfter, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime updatedBefore) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Backup[]>(string.Format("/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup?{queryParameters}", notebookId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}
        public Task<_cloud_project_ai_notebook.Backup> GetCloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdAsync(string backupId, string notebookId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_notebook.Backup>(string.Format("/cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}", backupId, notebookId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}/fork
        public Task<_cloud_project_ai_notebook.Notebook> PostCloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdForkAsync(string backupId, string notebookId, string serviceName) {
            return default(Task<_cloud_project_ai_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/datasync
        public Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiNotebookNotebookIdDatasyncAsync(_cloud_project_ai_volume.DataSyncSpec body, string notebookId, string serviceName) {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/label
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiNotebookNotebookIdLabelAsync(_cloud_project_ai.Label body, string notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/log
        public Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiNotebookNotebookIdLogAsync(string notebookId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai.Logs>(string.Format("/cloud/project/{serviceName}/ai/notebook/{notebookId}/log", notebookId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/restart
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiNotebookNotebookIdRestartAsync(string notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/start
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiNotebookNotebookIdStartAsync(string notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/stop
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiNotebookNotebookIdStopAsync(string notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region
        public Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiPartnersRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region[]>(string.Format("/cloud/project/{serviceName}/ai/partners/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}
        public Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiPartnersRegionRegionAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_capabilities.Region>(string.Format("/cloud/project/{serviceName}/ai/partners/region/{region}", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}/partner
        public Task<_cloud_project_ai_partner.Partner[]> GetCloudProjectServiceNameAiPartnersRegionRegionPartnerAsync(string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_partner.Partner[]>(string.Format("/cloud/project/{serviceName}/ai/partners/region/{region}/partner", region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}
        public Task<_cloud_project_ai_partner.Partner> GetCloudProjectServiceNameAiPartnersRegionRegionPartnerPartnerIdAsync(string partnerId, string region, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_partner.Partner>(string.Format("/cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}", partnerId, region, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry
        public Task<_cloud_project_ai_registry.Registry[]> GetCloudProjectServiceNameAiRegistryAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_registry.Registry[]>(string.Format("/cloud/project/{serviceName}/ai/registry", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry
        public Task<_cloud_project_ai_registry.Registry> PostCloudProjectServiceNameAiRegistryAsync(_cloud_project_ai_registry.Registry body, string serviceName) {
            return default(Task<_cloud_project_ai_registry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiRegistryRegistryIdAsync(string registryId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        public Task<_cloud_project_ai_registry.Registry> GetCloudProjectServiceNameAiRegistryRegistryIdAsync(string registryId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_registry.Registry>(string.Format("/cloud/project/{serviceName}/ai/registry/{registryId}", registryId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAiRegistryRegistryIdAsync(_cloud_project_ai_registry.RegistryUpdateInput body, string registryId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/token
        public Task<_cloud_project_ai_token.Token[]> GetCloudProjectServiceNameAiTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_token.Token[]>(string.Format("/cloud/project/{serviceName}/ai/token", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/token
        public Task<_cloud_project_ai_token.Token> PostCloudProjectServiceNameAiTokenAsync(_cloud_project_ai_token.TokenSpec body, string serviceName) {
            return default(Task<_cloud_project_ai_token.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAiTokenIdAsync(System.Guid id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}
        public Task<_cloud_project_ai_token.Token> GetCloudProjectServiceNameAiTokenIdAsync(System.Guid id, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_ai_token.Token>(string.Format("/cloud/project/{serviceName}/ai/token/{id}", id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}/renew
        public Task<_cloud_project_ai_token.Token> PostCloudProjectServiceNameAiTokenIdRenewAsync(System.Guid id, string serviceName) {
            return default(Task<_cloud_project_ai_token.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting
        public Task<System.String[]> GetCloudProjectServiceNameAlertingAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/alerting", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/alerting
        public Task<_cloud.Alerting> PostCloudProjectServiceNameAlertingAsync(_cloud.AlertingDelayEnum delay, string email, long monthlyThreshold, string serviceName) {
            return default(Task<_cloud.Alerting>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameAlertingIdAsync(string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        public Task<_cloud.Alerting> GetCloudProjectServiceNameAlertingIdAsync(string id, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Alerting>(string.Format("/cloud/project/{serviceName}/alerting/{id}", id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameAlertingIdAsync(_cloud.Alerting body, string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}/alert
        public Task<System.Int64[]> GetCloudProjectServiceNameAlertingIdAlertAsync(string id, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cloud/project/{serviceName}/alerting/{id}/alert", id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}/alert/{alertId}
        public Task<_cloud.AlertingAlert> GetCloudProjectServiceNameAlertingIdAlertAlertIdAsync(long alertId, string id, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.AlertingAlert>(string.Format("/cloud/project/{serviceName}/alerting/{id}/alert/{alertId}", alertId, id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/bill
        public Task<_cloud_project.Bill[]> GetCloudProjectServiceNameBillAsync(System.DateTime from, string serviceName, System.DateTime to) {
            return _client.GetFromJsonAsync<_cloud_project.Bill[]>(string.Format("/cloud/project/{serviceName}/bill?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/cancel
        public System.Threading.Tasks.Task PostCloudProjectServiceNameCancelAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/containerRegistry
        public Task<_cloud_containerRegistry.Capability[]> GetCloudProjectServiceNameCapabilitiesContainerRegistryAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.Capability[]>(string.Format("/cloud/project/{serviceName}/capabilities/containerRegistry", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/admissionplugins
        public Task<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]> GetCloudProjectServiceNameCapabilitiesKubeAdmissionpluginsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]>(string.Format("/cloud/project/{serviceName}/capabilities/kube/admissionplugins", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/flavors
        public Task<_cloud_kube.Flavor[]> GetCloudProjectServiceNameCapabilitiesKubeFlavorsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_kube.Flavor[]>(string.Format("/cloud/project/{serviceName}/capabilities/kube/flavors?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/log/kind
        public Task<System.String[]> GetCloudProjectServiceNameCapabilitiesKubeLogKindAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/capabilities/kube/log/kind", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetCloudProjectServiceNameCapabilitiesKubeLogKindNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogKind>(string.Format("/cloud/project/{serviceName}/capabilities/kube/log/kind/{name}", name, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/regions
        public Task<System.String[]> GetCloudProjectServiceNameCapabilitiesKubeRegionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/capabilities/kube/regions", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/loadbalancer/region
        public Task<System.String[]> GetCloudProjectServiceNameCapabilitiesLoadbalancerRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/capabilities/loadbalancer/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}
        public Task<_cloud_project_loadbalancer.Region> GetCloudProjectServiceNameCapabilitiesLoadbalancerRegionRegionNameAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_loadbalancer.Region>(string.Format("/cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/productAvailability
        public Task<_cloud_capabilities.Availability> GetCloudProjectServiceNameCapabilitiesProductAvailabilityAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string addonFamily, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string planFamily, [System.Runtime.InteropServices.OptionalAttribute()] string product) {
            return _client.GetFromJsonAsync<_cloud_capabilities.Availability>(string.Format("/cloud/project/{serviceName}/capabilities/productAvailability?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/changeContact
        public Task<System.Int64[]> PostCloudProjectServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/confirmTermination
        public Task<System.String> PostCloudProjectServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /cloud/project/{serviceName}/consumption
        public Task<_cloud_project.ProjectUsage> GetCloudProjectServiceNameConsumptionAsync(System.DateTime from, string serviceName, System.DateTime to) {
            return _client.GetFromJsonAsync<_cloud_project.ProjectUsage>(string.Format("/cloud/project/{serviceName}/consumption?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry
        public Task<_cloud_containerRegistry.Registry[]> GetCloudProjectServiceNameContainerRegistryAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.Registry[]>(string.Format("/cloud/project/{serviceName}/containerRegistry", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry
        public Task<_cloud_containerRegistry.Registry> PostCloudProjectServiceNameContainerRegistryAsync(_cloud.ProjectContainerRegistryCreation body, string serviceName) {
            return default(Task<_cloud_containerRegistry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameContainerRegistryRegistryIDAsync(string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        public Task<_cloud_containerRegistry.Registry> GetCloudProjectServiceNameContainerRegistryRegistryIDAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.Registry>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameContainerRegistryRegistryIDAsync(_cloud.ProjectContainerRegistryUpdate body, string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan
        public Task<_cloud_containerRegistry.Plan[]> GetCloudProjectServiceNameContainerRegistryRegistryIDCapabilitiesPlanAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.Plan[]>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        public Task<_cloud_containerRegistry.IPRestrictions[]> GetCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.IPRestrictions[]>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/manage" +
                        "ment", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        public Task<_cloud_containerRegistry.IPRestrictions[]> PutCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync(_cloud_containerRegistry.IPRestrictions[] body, string registryID, string serviceName) {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        public Task<_cloud_containerRegistry.IPRestrictions[]> GetCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.IPRestrictions[]>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/regist" +
                        "ry", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        public Task<_cloud_containerRegistry.IPRestrictions[]> PutCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync(_cloud_containerRegistry.IPRestrictions[] body, string registryID, string serviceName) {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public Task<_cloud_containerRegistry.OIDCConfiguration> GetCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.OIDCConfiguration>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public System.Threading.Tasks.Task PostCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(_cloud_containerRegistry.OIDCPost body, string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        public System.Threading.Tasks.Task PutCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync(_cloud_containerRegistry.OIDCPut body, string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        public Task<_cloud_containerRegistry.Plan> GetCloudProjectServiceNameContainerRegistryRegistryIDPlanAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.Plan>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/plan", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        public System.Threading.Tasks.Task PutCloudProjectServiceNameContainerRegistryRegistryIDPlanAsync(_cloud_containerRegistry.PlanUpdate body, string registryID, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users
        public Task<_cloud_containerRegistry.User[]> GetCloudProjectServiceNameContainerRegistryRegistryIDUsersAsync(string registryID, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.User[]>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/users", registryID, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users
        public Task<_cloud_containerRegistry.User> PostCloudProjectServiceNameContainerRegistryRegistryIDUsersAsync(_cloud.ProjectContainerRegistryUsersCreation body, string registryID, string serviceName) {
            return default(Task<_cloud_containerRegistry.User>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync(string registryID, string serviceName, string userID) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        public Task<_cloud_containerRegistry.User> GetCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync(string registryID, string serviceName, string userID) {
            return _client.GetFromJsonAsync<_cloud_containerRegistry.User>(string.Format("/cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}", registryID, serviceName, userID));
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}/setAsAdmin
        public System.Threading.Tasks.Task PutCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDSetAsAdminAsync(string registryID, string serviceName, string userID) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/credit
        public Task<System.Int64[]> GetCloudProjectServiceNameCreditAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cloud/project/{serviceName}/credit", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/credit
        public System.Threading.Tasks.Task PostCloudProjectServiceNameCreditAsync(string code, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/credit/{id}
        public Task<_cloud.Credit> GetCloudProjectServiceNameCreditIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Credit>(string.Format("/cloud/project/{serviceName}/credit/{id}", id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/authorization
        public Task<_cloud_project_dataProcessing.AuthorizationStatus> GetCloudProjectServiceNameDataProcessingAuthorizationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing.AuthorizationStatus>(string.Format("/cloud/project/{serviceName}/dataProcessing/authorization", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/authorization
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDataProcessingAuthorizationAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/capabilities
        public Task<_cloud_project_dataProcessing.Capability[]> GetCloudProjectServiceNameDataProcessingCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing.Capability[]>(string.Format("/cloud/project/{serviceName}/dataProcessing/capabilities", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs
        public Task<System.Guid[]> GetCloudProjectServiceNameDataProcessingJobsAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/dataProcessing/jobs", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs
        public Task<_cloud_project_dataProcessing.Job> PostCloudProjectServiceNameDataProcessingJobsAsync(_cloud_project_dataProcessing.Job body, string serviceName) {
            return default(Task<_cloud_project_dataProcessing.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDataProcessingJobsJobIdAsync(System.Guid jobId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        public Task<_cloud_project_dataProcessing.Job> GetCloudProjectServiceNameDataProcessingJobsJobIdAsync(System.Guid jobId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing.Job>(string.Format("/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}", jobId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs
        public Task<_cloud_project_dataProcessing.JobLogs> GetCloudProjectServiceNameDataProcessingJobsJobIdLogsAsync(System.Guid jobId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string from) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing.JobLogs>(string.Format("/cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs?{queryParameters}", jobId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks
        public Task<System.Guid[]> GetCloudProjectServiceNameDataProcessingNotebooksAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/dataProcessing/notebooks", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks
        public Task<_cloud_project_dataProcessing_notebook.Notebook> PostCloudProjectServiceNameDataProcessingNotebooksAsync(_cloud_project_dataProcessing_notebook.NotebookSpec body, string serviceName) {
            return default(Task<_cloud_project_dataProcessing_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/capabilities
        public Task<_cloud_project_dataProcessing_notebook.Capability[]> GetCloudProjectServiceNameDataProcessingNotebooksCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing_notebook.Capability[]>(string.Format("/cloud/project/{serviceName}/dataProcessing/notebooks/capabilities", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync(System.Guid notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        public Task<_cloud_project_dataProcessing_notebook.Notebook> GetCloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync(System.Guid notebookId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_dataProcessing_notebook.Notebook>(string.Format("/cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}", notebookId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/start
        public System.Threading.Tasks.Task PutCloudProjectServiceNameDataProcessingNotebooksNotebookIdStartAsync(System.Guid notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/stop
        public System.Threading.Tasks.Task PutCloudProjectServiceNameDataProcessingNotebooksNotebookIdStopAsync(System.Guid notebookId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/availability
        public Task<_cloud_project_database.Availability[]> GetCloudProjectServiceNameDatabaseAvailabilityAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_availability.ActionEnum action, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid clusterId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_availability.TargetEnum target) {
            return _client.GetFromJsonAsync<_cloud_project_database.Availability[]>(string.Format("/cloud/project/{serviceName}/database/availability?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/capabilities
        public Task<_cloud_project_database.Capabilities> GetCloudProjectServiceNameDatabaseCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Capabilities>(string.Format("/cloud/project/{serviceName}/database/capabilities", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseCassandraAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseCassandraClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseCassandraClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseCassandraClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration" +
                        "", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseCassandraClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advanced" +
                        "Configuration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integrat" +
                        "ion", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseCassandraClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Certificates>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrat" +
                        "ionId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBloc" +
                        "k}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription?{que" +
                        "ryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{sub" +
                        "scriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintena" +
                        "nceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric?{queryParamete" +
                        "rs}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseCassandraClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}?{" +
                        "queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseCassandraClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseCassandraClusterIdUserAsync(_cloud_project_database_service.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.User>(string.Format("/cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseGrafanaAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseGrafanaClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseGrafanaClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseGrafanaClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedCo" +
                        "nfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integratio" +
                        "n", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integratio" +
                        "nId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}" +
                        "", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription?{query" +
                        "Parameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subsc" +
                        "riptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanc" +
                        "eId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/metric?{queryParameters" +
                        "}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}?{qu" +
                        "eryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseGrafanaClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.User>(string.Format("/cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        public Task<_cloud_project_database_kafka.Service> GetCloudProjectServiceNameDatabaseKafkaClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.Service>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        public Task<_cloud_project_database_kafka.Service> PutCloudProjectServiceNameDatabaseKafkaClusterIdAsync(_cloud_project_database_kafka.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafka.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdAclAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/acl", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        public Task<_cloud_project_database_kafka.TopicAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdAclAsync(_cloud_project_database_kafka.TopicAcl body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        public Task<_cloud_project_database_kafka.TopicAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.TopicAcl>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}", aclId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConf" +
                        "iguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseKafkaClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Certificates>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/certificates", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationI" +
                        "d}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription?{queryPa" +
                        "rameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscri" +
                        "ptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceI" +
                        "d}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/metric?{queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}?{quer" +
                        "yParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/permissions
        public Task<_cloud_project_database_kafka.Permissions> GetCloudProjectServiceNameDatabaseKafkaClusterIdPermissionsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.Permissions>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/permissions", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        public Task<_cloud_project_database_kafka.SchemaRegistryAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync(_cloud_project_database_kafka.SchemaRegistryAcl body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafka.SchemaRegistryAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        public Task<_cloud_project_database_kafka.SchemaRegistryAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.SchemaRegistryAcl>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}" +
                        "", aclId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/topic", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        public Task<_cloud_project_database_kafka.Topic> PostCloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync(_cloud_project_database_kafka.TopicCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafka.Topic>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(System.Guid clusterId, string serviceName, System.Guid topicId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public Task<_cloud_project_database_kafka.Topic> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(System.Guid clusterId, string serviceName, System.Guid topicId) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.Topic>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}", clusterId, serviceName, topicId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        public Task<_cloud_project_database_kafka.Topic> PutCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync(_cloud_project_database_kafka.Topic body, System.Guid clusterId, string serviceName, System.Guid topicId) {
            return default(Task<_cloud_project_database_kafka.Topic>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        public Task<_cloud_project_database_kafka.TopicAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync(_cloud_project_database_kafka.TopicAcl body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        public Task<_cloud_project_database_kafka.TopicAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync(System.Guid aclId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka.TopicAcl>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}", aclId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaClusterIdUserAsync(_cloud_project_database_service.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.User>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access
        public Task<_cloud_project_database_kafka_user.Access> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAccessAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafka_user.Access>(string.Format("/cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaConnectAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfigurat" +
                        "ion", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advan" +
                        "cedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/conne" +
                        "ctor", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect_capabilities.Connector> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafkaConnect_capabilities.Connector>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/conne" +
                        "ctor/{connectorId}", clusterId, connectorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/configuration
        public Task<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdConfigurationAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/conne" +
                        "ctor/{connectorId}/configuration", clusterId, connectorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/transforms
        public Task<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdTransformsAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/conne" +
                        "ctor/{connectorId}/transforms", clusterId, connectorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integ" +
                        "ration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        public Task<_cloud_project_database_kafkaConnect.Connector> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync(_cloud_project_database_kafkaConnect.ConnectorCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_kafkaConnect.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect.Connector> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafkaConnect.Connector>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connect" +
                        "orId}", clusterId, connectorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        public Task<_cloud_project_database_kafkaConnect.Connector> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync(_cloud_project_database_kafkaConnect.Connector body, System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return default(Task<_cloud_project_database_kafkaConnect.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/pause
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdPauseAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/restart
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdRestartAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/resume
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdResumeAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task
        public Task<System.Int64[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskAsync(System.Guid clusterId, System.Guid connectorId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connect" +
                        "orId}/task", clusterId, connectorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}
        public Task<_cloud_project_database_kafkaConnect_connector.Task> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdAsync(System.Guid clusterId, System.Guid connectorId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_cloud_project_database_kafkaConnect_connector.Task>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connect" +
                        "orId}/task/{taskId}", clusterId, connectorId, serviceName, taskId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}/restart
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdRestartAsync(System.Guid clusterId, System.Guid connectorId, string serviceName, long taskId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integ" +
                        "rationId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipB" +
                        "lock}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription?{" +
                        "queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{" +
                        "subscriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maint" +
                        "enanceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric?{queryParam" +
                        "eters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName" +
                        "}?{queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync(_cloud_project_database_service.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.User>(string.Format("/cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/i" +
                        "ntegration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{i" +
                        "ntegrationId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscripti" +
                        "on?{queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscripti" +
                        "on/{subscriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{m" +
                        "aintenanceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric?{queryP" +
                        "arameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metric" +
                        "Name}?{queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        public Task<_cloud_project_database_service.Replication> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync(_cloud_project_database_service.ReplicationCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Replication>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(System.Guid clusterId, System.Guid replicationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public Task<_cloud_project_database_service.Replication> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(System.Guid clusterId, System.Guid replicationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Replication>(string.Format("/cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{r" +
                        "eplicationId}", clusterId, replicationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        public Task<_cloud_project_database_service.Replication> PutCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync(_cloud_project_database_service.Replication body, System.Guid clusterId, System.Guid replicationId, string serviceName) {
            return default(Task<_cloud_project_database_service.Replication>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseM3aggregatorAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integ" +
                        "ration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integ" +
                        "rationId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription?{" +
                        "queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{" +
                        "subscriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maint" +
                        "enanceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric?{queryParam" +
                        "eters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName" +
                        "}?{queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseM3dbAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3dbClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseM3dbClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseM3dbClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseM3dbClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfi" +
                        "guration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId" +
                        "}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription?{queryPar" +
                        "ameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscrip" +
                        "tionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId" +
                        "}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/metric?{queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseM3dbClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}?{query" +
                        "Parameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        public Task<_cloud_project_database_m3db.Namespace> PostCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync(_cloud_project_database_m3db.NamespaceCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_m3db.Namespace>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public Task<_cloud_project_database_m3db.Namespace> GetCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_m3db.Namespace>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}", clusterId, namespaceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        public Task<_cloud_project_database_m3db.Namespace> PutCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync(_cloud_project_database_m3db.Namespace body, System.Guid clusterId, System.Guid namespaceId, string serviceName) {
            return default(Task<_cloud_project_database_m3db.Namespace>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseM3dbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user
        public Task<_cloud_project_database_m3db.UserWithPassword> PostCloudProjectServiceNameDatabaseM3dbClusterIdUserAsync(_cloud_project_database_m3db.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_m3db.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public Task<_cloud_project_database_m3db.User> GetCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_m3db.User>(string.Format("/cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        public Task<_cloud_project_database_m3db.User> PutCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync(_cloud_project_database_m3db.User body, System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_m3db.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_m3db.UserWithPassword> PostCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_m3db.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseMongodbAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMongodbClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseMongodbClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseMongodbClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}/restore
        public Task<_cloud_project_database.Backup> PostCloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdRestoreAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}" +
                        "", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription?{query" +
                        "Parameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subsc" +
                        "riptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanc" +
                        "eId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric?{queryParameters" +
                        "}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseMongodbClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}?{qu" +
                        "eryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        public Task<_cloud_project_database_service.Node> PostCloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync(_cloud_project_database_service.NodeCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> PutCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync(_cloud_project_database_service.Node body, System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/restore
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseMongodbClusterIdRestoreAsync(_cloud_project_database_service.Restore body, System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/roles
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdRolesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool advanced) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/roles?{queryParameters}" +
                        "", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabaseMongodbClusterIdUserAsync(_cloud_project_database_service.UserWithRolesCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> GetCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.UserWithRoles>(string.Format("/cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> PutCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync(_cloud_project_database_service.UserWithPasswordAndRoles body, System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseMysqlAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMysqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseMysqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseMysqlClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseMysqlClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConf" +
                        "iguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseMysqlClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Certificates>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/certificates", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries
        public Task<_cloud_project_database_service.CurrentQueries> GetCloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] long offset) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.CurrentQueries>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries?{queryPara" +
                        "meters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries/cancel
        public Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostCloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesCancelAsync(_cloud_project_database_service_currentqueries_query.CancelRequest body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service_currentqueries_query.CancelResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/database", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database
        public Task<_cloud_project_database_service.Database> PostCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync(_cloud_project_database_service.Database body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        public Task<_cloud_project_database_service.Database> GetCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Database>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}", clusterId, databaseId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/enableWrites
        public Task<_cloud_project_database.TemporaryWriteDeadline> PostCloudProjectServiceNameDatabaseMysqlClusterIdEnableWritesAsync(System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.TemporaryWriteDeadline>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationI" +
                        "d}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription?{queryPa" +
                        "rameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscri" +
                        "ptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceI" +
                        "d}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/metric?{queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseMysqlClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}?{quer" +
                        "yParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseMysqlClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics
        public Task<_cloud_project_database_mysql.QueryStatistics> GetCloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] long offset) {
            return _client.GetFromJsonAsync<_cloud_project_database_mysql.QueryStatistics>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics?{queryPar" +
                        "ameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics/reset
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsResetAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseMysqlClusterIdUserAsync(_cloud_project_database_service.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.User>(string.Format("/cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseOpensearchAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        public Task<_cloud_project_database_opensearch.Service> GetCloudProjectServiceNameDatabaseOpensearchClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_opensearch.Service>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        public Task<_cloud_project_database_opensearch.Service> PutCloudProjectServiceNameDatabaseOpensearchClusterIdAsync(_cloud_project_database_opensearch.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_opensearch.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguratio" +
                        "n", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseOpensearchClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advance" +
                        "dConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integra" +
                        "tion", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIndexAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/index", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync(System.Guid clusterId, System.Guid indexId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        public Task<_cloud_project_database_opensearch.Index> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync(System.Guid clusterId, System.Guid indexId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_opensearch.Index>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}", clusterId, indexId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integra" +
                        "tionId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlo" +
                        "ck}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription?{qu" +
                        "eryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{su" +
                        "bscriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{mainten" +
                        "anceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric?{queryParamet" +
                        "ers}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}?" +
                        "{queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseOpensearchClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        public Task<_cloud_project_database_opensearch.Pattern> PostCloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync(_cloud_project_database_opensearch.Pattern body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_opensearch.Pattern>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync(System.Guid clusterId, System.Guid patternId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        public Task<_cloud_project_database_opensearch.Pattern> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync(System.Guid clusterId, System.Guid patternId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_opensearch.Pattern>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}", clusterId, patternId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions
        public Task<_cloud_project_database_opensearch.Permissions> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPermissionsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_opensearch.Permissions>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        public Task<_cloud_project_database_opensearch.UserWithPassword> PostCloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync(_cloud_project_database_opensearch.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_opensearch.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public Task<_cloud_project_database_opensearch.User> GetCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_opensearch.User>(string.Format("/cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        public Task<_cloud_project_database_opensearch.User> PutCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync(_cloud_project_database_opensearch.User body, System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_opensearch.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_opensearch.UserWithPassword> PostCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_opensearch.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabasePostgresqlAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabasePostgresqlClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabasePostgresqlClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguratio" +
                        "n", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabasePostgresqlClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advance" +
                        "dConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integra" +
                        "tion", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates
        public Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCertificatesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Certificates>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        public Task<_cloud_project_database_postgresql.ConnectionPool> PostCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync(_cloud_project_database_postgresql.ConnectionPoolCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_postgresql.ConnectionPool>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public Task<_cloud_project_database_postgresql.ConnectionPool> GetCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_postgresql.ConnectionPool>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{conn" +
                        "ectionPoolId}", clusterId, connectionPoolId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        public Task<_cloud_project_database_postgresql.ConnectionPool> PutCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync(_cloud_project_database_postgresql.ConnectionPool body, System.Guid clusterId, System.Guid connectionPoolId, string serviceName) {
            return default(Task<_cloud_project_database_postgresql.ConnectionPool>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries
        public Task<_cloud_project_database_service.CurrentQueries> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] long offset) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.CurrentQueries>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries?{quer" +
                        "yParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries/cancel
        public Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostCloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesCancelAsync(_cloud_project_database_service_currentqueries_query.CancelRequest body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service_currentqueries_query.CancelResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/database", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        public Task<_cloud_project_database_service.Database> PostCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync(_cloud_project_database_service.Database body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        public Task<_cloud_project_database_service.Database> GetCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync(System.Guid clusterId, System.Guid databaseId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Database>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId" +
                        "}", clusterId, databaseId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/enableWrites
        public Task<_cloud_project_database.TemporaryWriteDeadline> PostCloudProjectServiceNameDatabasePostgresqlClusterIdEnableWritesAsync(System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.TemporaryWriteDeadline>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integra" +
                        "tionId}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlo" +
                        "ck}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription?{qu" +
                        "eryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{su" +
                        "bscriptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{mainten" +
                        "anceId}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric?{queryParamet" +
                        "ers}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}?" +
                        "{queryParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabasePostgresqlClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics
        public Task<_cloud_project_database_postgresql.QueryStatistics> GetCloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] long offset) {
            return _client.GetFromJsonAsync<_cloud_project_database_postgresql.QueryStatistics>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics?{que" +
                        "ryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics/reset
        public System.Threading.Tasks.Task PostCloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsResetAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/roles
        public Task<System.String[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdRolesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/roles", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync(_cloud_project_database_service.UserWithRolesCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> GetCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.UserWithRoles>(string.Format("/cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        public Task<_cloud_project_database_service.UserWithRoles> PutCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync(_cloud_project_database_service.UserWithRoles body, System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis
        public Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseRedisAsync(_cloud_project_database.ServiceCreation body, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseRedisClusterIdAsync(System.Guid clusterId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseRedisClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        public Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseRedisClusterIdAsync(_cloud_project_database.Service body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<Dictionary<string, string>>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        public Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync(Dictionary<string, string> body, System.Guid clusterId, string serviceName) {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/backup
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdBackupAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/backup", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}
        public Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseRedisClusterIdBackupBackupIdAsync(System.Guid backupId, System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Backup>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}", backupId, clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConfiguration
        public Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesAdvancedConfigurationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities_advancedConfiguration.Property[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConf" +
                        "iguration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCategoriesAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCommandsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration
        public Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_capabilities.Integration[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/integration", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration
        public Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync(_cloud_project_database_service.Integration body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        public Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync(System.Guid clusterId, System.Guid integrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Integration>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationI" +
                        "d}", clusterId, integrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        public Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync(_cloud_project_database.IpRestrictionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(System.Guid clusterId, string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.IpRestriction>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}", clusterId, ipBlock, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        public Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync(_cloud_project_database.IpRestriction body, System.Guid clusterId, string ipBlock, string serviceName) {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription?{queryPa" +
                        "rameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync(_cloud_project_database.LogSubscriptionCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync(System.Guid clusterId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscri" +
                        "ptionId}", clusterId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/logs
        public Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseRedisClusterIdLogsAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.LogEntry[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/logs", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}
        public Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Maintenance>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceI" +
                        "d}", clusterId, maintenanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}/apply
        public Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdApplyAsync(System.Guid clusterId, System.Guid maintenanceId, string serviceName) {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/metric
        public Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdMetricAsync(System.Guid clusterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool extended) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/metric?{queryParameters}", clusterId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}
        public Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseRedisClusterIdMetricMetricNameAsync(System.Guid clusterId, string metricName, _cloud_project_database_service.MetricPeriodEnum period, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Metric>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}?{quer" +
                        "yParameters}", clusterId, metricName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/node
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdNodeAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/node", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}
        public Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseRedisClusterIdNodeNodeIdAsync(System.Guid clusterId, System.Guid nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database_service.Node>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}", clusterId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdUserAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/user", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user
        public Task<_cloud_project_database_redis.UserWithPassword> PostCloudProjectServiceNameDatabaseRedisClusterIdUserAsync(_cloud_project_database_redis.UserCreation body, System.Guid clusterId, string serviceName) {
            return default(Task<_cloud_project_database_redis.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public Task<_cloud_project_database_redis.User> GetCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return _client.GetFromJsonAsync<_cloud_project_database_redis.User>(string.Format("/cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}", clusterId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        public Task<_cloud_project_database_redis.User> PutCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync(_cloud_project_database_redis.User body, System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_redis.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}/credentials/reset
        public Task<_cloud_project_database_redis.UserWithPassword> PostCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdCredentialsResetAsync(System.Guid clusterId, string serviceName, System.Guid userId) {
            return default(Task<_cloud_project_database_redis.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/service
        public Task<System.Guid[]> GetCloudProjectServiceNameDatabaseServiceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_project_database_engine.CategoryEnum category) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/database/service?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/database/service/{clusterId}
        public Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseServiceClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_database.Service>(string.Format("/cloud/project/{serviceName}/database/service/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/flavor
        public Task<_cloud_flavor.Flavor[]> GetCloudProjectServiceNameFlavorAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_flavor.Flavor[]>(string.Format("/cloud/project/{serviceName}/flavor?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/flavor/{flavorId}
        public Task<_cloud_flavor.Flavor> GetCloudProjectServiceNameFlavorFlavorIdAsync(string flavorId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_flavor.Flavor>(string.Format("/cloud/project/{serviceName}/flavor/{flavorId}", flavorId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/image
        public Task<_cloud_image.Image[]> GetCloudProjectServiceNameImageAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string flavorType, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_image.OSTypeEnum osType, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_image.Image[]>(string.Format("/cloud/project/{serviceName}/image?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/image/{imageId}
        public Task<_cloud_image.Image> GetCloudProjectServiceNameImageImageIdAsync(string imageId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_image.Image>(string.Format("/cloud/project/{serviceName}/image/{imageId}", imageId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/instance
        public Task<_cloud_instance.Instance[]> GetCloudProjectServiceNameInstanceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_instance.Instance[]>(string.Format("/cloud/project/{serviceName}/instance?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/instance
        public Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceAsync(_cloud.ProjectInstanceCreation body, string serviceName) {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/bulk
        public Task<_cloud_instance.Instance[]> PostCloudProjectServiceNameInstanceBulkAsync(_cloud.ProjectInstanceBulkCreation body, string serviceName) {
            return default(Task<_cloud_instance.Instance[]>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/group
        public Task<_cloud_instancegroup.InstanceGroup[]> GetCloudProjectServiceNameInstanceGroupAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_instancegroup.InstanceGroup[]>(string.Format("/cloud/project/{serviceName}/instance/group?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/instance/group
        public Task<_cloud_instancegroup.InstanceGroup> PostCloudProjectServiceNameInstanceGroupAsync(_cloud.ProjectInstanceGroupCreation body, string serviceName) {
            return default(Task<_cloud_instancegroup.InstanceGroup>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/group/{groupId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameInstanceGroupGroupIdAsync(string groupId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/group/{groupId}
        public Task<_cloud_instancegroup.InstanceGroup> GetCloudProjectServiceNameInstanceGroupGroupIdAsync(string groupId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_instancegroup.InstanceGroup>(string.Format("/cloud/project/{serviceName}/instance/group/{groupId}?{queryParameters}", groupId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameInstanceInstanceIdAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        public Task<_cloud_instance.InstanceDetail> GetCloudProjectServiceNameInstanceInstanceIdAsync(string instanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_instance.InstanceDetail>(string.Format("/cloud/project/{serviceName}/instance/{instanceId}", instanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameInstanceInstanceIdAsync(_cloud.ProjectInstanceUpdate body, string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling
        public Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdActiveMonthlyBillingAsync(string instanceId, string serviceName) {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/applicationAccess
        public Task<_cloud_instance.ApplicationAccess> PostCloudProjectServiceNameInstanceInstanceIdApplicationAccessAsync(string instanceId, string serviceName) {
            return default(Task<_cloud_instance.ApplicationAccess>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface
        public Task<_cloud_instanceInterface.Interface[]> GetCloudProjectServiceNameInstanceInstanceIdInterfaceAsync(string instanceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_instanceInterface.Interface[]>(string.Format("/cloud/project/{serviceName}/instance/{instanceId}/interface", instanceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface
        public Task<_cloud_instanceInterface.Interface> PostCloudProjectServiceNameInstanceInstanceIdInterfaceAsync(_cloud.ProjectInstanceInterfaceCreation body, string instanceId, string serviceName) {
            return default(Task<_cloud_instanceInterface.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync(string instanceId, string interfaceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        public Task<_cloud_instanceInterface.Interface> GetCloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync(string instanceId, string interfaceId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_instanceInterface.Interface>(string.Format("/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}", instanceId, interfaceId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/monitoring
        public Task<_cloud_instance.InstanceMetrics> GetCloudProjectServiceNameInstanceInstanceIdMonitoringAsync(string instanceId, _cloud_instance.MetricsPeriodEnum period, string serviceName, _cloud_instance.MetricsTypeEnum type) {
            return _client.GetFromJsonAsync<_cloud_instance.InstanceMetrics>(string.Format("/cloud/project/{serviceName}/instance/{instanceId}/monitoring?{queryParameters}", instanceId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/reboot
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdRebootAsync(_cloud.ProjectInstanceRebootCreation body, string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/reinstall
        public Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdReinstallAsync(_cloud.ProjectInstanceReinstallCreation body, string instanceId, string serviceName) {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/rescueMode
        public Task<_cloud_instance.RescueAdminPassword> PostCloudProjectServiceNameInstanceInstanceIdRescueModeAsync(_cloud.ProjectInstanceRescueModeCreation body, string instanceId, string serviceName) {
            return default(Task<_cloud_instance.RescueAdminPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/resize
        public Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdResizeAsync(_cloud.ProjectInstanceResizeCreation body, string instanceId, string serviceName) {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/resume
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdResumeAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/shelve
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdShelveAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/snapshot
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdSnapshotAsync(_cloud.ProjectInstanceSnapshotCreation body, string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/start
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdStartAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/stop
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdStopAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/unshelve
        public System.Threading.Tasks.Task PostCloudProjectServiceNameInstanceInstanceIdUnshelveAsync(string instanceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/vnc
        public Task<_cloud_instance.InstanceVnc> PostCloudProjectServiceNameInstanceInstanceIdVncAsync(string instanceId, string serviceName) {
            return default(Task<_cloud_instance.InstanceVnc>);
        }
        
        // Path: /cloud/project/{serviceName}/io/capabilities/stream/region
        public Task<System.String[]> GetCloudProjectServiceNameIoCapabilitiesStreamRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/io/capabilities/stream/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}
        public Task<_cloud_project_io_stream.Region> GetCloudProjectServiceNameIoCapabilitiesStreamRegionRegionNameAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project_io_stream.Region>(string.Format("/cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream
        public Task<System.Guid[]> GetCloudProjectServiceNameIoStreamAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/io/stream", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream
        public Task<_cloud_project_io.Stream> PostCloudProjectServiceNameIoStreamAsync(_cloud_project_io.StreamCreation body, string serviceName) {
            return default(Task<_cloud_project_io.Stream>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameIoStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        public Task<_cloud_project_io.Stream> GetCloudProjectServiceNameIoStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_cloud_project_io.Stream>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}", serviceName, streamId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        public Task<_cloud_project_io.Stream> PutCloudProjectServiceNameIoStreamStreamIdAsync(_cloud_project_io.Stream body, string serviceName, System.Guid streamId) {
            return default(Task<_cloud_project_io.Stream>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/stats
        public Task<_cloud_project_io.StreamStats> GetCloudProjectServiceNameIoStreamStreamIdStatsAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_cloud_project_io.StreamStats>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/stats", serviceName, streamId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/subscription", serviceName, streamId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription
        public Task<_cloud_project_io_stream.Subscription> PostCloudProjectServiceNameIoStreamStreamIdSubscriptionAsync(_cloud_project_io_stream.SubscriptionCreation body, string serviceName, System.Guid streamId) {
            return default(Task<_cloud_project_io_stream.Subscription>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        public Task<_cloud_project_io_stream.Subscription> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_cloud_project_io_stream.Subscription>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}", serviceName, streamId, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/resetCursor
        public System.Threading.Tasks.Task PostCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdResetCursorAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/stats
        public Task<_cloud_project_io_stream.SubscriptionStats> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdStatsAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_cloud_project_io_stream.SubscriptionStats>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/s" +
                        "tats", serviceName, streamId, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token
        public Task<System.Guid[]> GetCloudProjectServiceNameIoStreamStreamIdTokenAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/token", serviceName, streamId));
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token
        public Task<_cloud_project_io_stream.Token> PostCloudProjectServiceNameIoStreamStreamIdTokenAsync(_cloud_project_io_stream.TokenCreation body, string serviceName, System.Guid streamId) {
            return default(Task<_cloud_project_io_stream.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync(string serviceName, System.Guid streamId, System.Guid tokenId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        public Task<_cloud_project_io_stream.Token> GetCloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync(string serviceName, System.Guid streamId, System.Guid tokenId) {
            return _client.GetFromJsonAsync<_cloud_project_io_stream.Token>(string.Format("/cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}", serviceName, streamId, tokenId));
        }
        
        // Path: /cloud/project/{serviceName}/ip
        public Task<_cloud_ip.CloudIp[]> GetCloudProjectServiceNameIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_ip.CloudIp[]>(string.Format("/cloud/project/{serviceName}/ip", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover
        public Task<_cloud_ip.FailoverIp[]> GetCloudProjectServiceNameIpFailoverAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_ip.FailoverIp[]>(string.Format("/cloud/project/{serviceName}/ip/failover", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover/{id}
        public Task<_cloud_ip.FailoverIp> GetCloudProjectServiceNameIpFailoverIdAsync(string id, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_ip.FailoverIp>(string.Format("/cloud/project/{serviceName}/ip/failover/{id}", id, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover/{id}/attach
        public Task<_cloud_ip.FailoverIp> PostCloudProjectServiceNameIpFailoverIdAttachAsync(_cloud.ProjectIpFailoverAttachCreation body, string id, string serviceName) {
            return default(Task<_cloud_ip.FailoverIp>);
        }
        
        // Path: /cloud/project/{serviceName}/kube
        public Task<System.String[]> GetCloudProjectServiceNameKubeAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/kube", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube
        public Task<_cloud_kube.Cluster> PostCloudProjectServiceNameKubeAsync(_cloud.ProjectKubeCreation body, string serviceName) {
            return default(Task<_cloud_kube.Cluster>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/regions
        public Task<System.String[]> GetCloudProjectServiceNameKubeRegionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/kube/regions", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameKubeKubeIdAsync(string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        public Task<_cloud_kube.Cluster> GetCloudProjectServiceNameKubeKubeIdAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.Cluster>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameKubeKubeIdAsync(_cloud.ProjectKubeUpdate body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/auditLogs
        public Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameKubeKubeIdAuditLogsAsync(string kubeId, string serviceName) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/auditLogs/forward
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameKubeKubeIdAuditLogsForwardAsync(_dbaas_logs.LogSubscriptionCreation body, string kubeId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/customization
        public Task<_cloud.ProjectKubeCustomization> GetCloudProjectServiceNameKubeKubeIdCustomizationAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.ProjectKubeCustomization>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/customization", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/customization
        public Task<_cloud_kube.ResponseMessage> PutCloudProjectServiceNameKubeKubeIdCustomizationAsync(_cloud.ProjectKubeCustomization body, string kubeId, string serviceName) {
            return default(Task<_cloud_kube.ResponseMessage>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/flavors
        public Task<_cloud_kube.Flavor[]> GetCloudProjectServiceNameKubeKubeIdFlavorsAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.Flavor[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/flavors", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> GetCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> PostCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(_cloud.ProjectKubeIpRestrictionUpsert body, string kubeId, string serviceName) {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        public Task<System.String[]> PutCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync(_cloud.ProjectKubeIpRestrictionUpsert body, string kubeId, string serviceName) {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions/{ip}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameKubeKubeIdIpRestrictionsIpAsync(string ip, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/kubeconfig
        public Task<_cloud_kube.Kubeconfig> PostCloudProjectServiceNameKubeKubeIdKubeconfigAsync(string kubeId, string serviceName) {
            return default(Task<_cloud_kube.Kubeconfig>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/kubeconfig/reset
        public System.Threading.Tasks.Task PostCloudProjectServiceNameKubeKubeIdKubeconfigResetAsync(string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameKubeKubeIdLogSubscriptionAsync(string kubeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/log/subscription?{queryParameters}", kubeId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameKubeKubeIdLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation body, string kubeId, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync(string kubeId, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync(string kubeId, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}", kubeId, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameKubeKubeIdLogUrlAsync(_dbaas_logs.LogUrlCreation body, string kubeId, string serviceName) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage
        public Task<_cloud_kube.EtcdUsage> GetCloudProjectServiceNameKubeKubeIdMetricsEtcdUsageAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.EtcdUsage>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node
        public Task<_cloud_kube.Node[]> GetCloudProjectServiceNameKubeKubeIdNodeAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.Node[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/node", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameKubeKubeIdNodeNodeIdAsync(string kubeId, string nodeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        public Task<_cloud_kube.Node> GetCloudProjectServiceNameKubeKubeIdNodeNodeIdAsync(string kubeId, string nodeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.Node>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}", kubeId, nodeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool
        public Task<_cloud_kube.NodePool[]> GetCloudProjectServiceNameKubeKubeIdNodepoolAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.NodePool[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/nodepool", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool
        public Task<_cloud_kube.NodePool> PostCloudProjectServiceNameKubeKubeIdNodepoolAsync(_cloud.ProjectKubeNodePoolCreation body, string kubeId, string serviceName) {
            return default(Task<_cloud_kube.NodePool>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(string kubeId, string nodePoolId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public Task<_cloud_kube.NodePool> GetCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(string kubeId, string nodePoolId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.NodePool>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}", kubeId, nodePoolId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync(_cloud.ProjectKubeNodePoolUpdate body, string kubeId, string nodePoolId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes
        public Task<_cloud_kube.Node[]> GetCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdNodesAsync(string kubeId, string nodePoolId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.Node[]>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes", kubeId, nodePoolId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task<_cloud_kube.OpenIdConnect> GetCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.OpenIdConnect>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/openIdConnect", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public Task<_cloud_kube.OpenIdConnect> PostCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(_cloud.ProjectKubeOpenIdConnectCreation body, string kubeId, string serviceName) {
            return default(Task<_cloud_kube.OpenIdConnect>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        public System.Threading.Tasks.Task PutCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync(_cloud.ProjectKubeOpenIdConnectUpdate body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        public Task<_cloud_kube.PrivateNetworkConfiguration> GetCloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync(string kubeId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_kube.PrivateNetworkConfiguration>(string.Format("/cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration", kubeId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        public Task<_cloud_kube.ResponseMessage> PutCloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync(_cloud_kube.PrivateNetworkConfiguration body, string kubeId, string serviceName) {
            return default(Task<_cloud_kube.ResponseMessage>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/reset
        public System.Threading.Tasks.Task PostCloudProjectServiceNameKubeKubeIdResetAsync(_cloud.ProjectKubeResetCreation body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/restart
        public System.Threading.Tasks.Task PostCloudProjectServiceNameKubeKubeIdRestartAsync(_cloud.ProjectKubeRestart body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/update
        public System.Threading.Tasks.Task PostCloudProjectServiceNameKubeKubeIdUpdateAsync(_cloud.ProjectKubeUpdateCreation body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/updateLoadBalancersSubnetId
        public System.Threading.Tasks.Task PutCloudProjectServiceNameKubeKubeIdUpdateLoadBalancersSubnetIdAsync(_cloud.ProjectKubeUpdateLoadBalancersSubnetId body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/updatePolicy
        public System.Threading.Tasks.Task PutCloudProjectServiceNameKubeKubeIdUpdatePolicyAsync(_cloud.ProjectKubeUpdatePolicyUpdate body, string kubeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/lab
        public Task<_cloud.Lab[]> GetCloudProjectServiceNameLabAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Lab[]>(string.Format("/cloud/project/{serviceName}/lab", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}
        public Task<_cloud.Lab> GetCloudProjectServiceNameLabLabIdAsync(string labId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Lab>(string.Format("/cloud/project/{serviceName}/lab/{labId}", labId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}
        public Task<_cloud.Operation> PostCloudProjectServiceNameLabLabIdAsync(string labId, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}/agreement
        public Task<_cloud.LabAgreements> GetCloudProjectServiceNameLabLabIdAgreementAsync(string labId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.LabAgreements>(string.Format("/cloud/project/{serviceName}/lab/{labId}/agreement", labId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer
        public Task<System.Guid[]> GetCloudProjectServiceNameLoadbalancerAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/loadbalancer", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer
        public Task<_cloud_project.LoadBalancer> PostCloudProjectServiceNameLoadbalancerAsync(_cloud_project.LoadBalancerCreation body, string serviceName) {
            return default(Task<_cloud_project.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public Task<_cloud_project.LoadBalancer> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.LoadBalancer>(string.Format("/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}", loadBalancerId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        public Task<_cloud_project.LoadBalancer> PutCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync(_cloud_project.LoadBalancer body, System.Guid loadBalancerId, string serviceName) {
            return default(Task<_cloud_project.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        public Task<System.Int64[]> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync(System.Guid loadBalancerId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration", loadBalancerId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        public Task<_cloud_project_loadbalancer.Configuration> PostCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync(_cloud_project_loadbalancer.ConfigurationCreation body, System.Guid loadBalancerId, string serviceName) {
            return default(Task<_cloud_project_loadbalancer.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync(System.Guid loadBalancerId, string serviceName, long version) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        public Task<_cloud_project_loadbalancer.Configuration> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync(System.Guid loadBalancerId, string serviceName, long version) {
            return _client.GetFromJsonAsync<_cloud_project_loadbalancer.Configuration>(string.Format("/cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version" +
                        "}", loadBalancerId, serviceName, version));
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}/apply
        public Task<_cloud_project_loadbalancer.Configuration> PostCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionApplyAsync(System.Guid loadBalancerId, string serviceName, long version) {
            return default(Task<_cloud_project_loadbalancer.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/migration
        public Task<_cloud_migration.Migration[]> GetCloudProjectServiceNameMigrationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_migration.Migration[]>(string.Format("/cloud/project/{serviceName}/migration", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/migration/{migrationId}
        public Task<_cloud_migration.Migration> GetCloudProjectServiceNameMigrationMigrationIdAsync(string migrationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_migration.Migration>(string.Format("/cloud/project/{serviceName}/migration/{migrationId}", migrationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/migration/{migrationId}
        public Task<_cloud_migration.Migration> PutCloudProjectServiceNameMigrationMigrationIdAsync(_cloud.ProjectMigrationUpdate body, string migrationId, string serviceName) {
            return default(Task<_cloud_migration.Migration>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private
        public Task<_cloud_network.Network[]> GetCloudProjectServiceNameNetworkPrivateAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network.Network[]>(string.Format("/cloud/project/{serviceName}/network/private", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/network/private
        public Task<_cloud_network.Network> PostCloudProjectServiceNameNetworkPrivateAsync(_cloud.ProjectNetworkPrivateCreation body, string serviceName) {
            return default(Task<_cloud_network.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameNetworkPrivateNetworkIdAsync(string networkId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        public Task<_cloud_network.Network> GetCloudProjectServiceNameNetworkPrivateNetworkIdAsync(string networkId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network.Network>(string.Format("/cloud/project/{serviceName}/network/private/{networkId}", networkId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameNetworkPrivateNetworkIdAsync(_cloud.ProjectNetworkPrivateUpdate body, string networkId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/region
        public Task<_cloud_network.Network> PostCloudProjectServiceNameNetworkPrivateNetworkIdRegionAsync(_cloud.ProjectNetworkPrivateRegionCreation body, string networkId, string serviceName) {
            return default(Task<_cloud_network.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet
        public Task<_cloud_network.Subnet[]> GetCloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync(string networkId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network.Subnet[]>(string.Format("/cloud/project/{serviceName}/network/private/{networkId}/subnet", networkId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet
        public Task<_cloud_network.Subnet> PostCloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync(_cloud.ProjectNetworkPrivateSubnetCreation body, string networkId, string serviceName) {
            return default(Task<_cloud_network.Subnet>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameNetworkPrivateNetworkIdSubnetSubnetIdAsync(string networkId, string serviceName, string subnetId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/network/public
        public Task<_cloud_network.Network[]> GetCloudProjectServiceNameNetworkPublicAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network.Network[]>(string.Format("/cloud/project/{serviceName}/network/public", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/operation
        public Task<_cloud.Operation[]> GetCloudProjectServiceNameOperationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Operation[]>(string.Format("/cloud/project/{serviceName}/operation", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/operation/{operationId}
        public Task<_cloud.Operation> GetCloudProjectServiceNameOperationOperationIdAsync(string operationId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Operation>(string.Format("/cloud/project/{serviceName}/operation/{operationId}", operationId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/quota
        public Task<_cloud_quota.Quotas[]> GetCloudProjectServiceNameQuotaAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_quota.Quotas[]>(string.Format("/cloud/project/{serviceName}/quota", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region
        public Task<System.String[]> GetCloudProjectServiceNameRegionAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/region", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region
        public Task<_cloud.Region> PostCloudProjectServiceNameRegionAsync(_cloud.ProjectRegionCreation body, string serviceName) {
            return default(Task<_cloud.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}
        public Task<_cloud.Region> GetCloudProjectServiceNameRegionRegionNameAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Region>(string.Format("/cloud/project/{serviceName}/region/{regionName}", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive
        public Task<_cloud.ColdArchiveContainer[]> GetCloudProjectServiceNameRegionRegionNameColdArchiveAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.ColdArchiveContainer[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/coldArchive", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive
        public Task<_cloud.ColdArchiveContainer> PostCloudProjectServiceNameRegionRegionNameColdArchiveAsync(_cloud.StorageContainerCreation body, string regionName, string serviceName) {
            return default(Task<_cloud.ColdArchiveContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameColdArchiveNameAsync(string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        public Task<_cloud.ColdArchiveContainer> GetCloudProjectServiceNameRegionRegionNameColdArchiveNameAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] string marker, [System.Runtime.InteropServices.OptionalAttribute()] string prefix) {
            return _client.GetFromJsonAsync<_cloud.ColdArchiveContainer>(string.Format("/cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}?{queryParamet" +
                        "ers}", name, regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/archive
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameColdArchiveNameArchiveAsync(_cloud_storage.ArchiveColdArchiveContainer body, string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/destroy
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameColdArchiveNameDestroyAsync(string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/object/{objectKey}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameColdArchiveNameObjectObjectKeyAsync(string name, string objectKey, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/policy/{userId}
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameColdArchiveNamePolicyUserIdAsync(_cloud_storage.AddContainerPolicy body, string name, string regionName, string serviceName, string userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/presign
        public Task<_cloud_storage.PresignedURL> PostCloudProjectServiceNameRegionRegionNameColdArchiveNamePresignAsync(_cloud_storage.PresignedURLInput body, string name, string regionName, string serviceName) {
            return default(Task<_cloud_storage.PresignedURL>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/restore
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameColdArchiveNameRestoreAsync(string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip
        public Task<_cloud_project.FloatingIp[]> GetCloudProjectServiceNameRegionRegionNameFloatingipAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.FloatingIp[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/floatingip", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        public Task<_cloud_project.FloatingIp> GetCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.FloatingIp>(string.Format("/cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}", floatingIpId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}/detach
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdDetachAsync(System.Guid floatingIpId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway
        public Task<_cloud_network.Gateway[]> GetCloudProjectServiceNameRegionRegionNameGatewayAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string subnetId) {
            return _client.GetFromJsonAsync<_cloud_network.Gateway[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/gateway?{queryParameters}", regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameGatewayAsync(_cloud_network.CreateGateway body, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud.Operation> DeleteCloudProjectServiceNameRegionRegionNameGatewayIdAsync(System.Guid id, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud_network.Gateway> GetCloudProjectServiceNameRegionRegionNameGatewayIdAsync(System.Guid id, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network.Gateway>(string.Format("/cloud/project/{serviceName}/region/{regionName}/gateway/{id}", id, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        public Task<_cloud_network.Gateway> PutCloudProjectServiceNameRegionRegionNameGatewayIdAsync(_cloud_network.UpdateGateway body, System.Guid id, string regionName, string serviceName) {
            return default(Task<_cloud_network.Gateway>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/expose
        public Task<_cloud_network.Gateway> PostCloudProjectServiceNameRegionRegionNameGatewayIdExposeAsync(System.Guid id, string regionName, string serviceName) {
            return default(Task<_cloud_network.Gateway>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        public Task<_cloud_network_gateway.Interface[]> GetCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync(System.Guid id, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network_gateway.Interface[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface", id, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        public Task<_cloud_network_gateway.Interface> PostCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync(_cloud_network_gateway.CreateInterface body, System.Guid id, string regionName, string serviceName) {
            return default(Task<_cloud_network_gateway.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync(System.Guid id, System.Guid interfaceId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        public Task<_cloud_network_gateway.Interface> GetCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync(System.Guid id, System.Guid interfaceId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_network_gateway.Interface>(string.Format("/cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfac" +
                        "eId}", id, interfaceId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance
        public Task<_cloud_instance.InstanceSummary[]> GetCloudProjectServiceNameRegionRegionNameInstanceAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_instance.InstanceSummary[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/instance", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceAsync(_cloud_instance.CreateInput body, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}
        public Task<_cloud_instance.InstanceSummary> GetCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAsync(System.Guid instanceId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_instance.InstanceSummary>(string.Format("/cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}", instanceId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/abortSnapshot
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAbortSnapshotAsync(System.Guid instanceId, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/associateFloatingIp
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAssociateFloatingIpAsync(_cloud_instance.AssociateFloatingIp body, System.Guid instanceId, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/floatingIp
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdFloatingIpAsync(_cloud_instance.CreateFloatingIp body, System.Guid instanceId, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        public Task<_cloud_keymanager.Certificate[]> GetCloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_keymanager.Certificate[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        public Task<_cloud_keymanager.Certificate> PostCloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync(_cloud_keymanager.CertificateCreate body, string regionName, string serviceName) {
            return default(Task<_cloud_keymanager.Certificate>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync(System.Guid certificateId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        public Task<_cloud_keymanager.Certificate> GetCloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync(System.Guid certificateId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_keymanager.Certificate>(string.Format("/cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certific" +
                        "ateId}", certificateId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret
        public Task<_cloud_keymanager.Secret[]> GetCloudProjectServiceNameRegionRegionNameKeymanagerSecretAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_keymanager.Secret[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/keymanager/secret", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync(string regionName, System.Guid secretId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        public Task<_cloud_keymanager.Secret> GetCloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync(string regionName, System.Guid secretId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_keymanager.Secret>(string.Format("/cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}", regionName, secretId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor
        public Task<_cloud_loadbalancing.Flavor[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingFlavorAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Flavor[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}
        public Task<_cloud_loadbalancing.Flavor> GetCloudProjectServiceNameRegionRegionNameLoadbalancingFlavorFlavorIdAsync(System.Guid flavorId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Flavor>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}", flavorId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        public Task<_cloud_loadbalancing.HealthMonitor[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string poolId) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.HealthMonitor[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor?{que" +
                        "ryParameters}", regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        public Task<_cloud_loadbalancing.HealthMonitor> PostCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync(_cloud_loadbalancing.HealthMonitor body, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.HealthMonitor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(System.Guid healthMonitorId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public Task<_cloud_loadbalancing.HealthMonitor> GetCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(System.Guid healthMonitorId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.HealthMonitor>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{hea" +
                        "lthMonitorId}", healthMonitorId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        public Task<_cloud_loadbalancing.HealthMonitor> PutCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync(_cloud_loadbalancing.UpdateHealthMonitor body, System.Guid healthMonitorId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.HealthMonitor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        public Task<_cloud_loadbalancing.L7Policy[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string listenerId) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.L7Policy[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy?{queryPar" +
                        "ameters}", regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        public Task<_cloud_loadbalancing.L7Policy> PostCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync(_cloud_loadbalancing.L7Policy body, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.L7Policy>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public Task<_cloud_loadbalancing.L7Policy> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.L7Policy>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7Policy" +
                        "Id}", l7PolicyId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        public Task<_cloud_loadbalancing.L7Policy> PutCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync(_cloud_loadbalancing.L7PolicyUpdate body, System.Guid l7PolicyId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.L7Policy>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        public Task<_cloud_loadbalancing.L7Rule[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync(System.Guid l7PolicyId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.L7Rule[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7Policy" +
                        "Id}/l7Rule", l7PolicyId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        public Task<_cloud_loadbalancing.L7Rule> PostCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync(_cloud_loadbalancing.L7Rule body, System.Guid l7PolicyId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.L7Rule>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public Task<_cloud_loadbalancing.L7Rule> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.L7Rule>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7Policy" +
                        "Id}/l7Rule/{l7RuleId}", l7PolicyId, l7RuleId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        public Task<_cloud_loadbalancing.L7Rule> PutCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync(_cloud_loadbalancing.L7Rule body, System.Guid l7PolicyId, System.Guid l7RuleId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.L7Rule>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        public Task<_cloud_loadbalancing.Listener[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid loadbalancerId) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Listener[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener?{queryPar" +
                        "ameters}", regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        public Task<_cloud_loadbalancing.Listener> PostCloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync(_cloud_loadbalancing.CreateListener body, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.Listener>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(System.Guid listenerId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public Task<_cloud_loadbalancing.Listener> GetCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(System.Guid listenerId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Listener>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listener" +
                        "Id}", listenerId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        public Task<_cloud_loadbalancing.Listener> PutCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync(_cloud_loadbalancing.EditListener body, System.Guid listenerId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.Listener>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        public Task<_cloud_loadbalancing.LoadBalancer[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.LoadBalancer[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync(_cloud_loadbalancing_Loadbalancer.CreateInput body, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public Task<_cloud_loadbalancing.LoadBalancer> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.LoadBalancer>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{load" +
                        "BalancerId}", loadBalancerId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        public Task<_cloud_loadbalancing.LoadBalancer> PutCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync(_cloud_loadbalancing.LoadbalancerEdit body, System.Guid loadBalancerId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/associateFloatingIp
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAssociateFloatingIpAsync(_cloud_loadbalancing.AssociateFloatingIp body, System.Guid loadBalancerId, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/floatingIp
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdFloatingIpAsync(_cloud_loadbalancing.CreateFloatingIp body, System.Guid loadBalancerId, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        public Task<System.Guid[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync(System.Guid loadBalancerId, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{load" +
                        "BalancerId}/log/subscription?{queryParameters}", loadBalancerId, regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation body, System.Guid loadBalancerId, string regionName, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync(System.Guid loadBalancerId, string regionName, string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync(System.Guid loadBalancerId, string regionName, string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{load" +
                        "BalancerId}/log/subscription/{subscriptionId}", loadBalancerId, regionName, serviceName, subscriptionId));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogUrlAsync(_dbaas_logs.LogUrlCreation body, System.Guid loadBalancerId, string regionName, string serviceName) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/stats
        public Task<_cloud_loadbalancing_loadbalancer.Stats> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdStatsAsync(System.Guid loadBalancerId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing_loadbalancer.Stats>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{load" +
                        "BalancerId}/stats", loadBalancerId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind
        public Task<System.String[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLogKindAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLogKindNameAsync(string name, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogKind>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}", name, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        public Task<_cloud_loadbalancing.Pool[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync(string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid loadbalancerId) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Pool[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool?{queryParamet" +
                        "ers}", regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        public Task<_cloud_loadbalancing.Pool> PostCloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync(_cloud_loadbalancing.PoolCreate body, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.Pool>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(System.Guid poolId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public Task<_cloud_loadbalancing.Pool> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(System.Guid poolId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing.Pool>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}", poolId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        public Task<_cloud_loadbalancing.Pool> PutCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync(_cloud_loadbalancing.PoolUpdate body, System.Guid poolId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing.Pool>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        public Task<_cloud_loadbalancing_pool.Member[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync(System.Guid poolId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing_pool.Member[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/memb" +
                        "er", poolId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        public Task<_cloud_loadbalancing_pool.Member[]> PostCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync(_cloud_loadbalancing_pool.CreateMembers body, System.Guid poolId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing_pool.Member[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public Task<_cloud_loadbalancing_pool.Member> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_loadbalancing_pool.Member>(string.Format("/cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/memb" +
                        "er/{memberId}", memberId, poolId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        public Task<_cloud_loadbalancing_pool.Member> PutCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync(_cloud_loadbalancing_pool.MemberUpdate body, System.Guid memberId, System.Guid poolId, string regionName, string serviceName) {
            return default(Task<_cloud_loadbalancing_pool.Member>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network
        public Task<_cloud_project.Network[]> GetCloudProjectServiceNameRegionRegionNameNetworkAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.Network[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/network", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameNetworkAsync(_cloud_network.CreateNetwork body, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync(string networkId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        public Task<_cloud_project.Network> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync(string networkId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.Network>(string.Format("/cloud/project/{serviceName}/region/{regionName}/network/{networkId}", networkId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet
        public Task<_cloud_project.Subnet[]> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetAsync(string networkId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_project.Subnet[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet", networkId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync(string networkId, string regionName, string serviceName, string subnetId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        public Task<_cloud_project.Subnet> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync(string networkId, string regionName, string serviceName, string subnetId) {
            return _client.GetFromJsonAsync<_cloud_project.Subnet>(string.Format("/cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subn" +
                        "etId}", networkId, regionName, serviceName, subnetId));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}/gateway
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdGatewayAsync(_cloud_network.CreateGatewaySummary body, string networkId, string regionName, string serviceName, string subnetId) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota
        public Task<_cloud_quota.Quotas> GetCloudProjectServiceNameRegionRegionNameQuotaAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_quota.Quotas>(string.Format("/cloud/project/{serviceName}/region/{regionName}/quota", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota
        public Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameQuotaAsync(_cloud.ProjectRegionQuotaCreation body, string regionName, string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/allowed
        public Task<_cloud_quota.AllowedQuota[]> GetCloudProjectServiceNameRegionRegionNameQuotaAllowedAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_quota.AllowedQuota[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/quota/allowed", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameQuotaStorageAsync(string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        public Task<_cloud_quota_storage.Quota> GetCloudProjectServiceNameRegionRegionNameQuotaStorageAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_quota_storage.Quota>(string.Format("/cloud/project/{serviceName}/region/{regionName}/quota/storage", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        public System.Threading.Tasks.Task PutCloudProjectServiceNameRegionRegionNameQuotaStorageAsync(_cloud_quota_storage.QuotaUpdate body, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage
        public Task<_cloud.StorageContainer[]> GetCloudProjectServiceNameRegionRegionNameStorageAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.StorageContainer[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage
        public Task<_cloud.StorageContainer> PostCloudProjectServiceNameRegionRegionNameStorageAsync(_cloud.StorageContainerCreation body, string regionName, string serviceName) {
            return default(Task<_cloud.StorageContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameStorageNameAsync(string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public Task<_cloud.StorageContainer> GetCloudProjectServiceNameRegionRegionNameStorageNameAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] string marker, [System.Runtime.InteropServices.OptionalAttribute()] string prefix) {
            return _client.GetFromJsonAsync<_cloud.StorageContainer>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage/{name}?{queryParameters}" +
                        "", name, regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        public Task<_cloud.StorageContainer> PutCloudProjectServiceNameRegionRegionNameStorageNameAsync(_cloud.StorageContainer body, string name, string regionName, string serviceName) {
            return default(Task<_cloud.StorageContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object
        public Task<_cloud.StorageObject[]> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectAsync(string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string keyMarker, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] string prefix, [System.Runtime.InteropServices.OptionalAttribute()] string versionIdMarker, [System.Runtime.InteropServices.OptionalAttribute()] bool withVersions) {
            return _client.GetFromJsonAsync<_cloud.StorageObject[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object?{queryPara" +
                        "meters}", name, regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync(string key, string name, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        public Task<_cloud.StorageObject> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync(string key, string name, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.StorageObject>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}", key, name, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version
        public Task<_cloud.StorageObjectVersion[]> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionAsync(string key, string name, string regionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] string versionIdMarker) {
            return _client.GetFromJsonAsync<_cloud.StorageObjectVersion[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/vers" +
                        "ion?{queryParameters}", key, name, regionName, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync(string key, string name, string regionName, string serviceName, string versionId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        public Task<_cloud.StorageObjectVersion> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync(string key, string name, string regionName, string serviceName, string versionId) {
            return _client.GetFromJsonAsync<_cloud.StorageObjectVersion>(string.Format("/cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/vers" +
                        "ion/{versionId}", key, name, regionName, serviceName, versionId));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/policy/{userId}
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRegionRegionNameStorageNamePolicyUserIdAsync(_cloud_storage.AddContainerPolicy body, string name, string regionName, string serviceName, string userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/presign
        public Task<_cloud_storage.PresignedURL> PostCloudProjectServiceNameRegionRegionNameStorageNamePresignAsync(_cloud_storage.PresignedURLInput body, string name, string regionName, string serviceName) {
            return default(Task<_cloud_storage.PresignedURL>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup
        public Task<_cloud_volumeBackup.VolumeBackup[]> GetCloudProjectServiceNameRegionRegionNameVolumeBackupAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_volumeBackup.VolumeBackup[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/volumeBackup", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup
        public Task<_cloud_volumeBackup.VolumeBackup> PostCloudProjectServiceNameRegionRegionNameVolumeBackupAsync(_cloud_volumeBackup.VolumeBackupCreation body, string regionName, string serviceName) {
            return default(Task<_cloud_volumeBackup.VolumeBackup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync(string regionName, string serviceName, System.Guid volumeBackupId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        public Task<_cloud_volumeBackup.VolumeBackup> GetCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync(string regionName, string serviceName, System.Guid volumeBackupId) {
            return _client.GetFromJsonAsync<_cloud_volumeBackup.VolumeBackup>(string.Format("/cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}", regionName, serviceName, volumeBackupId));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/restore
        public Task<_cloud_volumeBackup.VolumeBackup> PostCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdRestoreAsync(_cloud_volumeBackup.VolumeBackupRestore body, string regionName, string serviceName, System.Guid volumeBackupId) {
            return default(Task<_cloud_volumeBackup.VolumeBackup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/volume
        public Task<_cloud_volume.Volume> PostCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdVolumeAsync(_cloud_volumeBackup.VolumeCreationFromBackup body, string regionName, string serviceName, System.Guid volumeBackupId) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup
        public Task<_cloud.Backup[]> GetCloudProjectServiceNameRegionRegionNameWorkflowBackupAsync(string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Backup[]>(string.Format("/cloud/project/{serviceName}/region/{regionName}/workflow/backup", regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup
        public Task<_cloud.Backup> PostCloudProjectServiceNameRegionRegionNameWorkflowBackupAsync(_cloud.ProjectRegionWorkflowBackupCreation body, string regionName, string serviceName) {
            return default(Task<_cloud.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync(string backupWorkflowId, string regionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        public Task<_cloud.Backup> GetCloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync(string backupWorkflowId, string regionName, string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Backup>(string.Format("/cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowI" +
                        "d}", backupWorkflowId, regionName, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/regionAvailable
        public Task<_cloud.AvailableRegion[]> GetCloudProjectServiceNameRegionAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.AvailableRegion[]>(string.Format("/cloud/project/{serviceName}/regionAvailable", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/retain
        public System.Threading.Tasks.Task PostCloudProjectServiceNameRetainAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/role
        public Task<_cloud_role.Roles> GetCloudProjectServiceNameRoleAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_role.Roles>(string.Format("/cloud/project/{serviceName}/role", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/serviceInfos
        public Task<_services.Service> GetCloudProjectServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/cloud/project/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutCloudProjectServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/snapshot
        public Task<_cloud_image.Image[]> GetCloudProjectServiceNameSnapshotAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string flavorType, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_image.Image[]>(string.Format("/cloud/project/{serviceName}/snapshot?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/snapshot/{imageId}
        public Task<_cloud_image.Image> DeleteCloudProjectServiceNameSnapshotImageIdAsync(string imageId, string serviceName) {
            return default(Task<_cloud_image.Image>);
        }
        
        // Path: /cloud/project/{serviceName}/snapshot/{imageId}
        public Task<_cloud_image.Image> GetCloudProjectServiceNameSnapshotImageIdAsync(string imageId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_image.Image>(string.Format("/cloud/project/{serviceName}/snapshot/{imageId}", imageId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/sshkey
        public Task<_cloud_sshkey.SshKey[]> GetCloudProjectServiceNameSshkeyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_sshkey.SshKey[]>(string.Format("/cloud/project/{serviceName}/sshkey?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/sshkey
        public Task<_cloud_sshkey.SshKeyDetail> PostCloudProjectServiceNameSshkeyAsync(_cloud.ProjectSshkeyCreation body, string serviceName) {
            return default(Task<_cloud_sshkey.SshKeyDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/sshkey/{keyId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameSshkeyKeyIdAsync(string keyId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/sshkey/{keyId}
        public Task<_cloud_sshkey.SshKeyDetail> GetCloudProjectServiceNameSshkeyKeyIdAsync(string keyId, string serviceName) {
            return _client.GetFromJsonAsync<_cloud_sshkey.SshKeyDetail>(string.Format("/cloud/project/{serviceName}/sshkey/{keyId}", keyId, serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/stack
        public Task<_cloud_stack.Stack[]> GetCloudProjectServiceNameStackAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_stack.Stack[]>(string.Format("/cloud/project/{serviceName}/stack", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/stack/{stackId}
        public Task<_cloud_stack.Stack> GetCloudProjectServiceNameStackStackIdAsync(string serviceName, string stackId) {
            return _client.GetFromJsonAsync<_cloud_stack.Stack>(string.Format("/cloud/project/{serviceName}/stack/{stackId}", serviceName, stackId));
        }
        
        // Path: /cloud/project/{serviceName}/storage
        public Task<_cloud_storage.Container[]> GetCloudProjectServiceNameStorageAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool includeType) {
            return _client.GetFromJsonAsync<_cloud_storage.Container[]>(string.Format("/cloud/project/{serviceName}/storage?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/storage
        public Task<_cloud_storage.Container> PostCloudProjectServiceNameStorageAsync(_cloud.ProjectStorageCreation body, string serviceName) {
            return default(Task<_cloud_storage.Container>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/access
        public Task<_cloud_storage.ContainerAccess> PostCloudProjectServiceNameStorageAccessAsync(string serviceName) {
            return default(Task<_cloud_storage.ContainerAccess>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/quota
        public Task<_cloud_storage.Quota> GetCloudProjectServiceNameStorageQuotaAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_storage.Quota>(string.Format("/cloud/project/{serviceName}/storage/quota", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameStorageContainerIdAsync(string containerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool recursive) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        public Task<_cloud_storage.ContainerDetail> GetCloudProjectServiceNameStorageContainerIdAsync(string containerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool noObjects, [System.Runtime.InteropServices.OptionalAttribute()] string prefix) {
            return _client.GetFromJsonAsync<_cloud_storage.ContainerDetail>(string.Format("/cloud/project/{serviceName}/storage/{containerId}?{queryParameters}", containerId, serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        public System.Threading.Tasks.Task PutCloudProjectServiceNameStorageContainerIdAsync(_cloud.ProjectStorageUpdate body, string containerId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/cors
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameStorageContainerIdCorsAsync(string containerId, string origin, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/cors
        public System.Threading.Tasks.Task PostCloudProjectServiceNameStorageContainerIdCorsAsync(_cloud.ProjectStorageCorsCreation body, string containerId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/publicUrl
        public Task<_cloud_storage.ContainerObjectTempURL> PostCloudProjectServiceNameStorageContainerIdPublicUrlAsync(_cloud.ProjectStoragePublicUrlCreation body, string containerId, string serviceName) {
            return default(Task<_cloud_storage.ContainerObjectTempURL>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/static
        public System.Threading.Tasks.Task PostCloudProjectServiceNameStorageContainerIdStaticAsync(string containerId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/user
        public Task<_cloud_user.UserDetail> PostCloudProjectServiceNameStorageContainerIdUserAsync(_cloud.ProjectStorageUserCreation body, string containerId, string serviceName) {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/terminate
        public Task<System.String> PostCloudProjectServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /cloud/project/{serviceName}/unleash
        public System.Threading.Tasks.Task PostCloudProjectServiceNameUnleashAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/usage/current
        public Task<_cloud_usage.UsageCurrent> GetCloudProjectServiceNameUsageCurrentAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_usage.UsageCurrent>(string.Format("/cloud/project/{serviceName}/usage/current", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/usage/forecast
        public Task<_cloud_usage.UsageForecast> GetCloudProjectServiceNameUsageForecastAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_usage.UsageForecast>(string.Format("/cloud/project/{serviceName}/usage/forecast", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/usage/history
        public Task<_cloud_usage.UsageHistory[]> GetCloudProjectServiceNameUsageHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime to) {
            return _client.GetFromJsonAsync<_cloud_usage.UsageHistory[]>(string.Format("/cloud/project/{serviceName}/usage/history?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/usage/history/{usageId}
        public Task<_cloud_usage.UsageHistoryDetail> GetCloudProjectServiceNameUsageHistoryUsageIdAsync(string serviceName, string usageId) {
            return _client.GetFromJsonAsync<_cloud_usage.UsageHistoryDetail>(string.Format("/cloud/project/{serviceName}/usage/history/{usageId}", serviceName, usageId));
        }
        
        // Path: /cloud/project/{serviceName}/user
        public Task<_cloud_user.User[]> GetCloudProjectServiceNameUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud_user.User[]>(string.Format("/cloud/project/{serviceName}/user", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/user
        public Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserAsync(_cloud.ProjectUserCreation body, string serviceName) {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameUserUserIdAsync(string serviceName, long userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}
        public Task<_cloud_user.User> GetCloudProjectServiceNameUserUserIdAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_user.User>(string.Format("/cloud/project/{serviceName}/user/{userId}", serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/configuration
        public Task<_cloud_user.Configuration> GetCloudProjectServiceNameUserUserIdConfigurationAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_user.Configuration>(string.Format("/cloud/project/{serviceName}/user/{userId}/configuration?{queryParameters}", serviceName, userId, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/openrc
        public Task<_cloud_user.Openrc> GetCloudProjectServiceNameUserUserIdOpenrcAsync(string region, string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_user.OpenrcVersionEnum version) {
            return _client.GetFromJsonAsync<_cloud_user.Openrc>(string.Format("/cloud/project/{serviceName}/user/{userId}/openrc?{queryParameters}", serviceName, userId, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/policy
        public Task<_cloud_storage.PolicyRaw> GetCloudProjectServiceNameUserUserIdPolicyAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_storage.PolicyRaw>(string.Format("/cloud/project/{serviceName}/user/{userId}/policy", serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/policy
        public System.Threading.Tasks.Task PostCloudProjectServiceNameUserUserIdPolicyAsync(_cloud_storage.PolicyRaw body, string serviceName, long userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/rclone
        public Task<_cloud_user.Rclone> GetCloudProjectServiceNameUserUserIdRcloneAsync(string region, string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] _cloud_user.RCloneServiceEnum service) {
            return _client.GetFromJsonAsync<_cloud_user.Rclone>(string.Format("/cloud/project/{serviceName}/user/{userId}/rclone?{queryParameters}", serviceName, userId, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/regeneratePassword
        public Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserUserIdRegeneratePasswordAsync(string serviceName, long userId) {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_role.Role[]> GetCloudProjectServiceNameUserUserIdRoleAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_role.Role[]>(string.Format("/cloud/project/{serviceName}/user/{userId}/role", serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserUserIdRoleAsync(_cloud.ProjectUserRoleCreation body, string serviceName, long userId) {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        public Task<_cloud_user.UserDetail> PutCloudProjectServiceNameUserUserIdRoleAsync(_cloud.ProjectUserRoleUpdate body, string serviceName, long userId) {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role/{roleId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameUserUserIdRoleRoleIdAsync(string roleId, string serviceName, long userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role/{roleId}
        public Task<_cloud_role.Role> GetCloudProjectServiceNameUserUserIdRoleRoleIdAsync(string roleId, string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_role.Role>(string.Format("/cloud/project/{serviceName}/user/{userId}/role/{roleId}", roleId, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials
        public Task<_cloud_user.S3Credentials[]> GetCloudProjectServiceNameUserUserIdS3CredentialsAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_user.S3Credentials[]>(string.Format("/cloud/project/{serviceName}/user/{userId}/s3Credentials", serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials
        public Task<_cloud_user.S3CredentialsWithSecret> PostCloudProjectServiceNameUserUserIdS3CredentialsAsync(string serviceName, long userId) {
            return default(Task<_cloud_user.S3CredentialsWithSecret>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameUserUserIdS3CredentialsAccessAsync(string access, string serviceName, long userId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        public Task<_cloud_user.S3Credentials> GetCloudProjectServiceNameUserUserIdS3CredentialsAccessAsync(string access, string serviceName, long userId) {
            return _client.GetFromJsonAsync<_cloud_user.S3Credentials>(string.Format("/cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}", access, serviceName, userId));
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}/secret
        public Task<_cloud_user.S3CredentialsSecretOnly> PostCloudProjectServiceNameUserUserIdS3CredentialsAccessSecretAsync(string access, string serviceName, long userId) {
            return default(Task<_cloud_user.S3CredentialsSecretOnly>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/token
        public Task<_cloud_authentication.Token> PostCloudProjectServiceNameUserUserIdTokenAsync(_cloud.ProjectUserTokenCreation body, string serviceName, long userId) {
            return default(Task<_cloud_authentication.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/volume
        public Task<_cloud_volume.Volume[]> GetCloudProjectServiceNameVolumeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_volume.Volume[]>(string.Format("/cloud/project/{serviceName}/volume?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/volume
        public Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeAsync(_cloud.ProjectVolumeCreation body, string serviceName) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot
        public Task<_cloud_volume.Snapshot[]> GetCloudProjectServiceNameVolumeSnapshotAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string region) {
            return _client.GetFromJsonAsync<_cloud_volume.Snapshot[]>(string.Format("/cloud/project/{serviceName}/volume/snapshot?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIdAsync(string serviceName, string snapshotId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        public Task<_cloud_volume.Snapshot> GetCloudProjectServiceNameVolumeSnapshotSnapshotIdAsync(string serviceName, string snapshotId) {
            return _client.GetFromJsonAsync<_cloud_volume.Snapshot>(string.Format("/cloud/project/{serviceName}/volume/snapshot/{snapshotId}", serviceName, snapshotId));
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        public System.Threading.Tasks.Task DeleteCloudProjectServiceNameVolumeVolumeIdAsync(string serviceName, string volumeId) {
            return Task.CompletedTask;
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        public Task<_cloud_volume.Volume> GetCloudProjectServiceNameVolumeVolumeIdAsync(string serviceName, string volumeId) {
            return _client.GetFromJsonAsync<_cloud_volume.Volume>(string.Format("/cloud/project/{serviceName}/volume/{volumeId}", serviceName, volumeId));
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        public Task<_cloud_volume.Volume> PutCloudProjectServiceNameVolumeVolumeIdAsync(_cloud.ProjectVolumeUpdate body, string serviceName, string volumeId) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/attach
        public Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdAttachAsync(_cloud.ProjectVolumeAttachCreation body, string serviceName, string volumeId) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/detach
        public Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdDetachAsync(_cloud.ProjectVolumeDetachCreation body, string serviceName, string volumeId) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/snapshot
        public Task<_cloud_volume.Snapshot> PostCloudProjectServiceNameVolumeVolumeIdSnapshotAsync(_cloud.ProjectVolumeSnapshotCreation body, string serviceName, string volumeId) {
            return default(Task<_cloud_volume.Snapshot>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/upsize
        public Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdUpsizeAsync(_cloud.ProjectVolumeUpsizeCreation body, string serviceName, string volumeId) {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/vrack
        public Task<_cloud.Vrack> GetCloudProjectServiceNameVrackAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cloud.Vrack>(string.Format("/cloud/project/{serviceName}/vrack", serviceName));
        }
        
        // Path: /cloud/project/{serviceName}/vrack
        public Task<_cloud.Operation> PostCloudProjectServiceNameVrackAsync(string serviceName) {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cluster/hadoop
        public Task<System.String[]> GetClusterHadoopAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cluster/hadoop?{queryParameters}", queryParameters));
        }
        
        // Path: /cluster/hadoop/orderInformations
        public Task<_cluster_hadoop.OrderInformations> GetClusterHadoopOrderInformationsAsync() {
            return _client.GetFromJsonAsync<_cluster_hadoop.OrderInformations>("/cluster/hadoop/orderInformations");
        }
        
        // Path: /cluster/hadoop/orderableNodeProfiles
        public Task<_cluster_hadoop.NodeBillingProfile[]> GetClusterHadoopOrderableNodeProfilesAsync() {
            return _client.GetFromJsonAsync<_cluster_hadoop.NodeBillingProfile[]>("/cluster/hadoop/orderableNodeProfiles");
        }
        
        // Path: /cluster/hadoop/{serviceName}
        public Task<_cluster_hadoop.hadoopWithIAM> GetClusterHadoopServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.hadoopWithIAM>(string.Format("/cluster/hadoop/{serviceName}", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/consumptions
        public Task<_cluster_hadoop.ClusterConsumption> GetClusterHadoopServiceNameConsumptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.ClusterConsumption>(string.Format("/cluster/hadoop/{serviceName}/consumptions", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl
        public Task<System.String[]> GetClusterHadoopServiceNameNetworkAclAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cluster/hadoop/{serviceName}/networkAcl", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNetworkAclAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string block, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        public Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNetworkAclBlockAsync(string block, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        public Task<_cluster_hadoop.NetworkAcl> GetClusterHadoopServiceNameNetworkAclBlockAsync(string block, string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.NetworkAcl>(string.Format("/cluster/hadoop/{serviceName}/networkAcl/{block}", block, serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        public System.Threading.Tasks.Task PutClusterHadoopServiceNameNetworkAclBlockAsync(_cluster_hadoop.NetworkAcl body, string block, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cluster/hadoop/{serviceName}/node
        public Task<System.String[]> GetClusterHadoopServiceNameNodeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cluster_hadoop.NodeProfileEnum softwareProfile) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cluster/hadoop/{serviceName}/node?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}
        public Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNodeHostnameAsync(string hostname, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}
        public Task<_cluster_hadoop.Node> GetClusterHadoopServiceNameNodeHostnameAsync(string hostname, string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.Node>(string.Format("/cluster/hadoop/{serviceName}/node/{hostname}", hostname, serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/decommission
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameDecommissionAsync(string hostname, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/recommission
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRecommissionAsync(string hostname, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role
        public Task<_cluster_hadoop.RoleTypeEnum[]> GetClusterHadoopServiceNameNodeHostnameRoleAsync(string hostname, string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.RoleTypeEnum[]>(string.Format("/cluster/hadoop/{serviceName}/node/{hostname}/role", hostname, serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        public Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNodeHostnameRoleTypeAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        public Task<_cluster_hadoop.Role> GetClusterHadoopServiceNameNodeHostnameRoleTypeAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return _client.GetFromJsonAsync<_cluster_hadoop.Role>(string.Format("/cluster/hadoop/{serviceName}/node/{hostname}/role/{type}", hostname, serviceName, type));
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/restart
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeRestartAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/start
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeStartAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/stop
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeStopAsync(string hostname, string serviceName, _cluster_hadoop.RoleTypeEnum type) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/nodeBillingProfiles
        public Task<_cluster_hadoop.NodeBillingProfile[]> GetClusterHadoopServiceNameNodeBillingProfilesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.NodeBillingProfile[]>(string.Format("/cluster/hadoop/{serviceName}/nodeBillingProfiles", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/nodeConsumptions
        public Task<_cluster_hadoop.NodeConsumption[]> GetClusterHadoopServiceNameNodeConsumptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cluster_hadoop.NodeConsumption[]>(string.Format("/cluster/hadoop/{serviceName}/nodeConsumptions", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/orderNewNodeHourly
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameOrderNewNodeHourlyAsync(string nodeProfile, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/orderableNodeProfiles
        public Task<System.String[]> GetClusterHadoopServiceNameOrderableNodeProfilesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cluster/hadoop/{serviceName}/orderableNodeProfiles", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/restart
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameRestartAsync(string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/restart
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceRestartAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/start
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceStartAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/stop
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceStopAsync(_cluster_hadoop.ClusterServiceNameEnum service, string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/serviceInfos
        public Task<_services.Service> GetClusterHadoopServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/cluster/hadoop/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutClusterHadoopServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /cluster/hadoop/{serviceName}/start
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameStartAsync(string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/stop
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameStopAsync(string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/task
        public Task<System.Int64[]> GetClusterHadoopServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _cluster_hadoop.OperationStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/cluster/hadoop/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /cluster/hadoop/{serviceName}/task/{taskId}
        public Task<_cluster_hadoop.Task> GetClusterHadoopServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_cluster_hadoop.Task>(string.Format("/cluster/hadoop/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /cluster/hadoop/{serviceName}/terminate
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameTerminateAsync(string serviceName) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user
        public Task<System.String[]> GetClusterHadoopServiceNameUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/cluster/hadoop/{serviceName}/user", serviceName));
        }
        
        // Path: /cluster/hadoop/{serviceName}/user
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameUserAsync(bool clouderaManager, bool httpFrontend, bool hue, string password, string serviceName, string username) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        public Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameUserUsernameAsync(string serviceName, string username) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        public Task<_cluster_hadoop.User> GetClusterHadoopServiceNameUserUsernameAsync(string serviceName, string username) {
            return _client.GetFromJsonAsync<_cluster_hadoop.User>(string.Format("/cluster/hadoop/{serviceName}/user/{username}", serviceName, username));
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        public System.Threading.Tasks.Task PutClusterHadoopServiceNameUserUsernameAsync(_cluster_hadoop.User body, string serviceName, string username) {
            return Task.CompletedTask;
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}/resetPassword
        public Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameUserUsernameResetPasswordAsync(string password, string serviceName, string username) {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /connectivity/eligibility/search/buildingDetails
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingDetailsAsync(_connectivity_eligibility_search_buildingDetails.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/buildings
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingsAsync(_connectivity_eligibility_search_buildings.post body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/buildingsByLine
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingsByLineAsync(_connectivity_eligibility_search_buildingsByLine.post body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/cities
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.City> PostConnectivityEligibilitySearchCitiesAsync(_connectivity_eligibility_search.Cities body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.City>);
        }
        
        // Path: /connectivity/eligibility/search/lines
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Line> PostConnectivityEligibilitySearchLinesAsync(_connectivity_eligibility_search_lines.post body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Line>);
        }
        
        // Path: /connectivity/eligibility/search/meetings
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostConnectivityEligibilitySearchMeetingsAsync(_connectivity_eligibility_search_meetings.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings>);
        }
        
        // Path: /connectivity/eligibility/search/streetNumbers
        public Task<_xdsl.AsyncTaskArray_string> PostConnectivityEligibilitySearchStreetNumbersAsync(_connectivity_eligibility_search_streetNumbers.post body) {
            return default(Task<_xdsl.AsyncTaskArray_string>);
        }
        
        // Path: /connectivity/eligibility/search/streetNumbers/details
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails> PostConnectivityEligibilitySearchStreetNumbersDetailsAsync(_connectivity_eligibility_search_streetNumbers_details.post body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails>);
        }
        
        // Path: /connectivity/eligibility/search/streets
        public Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Street> PostConnectivityEligibilitySearchStreetsAsync(_connectivity_eligibility_search_streets.post body) {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Street>);
        }
        
        // Path: /connectivity/eligibility/test
        public Task<_connectivity_eligibility.EligibilityTest> GetConnectivityEligibilityTestAsync(string eligibilityReference) {
            return _client.GetFromJsonAsync<_connectivity_eligibility.EligibilityTest>(string.Format("/connectivity/eligibility/test?{queryParameters}", queryParameters));
        }
        
        // Path: /connectivity/eligibility/test/address
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestAddressAsync(_connectivity_eligibility_test_address.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/address/partners
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestAddressPartnersAsync(_connectivity_eligibility_test_address_partners.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/building
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestBuildingAsync(_connectivity_eligibility_test_building.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/line
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestLineAsync(_connectivity_eligibility_test_line.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/line/partners
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestLinePartnersAsync(_connectivity_eligibility_test_line_partners.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/otp
        public Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestOtpAsync(_connectivity_eligibility_test_otp.post body) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/maintenance/workPlanned/partners
        public Task<_connectivity_maintenance.WorkPlanned[]> GetConnectivityMaintenanceWorkPlannedPartnersAsync() {
            return _client.GetFromJsonAsync<_connectivity_maintenance.WorkPlanned[]>("/connectivity/maintenance/workPlanned/partners");
        }
        
        // Path: /connectivity/maintenance/workPlanned/public
        public Task<_connectivity_maintenance.WorkPlanned[]> GetConnectivityMaintenanceWorkPlannedPublicAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime beginDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate) {
            return _client.GetFromJsonAsync<_connectivity_maintenance.WorkPlanned[]>(string.Format("/connectivity/maintenance/workPlanned/public?{queryParameters}", queryParameters));
        }
        
        // Path: /connectivity/monitoring/genericIncident/partners
        public Task<_connectivity_monitoring.GenericIncident[]> GetConnectivityMonitoringGenericIncidentPartnersAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate, [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_monitoring.GenericIncidentStatusEnum status) {
            return _client.GetFromJsonAsync<_connectivity_monitoring.GenericIncident[]>(string.Format("/connectivity/monitoring/genericIncident/partners?{queryParameters}", queryParameters));
        }
        
        // Path: /connectivity/monitoring/genericIncident/public
        public Task<_connectivity_monitoring.GenericIncident[]> GetConnectivityMonitoringGenericIncidentPublicAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate, [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_monitoring.GenericIncidentStatusEnum status) {
            return _client.GetFromJsonAsync<_connectivity_monitoring.GenericIncident[]>(string.Format("/connectivity/monitoring/genericIncident/public?{queryParameters}", queryParameters));
        }
        
        // Path: /contact/form
        public Task<_contact.FormCharacteristic[]> GetContactFormAsync() {
            return _client.GetFromJsonAsync<_contact.FormCharacteristic[]>("/contact/form");
        }
        
        // Path: /contact/form/send
        public System.Threading.Tasks.Task PostContactFormSendAsync(_complexType.SafeKeyValue<string> form, string type) {
            return Task.CompletedTask;
        }
        
        // Path: /dbaas/logs
        public Task<System.String[]> GetDbaasLogsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dbaas/logs?{queryParameters}", queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}
        public Task<_dbaas_logs.ServiceWithIAM> GetDbaasLogsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.ServiceWithIAM>(string.Format("/dbaas/logs/{serviceName}", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameAsync(_dbaas_logs.Update body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/changeContact
        public Task<System.Int64[]> PostDbaasLogsServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster
        public Task<System.Guid[]> GetDbaasLogsServiceNameClusterAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string namePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/cluster?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}
        public Task<_dbaas_logs.Cluster> GetDbaasLogsServiceNameClusterClusterIdAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Cluster>(string.Format("/dbaas/logs/{serviceName}/cluster/{clusterId}", clusterId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameClusterClusterIdAsync(_dbaas_logs.ClusterUpdate body, System.Guid clusterId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}/retention
        public Task<System.Guid[]> GetDbaasLogsServiceNameClusterClusterIdRetentionAsync(System.Guid clusterId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/cluster/{clusterId}/retention", clusterId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}
        public Task<_dbaas_logs.ClusterRetention> GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdAsync(System.Guid clusterId, System.Guid retentionId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.ClusterRetention>(string.Format("/dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}", clusterId, retentionId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey
        public Task<System.Guid[]> GetDbaasLogsServiceNameEncryptionKeyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string titlePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/encryptionKey?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameEncryptionKeyAsync(_dbaas_logs.EncryptionKey body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync(System.Guid encryptionKeyId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        public Task<_dbaas_logs.EncryptionKey> GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync(System.Guid encryptionKeyId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.EncryptionKey>(string.Format("/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}", encryptionKeyId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input
        public Task<System.Guid[]> GetDbaasLogsServiceNameInputAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string titlePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/input?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/input
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputAsync(_dbaas_logs.InputCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine
        public Task<System.Guid[]> GetDbaasLogsServiceNameInputEngineAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/input/engine", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}
        public Task<_dbaas_logs.Engine> GetDbaasLogsServiceNameInputEngineEngineIdAsync(System.Guid engineId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Engine>(string.Format("/dbaas/logs/{serviceName}/input/engine/{engineId}", engineId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}/helper
        public Task<System.Guid[]> GetDbaasLogsServiceNameInputEngineEngineIdHelperAsync(System.Guid engineId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/input/engine/{engineId}/helper", engineId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}
        public Task<_dbaas_logs.Helper> GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdAsync(System.Guid engineId, System.Guid helperId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Helper>(string.Format("/dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}", engineId, helperId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameInputInputIdAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Input> GetDbaasLogsServiceNameInputInputIdAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Input>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdAsync(_dbaas_logs.InputUpdate body, System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/action
        public Task<_dbaas_logs.InputAction[]> GetDbaasLogsServiceNameInputInputIdActionAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.InputAction[]>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}/action", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configtest
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdConfigtestAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configtest/result
        public Task<_dbaas_logs.TestResult> GetDbaasLogsServiceNameInputInputIdConfigtestResultAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.TestResult>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}/configtest/result", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        public Task<_dbaas_logs.FlowggerConfiguration> GetDbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.FlowggerConfiguration>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync(_dbaas_logs.InputConfigurationFlowggerUpdate body, System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        public Task<_dbaas_logs.LogstashConfiguration> GetDbaasLogsServiceNameInputInputIdConfigurationLogstashAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogstashConfiguration>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdConfigurationLogstashAsync(_dbaas_logs.InputConfigurationLogstashUpdate body, System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/end
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdEndAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/logs/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostDbaasLogsServiceNameInputInputIdLogsUrlAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/restart
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdRestartAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/start
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdStartAsync(System.Guid inputId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameInputInputIdUrlAsync(System.Guid inputId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/input/{inputId}/url", inputId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/metrics
        public Task<_dbaas_logs.ServiceMetric> GetDbaasLogsServiceNameMetricsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.ServiceMetric>(string.Format("/dbaas/logs/{serviceName}/metrics", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/operation
        public Task<System.Guid[]> GetDbaasLogsServiceNameOperationAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/operation", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/operation/{operationId}
        public Task<_dbaas_logs.Operation> GetDbaasLogsServiceNameOperationOperationIdAsync(System.Guid operationId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Operation>(string.Format("/dbaas/logs/{serviceName}/operation/{operationId}", operationId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogDashboardAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string titlePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/dashboard?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogDashboardAsync(_dbaas_logs.OutputGraylogDashboardCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(System.Guid dashboardId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Dashboard> GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(System.Guid dashboardId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Dashboard>(string.Format("/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}", dashboardId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync(_dbaas_logs.OutputGraylogDashboardUpdate body, System.Guid dashboardId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/duplicate
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateAsync(_dbaas_logs.OutputGraylogDashboardDuplicateCreation body, System.Guid dashboardId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlAsync(System.Guid dashboardId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url", dashboardId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string titlePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamAsync(_dbaas_logs.OutputGraylogStreamCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Stream> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_dbaas_logs.Stream>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}", serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync(_dbaas_logs.OutputGraylogStreamUpdate body, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert", serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync(_dbaas_logs.OutputGraylogStreamAlertCreation body, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(System.Guid alertId, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.StreamAlertCondition> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(System.Guid alertId, string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_dbaas_logs.StreamAlertCondition>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}", alertId, serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync(_dbaas_logs.OutputGraylogStreamAlertUpdate body, System.Guid alertId, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive", serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}
        public Task<_dbaas_logs.Archive> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_dbaas_logs.Archive>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}", archiveId, serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/encryptionKey
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/en" +
                        "cryptionKey", archiveId, serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/url
        public Task<_dbaas_logs.ArchiveUrl> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlAsync(System.Guid archiveId, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.ArchiveUrl>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule", serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync(_dbaas_logs.OutputGraylogStreamRuleCreation body, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync(System.Guid ruleId, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        public Task<_dbaas_logs.StreamRule> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync(System.Guid ruleId, string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_dbaas_logs.StreamRule>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}", ruleId, serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionAsync(string serviceName, System.Guid streamId, [System.Runtime.InteropServices.OptionalAttribute()] string resourceName, [System.Runtime.InteropServices.OptionalAttribute()] string resourceType) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription?{queryPar" +
                        "ameters}", serviceName, streamId, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync(string serviceName, System.Guid streamId, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscrip" +
                        "tionId}", serviceName, streamId, subscriptionId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlAsync(string serviceName, System.Guid streamId) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url", serviceName, streamId));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string namePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/alias?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAsync(_dbaas_logs.OutputOpenSearchAliasCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(System.Guid aliasId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Alias> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(System.Guid aliasId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Alias>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}", aliasId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync(_dbaas_logs.OutputOpenSearchAliasUpdate body, System.Guid aliasId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync(System.Guid aliasId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index", aliasId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync(_dbaas_logs.OutputOpenSearchAliasIndexCreation body, System.Guid aliasId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index/{indexId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdAsync(System.Guid aliasId, System.Guid indexId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync(System.Guid aliasId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream", aliasId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync(_dbaas_logs.OutputOpenSearchAliasStreamCreation body, System.Guid aliasId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream/{streamId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdAsync(System.Guid aliasId, string serviceName, System.Guid streamId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlAsync(System.Guid aliasId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url", aliasId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchIndexAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string namePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/index?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchIndexAsync(_dbaas_logs.OutputOpenSearchIndexCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(System.Guid indexId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Index> GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(System.Guid indexId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Index>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}", indexId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync(_dbaas_logs.OutputOpenSearchIndexUpdate body, System.Guid indexId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlAsync(System.Guid indexId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url", indexId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd
        public Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchOsdAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/osd", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchOsdAsync(_dbaas_logs.OsdCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(System.Guid osdId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Osd> GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(System.Guid osdId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Osd>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}", osdId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync(_dbaas_logs.OsdUpdate body, System.Guid osdId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlAsync(System.Guid osdId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url", osdId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/role
        public Task<System.Guid[]> GetDbaasLogsServiceNameRoleAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string namePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/role?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/role
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleAsync(_dbaas_logs.RoleCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdAsync(System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Role> GetDbaasLogsServiceNameRoleRoleIdAsync(System.Guid roleId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Role>(string.Format("/dbaas/logs/{serviceName}/role/{roleId}", roleId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameRoleRoleIdAsync(_dbaas_logs.RoleUpdate body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member
        public Task<System.String[]> GetDbaasLogsServiceNameRoleRoleIdMemberAsync(System.Guid roleId, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dbaas/logs/{serviceName}/role/{roleId}/member", roleId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdMemberAsync(_dbaas_logs.RoleMemberCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(System.Guid roleId, string serviceName, string username) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Member> GetDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(System.Guid roleId, string serviceName, string username) {
            return _client.GetFromJsonAsync<_dbaas_logs.Member>(string.Format("/dbaas/logs/{serviceName}/role/{roleId}/member/{username}", roleId, serviceName, username));
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        public Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync(_dbaas_logs.RoleMemberUpdate body, System.Guid roleId, string serviceName, string username) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission
        public Task<System.Guid[]> GetDbaasLogsServiceNameRoleRoleIdPermissionAsync(System.Guid roleId, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/role/{roleId}/permission", roleId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/alias
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionAliasAsync(_dbaas_logs.RolePermissionAliasCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/dashboard
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionDashboardAsync(_dbaas_logs.RolePermissionDashboardCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/index
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionIndexAsync(_dbaas_logs.RolePermissionIndexCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/osd
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionOsdAsync(_dbaas_logs.RolePermissionOsdCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/stream
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionStreamAsync(_dbaas_logs.RolePermissionStreamCreation body, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync(System.Guid permissionId, System.Guid roleId, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        public Task<_dbaas_logs.Permission> GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync(System.Guid permissionId, System.Guid roleId, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Permission>(string.Format("/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}", permissionId, roleId, serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/serviceInfos
        public Task<_services.Service> GetDbaasLogsServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dbaas/logs/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDbaasLogsServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dbaas/logs/{serviceName}/token
        public Task<System.Guid[]> GetDbaasLogsServiceNameTokenAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string namePattern) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dbaas/logs/{serviceName}/token?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dbaas/logs/{serviceName}/token
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameTokenAsync(_dbaas_logs.TokenCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/token/{tokenId}
        public Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameTokenTokenIdAsync(string serviceName, System.Guid tokenId) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/token/{tokenId}
        public Task<_dbaas_logs.Token> GetDbaasLogsServiceNameTokenTokenIdAsync(string serviceName, System.Guid tokenId) {
            return _client.GetFromJsonAsync<_dbaas_logs.Token>(string.Format("/dbaas/logs/{serviceName}/token/{tokenId}", serviceName, tokenId));
        }
        
        // Path: /dbaas/logs/{serviceName}/url
        public Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameUrlAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.Url[]>(string.Format("/dbaas/logs/{serviceName}/url", serviceName));
        }
        
        // Path: /dbaas/logs/{serviceName}/user/changePassword
        public Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameUserChangePasswordAsync(_dbaas_logs.UserChangePasswordCreation body, string serviceName) {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dedicated/ceph
        public Task<System.String[]> GetDedicatedCephAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/ceph?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/ceph/{serviceName}
        public Task<_dedicated_ceph_clusterGet.responseWithIAM> GetDedicatedCephServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_clusterGet.responseWithIAM>(string.Format("/dedicated/ceph/{serviceName}", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}
        public Task<System.String> PutDedicatedCephServiceNameAsync(_dedicated_ceph.UpdateClusterDetails body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl
        public Task<_dedicated_ceph_aclGet.response[]> GetDedicatedCephServiceNameAclAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_aclGet.response[]>(string.Format("/dedicated/ceph/{serviceName}/acl", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl
        public Task<System.String> PostDedicatedCephServiceNameAclAsync(_dedicated_ceph_acl.Create body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl/{aclId}
        public Task<System.String> DeleteDedicatedCephServiceNameAclAclIdAsync(long aclId, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl/{aclId}
        public Task<_dedicated_ceph_aclGet.response> GetDedicatedCephServiceNameAclAclIdAsync(long aclId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_aclGet.response>(string.Format("/dedicated/ceph/{serviceName}/acl/{aclId}", aclId, serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs
        public Task<_dedicated_ceph_cephfsGet.response[]> GetDedicatedCephServiceNameCephfsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_cephfsGet.response[]>(string.Format("/dedicated/ceph/{serviceName}/cephfs", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}
        public Task<System.String> DeleteDedicatedCephServiceNameCephfsFsNameAsync(string fsName, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}
        public Task<_dedicated_ceph_cephfsGet.response> GetDedicatedCephServiceNameCephfsFsNameAsync(string fsName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_cephfsGet.response>(string.Format("/dedicated/ceph/{serviceName}/cephfs/{fsName}", fsName, serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}/disable
        public Task<System.String> PostDedicatedCephServiceNameCephfsFsNameDisableAsync(string fsName, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}/enable
        public Task<System.String> PostDedicatedCephServiceNameCephfsFsNameEnableAsync(string fsName, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/changeContact
        public Task<System.Int64[]> PostDedicatedCephServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/confirmTermination
        public Task<System.String> PostDedicatedCephServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/health
        public Task<_dedicated_ceph_clusterHealth.response> GetDedicatedCephServiceNameHealthAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_clusterHealth.response>(string.Format("/dedicated/ceph/{serviceName}/health", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool
        public Task<_dedicated_ceph_poolGet.response[]> GetDedicatedCephServiceNamePoolAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_poolGet.response[]>(string.Format("/dedicated/ceph/{serviceName}/pool", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool
        public Task<System.String> PostDedicatedCephServiceNamePoolAsync(_dedicated_ceph_pool.Create body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}
        public Task<System.String> DeleteDedicatedCephServiceNamePoolPoolNameAsync(string poolName, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}
        public Task<_dedicated_ceph_poolGet.response> GetDedicatedCephServiceNamePoolPoolNameAsync(string poolName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_poolGet.response>(string.Format("/dedicated/ceph/{serviceName}/pool/{poolName}", poolName, serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}/allowDeletion
        public Task<System.String> PutDedicatedCephServiceNamePoolPoolNameAllowDeletionAsync(string poolName, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedCephServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicated/ceph/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedCephServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/ceph/{serviceName}/task
        public Task<_dedicated_ceph_taskList.response[]> GetDedicatedCephServiceNameTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_taskList.response[]>(string.Format("/dedicated/ceph/{serviceName}/task", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/task/{taskId}
        public Task<_dedicated_ceph_taskGet.response[]> GetDedicatedCephServiceNameTaskTaskIdAsync(string serviceName, string taskId) {
            return _client.GetFromJsonAsync<_dedicated_ceph_taskGet.response[]>(string.Format("/dedicated/ceph/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /dedicated/ceph/{serviceName}/terminate
        public Task<System.String> PostDedicatedCephServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user
        public Task<_dedicated_ceph_userGet.response[]> GetDedicatedCephServiceNameUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_userGet.response[]>(string.Format("/dedicated/ceph/{serviceName}/user", serviceName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/user
        public Task<System.String> PostDedicatedCephServiceNameUserAsync(_dedicated_ceph_user.Create body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}
        public Task<System.String> DeleteDedicatedCephServiceNameUserUserNameAsync(string serviceName, string userName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}
        public Task<_dedicated_ceph_userGet.response> GetDedicatedCephServiceNameUserUserNameAsync(string serviceName, string userName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_userGet.response>(string.Format("/dedicated/ceph/{serviceName}/user/{userName}", serviceName, userName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<_dedicated_ceph_userPoolPermList.response[]> GetDedicatedCephServiceNameUserUserNamePoolAsync(string serviceName, string userName) {
            return _client.GetFromJsonAsync<_dedicated_ceph_userPoolPermList.response[]>(string.Format("/dedicated/ceph/{serviceName}/user/{userName}/pool", serviceName, userName));
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<System.String> PostDedicatedCephServiceNameUserUserNamePoolAsync(_dedicated_ceph_user_pool.CreatePermissions body, string serviceName, string userName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        public Task<System.String> PutDedicatedCephServiceNameUserUserNamePoolAsync(_dedicated_ceph_user_pool.UpdatePermission body, string serviceName, string userName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool/{poolName}
        public Task<System.String> DeleteDedicatedCephServiceNameUserUserNamePoolPoolNameAsync(string poolName, string serviceName, string userName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/cluster
        public Task<System.Guid[]> GetDedicatedClusterAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dedicated/cluster?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/cluster/availabilities
        public Task<_dedicated_cluster.availability[]> GetDedicatedClusterAvailabilitiesAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_dedicated_cluster.availability[]>(string.Format("/dedicated/cluster/availabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/cluster/availabilities/raw
        public Task<_dedicated_cluster.AvailabilitiesRaw[]> GetDedicatedClusterAvailabilitiesRawAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.AvailabilityRegionalizationEnum regions, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_dedicated_cluster.AvailabilitiesRaw[]>(string.Format("/dedicated/cluster/availabilities/raw?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/cluster/{serviceName}
        public Task<_dedicated_cluster.ClusterWithIAM> GetDedicatedClusterServiceNameAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_dedicated_cluster.ClusterWithIAM>(string.Format("/dedicated/cluster/{serviceName}", serviceName));
        }
        
        // Path: /dedicated/cluster/{serviceName}/changeContact
        public Task<System.Int64[]> PostDedicatedClusterServiceNameChangeContactAsync(_services.changeContact body, System.Guid serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/confirmTermination
        public Task<System.String> PostDedicatedClusterServiceNameConfirmTerminationAsync(_services.confirmTermination body, System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedClusterServiceNameServiceInfosAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicated/cluster/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicated/cluster/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedClusterServiceNameServiceInfosAsync(_services.Service body, System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/cluster/{serviceName}/terminate
        public Task<System.String> PostDedicatedClusterServiceNameTerminateAsync(System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/housing
        public Task<System.String[]> GetDedicatedHousingAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/housing?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/housing/{serviceName}
        public Task<_dedicated_housing.HousingWithIAM> GetDedicatedHousingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_housing.HousingWithIAM>(string.Format("/dedicated/housing/{serviceName}", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> DeleteDedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.BackupFtp> GetDedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupFtp>(string.Format("/dedicated/housing/{serviceName}/features/backupFTP", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access
        public Task<System.String[]> GetDedicatedHousingServiceNameFeaturesBackupFTPAccessAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/housing/{serviceName}/features/backupFTP/access", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access
        public Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPAccessAsync(bool cifs, string ipBlock, bool nfs, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool ftp) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupFtpAcl>(string.Format("/dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}", ipBlock, serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        public System.Threading.Tasks.Task PutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync(_dedicated_server.BackupFtpAcl body, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/authorizableBlocks
        public Task<System.String[]> GetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/housing/{serviceName}/features/backupFTP/authorizableBlocks", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/password
        public Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPPasswordAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/orderable/APC
        public Task<_dedicated_housing.ApcOrderable> GetDedicatedHousingServiceNameOrderableAPCAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_housing.ApcOrderable>(string.Format("/dedicated/housing/{serviceName}/orderable/APC", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedHousingServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicated/housing/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicated/housing/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedHousingServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/housing/{serviceName}/task
        public Task<System.Int64[]> GetDedicatedHousingServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_housing.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/housing/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/housing/{serviceName}/task/{taskId}
        public Task<_dedicated_housing.Task> GetDedicatedHousingServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicated_housing.Task>(string.Format("/dedicated/housing/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /dedicated/housing/{serviceName}/task/{taskId}/cancel
        public System.Threading.Tasks.Task PostDedicatedHousingServiceNameTaskTaskIdCancelAsync(string serviceName, long taskId) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/installationTemplate
        public Task<System.String[]> GetDedicatedInstallationTemplateAsync() {
            return _client.GetFromJsonAsync<string[]>("/dedicated/installationTemplate");
        }
        
        // Path: /dedicated/installationTemplate/templateInfos
        public Task<_dedicated.TemplateOsInfo[]> GetDedicatedInstallationTemplateTemplateInfosAsync() {
            return _client.GetFromJsonAsync<_dedicated.TemplateOsInfo[]>("/dedicated/installationTemplate/templateInfos");
        }
        
        // Path: /dedicated/installationTemplate/{templateName}
        public Task<_dedicated_installationTemplate.Templates> GetDedicatedInstallationTemplateTemplateNameAsync(string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.Templates>(string.Format("/dedicated/installationTemplate/{templateName}", templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme
        public Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeAsync(string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme", templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.templatePartitioningSchemes>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}", schemeName, templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardw" +
                        "areRaid", schemeName, templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task<_dedicated_installationTemplate.hardwareRaid> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.hardwareRaid>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardw" +
                        "areRaid/{name}", name, schemeName, templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/parti" +
                        "tion", schemeName, templateName));
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task<_dedicated_installationTemplate.templatePartitions> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.templatePartitions>(string.Format("/dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/parti" +
                        "tion/{mountpoint}", mountpoint, schemeName, templateName));
        }
        
        // Path: /dedicated/nasha
        public Task<System.String[]> GetDedicatedNashaAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/nasha/{serviceName}
        public Task<_dedicated_nasha.StorageWithIAM> GetDedicatedNashaServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_nasha.StorageWithIAM>(string.Format("/dedicated/nasha/{serviceName}", serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}
        public System.Threading.Tasks.Task PutDedicatedNashaServiceNameAsync(_dedicated_nasha.Storage body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/nasha/{serviceName}/changeContact
        public Task<System.Int64[]> PostDedicatedNashaServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/confirmTermination
        public Task<System.String> PostDedicatedNashaServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/metricsToken
        public Task<_dedicated_storage.MetricsTokenResult> GetDedicatedNashaServiceNameMetricsTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_storage.MetricsTokenResult>(string.Format("/dedicated/nasha/{serviceName}/metricsToken", serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition
        public Task<System.String[]> GetDedicatedNashaServiceNamePartitionAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha/{serviceName}/partition", serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionAsync(string partitionName, _dedicated_storage.ProtocolEnum protocol, string serviceName, long size, [System.Runtime.InteropServices.OptionalAttribute()] string partitionDescription) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        public Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameAsync(string partitionName, string serviceName) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        public Task<_dedicated_nasha.Partition> GetDedicatedNashaServiceNamePartitionPartitionNameAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_nasha.Partition>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        public System.Threading.Tasks.Task PutDedicatedNashaServiceNamePartitionPartitionNameAsync(_dedicated_nasha.Partition body, string partitionName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access
        public Task<System.String[]> GetDedicatedNashaServiceNamePartitionPartitionNameAccessAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/access", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameAccessAsync(string ip, string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string aclDescription, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.AclTypeEnum type) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        public Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync(string ip, string partitionName, string serviceName) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        public Task<_dedicated_nasha.Access> GetDedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync(string ip, string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_nasha.Access>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}", ip, partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableBlocks
        public Task<System.String[]> GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableBlocks", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableIps
        public Task<System.String[]> GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableIps", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        public Task<System.String[]> GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync(string name, string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string expiration) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        public Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync(string name, string partitionName, string serviceName) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        public Task<_dedicated_nasha.customSnap> GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync(string name, string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_nasha.customSnap>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}", name, partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/options
        public Task<_dedicated_nasha.options> GetDedicatedNashaServiceNamePartitionPartitionNameOptionsAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_nasha.options>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/options", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/options
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameOptionsAsync(string partitionName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.AtimeEnum atime, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.RecordSizeEnum recordsize, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.SyncEnum sync) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        public Task<System.Int64[]> GetDedicatedNashaServiceNamePartitionPartitionNameQuotaAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/quota", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameQuotaAsync(string partitionName, string serviceName, long size, long uid) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        public Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync(string partitionName, string serviceName, long uid) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        public Task<_dedicated_nasha.Quota> GetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync(string partitionName, string serviceName, long uid) {
            return _client.GetFromJsonAsync<_dedicated_nasha.Quota>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}", partitionName, serviceName, uid));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        public Task<_dedicated_storage.SnapshotEnum[]> GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync(string partitionName, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_storage.SnapshotEnum[]>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot", partitionName, serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        public Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        public Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        public Task<_dedicated_nasha.Snapshot> GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync(string partitionName, string serviceName, _dedicated_storage.SnapshotEnum snapshotType) {
            return _client.GetFromJsonAsync<_dedicated_nasha.Snapshot>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}", partitionName, serviceName, snapshotType));
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/use
        public Task<_complexType.UnitAndValue<double>> GetDedicatedNashaServiceNamePartitionPartitionNameUseAsync(string partitionName, string serviceName, _dedicated_storage.PartitionUsageTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.UnitAndValue<double>>(string.Format("/dedicated/nasha/{serviceName}/partition/{partitionName}/use?{queryParameters}", partitionName, serviceName, queryParameters));
        }
        
        // Path: /dedicated/nasha/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedNashaServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicated/nasha/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicated/nasha/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedNashaServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/nasha/{serviceName}/task
        public Task<System.Int64[]> GetDedicatedNashaServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_storage.TaskFunctionEnum operation, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/nasha/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/nasha/{serviceName}/task/{taskId}
        public Task<_dedicated_nasTask.Task> GetDedicatedNashaServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicated_nasTask.Task>(string.Format("/dedicated/nasha/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /dedicated/nasha/{serviceName}/terminate
        public Task<System.String> PostDedicatedNashaServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/use
        public Task<_complexType.UnitAndValue<double>> GetDedicatedNashaServiceNameUseAsync(string serviceName, _dedicated_storage.NasUsageTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.UnitAndValue<double>>(string.Format("/dedicated/nasha/{serviceName}/use?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server
        public Task<System.String[]> GetDedicatedServerAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/availabilities
        public Task<_dedicated.Availabilities[]> GetDedicatedServerAvailabilitiesAsync(_nichandle.OvhSubsidiaryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] string hardware) {
            return _client.GetFromJsonAsync<_dedicated.Availabilities[]>(string.Format("/dedicated/server/availabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/availabilities/raw
        public Task<_dedicated.AvailabilitiesRaw[]> GetDedicatedServerAvailabilitiesRawAsync() {
            return _client.GetFromJsonAsync<_dedicated.AvailabilitiesRaw[]>("/dedicated/server/availabilities/raw");
        }
        
        // Path: /dedicated/server/datacenter/availabilities
        public Task<_dedicated.DatacenterAvailability[]> GetDedicatedServerDatacenterAvailabilitiesAsync([System.Runtime.InteropServices.OptionalAttribute()] string datacenters, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] string gpu, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_dedicated.DatacenterAvailability[]>(string.Format("/dedicated/server/datacenter/availabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/datacenter/availabilities/raw
        public Task<_dedicated.DatacenterRawAvailability[]> GetDedicatedServerDatacenterAvailabilitiesRawAsync([System.Runtime.InteropServices.OptionalAttribute()] string datacenters, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] string gpu, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_dedicated.DatacenterRawAvailability[]>(string.Format("/dedicated/server/datacenter/availabilities/raw?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/log
        public Task<_dedicated.PublicLog> GetDedicatedServerLogAsync([System.Runtime.InteropServices.OptionalAttribute()] _dedicated.DatacenterEnum datacenter, [System.Runtime.InteropServices.OptionalAttribute()] long limit, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] string server) {
            return _client.GetFromJsonAsync<_dedicated.PublicLog>(string.Format("/dedicated/server/log?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/osAvailabilities
        public Task<System.String[]> GetDedicatedServerOsAvailabilitiesAsync(string hardware) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/osAvailabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/region/availabilities
        public Task<_dedicated_server.RegionAvailability[]> GetDedicatedServerRegionAvailabilitiesAsync([System.Runtime.InteropServices.OptionalAttribute()] bool excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] string gpu, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.AvailabilityRegionalizationEnum[] regions, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_dedicated_server.RegionAvailability[]>(string.Format("/dedicated/server/region/availabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicated/server/virtualNetworkInterface/{uuid}
        public Task<_dedicated_server.VirtualNetworkInterface> GetDedicatedServerVirtualNetworkInterfaceUuidAsync(System.Guid uuid) {
            return _client.GetFromJsonAsync<_dedicated_server.VirtualNetworkInterface>(string.Format("/dedicated/server/virtualNetworkInterface/{uuid}", uuid));
        }
        
        // Path: /dedicated/server/{serviceName}
        public Task<_dedicated_server.DedicatedWithIAM> GetDedicatedServerServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.DedicatedWithIAM>(string.Format("/dedicated/server/{serviceName}", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameAsync(_dedicated_server.Dedicated body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/authenticationSecret
        public Task<_dedicated_server.Access[]> PostDedicatedServerServiceNameAuthenticationSecretAsync(string serviceName) {
            return default(Task<_dedicated_server.Access[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/backupCloudOfferDetails
        public Task<_dedicated_server_backup.BackupOffer> GetDedicatedServerServiceNameBackupCloudOfferDetailsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server_backup.BackupOffer>(string.Format("/dedicated/server/{serviceName}/backupCloudOfferDetails", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings
        public Task<_dedicated_biosSettings.BiosSettings> GetDedicatedServerServiceNameBiosSettingsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_biosSettings.BiosSettings>(string.Format("/dedicated/server/{serviceName}/biosSettings", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings/sgx
        public Task<_dedicated_biosSettingsSgx.BiosSettingsSgx> GetDedicatedServerServiceNameBiosSettingsSgxAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_biosSettingsSgx.BiosSettingsSgx>(string.Format("/dedicated/server/{serviceName}/biosSettings/sgx", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings/sgx/configure
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameBiosSettingsSgxConfigureAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BiosSettingsSgxPrmrrEnum prmrr, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BiosSettingsSgxStatusEnum status) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/boot
        public Task<System.Int64[]> GetDedicatedServerServiceNameBootAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.BootTypeEnum bootType) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/server/{serviceName}/boot?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}
        public Task<_dedicated_server.Netboot> GetDedicatedServerServiceNameBootBootIdAsync(long bootId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.Netboot>(string.Format("/dedicated/server/{serviceName}/boot/{bootId}", bootId, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}/option
        public Task<_dedicated_server.BootOptionEnum[]> GetDedicatedServerServiceNameBootBootIdOptionAsync(long bootId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BootOptionEnum[]>(string.Format("/dedicated/server/{serviceName}/boot/{bootId}/option", bootId, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}/option/{option}
        public Task<_dedicated_server.netbootOption> GetDedicatedServerServiceNameBootBootIdOptionOptionAsync(long bootId, _dedicated_server.BootOptionEnum option, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.netbootOption>(string.Format("/dedicated/server/{serviceName}/boot/{bootId}/option/{option}", bootId, option, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/burst
        public Task<_dedicated_server.ServerBurst> GetDedicatedServerServiceNameBurstAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.ServerBurst>(string.Format("/dedicated/server/{serviceName}/burst", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/burst
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameBurstAsync(_dedicated_server.ServerBurst body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/changeContact
        public Task<System.Int64[]> PostDedicatedServerServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/confirmTermination
        public Task<System.String> PostDedicatedServerServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        public System.Threading.Tasks.Task DeleteDedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        public Task<_dedicated_server.BackupCloud> GetDedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupCloud>(string.Format("/dedicated/server/{serviceName}/features/backupCloud", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        public Task<_dedicated_server.BackupCloud> PostDedicatedServerServiceNameFeaturesBackupCloudAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string cloudProjectId, [System.Runtime.InteropServices.OptionalAttribute()] string projectDescription) {
            return default(Task<_dedicated_server.BackupCloud>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud/password
        public Task<_dedicated_server_backup.BackupPassword> PostDedicatedServerServiceNameFeaturesBackupCloudPasswordAsync(string serviceName) {
            return default(Task<_dedicated_server_backup.BackupPassword>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.BackupFtp> GetDedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupFtp>(string.Format("/dedicated/server/{serviceName}/features/backupFTP", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access
        public Task<System.String[]> GetDedicatedServerServiceNameFeaturesBackupFTPAccessAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/features/backupFTP/access", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPAccessAsync(bool cifs, string ipBlock, bool nfs, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool ftp) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupFtpAcl>(string.Format("/dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}", ipBlock, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync(_dedicated_server.BackupFtpAcl body, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/authorizableBlocks
        public Task<System.String[]> GetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/features/backupFTP/authorizableBlocks", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/password
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPPasswordAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/firewall
        public Task<_dedicated_server.Firewall> GetDedicatedServerServiceNameFeaturesFirewallAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.Firewall>(string.Format("/dedicated/server/{serviceName}/features/firewall", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/firewall
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameFeaturesFirewallAsync(_dedicated_server.Firewall body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi
        public Task<_dedicated_server.Ipmi> GetDedicatedServerServiceNameFeaturesIpmiAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.Ipmi>(string.Format("/dedicated/server/{serviceName}/features/ipmi", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/access
        public Task<_dedicated_server.IpmiAccessValue> GetDedicatedServerServiceNameFeaturesIpmiAccessAsync(string serviceName, _dedicated_server.IpmiAccessTypeEnum type) {
            return _client.GetFromJsonAsync<_dedicated_server.IpmiAccessValue>(string.Format("/dedicated/server/{serviceName}/features/ipmi/access?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/access
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiAccessAsync(string serviceName, _dedicated_server.CacheTTLEnum ttl, _dedicated_server.IpmiAccessTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string ipToAllow, [System.Runtime.InteropServices.OptionalAttribute()] string sshKey) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/resetInterface
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiResetInterfaceAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/resetSessions
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiResetSessionsAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/test
        public Task<_dedicated_server.IpmiTestResult> GetDedicatedServerServiceNameFeaturesIpmiTestAsync(string serviceName, _dedicated_server.IpmiTestTypeEnum type) {
            return _client.GetFromJsonAsync<_dedicated_server.IpmiTestResult>(string.Format("/dedicated/server/{serviceName}/features/ipmi/test?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/test
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiTestAsync(string serviceName, _dedicated_server.CacheTTLEnum ttl, _dedicated_server.IpmiTestTypeEnum type) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/kvm
        public Task<_dedicated_server.kvm> GetDedicatedServerServiceNameFeaturesKvmAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.kvm>(string.Format("/dedicated/server/{serviceName}/features/kvm", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/install/compatibleTemplatePartitionSchemes
        public Task<System.String[]> GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesAsync(string serviceName, string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/install/compatibleTemplatePartitionSchemes?{query" +
                        "Parameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/install/compatibleTemplates
        public Task<_dedicated_server.InstallTemplate> GetDedicatedServerServiceNameInstallCompatibleTemplatesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.InstallTemplate>(string.Format("/dedicated/server/{serviceName}/install/compatibleTemplates", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/install/hardwareRaidProfile
        public Task<_dedicated_server.HardwareRaidProfile> GetDedicatedServerServiceNameInstallHardwareRaidProfileAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.HardwareRaidProfile>(string.Format("/dedicated/server/{serviceName}/install/hardwareRaidProfile", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/install/hardwareRaidSize
        public Task<_dedicated_server.HardwareRaidSize> GetDedicatedServerServiceNameInstallHardwareRaidSizeAsync(string partitionSchemeName, string serviceName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_server.HardwareRaidSize>(string.Format("/dedicated/server/{serviceName}/install/hardwareRaidSize?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/install/start
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameInstallStartAsync(string serviceName, string templateName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.InstallCustom details, [System.Runtime.InteropServices.OptionalAttribute()] string partitionSchemeName, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string> userMetadata) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/status
        public Task<_dedicated_server.InstallationProgressStatus> GetDedicatedServerServiceNameInstallStatusAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.InstallationProgressStatus>(string.Format("/dedicated/server/{serviceName}/install/status", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/intervention
        public Task<System.Int64[]> GetDedicatedServerServiceNameInterventionAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/server/{serviceName}/intervention", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/intervention/{interventionId}
        public Task<_dedicated_server.Intervention> GetDedicatedServerServiceNameInterventionInterventionIdAsync(long interventionId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.Intervention>(string.Format("/dedicated/server/{serviceName}/intervention/{interventionId}", interventionId, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/ipBlockMerge
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameIpBlockMergeAsync(string block, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ipCanBeMovedTo
        public System.Threading.Tasks.Task GetDedicatedServerServiceNameIpCanBeMovedToAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<void>(string.Format("/dedicated/server/{serviceName}/ipCanBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/ipCountryAvailable
        public Task<_dedicated_server.IpCountryEnum[]> GetDedicatedServerServiceNameIpCountryAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.IpCountryEnum[]>(string.Format("/dedicated/server/{serviceName}/ipCountryAvailable", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/ipMove
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameIpMoveAsync(string ip, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ips
        public Task<System.String[]> GetDedicatedServerServiceNameIpsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/ips", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/license/compliantWindows
        public Task<_license.WindowsOsVersionEnum[]> GetDedicatedServerServiceNameLicenseCompliantWindowsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license.WindowsOsVersionEnum[]>(string.Format("/dedicated/server/{serviceName}/license/compliantWindows", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/license/compliantWindowsSqlServer
        public Task<_license.WindowsSqlVersionEnum[]> GetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license.WindowsSqlVersionEnum[]>(string.Format("/dedicated/server/{serviceName}/license/compliantWindowsSqlServer", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/license/windows
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameLicenseWindowsAsync(string licenseId, string serviceName, _license.WindowsOsVersionEnum version) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameMrtgAsync(_dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            return _client.GetFromJsonAsync<_dedicated_server.MrtgTimestampValue[]>(string.Format("/dedicated/server/{serviceName}/mrtg?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController
        public Task<System.String[]> GetDedicatedServerServiceNameNetworkInterfaceControllerAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_networkInterfaceController.NetworkInterfaceControllerLinkTypeEnum linkType) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/networkInterfaceController?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController/{mac}
        public Task<_dedicated_networkInterfaceController.NetworkInterfaceController> GetDedicatedServerServiceNameNetworkInterfaceControllerMacAsync(string mac, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_networkInterfaceController.NetworkInterfaceController>(string.Format("/dedicated/server/{serviceName}/networkInterfaceController/{mac}", mac, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController/{mac}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgAsync(string mac, _dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            return _client.GetFromJsonAsync<_dedicated_server.MrtgTimestampValue[]>(string.Format("/dedicated/server/{serviceName}/networkInterfaceController/{mac}/mrtg?{queryParam" +
                        "eters}", mac, serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/ola/aggregation
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaAggregationAsync(string name, string serviceName, System.Guid[] virtualNetworkInterfaces) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/group
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaGroupAsync(string name, string serviceName, System.Guid[] virtualNetworkInterfaces) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/reset
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaResetAsync(string serviceName, System.Guid virtualNetworkInterface) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/ungroup
        public Task<_dedicated_server.Task[]> PostDedicatedServerServiceNameOlaUngroupAsync(string serviceName, System.Guid virtualNetworkInterface) {
            return default(Task<_dedicated_server.Task[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/ongoing
        public Task<_dedicated.ExposedTask[]> GetDedicatedServerServiceNameOngoingAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated.ExposedTask[]>(string.Format("/dedicated/server/{serviceName}/ongoing", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/option
        public Task<_dedicated_server.OptionEnum[]> GetDedicatedServerServiceNameOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.OptionEnum[]>(string.Format("/dedicated/server/{serviceName}/option", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/option/{option}
        public System.Threading.Tasks.Task DeleteDedicatedServerServiceNameOptionOptionAsync(_dedicated_server.OptionEnum option, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/option/{option}
        public Task<_dedicated_server.Option> GetDedicatedServerServiceNameOptionOptionAsync(_dedicated_server.OptionEnum option, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.Option>(string.Format("/dedicated/server/{serviceName}/option/{option}", option, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/backupStorage
        public Task<_dedicated_server.BackupStorageOrderable> GetDedicatedServerServiceNameOrderableBackupStorageAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupStorageOrderable>(string.Format("/dedicated/server/{serviceName}/orderable/backupStorage", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/bandwidth
        public Task<_dedicated_server.BandwidthOrderable> GetDedicatedServerServiceNameOrderableBandwidthAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BandwidthOrderable>(string.Format("/dedicated/server/{serviceName}/orderable/bandwidth", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/bandwidthvRack
        public Task<_dedicated_server.BandwidthvRackOrderable> GetDedicatedServerServiceNameOrderableBandwidthvRackAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BandwidthvRackOrderable>(string.Format("/dedicated/server/{serviceName}/orderable/bandwidthvRack", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/feature
        public Task<System.Boolean> GetDedicatedServerServiceNameOrderableFeatureAsync(_dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicated/server/{serviceName}/orderable/feature?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/ip
        public Task<_dedicated_server.IpOrderable> GetDedicatedServerServiceNameOrderableIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.IpOrderable>(string.Format("/dedicated/server/{serviceName}/orderable/ip", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/kvm
        public Task<System.Boolean> GetDedicatedServerServiceNameOrderableKvmAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicated/server/{serviceName}/orderable/kvm", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/kvmExpress
        public Task<System.Boolean> GetDedicatedServerServiceNameOrderableKvmExpressAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicated/server/{serviceName}/orderable/kvmExpress", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/professionalUse
        public Task<System.Boolean> GetDedicatedServerServiceNameOrderableProfessionalUseAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicated/server/{serviceName}/orderable/professionalUse", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/traffic
        public Task<_dedicated_server.TrafficOrderable> GetDedicatedServerServiceNameOrderableTrafficAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.TrafficOrderable>(string.Format("/dedicated/server/{serviceName}/orderable/traffic", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/usbKey
        public Task<_dedicated_server.UsbKeyOrderableDetails> GetDedicatedServerServiceNameOrderableUsbKeyAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.UsbKeyOrderableDetails>(string.Format("/dedicated/server/{serviceName}/orderable/usbKey", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/plannedIntervention
        public Task<System.Int64[]> GetDedicatedServerServiceNamePlannedInterventionAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/server/{serviceName}/plannedIntervention", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/plannedIntervention/{interventionId}
        public Task<_dedicated_server.PlannedIntervention> GetDedicatedServerServiceNamePlannedInterventionInterventionIdAsync(long interventionId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.PlannedIntervention>(string.Format("/dedicated/server/{serviceName}/plannedIntervention/{interventionId}", interventionId, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/reboot
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameRebootAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains
        public Task<System.String[]> GetDedicatedServerServiceNameSecondaryDnsDomainsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/secondaryDnsDomains", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains
        public System.Threading.Tasks.Task PostDedicatedServerServiceNameSecondaryDnsDomainsAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string ip) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public System.Threading.Tasks.Task DeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public Task<_secondaryDns.SecondaryDNS> GetDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNS>(string.Format("/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}", domain, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync(_secondaryDns.SecondaryDNS body, string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        public Task<_secondaryDns.SecondaryDNSNameServer> GetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNSNameServer>(string.Format("/dedicated/server/{serviceName}/secondaryDnsDomains/{domain}/dnsServer", domain, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsNameDomainToken
        public Task<_secondaryDns.SecondaryDNSCheckField> GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNSCheckField>(string.Format("/dedicated/server/{serviceName}/secondaryDnsNameDomainToken?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsNameServerAvailable
        public Task<_secondaryDns.SecondaryDNSNameServer> GetDedicatedServerServiceNameSecondaryDnsNameServerAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNSNameServer>(string.Format("/dedicated/server/{serviceName}/secondaryDnsNameServerAvailable", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedServerServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicated/server/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/hardware
        public Task<_dedicated_server.HardwareSpecifications> GetDedicatedServerServiceNameSpecificationsHardwareAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.HardwareSpecifications>(string.Format("/dedicated/server/{serviceName}/specifications/hardware", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/ip
        public Task<_dedicated_server.IpOrderable> GetDedicatedServerServiceNameSpecificationsIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.IpOrderable>(string.Format("/dedicated/server/{serviceName}/specifications/ip", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/network
        public Task<_dedicated_server.NetworkSpecifications> GetDedicatedServerServiceNameSpecificationsNetworkAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.NetworkSpecifications>(string.Format("/dedicated/server/{serviceName}/specifications/network", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/spla
        public Task<System.Int64[]> GetDedicatedServerServiceNameSplaAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.SplaStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.SplaTypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/server/{serviceName}/spla?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/spla
        public Task<System.Int64> PostDedicatedServerServiceNameSplaAsync(string serialNumber, string serviceName, _dedicated_server.SplaTypeEnum type) {
            return default(Task<System.Int64>);
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}
        public Task<_dedicated_server.spla> GetDedicatedServerServiceNameSplaIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.spla>(string.Format("/dedicated/server/{serviceName}/spla/{id}", id, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameSplaIdAsync(_dedicated_server.spla body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}/revoke
        public System.Threading.Tasks.Task PostDedicatedServerServiceNameSplaIdRevokeAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/cooling
        public Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceCoolingAsync(string comment, string details, string serviceName) {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/hardDiskDrive
        public Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceHardDiskDriveAsync(string comment, _dedicated_server.SupportReplaceHddInfo[] disks, bool inverse, string serviceName) {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/memory
        public Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceMemoryAsync(string comment, string details, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string[] slots) {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/task
        public Task<System.Int64[]> GetDedicatedServerServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicated/server/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}
        public Task<_dedicated_server.Task> GetDedicatedServerServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicated_server.Task>(string.Format("/dedicated/server/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/availableTimeslots
        public Task<_dedicated.PlannedInterventionTimeSlot[]> GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsAsync(System.DateOnly periodEnd, System.DateOnly periodStart, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicated.PlannedInterventionTimeSlot[]>(string.Format("/dedicated/server/{serviceName}/task/{taskId}/availableTimeslots?{queryParameters" +
                        "}", serviceName, taskId, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/cancel
        public System.Threading.Tasks.Task PostDedicatedServerServiceNameTaskTaskIdCancelAsync(string serviceName, long taskId) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/schedule
        public System.Threading.Tasks.Task PostDedicatedServerServiceNameTaskTaskIdScheduleAsync(bool hasPerformedBackup, string serviceName, long taskId, System.DateTime wantedBeginingDate) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/terminate
        public Task<System.String> PostDedicatedServerServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac
        public Task<System.String[]> GetDedicatedServerServiceNameVirtualMacAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/virtualMac", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualMacAsync(string ipAddress, string serviceName, _dedicated_server.VmacTypeEnum type, string virtualMachineName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}
        public Task<_dedicated_server.VirtualMac> GetDedicatedServerServiceNameVirtualMacMacAddressAsync(string macAddress, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.VirtualMac>(string.Format("/dedicated/server/{serviceName}/virtualMac/{macAddress}", macAddress, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        public Task<System.String[]> GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync(string macAddress, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress", macAddress, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync(string ipAddress, string macAddress, string serviceName, string virtualMachineName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        public Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync(string ipAddress, string macAddress, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        public Task<_dedicated_server.VirtualMacManagement> GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync(string ipAddress, string macAddress, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.VirtualMacManagement>(string.Format("/dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress" +
                        "}", ipAddress, macAddress, serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface
        public Task<System.Guid[]> GetDedicatedServerServiceNameVirtualNetworkInterfaceAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool enabled, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_virtualNetworkInterface.VirtualNetworkInterfaceModeEnum mode, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] string vrack) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dedicated/server/{serviceName}/virtualNetworkInterface?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        public Task<_dedicated_virtualNetworkInterface.VirtualNetworkInterface> GetDedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync(string serviceName, System.Guid uuid) {
            return _client.GetFromJsonAsync<_dedicated_virtualNetworkInterface.VirtualNetworkInterface>(string.Format("/dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}", serviceName, uuid));
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        public System.Threading.Tasks.Task PutDedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync(_dedicated_virtualNetworkInterface.VirtualNetworkInterface body, string serviceName, System.Guid uuid) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/disable
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualNetworkInterfaceUuidDisableAsync(string serviceName, System.Guid uuid) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/enable
        public Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualNetworkInterfaceUuidEnableAsync(string serviceName, System.Guid uuid) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack
        public Task<System.String[]> GetDedicatedServerServiceNameVrackAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicated/server/{serviceName}/vrack", serviceName));
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}
        public Task<_vrack.Task> DeleteDedicatedServerServiceNameVrackVrackAsync(string serviceName, string vrack) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}
        public Task<_vrack.dedicatedServer> GetDedicatedServerServiceNameVrackVrackAsync(string serviceName, string vrack) {
            return _client.GetFromJsonAsync<_vrack.dedicatedServer>(string.Format("/dedicated/server/{serviceName}/vrack/{vrack}", serviceName, vrack));
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameVrackVrackMrtgAsync(_dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type, string vrack) {
            return _client.GetFromJsonAsync<_dedicated_server.MrtgTimestampValue[]>(string.Format("/dedicated/server/{serviceName}/vrack/{vrack}/mrtg?{queryParameters}", serviceName, vrack, queryParameters));
        }
        
        // Path: /dedicatedCloud
        public Task<System.String[]> GetDedicatedCloudAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud?{queryParameters}", queryParameters));
        }
        
        // Path: /dedicatedCloud/commercialRange
        public Task<System.String[]> GetDedicatedCloudCommercialRangeAsync() {
            return _client.GetFromJsonAsync<string[]>("/dedicatedCloud/commercialRange");
        }
        
        // Path: /dedicatedCloud/commercialRange/{commercialRangeName}
        public Task<_dedicatedCloud.CommercialRange> GetDedicatedCloudCommercialRangeCommercialRangeNameAsync(string commercialRangeName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.CommercialRange>(string.Format("/dedicatedCloud/commercialRange/{commercialRangeName}", commercialRangeName));
        }
        
        // Path: /dedicatedCloud/location
        public Task<System.String[]> GetDedicatedCloudLocationAsync() {
            return _client.GetFromJsonAsync<string[]>("/dedicatedCloud/location");
        }
        
        // Path: /dedicatedCloud/location/{pccZone}
        public Task<_dedicatedCloud.PccZone> GetDedicatedCloudLocationPccZoneAsync(string pccZone) {
            return _client.GetFromJsonAsync<_dedicatedCloud.PccZone>(string.Format("/dedicatedCloud/location/{pccZone}", pccZone));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hostProfile
        public Task<System.Int64[]> GetDedicatedCloudLocationPccZoneHostProfileAsync(string pccZone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/location/{pccZone}/hostProfile", pccZone));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hostProfile/{id}
        public Task<_dedicatedCloud.HostProfile> GetDedicatedCloudLocationPccZoneHostProfileIdAsync(long id, string pccZone) {
            return _client.GetFromJsonAsync<_dedicatedCloud.HostProfile>(string.Format("/dedicatedCloud/location/{pccZone}/hostProfile/{id}", id, pccZone));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hypervisor
        public Task<System.String[]> GetDedicatedCloudLocationPccZoneHypervisorAsync(string pccZone) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/location/{pccZone}/hypervisor", pccZone));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hypervisor/{shortName}
        public Task<_dedicatedCloud.Os> GetDedicatedCloudLocationPccZoneHypervisorShortNameAsync(string pccZone, string shortName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Os>(string.Format("/dedicatedCloud/location/{pccZone}/hypervisor/{shortName}", pccZone, shortName));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/host
        public Task<_dedicatedCloud.HostStockProfile[]> GetDedicatedCloudLocationPccZoneStockHostAsync(string pccZone, [System.Runtime.InteropServices.OptionalAttribute()] long minYear) {
            return _client.GetFromJsonAsync<_dedicatedCloud.HostStockProfile[]>(string.Format("/dedicatedCloud/location/{pccZone}/stock/host?{queryParameters}", pccZone, queryParameters));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/pcc
        public Task<_dedicatedCloud.PccStockProfile[]> GetDedicatedCloudLocationPccZoneStockPccAsync(string pccZone) {
            return _client.GetFromJsonAsync<_dedicatedCloud.PccStockProfile[]>(string.Format("/dedicatedCloud/location/{pccZone}/stock/pcc", pccZone));
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/zpool
        public Task<_dedicatedCloud.ZpoolStockProfile[]> GetDedicatedCloudLocationPccZoneStockZpoolAsync(string pccZone, [System.Runtime.InteropServices.OptionalAttribute()] string profileFilter) {
            return _client.GetFromJsonAsync<_dedicatedCloud.ZpoolStockProfile[]>(string.Format("/dedicatedCloud/location/{pccZone}/stock/zpool?{queryParameters}", pccZone, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}
        public Task<_dedicatedCloud.dedicatedCloudWithIAM> GetDedicatedCloudServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.dedicatedCloudWithIAM>(string.Format("/dedicatedCloud/{serviceName}", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}
        public Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameAsync(_dedicatedCloud.dedicatedCloud body, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork
        public Task<System.Int64[]> GetDedicatedCloudServiceNameAllowedNetworkAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/allowedNetwork", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkAsync(string network, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(long networkAccessId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.AllowedNetwork> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(long networkAccessId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.AllowedNetwork>(string.Format("/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}", networkAccessId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        public Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync(_dedicatedCloud.AllowedNetwork body, long networkAccessId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskAsync(long networkAccessId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task?{queryParamet" +
                        "ers}", networkAccessId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdAsync(long networkAccessId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}", networkAccessId, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, long networkAccessId, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateAsync(long networkAccessId, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/backupRepository
        public Task<System.Int64[]> GetDedicatedCloudServiceNameBackupRepositoryAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/backupRepository", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/backupRepository/{repositoryId}
        public Task<_dedicatedCloud.BackupRepository> GetDedicatedCloudServiceNameBackupRepositoryRepositoryIdAsync(long repositoryId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.BackupRepository>(string.Format("/dedicatedCloud/{serviceName}/backupRepository/{repositoryId}", repositoryId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/canDeployNsxtEdgesOnGlobalDatastores
        public Task<System.Boolean> GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long count, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_nsxt.NsxtEdgeSizeEnum size) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/canDeployNsxtEdgesOnGlobalDatastores?{queryParamete" +
                        "rs}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/capabilities
        public Task<_dedicatedCloud.Capabilities> GetDedicatedCloudServiceNameCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Capabilities>(string.Format("/dedicatedCloud/{serviceName}/capabilities", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/changeContact
        public Task<System.Int64[]> PostDedicatedCloudServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameChangePropertiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] bool sslV3, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.UserAccessPolicyEnum userAccessPolicy, [System.Runtime.InteropServices.OptionalAttribute()] long userLimitConcurrentSession, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.UserLogoutPolicyEnum userLogoutPolicy, [System.Runtime.InteropServices.OptionalAttribute()] long userSessionTimeout) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/commercialRange/compliance
        public Task<_dedicatedCloud.compliantRanges[]> GetDedicatedCloudServiceNameCommercialRangeComplianceAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.compliantRanges[]>(string.Format("/dedicatedCloud/{serviceName}/commercialRange/compliance", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/commercialRange/orderable
        public Task<System.String[]> GetDedicatedCloudServiceNameCommercialRangeOrderableAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/commercialRange/orderable", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/confirmTermination
        public Task<System.String> PostDedicatedCloudServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterAsync(string commercialRangeName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string vrackName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Datacenter> GetDedicatedCloudServiceNameDatacenterDatacenterIdAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Datacenter>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        public Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameDatacenterDatacenterIdAsync(_dedicatedCloud.Datacenter body, long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup
        public Task<_dedicatedCloud.Backup> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Backup>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/batchRestore
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreAsync(string backupRepositoryName, long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string backupJobName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/canOptimizeProxies
        public Task<_dedicatedCloud_backup.OptimizeProxies> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_backup.OptimizeProxies>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/canOptimizeProxies" +
                        "", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesAsync(bool backupDurationInReport, _dedicatedCloud_backup.OfferTypeEnum backupOffer, bool backupSizeInReport, long datacenterId, bool diskSizeInReport, bool fullDayInReport, bool restorePointInReport, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string mailAddress, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly scheduleHour) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupEnableAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_backup.OfferTypeEnum backupOffer) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/generateReport
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/offerCapabilities
        public Task<_dedicatedCloud_backup.BackupCapabilities[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_backup.BackupCapabilities[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/offerCapabilities", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/optimizeProxies
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository/{repositoryId}
        public Task<_dedicatedCloud.BackupRepository> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryRepositoryIdAsync(long datacenterId, long repositoryId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.BackupRepository>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository/{reposit" +
                        "oryId}", datacenterId, repositoryId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/checkBackupJobs
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}
        public Task<_dedicatedCloud.Cluster> GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAsync(long clusterId, long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Cluster>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}", clusterId, datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        public Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync(long clusterId, long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableAsync(long datacenterId, long secondaryDatacenterId, string secondaryServiceName, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEnableAsync(long datacenterId, string primaryEndpointIp, long secondaryDatacenterId, string secondaryEndpointIp, string secondaryServiceName, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endMigration
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endpointPublicIp
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpAsync(long datacenterId, string newEndpointPublicIp, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, long id, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/re" +
                        "moteSites", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync(long datacenterId, string label, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteVraNetwork, string remoteZvmInternalIp, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/startMigration
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/status
        public Task<_dedicatedCloud_disasterRecovery.Profile> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_disasterRecovery.Profile>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/st" +
                        "atus", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/usageReport
        public Task<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportAsync(long datacenterId, long month, string serviceName, long year) {
            return _client.GetFromJsonAsync<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/us" +
                        "ageReport?{queryParameters}", datacenterId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/configureVpn
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnAsync(long datacenterId, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteZvmInternalIp, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string remoteVraNetwork) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork
        public Task<System.String> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSin" +
                        "gle/defaultLocalVraNetwork", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEnableAsync(long datacenterId, string localVraNetwork, string ovhEndpointIp, string remoteVraNetwork, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/endpointPublicIp
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpAsync(long datacenterId, string newEndpointPublicIp, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, long id, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSin" +
                        "gle/remoteSites", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync(long datacenterId, string label, string preSharedKey, string remoteEndpointInternalIp, string remoteEndpointPublicIp, string remoteVraNetwork, string remoteZvmInternalIp, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/requestPairingToken
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}
        public Task<_dedicatedCloud.Filer> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdAsync(long datacenterId, long filerId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Filer>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}", datacenterId, filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/checkGlobalCompatible
        public Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleAsync(long datacenterId, long filerId, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/checkGlob" +
                        "alCompatible", datacenterId, filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/convertToGlobal
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalAsync(long datacenterId, long filerId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/hourlyConsumption
        public Task<_dedicatedCloud_filer.HourlyConsumption> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdHourlyConsumptionAsync(long datacenterId, long filerId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_filer.HourlyConsumption>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/hourlyCon" +
                        "sumption", datacenterId, filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/location
        public Task<_dedicatedCloud_filer.Location> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationAsync(long datacenterId, long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.NodeTypeEnum node) {
            return _client.GetFromJsonAsync<_dedicatedCloud_filer.Location>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/location?" +
                        "{queryParameters}", datacenterId, filerId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/remove
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveAsync(long datacenterId, long filerId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskAsync(long datacenterId, long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task?{que" +
                        "ryParameters}", datacenterId, filerId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdAsync(long datacenterId, long filerId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{tas" +
                        "kId}", datacenterId, filerId, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, long filerId, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateAsync(long datacenterId, long filerId, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}
        public Task<_dedicatedCloud.Host> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAsync(long datacenterId, long hostId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Host>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}", datacenterId, hostId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/addHostSpare
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareAsync(long datacenterId, long hostId, string reason, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/hourlyConsumption
        public Task<_dedicatedCloud_host.HourlyConsumption> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdHourlyConsumptionAsync(long datacenterId, long hostId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_host.HourlyConsumption>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/hourlyConsu" +
                        "mption", datacenterId, hostId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/location
        public Task<_dedicatedCloud_host.Location> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationAsync(long datacenterId, long hostId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_host.Location>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/location", datacenterId, hostId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/remove
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveAsync(long datacenterId, long hostId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience
        public Task<_dedicatedCloud.HostResilience> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceAsync(long datacenterId, long hostId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.HostResilience>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience", datacenterId, hostId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/canBeEnabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledAsync(long datacenterId, long hostId, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/" +
                        "canBeEnabled", datacenterId, hostId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableAsync(long datacenterId, long hostId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableAsync(long datacenterId, long hostId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long duration) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskAsync(long datacenterId, long hostId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task?{query" +
                        "Parameters}", datacenterId, hostId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdAsync(long datacenterId, long hostId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskI" +
                        "d}", datacenterId, hostId, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, long hostId, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateAsync(long datacenterId, long hostId, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        public Task<_dedicatedCloud.NsxtEdge> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.NsxtEdge>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}", datacenterId, nsxtEdgeId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/relocateEdge
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeAsync(long datacenterId, string datastore, long nsxtEdgeId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience
        public Task<_dedicatedCloud.NsxtEdgeResilience> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.NsxtEdgeResilience>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/res" +
                        "ilience", datacenterId, nsxtEdgeId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/canBeEnabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/res" +
                        "ilience/canBeEnabled", datacenterId, nsxtEdgeId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableAsync(long datacenterId, long nsxtEdgeId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableAsync(long datacenterId, long nsxtEdgeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long duration) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesResizingCapabilities
        public Task<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesResizingCapabili" +
                        "ties", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesScalingCapabilities
        public Task<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesScalingCapabilit" +
                        "ies", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewFilerHourly
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyAsync(long datacenterId, string name, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewHostHourly
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyAsync(long datacenterId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string vmwareClusterId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableFilerProfiles
        public Task<_dedicatedCloud_filer.Profile[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_filer.Profile[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableFilerProfiles", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableHostProfiles
        public Task<_dedicatedCloud_host.Profile[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_host.Profile[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableHostProfiles", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway
        public Task<_dedicatedCloud.PrivateGateway> GetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.PrivateGateway>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableAsync(long datacenterId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableAsync(long datacenterId, string ip, string netmask, string portgroup, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/reconfigure
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string ip, [System.Runtime.InteropServices.OptionalAttribute()] string netmask, [System.Runtime.InteropServices.OptionalAttribute()] long newDatacenterId, [System.Runtime.InteropServices.OptionalAttribute()] string portgroup) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/resizeNsxtEdgeCluster
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdResizeNsxtEdgeClusterAsync(long datacenterId, string serviceName, _dedicatedCloud_nsxt.NsxtEdgeSizeEnum size) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task?{queryParameters}", datacenterId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdAsync(long datacenterId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}", datacenterId, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateAsync(long datacenterId, System.DateTime executionDate, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateAsync(long datacenterId, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmAsync(long datacenterId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm", datacenterId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}
        public Task<_dedicatedCloud.Vm> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdAsync(long datacenterId, string serviceName, long vmId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Vm>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}", datacenterId, serviceName, vmId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        public Task<_dedicatedCloud.BackupJob> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync(long datacenterId, string serviceName, long vmId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.BackupJob>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob", datacenterId, serviceName, vmId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobDisableAsync(long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobEnableAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints
        public Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsAsync(long datacenterId, string serviceName, long vmId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/resto" +
                        "rePoints", datacenterId, serviceName, vmId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}
        public Task<_dedicatedCloud.RestorePoint> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdAsync(long datacenterId, long restorePointId, string serviceName, long vmId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.RestorePoint>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/resto" +
                        "rePoints/{restorePointId}", datacenterId, restorePointId, serviceName, vmId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}/restore
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdRestoreAsync(long datacenterId, long filerId, long restorePointId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableBackup
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupAsync(long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableCarp
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpAsync(long datacenterId, string macAddress, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/editBackup
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableBackup
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupAsync(_dedicatedCloud_backup.BackupDaysEnum[] backupDays, long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableCarp
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpAsync(long datacenterId, string macAddress, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/removeLicense
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseAsync(long datacenterId, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/restoreBackup
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupAsync(long datacenterId, long filerId, long restorePointId, string serviceName, long vmId, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.FilerTypeEnum filerType) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/setLicense
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseAsync(bool bypassGuestOsFamilyCheck, long datacenterId, _dedicatedCloud_spla.KmsLicenseEnum kmsLicense, string serviceName, long vmId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vmLicensed
        public Task<_dedicatedCloud.virtualMachineLicensingSummary[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedAsync(long datacenterId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_spla.KmsLicenseIncludingLegacyEnum kmsLicense) {
            return _client.GetFromJsonAsync<_dedicatedCloud.virtualMachineLicensingSummary[]>(string.Format("/dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vmLicensed?{queryParamete" +
                        "rs}", datacenterId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation
        public Task<_dedicatedCloud.Federation> GetDedicatedCloudServiceNameFederationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Federation>(string.Format("/dedicatedCloud/{serviceName}/federation", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory
        public Task<System.Int64[]> GetDedicatedCloudServiceNameFederationActiveDirectoryAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/federation/activeDirectory", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryAsync(string baseDnForGroups, string baseDnForUsers, string domainAlias, string domainName, string ip, string password, string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string ldapHostname, [System.Runtime.InteropServices.OptionalAttribute()] long ldapTcpPort, [System.Runtime.InteropServices.OptionalAttribute()] bool noSsl, [System.Runtime.InteropServices.OptionalAttribute()] string sslThumbprint) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync(long activeDirectoryId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        public Task<_dedicatedCloud.FederationAccessNetwork> GetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync(long activeDirectoryId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.FederationAccessNetwork>(string.Format("/dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}", activeDirectoryId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesAsync(long activeDirectoryId, string password, string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string sslThumbprint) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryGroup
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupAsync(long activeDirectoryId, string groupName, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryUser
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserAsync(long activeDirectoryId, string serviceName, string username) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer
        public Task<System.Int64[]> GetDedicatedCloudServiceNameFilerAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/filer", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}
        public Task<_dedicatedCloud.Filer> GetDedicatedCloudServiceNameFilerFilerIdAsync(long filerId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Filer>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}", filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/checkGlobalCompatible
        public Task<System.Boolean> GetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleAsync(long filerId, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}/checkGlobalCompatible", filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/convertToGlobal
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalAsync(long filerId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/hourlyConsumption
        public Task<_dedicatedCloud_filer.HourlyConsumption> GetDedicatedCloudServiceNameFilerFilerIdHourlyConsumptionAsync(long filerId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_filer.HourlyConsumption>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}/hourlyConsumption", filerId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/location
        public Task<_dedicatedCloud_filer.Location> GetDedicatedCloudServiceNameFilerFilerIdLocationAsync(long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_filer.NodeTypeEnum node) {
            return _client.GetFromJsonAsync<_dedicatedCloud_filer.Location>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}/location?{queryParameters}", filerId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/remove
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdRemoveAsync(long filerId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameFilerFilerIdTaskAsync(long filerId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}/task?{queryParameters}", filerId, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdAsync(long filerId, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}", filerId, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, long filerId, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateAsync(long filerId, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/generateNsxvInventory
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameGenerateNsxvInventoryAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/generateVxlanToVrackMapping
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameGenerateVxlanToVrackMappingAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/globalTasks
        public Task<System.Int64[]> GetDedicatedCloudServiceNameGlobalTasksAsync(
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long datacenterId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly endDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly endDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime executionDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime executionDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long filerId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long hostId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime lastModificationDateFrom, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime lastModificationDateTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long networkAccessId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long orderId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long parentTaskId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum[] state, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long userId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long vlanId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/globalTasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx
        public Task<_dedicatedCloud.Hcx> GetDedicatedCloudServiceNameHcxAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Hcx>(string.Format("/dedicatedCloud/{serviceName}/hcx", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/canBeDisabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameHcxCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/hcx/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/canBeEnabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameHcxCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/hcx/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHcxDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHcxEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds
        public Task<_dedicatedCloud.Hds> GetDedicatedCloudServiceNameHdsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Hds>(string.Format("/dedicatedCloud/{serviceName}/hds", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHdsCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/hds/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHdsCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/hds/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHdsDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHdsEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa
        public Task<_dedicatedCloud.Hipaa> GetDedicatedCloudServiceNameHipaaAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Hipaa>(string.Format("/dedicatedCloud/{serviceName}/hipaa", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHipaaCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/hipaa/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHipaaCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/hipaa/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHipaaDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHipaaEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam
        public Task<_dedicatedCloud.Iam> GetDedicatedCloudServiceNameIamAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Iam>(string.Format("/dedicatedCloud/{serviceName}/iam", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/addRole
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamAddRoleAsync(string name, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/canBeDisabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameIamCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/iam/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/canBeEnabled
        public Task<System.Boolean> GetDedicatedCloudServiceNameIamCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/dedicatedCloud/{serviceName}/iam/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip
        public Task<System.String[]> GetDedicatedCloudServiceNameIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/ip", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}
        public Task<_dedicatedCloud.Ip> GetDedicatedCloudServiceNameIpNetworkAsync(string network, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Ip>(string.Format("/dedicatedCloud/{serviceName}/ip/{network}", network, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/details
        public Task<_dedicatedCloud.IpDetails[]> GetDedicatedCloudServiceNameIpNetworkDetailsAsync(string network, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.IpDetails[]>(string.Format("/dedicatedCloud/{serviceName}/ip/{network}/details", network, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameIpNetworkTaskAsync(string network, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/ip/{network}/task?{queryParameters}", network, serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameIpNetworkTaskTaskIdAsync(string network, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}", network, serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string network, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateAsync(string network, string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location
        public Task<_dedicatedCloud.PccZone> GetDedicatedCloudServiceNameLocationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.PccZone>(string.Format("/dedicatedCloud/{serviceName}/location", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hostProfile
        public Task<System.Int64[]> GetDedicatedCloudServiceNameLocationHostProfileAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/location/hostProfile", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hostProfile/{id}
        public Task<_dedicatedCloud.HostProfile> GetDedicatedCloudServiceNameLocationHostProfileIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.HostProfile>(string.Format("/dedicatedCloud/{serviceName}/location/hostProfile/{id}", id, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hypervisor
        public Task<System.String[]> GetDedicatedCloudServiceNameLocationHypervisorAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/location/hypervisor", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hypervisor/{shortName}
        public Task<_dedicatedCloud.Os> GetDedicatedCloudServiceNameLocationHypervisorShortNameAsync(string serviceName, string shortName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Os>(string.Format("/dedicatedCloud/{serviceName}/location/hypervisor/{shortName}", serviceName, shortName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/kind
        public Task<System.String[]> GetDedicatedCloudServiceNameLogKindAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/log/kind", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/kind/{name}
        public Task<_dedicatedCloud.ldpKind> GetDedicatedCloudServiceNameLogKindNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.ldpKind>(string.Format("/dedicatedCloud/{serviceName}/log/kind/{name}", name, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription
        public Task<System.Guid[]> GetDedicatedCloudServiceNameLogSubscriptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/dedicatedCloud/{serviceName}/log/subscription?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription
        public Task<_dedicatedCloud.LogSubscriptionResponse> PostDedicatedCloudServiceNameLogSubscriptionAsync(string kind, string serviceName, System.Guid streamId) {
            return default(Task<_dedicatedCloud.LogSubscriptionResponse>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dedicatedCloud.LogSubscriptionResponse> DeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            return default(Task<_dedicatedCloud.LogSubscriptionResponse>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dedicatedCloud.ldpSubscription> GetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.ldpSubscription>(string.Format("/dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}", serviceName, subscriptionId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/newPrices
        public Task<_dedicatedCloud.resourceNewPrices> GetDedicatedCloudServiceNameNewPricesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.resourceNewPrices>(string.Format("/dedicatedCloud/{serviceName}/newPrices", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx
        public Task<_dedicatedCloud.Nsx> GetDedicatedCloudServiceNameNsxAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Nsx>(string.Format("/dedicatedCloud/{serviceName}/nsx", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameNsxCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/nsx/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameNsxCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/nsx/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameNsxDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameNsxEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsxt
        public Task<_dedicatedCloud.Nsxt> GetDedicatedCloudServiceNameNsxtAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Nsxt>(string.Format("/dedicatedCloud/{serviceName}/nsxt", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/orderNewFilerHourly
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameOrderNewFilerHourlyAsync(string name, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/orderableIpCountries
        public Task<_dedicatedCloud.IpCountriesEnum[]> GetDedicatedCloudServiceNameOrderableIpCountriesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.IpCountriesEnum[]>(string.Format("/dedicatedCloud/{serviceName}/orderableIpCountries", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/passwordPolicy
        public Task<_dedicatedCloud.passwordPolicy> GetDedicatedCloudServiceNamePasswordPolicyAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.passwordPolicy>(string.Format("/dedicatedCloud/{serviceName}/passwordPolicy", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss
        public Task<_dedicatedCloud.PciDss> GetDedicatedCloudServiceNamePcidssAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.PciDss>(string.Format("/dedicatedCloud/{serviceName}/pcidss", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNamePcidssCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/pcidss/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNamePcidssCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/pcidss/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNamePcidssDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNamePcidssEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/resetTriggeredAlarm
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameResetTriggeredAlarmAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/robot
        public Task<System.String[]> GetDedicatedCloudServiceNameRobotAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/robot", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/robot/{name}
        public Task<_dedicatedCloud.Robot> GetDedicatedCloudServiceNameRobotNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Robot>(string.Format("/dedicatedCloud/{serviceName}/robot/{name}", name, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions
        public Task<_dedicatedCloud.SecurityOption> GetDedicatedCloudServiceNameSecurityOptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.SecurityOption>(string.Format("/dedicatedCloud/{serviceName}/securityOptions", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/compatibilityMatrix
        public Task<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]> GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool showIncompatible, [System.Runtime.InteropServices.OptionalAttribute()] bool showInternal) {
            return _client.GetFromJsonAsync<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]>(string.Format("/dedicatedCloud/{serviceName}/securityOptions/compatibilityMatrix?{queryParameter" +
                        "s}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/dependenciesTree
        public Task<_dedicatedCloud_securityOption.DependenciesTree> GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeAsync(_dedicatedCloud_securityOption.SecurityOptionEnum option, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_securityOption.DependenciesTree>(string.Format("/dedicatedCloud/{serviceName}/securityOptions/dependenciesTree?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/pendingOptions
        public Task<_dedicatedCloud_securityOption.SecurityOptionEnum[]> GetDedicatedCloudServiceNameSecurityOptionsPendingOptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud_securityOption.SecurityOptionEnum[]>(string.Format("/dedicatedCloud/{serviceName}/securityOptions/pendingOptions", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/resumePendingEnabling
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingAsync(_dedicatedCloud_securityOption.SecurityOptionEnum option, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/serviceInfos
        public Task<_services.Service> GetDedicatedCloudServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/dedicatedCloud/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDedicatedCloudServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePack
        public Task<_dedicatedCloud.servicePackStatus> GetDedicatedCloudServiceNameServicePackAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.servicePackStatus>(string.Format("/dedicatedCloud/{serviceName}/servicePack", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePacks
        public Task<System.String[]> GetDedicatedCloudServiceNameServicePacksAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/servicePacks", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePacks/{name}
        public Task<_dedicatedCloud.ServicePack> GetDedicatedCloudServiceNameServicePacksNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.ServicePack>(string.Format("/dedicatedCloud/{serviceName}/servicePacks/{name}", name, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/tag
        public Task<System.String[]> GetDedicatedCloudServiceNameTagAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/tag", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/tag/{name}
        public Task<_dedicatedCloud.Tag> GetDedicatedCloudServiceNameTagNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Tag>(string.Format("/dedicatedCloud/{serviceName}/tag/{name}", name, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateAsync(string reason, string serviceName, long taskId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/terminate
        public Task<System.String> PostDedicatedCloudServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist
        public Task<System.Int64[]> GetDedicatedCloudServiceNameTwoFAWhitelistAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/twoFAWhitelist", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTwoFAWhitelistAsync(string description, string ip, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameTwoFAWhitelistIdAsync(long id, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        public Task<_dedicatedCloud.twoFAWhitelist> GetDedicatedCloudServiceNameTwoFAWhitelistIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.twoFAWhitelist>(string.Format("/dedicatedCloud/{serviceName}/twoFAWhitelist/{id}", id, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/upgradeHypervisor
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUpgradeHypervisorAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/upgradeVcenter
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUpgradeVcenterAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.releaseEnum release) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user
        public Task<System.Int64[]> GetDedicatedCloudServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/user?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserAsync(
                    string name, 
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool canAddRessource, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool canManageRights, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool encryptionRight, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime expirationDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string lastName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.NetworkRoleEnum networkRole, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool nsxRight, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string password, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phoneNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool receiveAlerts, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.RightEnum right, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool tokenValidator, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud_right.VmNetworkRoleEnum vmNetworkRole) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameUserUserIdAsync(string serviceName, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}
        public Task<_dedicatedCloud.User> GetDedicatedCloudServiceNameUserUserIdAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.User>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}", serviceName, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/changePassword
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdChangePasswordAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdChangePropertiesAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] bool canManageIpFailOvers, [System.Runtime.InteropServices.OptionalAttribute()] bool canManageNetwork, [System.Runtime.InteropServices.OptionalAttribute()] bool canManageRights, [System.Runtime.InteropServices.OptionalAttribute()] string email, [System.Runtime.InteropServices.OptionalAttribute()] bool encryptionRight, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] bool fullAdminRo, [System.Runtime.InteropServices.OptionalAttribute()] string lastName, [System.Runtime.InteropServices.OptionalAttribute()] bool nsxRight, [System.Runtime.InteropServices.OptionalAttribute()] string phoneNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool receiveAlerts, [System.Runtime.InteropServices.OptionalAttribute()] bool tokenValidator) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/confirmPhoneNumber
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberAsync(string serviceName, string token, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdDisableAsync(string serviceName, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdEnableAsync(string serviceName, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight
        public Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdObjectRightAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/objectRight", serviceName, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdObjectRightAsync(_dedicatedCloud_right.RightEnum right, string serviceName, _dedicatedCloud_right.UserObjectRightTypeEnum type, long userId, string vmwareObjectId, [System.Runtime.InteropServices.OptionalAttribute()] bool propagate) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync(long objectRightId, string serviceName, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        public Task<_dedicatedCloud.ObjectRight> GetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync(long objectRightId, string serviceName, long userId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.ObjectRight>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}", objectRightId, serviceName, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right
        public Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdRightAsync(string serviceName, long userId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/right", serviceName, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        public Task<_dedicatedCloud.Right> GetDedicatedCloudServiceNameUserUserIdRightRightIdAsync(long rightId, string serviceName, long userId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Right>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}", rightId, serviceName, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        public Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameUserUserIdRightRightIdAsync(_dedicatedCloud.Right body, long rightId, string serviceName, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task
        public Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdTaskAsync(string serviceName, long userId, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _dedicatedCloud.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/task?{queryParameters}", serviceName, userId, queryParameters));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}
        public Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameUserUserIdTaskTaskIdAsync(string serviceName, long taskId, long userId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Task>(string.Format("/dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}", serviceName, taskId, userId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/changeMaintenanceExecutionDate
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateAsync(System.DateTime executionDate, string serviceName, long taskId, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/resetTaskState
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateAsync(string reason, string serviceName, long taskId, long userId) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vcenterVersion
        public Task<_dedicatedCloud.vcenter> GetDedicatedCloudServiceNameVcenterVersionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.vcenter>(string.Format("/dedicatedCloud/{serviceName}/vcenterVersion", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor
        public Task<_dedicatedCloud.Vendor> GetDedicatedCloudServiceNameVendorAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Vendor>(string.Format("/dedicatedCloud/{serviceName}/vendor", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor/objectType
        public Task<System.String[]> PostDedicatedCloudServiceNameVendorObjectTypeAsync(string serviceName) {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor/ovhId
        public Task<_dedicatedCloud_vendor.OvhId> PostDedicatedCloudServiceNameVendorOvhIdAsync(_dedicatedCloud.VendorObjectTypeEnum objectType, string serviceName, string vendorId) {
            return default(Task<_dedicatedCloud_vendor.OvhId>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vlan
        public Task<System.Int64[]> GetDedicatedCloudServiceNameVlanAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/vlan", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vlan/{vlanId}
        public Task<_dedicatedCloud.Vlan> GetDedicatedCloudServiceNameVlanVlanIdAsync(string serviceName, long vlanId) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Vlan>(string.Format("/dedicatedCloud/{serviceName}/vlan/{vlanId}", serviceName, vlanId));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption
        public Task<_dedicatedCloud.VMEncryption> GetDedicatedCloudServiceNameVmEncryptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.VMEncryption>(string.Format("/dedicatedCloud/{serviceName}/vmEncryption", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms
        public Task<System.Int64[]> GetDedicatedCloudServiceNameVmEncryptionKmsAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/vmEncryption/kms", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVmEncryptionKmsAsync(string ip, string serviceName, string sslThumbprint, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync(long kmsId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        public Task<_dedicatedCloud.VMEncryptionAccessNetwork> GetDedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync(long kmsId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.VMEncryptionAccessNetwork>(string.Format("/dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}", kmsId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesAsync(long kmsId, string serviceName, string sslThumbprint, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack
        public Task<System.String[]> GetDedicatedCloudServiceNameVrackAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/dedicatedCloud/{serviceName}/vrack", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack/{vrack}
        public Task<_vrack.Task> DeleteDedicatedCloudServiceNameVrackVrackAsync(string serviceName, string vrack) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack/{vrack}
        public Task<_vrack.dedicatedCloud> GetDedicatedCloudServiceNameVrackVrackAsync(string serviceName, string vrack) {
            return _client.GetFromJsonAsync<_vrack.dedicatedCloud>(string.Format("/dedicatedCloud/{serviceName}/vrack/{vrack}", serviceName, vrack));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops
        public Task<_dedicatedCloud.Vrops> GetDedicatedCloudServiceNameVropsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.Vrops>(string.Format("/dedicatedCloud/{serviceName}/vrops", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/canBeDisabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameVropsCanBeDisabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/vrops/canBeDisabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/canBeEnabled
        public Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameVropsCanBeEnabledAsync(string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.optionCompatibility>(string.Format("/dedicatedCloud/{serviceName}/vrops/canBeEnabled", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/disable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsDisableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/enable
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsEnableAsync(string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow
        public Task<System.Int64[]> GetDedicatedCloudServiceNameVropsOutgoingFlowAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/dedicatedCloud/{serviceName}/vrops/outgoingFlow", serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsOutgoingFlowAsync(string ip, string serviceName, long servicePort, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        public Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync(long outgoingFlowId, string serviceName) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        public Task<_dedicatedCloud.VropsOutgoingFlow> GetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync(long outgoingFlowId, string serviceName) {
            return _client.GetFromJsonAsync<_dedicatedCloud.VropsOutgoingFlow>(string.Format("/dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}", outgoingFlowId, serviceName));
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}/changeProperties
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesAsync(long outgoingFlowId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/upgrade
        public Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string version) {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /domain
        public Task<System.String[]> GetDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags, [System.Runtime.InteropServices.OptionalAttribute()] string whoisOwner) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/configurationRule
        public Task<_domain_configuration_rules.Rule> GetDomainConfigurationRuleAsync(_domain.ActionEnum action, string domain) {
            return _client.GetFromJsonAsync<_domain_configuration_rules.Rule>(string.Format("/domain/configurationRule?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/configurationRule/check
        public System.Threading.Tasks.Task PostDomainConfigurationRuleCheckAsync(_domain_configuration_rules.RuleData body, _domain.ActionEnum action, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/contact
        public Task<_domain.Contact[]> GetDomainContactAsync() {
            return _client.GetFromJsonAsync<_domain.Contact[]>("/domain/contact");
        }
        
        // Path: /domain/contact
        public Task<_domain.Contact> PostDomainContactAsync(_domain.Contact body) {
            return default(Task<_domain.Contact>);
        }
        
        // Path: /domain/contact/{contactId}
        public Task<_domain.Contact> GetDomainContactContactIdAsync(long contactId) {
            return _client.GetFromJsonAsync<_domain.Contact>(string.Format("/domain/contact/{contactId}", contactId));
        }
        
        // Path: /domain/contact/{contactId}
        public Task<_domain.Contact> PutDomainContactContactIdAsync(_domain.Contact body, long contactId) {
            return default(Task<_domain.Contact>);
        }
        
        // Path: /domain/data/claimNotice
        public Task<_domain_data_claimNotice.ClaimNotice> GetDomainDataClaimNoticeAsync(string domain) {
            return _client.GetFromJsonAsync<_domain_data_claimNotice.ClaimNotice>(string.Format("/domain/data/claimNotice?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/data/extension
        public Task<System.String[]> GetDomainDataExtensionAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/data/extension?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/data/smd
        public Task<_domain_data_smd.Smd[]> GetDomainDataSmdAsync() {
            return _client.GetFromJsonAsync<_domain_data_smd.Smd[]>("/domain/data/smd");
        }
        
        // Path: /domain/data/smd
        public Task<_domain_data_smd.Smd> PostDomainDataSmdAsync(_domain_data_smd.SmdBody body) {
            return default(Task<_domain_data_smd.Smd>);
        }
        
        // Path: /domain/data/smd/{smdId}
        public System.Threading.Tasks.Task DeleteDomainDataSmdSmdIdAsync(System.Guid smdId) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/data/smd/{smdId}
        public Task<_domain_data_smd.Smd> GetDomainDataSmdSmdIdAsync(System.Guid smdId) {
            return _client.GetFromJsonAsync<_domain_data_smd.Smd>(string.Format("/domain/data/smd/{smdId}", smdId));
        }
        
        // Path: /domain/data/smd/{smdId}
        public Task<_domain_data_smd.Smd> PutDomainDataSmdSmdIdAsync(_domain_data_smd.SmdBody body, System.Guid smdId) {
            return default(Task<_domain_data_smd.Smd>);
        }
        
        // Path: /domain/extensions
        public Task<System.String[]> GetDomainExtensionsAsync([System.Runtime.InteropServices.OptionalAttribute()] string geolocalizations, [System.Runtime.InteropServices.OptionalAttribute()] _domain_extensions.OrderByTypeEnum orderBy, [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum ovhSubsidiary, [System.Runtime.InteropServices.OptionalAttribute()] string thematics) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/extensions?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/extensions/byCategory
        public Task<_domain_extensions.ExtensionsByCategory> GetDomainExtensionsByCategoryAsync([System.Runtime.InteropServices.OptionalAttribute()] _domain_extensions.CategoryTypeEnum[] categoryType) {
            return _client.GetFromJsonAsync<_domain_extensions.ExtensionsByCategory>(string.Format("/domain/extensions/byCategory?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/extensions/highlighted
        public Task<System.String[]> GetDomainExtensionsHighlightedAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/extensions/highlighted?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/extensions/pricingAttributes
        public Task<_domain_extensions.ExtensionsPricingAttributes[]> GetDomainExtensionsPricingAttributesAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_domain_extensions.ExtensionsPricingAttributes[]>(string.Format("/domain/extensions/pricingAttributes?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/extensions/{name}
        public Task<_domain_extensions.Extension> GetDomainExtensionsNameAsync(string name) {
            return _client.GetFromJsonAsync<_domain_extensions.Extension>(string.Format("/domain/extensions/{name}", name));
        }
        
        // Path: /domain/extensions/{name}/registryConfigurations
        public Task<_domain_extensions_registryConfigurations.RegistryConfigurations> GetDomainExtensionsNameRegistryConfigurationsAsync(string name) {
            return _client.GetFromJsonAsync<_domain_extensions_registryConfigurations.RegistryConfigurations>(string.Format("/domain/extensions/{name}/registryConfigurations", name));
        }
        
        // Path: /domain/zone
        public Task<System.String[]> GetDomainZoneAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/zone?{queryParameters}", queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}
        public Task<_domain.ZoneWithIAM> GetDomainZoneZoneNameAsync(string zoneName) {
            return _client.GetFromJsonAsync<_domain.ZoneWithIAM>(string.Format("/domain/zone/{zoneName}", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/capabilities
        public Task<_domain_zone.Capabilities> GetDomainZoneZoneNameCapabilitiesAsync(string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Capabilities>(string.Format("/domain/zone/{zoneName}/capabilities", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/changeContact
        public Task<System.Int64[]> PostDomainZoneZoneNameChangeContactAsync(_services.changeContact body, string zoneName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/confirmTermination
        public Task<System.String> PostDomainZoneZoneNameConfirmTerminationAsync(_services.confirmTermination body, string zoneName) {
            return default(Task<System.String>);
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        public System.Threading.Tasks.Task DeleteDomainZoneZoneNameDnssecAsync(string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        public Task<_domain_zone.Dnssec> GetDomainZoneZoneNameDnssecAsync(string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Dnssec>(string.Format("/domain/zone/{zoneName}/dnssec", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        public System.Threading.Tasks.Task PostDomainZoneZoneNameDnssecAsync(string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login
        public Task<System.String[]> GetDomainZoneZoneNameDynHostLoginAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] string login, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/zone/{zoneName}/dynHost/login?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login
        public Task<_domain_zone_dynHost.Login> PostDomainZoneZoneNameDynHostLoginAsync(_domain_zone_dynHost.LoginCreate body, string zoneName) {
            return default(Task<_domain_zone_dynHost.Login>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        public System.Threading.Tasks.Task DeleteDomainZoneZoneNameDynHostLoginLoginAsync(string login, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        public Task<_domain_zone_dynHost.Login> GetDomainZoneZoneNameDynHostLoginLoginAsync(string login, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone_dynHost.Login>(string.Format("/domain/zone/{zoneName}/dynHost/login/{login}", login, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        public System.Threading.Tasks.Task PutDomainZoneZoneNameDynHostLoginLoginAsync(_domain_zone_dynHost.Login body, string login, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}/changePassword
        public System.Threading.Tasks.Task PostDomainZoneZoneNameDynHostLoginLoginChangePasswordAsync(_domain_zone_dynHost.LoginChangePassword body, string login, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record
        public Task<System.Int64[]> GetDomainZoneZoneNameDynHostRecordAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/zone/{zoneName}/dynHost/record?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record
        public Task<_domain_zone_dynHost.Record> PostDomainZoneZoneNameDynHostRecordAsync(_domain_zone_dynHost.Record body, string zoneName) {
            return default(Task<_domain_zone_dynHost.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        public System.Threading.Tasks.Task DeleteDomainZoneZoneNameDynHostRecordIdAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        public Task<_domain_zone_dynHost.Record> GetDomainZoneZoneNameDynHostRecordIdAsync(long id, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone_dynHost.Record>(string.Format("/domain/zone/{zoneName}/dynHost/record/{id}", id, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        public System.Threading.Tasks.Task PutDomainZoneZoneNameDynHostRecordIdAsync(_domain_zone_dynHost.Record body, long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/export
        public Task<System.String> GetDomainZoneZoneNameExportAsync(string zoneName) {
            return _client.GetFromJsonAsync<string>(string.Format("/domain/zone/{zoneName}/export", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/history
        public Task<System.DateTime[]> GetDomainZoneZoneNameHistoryAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateTo) {
            return _client.GetFromJsonAsync<System.DateTime[]>(string.Format("/domain/zone/{zoneName}/history?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/history/{creationDate}
        public Task<_domain_zone.ZoneRestorePoint> GetDomainZoneZoneNameHistoryCreationDateAsync(System.DateTime creationDate, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.ZoneRestorePoint>(string.Format("/domain/zone/{zoneName}/history/{creationDate}", creationDate, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/history/{creationDate}/restore
        public Task<_domain_zone.Task> PostDomainZoneZoneNameHistoryCreationDateRestoreAsync(System.DateTime creationDate, string zoneName) {
            return default(Task<_domain_zone.Task>);
        }
        
        // Path: /domain/zone/{zoneName}/import
        public Task<_domain_zone.Task> PostDomainZoneZoneNameImportAsync(_domain_zone.Import body, string zoneName) {
            return default(Task<_domain_zone.Task>);
        }
        
        // Path: /domain/zone/{zoneName}/option
        public Task<System.String[]> GetDomainZoneZoneNameOptionAsync(string zoneName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/zone/{zoneName}/option", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}
        public Task<_domain_zone.Option> GetDomainZoneZoneNameOptionNameAsync(string name, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Option>(string.Format("/domain/zone/{zoneName}/option/{name}", name, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}/serviceInfos
        public Task<_services.Service> GetDomainZoneZoneNameOptionNameServiceInfosAsync(string name, string zoneName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/domain/zone/{zoneName}/option/{name}/serviceInfos", name, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}/serviceInfos
        public System.Threading.Tasks.Task PutDomainZoneZoneNameOptionNameServiceInfosAsync(string name, _service.RenewType renew, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/record
        public Task<System.Int64[]> GetDomainZoneZoneNameRecordAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] _domain_zone.RecordTypeEnum fieldType, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/zone/{zoneName}/record?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/record
        public Task<_domain_zone.Record> PostDomainZoneZoneNameRecordAsync(_domain_zone.RecordCreate body, string zoneName) {
            return default(Task<_domain_zone.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        public System.Threading.Tasks.Task DeleteDomainZoneZoneNameRecordIdAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        public Task<_domain_zone.Record> GetDomainZoneZoneNameRecordIdAsync(long id, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Record>(string.Format("/domain/zone/{zoneName}/record/{id}", id, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        public System.Threading.Tasks.Task PutDomainZoneZoneNameRecordIdAsync(_domain_zone.RecordUpdate body, long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/redirection
        public Task<System.Int64[]> GetDomainZoneZoneNameRedirectionAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/zone/{zoneName}/redirection?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/redirection
        public Task<_domain_zone.Redirection> PostDomainZoneZoneNameRedirectionAsync(_domain_zone.RedirectionCreate body, string zoneName) {
            return default(Task<_domain_zone.Redirection>);
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        public System.Threading.Tasks.Task DeleteDomainZoneZoneNameRedirectionIdAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        public Task<_domain_zone.Redirection> GetDomainZoneZoneNameRedirectionIdAsync(long id, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Redirection>(string.Format("/domain/zone/{zoneName}/redirection/{id}", id, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        public System.Threading.Tasks.Task PutDomainZoneZoneNameRedirectionIdAsync(_domain_zone.RedirectionUpdate body, long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/refresh
        public System.Threading.Tasks.Task PostDomainZoneZoneNameRefreshAsync(string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/reset
        public System.Threading.Tasks.Task PostDomainZoneZoneNameResetAsync(_domain_zone.Reset body, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/serviceInfos
        public Task<_services.Service> GetDomainZoneZoneNameServiceInfosAsync(string zoneName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/domain/zone/{zoneName}/serviceInfos", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/serviceInfos
        public System.Threading.Tasks.Task PutDomainZoneZoneNameServiceInfosAsync(_services.Service body, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/soa
        public Task<_domain_zone.Soa> GetDomainZoneZoneNameSoaAsync(string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Soa>(string.Format("/domain/zone/{zoneName}/soa", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/soa
        public System.Threading.Tasks.Task PutDomainZoneZoneNameSoaAsync(_domain_zone.Soa body, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/status
        public Task<_domain_zone.Status> GetDomainZoneZoneNameStatusAsync(string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Status>(string.Format("/domain/zone/{zoneName}/status", zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/task
        public Task<System.Int64[]> GetDomainZoneZoneNameTaskAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/zone/{zoneName}/task?{queryParameters}", zoneName, queryParameters));
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}
        public Task<_domain_zone.Task> GetDomainZoneZoneNameTaskIdAsync(long id, string zoneName) {
            return _client.GetFromJsonAsync<_domain_zone.Task>(string.Format("/domain/zone/{zoneName}/task/{id}", id, zoneName));
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/accelerate
        public System.Threading.Tasks.Task PostDomainZoneZoneNameTaskIdAccelerateAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/cancel
        public System.Threading.Tasks.Task PostDomainZoneZoneNameTaskIdCancelAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/relaunch
        public System.Threading.Tasks.Task PostDomainZoneZoneNameTaskIdRelaunchAsync(long id, string zoneName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/zone/{zoneName}/terminate
        public Task<System.String> PostDomainZoneZoneNameTerminateAsync(string zoneName) {
            return default(Task<System.String>);
        }
        
        // Path: /domain/{serviceName}
        public Task<_domain.DomainServiceWithIAM> GetDomainServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain.DomainServiceWithIAM>(string.Format("/domain/{serviceName}", serviceName));
        }
        
        // Path: /domain/{serviceName}
        public Task<_domain.DomainService> PutDomainServiceNameAsync(_domain.DomainService body, string serviceName) {
            return default(Task<_domain.DomainService>);
        }
        
        // Path: /domain/{serviceName}/authInfo
        public Task<System.String> GetDomainServiceNameAuthInfoAsync(string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/domain/{serviceName}/authInfo", serviceName));
        }
        
        // Path: /domain/{serviceName}/changeContact
        public Task<System.Int64[]> PostDomainServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails
        public Task<_domain_configurations.ObfuscatedEmail[]> GetDomainServiceNameConfigurationsObfuscatedEmailsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain_configurations.ObfuscatedEmail[]>(string.Format("/domain/{serviceName}/configurations/obfuscatedEmails", serviceName));
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails
        public Task<_domain_configurations.ObfuscatedEmail[]> PutDomainServiceNameConfigurationsObfuscatedEmailsAsync(_domain_configurations.ObfuscatedEmailUpdatePayload body, string serviceName) {
            return default(Task<_domain_configurations.ObfuscatedEmail[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails/refresh
        public System.Threading.Tasks.Task PostDomainServiceNameConfigurationsObfuscatedEmailsRefreshAsync(_domain_configurations.ObfuscatedEmailRefreshPayload body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/configurations/optin
        public Task<_domain_configurations.Optin[]> GetDomainServiceNameConfigurationsOptinAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain_configurations.Optin[]>(string.Format("/domain/{serviceName}/configurations/optin", serviceName));
        }
        
        // Path: /domain/{serviceName}/configurations/optin
        public Task<_domain_configurations.Optin[]> PutDomainServiceNameConfigurationsOptinAsync(_domain_configurations.OptinUpdatePayload body, string serviceName) {
            return default(Task<_domain_configurations.Optin[]>);
        }
        
        // Path: /domain/{serviceName}/dsRecord
        public Task<System.Int64[]> GetDomainServiceNameDsRecordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _dnssec.KeyFlagEnum flags, [System.Runtime.InteropServices.OptionalAttribute()] _dnssec.KeyStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/{serviceName}/dsRecord?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /domain/{serviceName}/dsRecord
        public Task<_domain.Task> PostDomainServiceNameDsRecordAsync(_dnssec.UpdatePayload body, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/dsRecord/{id}
        public Task<_dnssec.Key> GetDomainServiceNameDsRecordIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_dnssec.Key>(string.Format("/domain/{serviceName}/dsRecord/{id}", id, serviceName));
        }
        
        // Path: /domain/{serviceName}/glueRecord
        public Task<System.String[]> GetDomainServiceNameGlueRecordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string host) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/domain/{serviceName}/glueRecord?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /domain/{serviceName}/glueRecord
        public Task<_domain.Task> PostDomainServiceNameGlueRecordAsync(_domain_glueRecord.CreatePayload body, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}
        public Task<_domain.Task> DeleteDomainServiceNameGlueRecordHostAsync(string host, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}
        public Task<_domain_glueRecord.GlueRecord> GetDomainServiceNameGlueRecordHostAsync(string host, string serviceName) {
            return _client.GetFromJsonAsync<_domain_glueRecord.GlueRecord>(string.Format("/domain/{serviceName}/glueRecord/{host}", host, serviceName));
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}/update
        public Task<_domain.Task> PostDomainServiceNameGlueRecordHostUpdateAsync(_domain_glueRecord.GlueRecord body, string host, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer
        public Task<System.Int64[]> GetDomainServiceNameNameServerAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/{serviceName}/nameServer", serviceName));
        }
        
        // Path: /domain/{serviceName}/nameServer
        public Task<_domain.Task> PostDomainServiceNameNameServerAsync(_domain_nameServer.CreatePayload body, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}
        public Task<_domain.Task> DeleteDomainServiceNameNameServerIdAsync(long id, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}
        public Task<_domain_nameServer.FullNameServer> GetDomainServiceNameNameServerIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_domain_nameServer.FullNameServer>(string.Format("/domain/{serviceName}/nameServer/{id}", id, serviceName));
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}/status
        public Task<_domain_nameServer.NameServerStatus> GetDomainServiceNameNameServerIdStatusAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_domain_nameServer.NameServerStatus>(string.Format("/domain/{serviceName}/nameServer/{id}/status", id, serviceName));
        }
        
        // Path: /domain/{serviceName}/nameServers/update
        public Task<_domain.Task> PostDomainServiceNameNameServersUpdateAsync(_domain_nameServer.UpdatePayload body, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/option
        public Task<_domain.DomainOptionEnum[]> GetDomainServiceNameOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain.DomainOptionEnum[]>(string.Format("/domain/{serviceName}/option", serviceName));
        }
        
        // Path: /domain/{serviceName}/option/{option}
        public System.Threading.Tasks.Task DeleteDomainServiceNameOptionOptionAsync(_domain.DomainOptionEnum option, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/option/{option}
        public Task<_domain.Option> GetDomainServiceNameOptionOptionAsync(_domain.DomainOptionEnum option, string serviceName) {
            return _client.GetFromJsonAsync<_domain.Option>(string.Format("/domain/{serviceName}/option/{option}", option, serviceName));
        }
        
        // Path: /domain/{serviceName}/options
        public Task<_domain.ServiceOptions> GetDomainServiceNameOptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain.ServiceOptions>(string.Format("/domain/{serviceName}/options", serviceName));
        }
        
        // Path: /domain/{serviceName}/outgoingTransfer/approve
        public System.Threading.Tasks.Task PostDomainServiceNameOutgoingTransferApproveAsync(_domain_outgoingTransfer.Approve body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/rules/emailsObfuscation
        public Task<_domain_configurations.ContactTypeEnum[]> GetDomainServiceNameRulesEmailsObfuscationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain_configurations.ContactTypeEnum[]>(string.Format("/domain/{serviceName}/rules/emailsObfuscation", serviceName));
        }
        
        // Path: /domain/{serviceName}/rules/optin
        public Task<_domain_rules.Optin[]> GetDomainServiceNameRulesOptinAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain_rules.Optin[]>(string.Format("/domain/{serviceName}/rules/optin", serviceName));
        }
        
        // Path: /domain/{serviceName}/serviceInfos
        public Task<_services.Service> GetDomainServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/domain/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /domain/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutDomainServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/task
        public Task<System.Int64[]> GetDomainServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/domain/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /domain/{serviceName}/task/{id}
        public Task<_domain.Task> GetDomainServiceNameTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_domain.Task>(string.Format("/domain/{serviceName}/task/{id}", id, serviceName));
        }
        
        // Path: /domain/{serviceName}/task/{id}/accelerate
        public System.Threading.Tasks.Task PostDomainServiceNameTaskIdAccelerateAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/task/{id}/cancel
        public System.Threading.Tasks.Task PostDomainServiceNameTaskIdCancelAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/task/{id}/relaunch
        public System.Threading.Tasks.Task PostDomainServiceNameTaskIdRelaunchAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /domain/{serviceName}/ukOutgoingTransfer
        public Task<_domain.Task> PostDomainServiceNameUkOutgoingTransferAsync(_domain.UkRegistrar body, string serviceName) {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/ukRegistrars
        public Task<_domain.UkRegistrar[]> GetDomainServiceNameUkRegistrarsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_domain.UkRegistrar[]>(string.Format("/domain/{serviceName}/ukRegistrars", serviceName));
        }
        
        // Path: /email/domain
        public Task<System.String[]> GetEmailDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain?{queryParameters}", queryParameters));
        }
        
        // Path: /email/domain/delegatedAccount
        public Task<System.String[]> GetEmailDomainDelegatedAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] string accountName, [System.Runtime.InteropServices.OptionalAttribute()] string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/delegatedAccount?{queryParameters}", queryParameters));
        }
        
        // Path: /email/domain/delegatedAccount/{email}
        public Task<_email_domain.AccountDelegated> GetEmailDomainDelegatedAccountEmailAsync(string email) {
            return _client.GetFromJsonAsync<_email_domain.AccountDelegated>(string.Format("/email/domain/delegatedAccount/{email}", email));
        }
        
        // Path: /email/domain/delegatedAccount/{email}
        public System.Threading.Tasks.Task PutEmailDomainDelegatedAccountEmailAsync(_email_domain.AccountDelegated body, string email) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/delegatedAccount/{email}/changePassword
        public Task<_email_domain.TaskPop> PostEmailDomainDelegatedAccountEmailChangePasswordAsync(string email, string password) {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter
        public Task<System.String[]> GetEmailDomainDelegatedAccountEmailFilterAsync(string email) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/delegatedAccount/{email}/filter", email));
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter
        public Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterAsync(_domain.DomainFilterActionEnum action, bool active, string email, string header, string name, _domain.DomainFilterOperandEnum operand, long priority, string value, [System.Runtime.InteropServices.OptionalAttribute()] string actionParam) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}
        public Task<_email_domain.TaskFilter[]> DeleteEmailDomainDelegatedAccountEmailFilterNameAsync(string email, string name) {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}
        public Task<_email_domain.Filter> GetEmailDomainDelegatedAccountEmailFilterNameAsync(string email, string name) {
            return _client.GetFromJsonAsync<_email_domain.Filter>(string.Format("/email/domain/delegatedAccount/{email}/filter/{name}", email, name));
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/changeActivity
        public Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityAsync(bool activity, string email, string name) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/changePriority
        public Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityAsync(string email, string name, long priority) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule
        public Task<System.Int64[]> GetEmailDomainDelegatedAccountEmailFilterNameRuleAsync(string email, string name) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/delegatedAccount/{email}/filter/{name}/rule", email, name));
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule
        public Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameRuleAsync(string email, string header, string name, _domain.DomainFilterOperandEnum operand, string value) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        public Task<_email_domain.TaskFilter[]> DeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdAsync(string email, long id, string name) {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        public Task<_email_domain.Rule> GetEmailDomainDelegatedAccountEmailFilterNameRuleIdAsync(string email, long id, string name) {
            return _client.GetFromJsonAsync<_email_domain.Rule>(string.Format("/email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}", email, id, name));
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDelegatedAccountEmailResponderAsync(string email) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.ResponderAccount> GetEmailDomainDelegatedAccountEmailResponderAsync(string email) {
            return _client.GetFromJsonAsync<_email_domain.ResponderAccount>(string.Format("/email/domain/delegatedAccount/{email}/responder", email));
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        public Task<_email_domain.TaskSpecialAccount> PostEmailDomainDelegatedAccountEmailResponderAsync(string content, bool copy, string email, [System.Runtime.InteropServices.OptionalAttribute()] string copyTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime to) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        public System.Threading.Tasks.Task PutEmailDomainDelegatedAccountEmailResponderAsync(_email_domain.ResponderAccount body, string email) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/delegatedAccount/{email}/updateUsage
        public System.Threading.Tasks.Task PostEmailDomainDelegatedAccountEmailUpdateUsageAsync(string email) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/delegatedAccount/{email}/usage
        public Task<_domain.DomainUsageAccountStruct> PostEmailDomainDelegatedAccountEmailUsageAsync(string email) {
            return default(Task<_domain.DomainUsageAccountStruct>);
        }
        
        // Path: /email/domain/mailingListLimits
        public Task<_domain.DomainMlLimits> GetEmailDomainMailingListLimitsAsync(bool moderatorMessage) {
            return _client.GetFromJsonAsync<_domain.DomainMlLimits>(string.Format("/email/domain/mailingListLimits?{queryParameters}", queryParameters));
        }
        
        // Path: /email/domain/{domain}
        public Task<_email_domain.DomainServiceWithIAM> GetEmailDomainDomainAsync(string domain) {
            return _client.GetFromJsonAsync<_email_domain.DomainServiceWithIAM>(string.Format("/email/domain/{domain}", domain));
        }
        
        // Path: /email/domain/{domain}/account
        public Task<System.String[]> GetEmailDomainDomainAccountAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string accountName, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/account?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/account
        public Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAsync(string accountName, string domain, string password, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] long size) {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        public Task<_email_domain.TaskPop> DeleteEmailDomainDomainAccountAccountNameAsync(string accountName, string domain) {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        public Task<_email_domain.Account> GetEmailDomainDomainAccountAccountNameAsync(string accountName, string domain) {
            return _client.GetFromJsonAsync<_email_domain.Account>(string.Format("/email/domain/{domain}/account/{accountName}", accountName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        public System.Threading.Tasks.Task PutEmailDomainDomainAccountAccountNameAsync(_email_domain.Account body, string accountName, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/changePassword
        public Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAccountNameChangePasswordAsync(string accountName, string domain, string password) {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation
        public Task<System.String[]> GetEmailDomainDomainAccountAccountNameDelegationAsync(string accountName, string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/account/{accountName}/delegation", accountName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation
        public Task<System.String> PostEmailDomainDomainAccountAccountNameDelegationAsync(string accountId, string accountName, string domain) {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation/{accountId}
        public Task<System.String> DeleteEmailDomainDomainAccountAccountNameDelegationAccountIdAsync(string accountId, string accountName, string domain) {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation/{accountId}
        public Task<_email_domain.Delegation> GetEmailDomainDomainAccountAccountNameDelegationAccountIdAsync(string accountId, string accountName, string domain) {
            return _client.GetFromJsonAsync<_email_domain.Delegation>(string.Format("/email/domain/{domain}/account/{accountName}/delegation/{accountId}", accountId, accountName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter
        public Task<System.String[]> GetEmailDomainDomainAccountAccountNameFilterAsync(string accountName, string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/account/{accountName}/filter", accountName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter
        public Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterAsync(string accountName, _domain.DomainFilterActionEnum action, bool active, string domain, string header, string name, _domain.DomainFilterOperandEnum operand, long priority, string value, [System.Runtime.InteropServices.OptionalAttribute()] string actionParam) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}
        public Task<_email_domain.TaskFilter[]> DeleteEmailDomainDomainAccountAccountNameFilterNameAsync(string accountName, string domain, string name) {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}
        public Task<_email_domain.Filter> GetEmailDomainDomainAccountAccountNameFilterNameAsync(string accountName, string domain, string name) {
            return _client.GetFromJsonAsync<_email_domain.Filter>(string.Format("/email/domain/{domain}/account/{accountName}/filter/{name}", accountName, domain, name));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/changeActivity
        public Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityAsync(string accountName, bool activity, string domain, string name) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/changePriority
        public Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityAsync(string accountName, string domain, string name, long priority) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule
        public Task<System.Int64[]> GetEmailDomainDomainAccountAccountNameFilterNameRuleAsync(string accountName, string domain, string name) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/account/{accountName}/filter/{name}/rule", accountName, domain, name));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule
        public Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameRuleAsync(string accountName, string domain, string header, string name, _domain.DomainFilterOperandEnum operand, string value) {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        public Task<_email_domain.TaskFilter[]> DeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdAsync(string accountName, string domain, long id, string name) {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        public Task<_email_domain.Rule> GetEmailDomainDomainAccountAccountNameFilterNameRuleIdAsync(string accountName, string domain, long id, string name) {
            return _client.GetFromJsonAsync<_email_domain.Rule>(string.Format("/email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}", accountName, domain, id, name));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate
        public Task<System.String[]> GetEmailDomainDomainAccountAccountNameMigrateAsync(string accountName, string domain, [System.Runtime.InteropServices.OptionalAttribute()] _email_domain.MigrationServiceType type) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/account/{accountName}/migrate?{queryParameters}", accountName, domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}
        public Task<_email_domain.MigrationService> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameAsync(string accountName, string destinationServiceName, string domain) {
            return _client.GetFromJsonAsync<_email_domain.MigrationService>(string.Format("/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}", accountName, destinationServiceName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress
        public Task<System.String[]> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressAsync(string accountName, string destinationServiceName, string domain, [System.Runtime.InteropServices.OptionalAttribute()] long quota) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/des" +
                        "tinationEmailAddress?{queryParameters}", accountName, destinationServiceName, domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}
        public Task<_email_domain.MigrationAccount> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain) {
            return _client.GetFromJsonAsync<_email_domain.MigrationAccount>(string.Format("/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/des" +
                        "tinationEmailAddress/{destinationEmailAddress}", accountName, destinationEmailAddress, destinationServiceName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/checkMigrate
        public Task<_email_domain.MigrationCheckStruct> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain) {
            return _client.GetFromJsonAsync<_email_domain.MigrationCheckStruct>(string.Format("/email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/des" +
                        "tinationEmailAddress/{destinationEmailAddress}/checkMigrate", accountName, destinationEmailAddress, destinationServiceName, domain));
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/migrate
        public Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateAsync(string accountName, string destinationEmailAddress, string destinationServiceName, string domain, string password) {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/updateUsage
        public System.Threading.Tasks.Task PostEmailDomainDomainAccountAccountNameUpdateUsageAsync(string accountName, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/usage
        public Task<_domain.DomainUsageAccountStruct> GetEmailDomainDomainAccountAccountNameUsageAsync(string accountName, string domain) {
            return _client.GetFromJsonAsync<_domain.DomainUsageAccountStruct>(string.Format("/email/domain/{domain}/account/{accountName}/usage", accountName, domain));
        }
        
        // Path: /email/domain/{domain}/acl
        public Task<System.String[]> GetEmailDomainDomainAclAsync(string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/acl", domain));
        }
        
        // Path: /email/domain/{domain}/acl
        public Task<_email_domain.Acl> PostEmailDomainDomainAclAsync(string accountId, string domain) {
            return default(Task<_email_domain.Acl>);
        }
        
        // Path: /email/domain/{domain}/acl/{accountId}
        public System.Threading.Tasks.Task DeleteEmailDomainDomainAclAccountIdAsync(string accountId, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/acl/{accountId}
        public Task<_email_domain.Acl> GetEmailDomainDomainAclAccountIdAsync(string accountId, string domain) {
            return _client.GetFromJsonAsync<_email_domain.Acl>(string.Format("/email/domain/{domain}/acl/{accountId}", accountId, domain));
        }
        
        // Path: /email/domain/{domain}/changeContact
        public Task<System.Int64[]> PostEmailDomainDomainChangeContactAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/changeDnsMXFilter
        public System.Threading.Tasks.Task PostEmailDomainDomainChangeDnsMXFilterAsync(string domain, _domain.DomainMXFilterEnum mxFilter, [System.Runtime.InteropServices.OptionalAttribute()] string customTarget, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/confirmTermination
        public Task<System.String> PostEmailDomainDomainConfirmTerminationAsync(string domain, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/dkim
        public Task<_email_domain.dkim_simplified> GetEmailDomainDomainDkimAsync(string domain) {
            return _client.GetFromJsonAsync<_email_domain.dkim_simplified>(string.Format("/email/domain/{domain}/dkim", domain));
        }
        
        // Path: /email/domain/{domain}/dkim/disable
        public Task<_email_domain.task> PutEmailDomainDomainDkimDisableAsync(string domain) {
            return default(Task<_email_domain.task>);
        }
        
        // Path: /email/domain/{domain}/dkim/enable
        public Task<_email_domain.task> PutEmailDomainDomainDkimEnableAsync(string domain) {
            return default(Task<_email_domain.task>);
        }
        
        // Path: /email/domain/{domain}/dnsMXFilter
        public Task<_domain.DomainMXFilterEnum> GetEmailDomainDomainDnsMXFilterAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<_domain.DomainMXFilterEnum>(string.Format("/email/domain/{domain}/dnsMXFilter?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/dnsMXRecords
        public Task<System.String[]> GetEmailDomainDomainDnsMXRecordsAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string subDomain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/dnsMXRecords?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/mailingList
        public Task<System.String[]> GetEmailDomainDomainMailingListAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string name) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/mailingList?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/mailingList
        public Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListAsync(string domain, _domain.DomainMlLanguageEnum language, string name, _domain.DomainMlOptionsStruct options, string ownerEmail, [System.Runtime.InteropServices.OptionalAttribute()] string replyTo) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        public Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameAsync(string domain, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        public Task<_email_domain.MailingList> GetEmailDomainDomainMailingListNameAsync(string domain, string name) {
            return _client.GetFromJsonAsync<_email_domain.MailingList>(string.Format("/email/domain/{domain}/mailingList/{name}", domain, name));
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        public System.Threading.Tasks.Task PutEmailDomainDomainMailingListNameAsync(_email_domain.MailingList body, string domain, string name) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/changeOptions
        public Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameChangeOptionsAsync(string domain, string name, _domain.DomainMlOptionsStruct options) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator
        public Task<System.String[]> GetEmailDomainDomainMailingListNameModeratorAsync(string domain, string name, [System.Runtime.InteropServices.OptionalAttribute()] string email) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/mailingList/{name}/moderator?{queryParameters}", domain, name, queryParameters));
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator
        public Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameModeratorAsync(string domain, string email, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator/{email}
        public Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameModeratorEmailAsync(string domain, string email, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator/{email}
        public Task<_email_domain.Moderator> GetEmailDomainDomainMailingListNameModeratorEmailAsync(string domain, string email, string name) {
            return _client.GetFromJsonAsync<_email_domain.Moderator>(string.Format("/email/domain/{domain}/mailingList/{name}/moderator/{email}", domain, email, name));
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/sendListByEmail
        public Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameSendListByEmailAsync(string domain, string email, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber
        public Task<System.String[]> GetEmailDomainDomainMailingListNameSubscriberAsync(string domain, string name, [System.Runtime.InteropServices.OptionalAttribute()] string email) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/mailingList/{name}/subscriber?{queryParameters}", domain, name, queryParameters));
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber
        public Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameSubscriberAsync(string domain, string email, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber/{email}
        public Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameSubscriberEmailAsync(string domain, string email, string name) {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber/{email}
        public Task<_email_domain.Subscriber> GetEmailDomainDomainMailingListNameSubscriberEmailAsync(string domain, string email, string name) {
            return _client.GetFromJsonAsync<_email_domain.Subscriber>(string.Format("/email/domain/{domain}/mailingList/{name}/subscriber/{email}", domain, email, name));
        }
        
        // Path: /email/domain/{domain}/migrateDelegationV3toV6
        public System.Threading.Tasks.Task PostEmailDomainDomainMigrateDelegationV3toV6Async(string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/quota
        public Task<_domain.DomainQuota> GetEmailDomainDomainQuotaAsync(string domain) {
            return _client.GetFromJsonAsync<_domain.DomainQuota>(string.Format("/email/domain/{domain}/quota", domain));
        }
        
        // Path: /email/domain/{domain}/recommendedDNSRecords
        public Task<_domain_zone.Record[]> GetEmailDomainDomainRecommendedDNSRecordsAsync(string domain) {
            return _client.GetFromJsonAsync<_domain_zone.Record[]>(string.Format("/email/domain/{domain}/recommendedDNSRecords", domain));
        }
        
        // Path: /email/domain/{domain}/redirection
        public Task<System.String[]> GetEmailDomainDomainRedirectionAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string from, [System.Runtime.InteropServices.OptionalAttribute()] string to) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/redirection?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/redirection
        public Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainRedirectionAsync(string domain, _email_domain.RedirectionCreation body) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/redirection/{id}
        public Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDomainRedirectionIdAsync(string domain, string id) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/redirection/{id}
        public Task<_email_domain.RedirectionGlobal> GetEmailDomainDomainRedirectionIdAsync(string domain, string id) {
            return _client.GetFromJsonAsync<_email_domain.RedirectionGlobal>(string.Format("/email/domain/{domain}/redirection/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/redirection/{id}/changeRedirection
        public Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainRedirectionIdChangeRedirectionAsync(string domain, _email_domain.RedirectionChangeRedirectionCreation body, string id) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder
        public Task<System.String[]> GetEmailDomainDomainResponderAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string account) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/responder?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/responder
        public Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainResponderAsync(string account, string content, bool copy, string domain, [System.Runtime.InteropServices.OptionalAttribute()] string copyTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime to) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        public Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDomainResponderAccountAsync(string account, string domain) {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        public Task<_email_domain.Responder> GetEmailDomainDomainResponderAccountAsync(string account, string domain) {
            return _client.GetFromJsonAsync<_email_domain.Responder>(string.Format("/email/domain/{domain}/responder/{account}", account, domain));
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        public System.Threading.Tasks.Task PutEmailDomainDomainResponderAccountAsync(_email_domain.Responder body, string account, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/serviceInfos
        public Task<_services.Service> GetEmailDomainDomainServiceInfosAsync(string domain) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/email/domain/{domain}/serviceInfos", domain));
        }
        
        // Path: /email/domain/{domain}/serviceInfos
        public System.Threading.Tasks.Task PutEmailDomainDomainServiceInfosAsync(_services.Service body, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /email/domain/{domain}/summary
        public Task<_domain.DomainSummary> GetEmailDomainDomainSummaryAsync(string domain) {
            return _client.GetFromJsonAsync<_domain.DomainSummary>(string.Format("/email/domain/{domain}/summary", domain));
        }
        
        // Path: /email/domain/{domain}/task/account
        public Task<System.Int64[]> GetEmailDomainDomainTaskAccountAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string name) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/task/account?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/task/account/{id}
        public Task<_email_domain.TaskPop> GetEmailDomainDomainTaskAccountIdAsync(string domain, long id) {
            return _client.GetFromJsonAsync<_email_domain.TaskPop>(string.Format("/email/domain/{domain}/task/account/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/task/all
        public Task<System.Int64[]> GetEmailDomainDomainTaskAllAsync(string domain) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/task/all", domain));
        }
        
        // Path: /email/domain/{domain}/task/all/{id}
        public Task<_email_domain.task> GetEmailDomainDomainTaskAllIdAsync(string domain, long id) {
            return _client.GetFromJsonAsync<_email_domain.task>(string.Format("/email/domain/{domain}/task/all/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/task/filter
        public Task<System.Int64[]> GetEmailDomainDomainTaskFilterAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string account) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/task/filter?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/task/filter/{id}
        public Task<_email_domain.TaskFilter> GetEmailDomainDomainTaskFilterIdAsync(string domain, long id) {
            return _client.GetFromJsonAsync<_email_domain.TaskFilter>(string.Format("/email/domain/{domain}/task/filter/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/task/mailinglist
        public Task<System.Int64[]> GetEmailDomainDomainTaskMailinglistAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string account) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/task/mailinglist?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/task/mailinglist/{id}
        public Task<_email_domain.TaskMl> GetEmailDomainDomainTaskMailinglistIdAsync(string domain, long id) {
            return _client.GetFromJsonAsync<_email_domain.TaskMl>(string.Format("/email/domain/{domain}/task/mailinglist/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/task/redirection
        public Task<System.String[]> GetEmailDomainDomainTaskRedirectionAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string account) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/domain/{domain}/task/redirection?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/task/redirection/{id}
        public Task<_email_domain.TaskSpecialAccount> GetEmailDomainDomainTaskRedirectionIdAsync(string domain, string id) {
            return _client.GetFromJsonAsync<_email_domain.TaskSpecialAccount>(string.Format("/email/domain/{domain}/task/redirection/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/task/responder
        public Task<System.Int64[]> GetEmailDomainDomainTaskResponderAsync(string domain, [System.Runtime.InteropServices.OptionalAttribute()] string account) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/domain/{domain}/task/responder?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /email/domain/{domain}/task/responder/{id}
        public Task<_email_domain.TaskSpecialAccount> GetEmailDomainDomainTaskResponderIdAsync(string domain, long id) {
            return _client.GetFromJsonAsync<_email_domain.TaskSpecialAccount>(string.Format("/email/domain/{domain}/task/responder/{id}", domain, id));
        }
        
        // Path: /email/domain/{domain}/terminate
        public Task<System.String> PostEmailDomainDomainTerminateAsync(string domain) {
            return default(Task<System.String>);
        }
        
        // Path: /email/exchange
        public Task<System.String[]> GetEmailExchangeAsync() {
            return _client.GetFromJsonAsync<string[]>("/email/exchange");
        }
        
        // Path: /email/exchange/{organizationName}/service
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceAsync(string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service?{queryParameters}", organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}
        public Task<_email_exchange.ExchangeServiceWithIAM> GetEmailExchangeOrganizationNameServiceExchangeServiceAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.ExchangeServiceWithIAM>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceAsync(_email_exchange.ExchangeService body, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhLicenceEnum accountLicense, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account?{queryParame" +
                        "ters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(
                    string domain, 
                    string exchangeService, 
                    _email_exchange.OvhLicenceEnum license, 
                    string login, 
                    string organizationName, 
                    string password, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string SAMAccountName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string company, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.CountryCodeEnum countryCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string displayName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string forwardingEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string initials, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string jobDepartment, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string jobTitle, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string lastName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool litigation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long litigationPeriod, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string mailSenderDisplay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.MailingFilterEnum[] mailingFilter, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string mobile, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string office, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool outlookLicense, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string postalCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long quota, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string region, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string sbrDestination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long sendConnectorId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.spamAndVirusConfiguration spamAndVirusConfiguration, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool storeCopyOfEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public Task<_email_exchange.Account> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.Account>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync(_email_exchange.Account body, string exchangeService, string organizationName, string primaryEmailAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/alias", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        public Task<_email_exchange.exchangeAccountAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountAlias>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/alias/{alias}", alias, exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.exchangeAccountArchive> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountArchive>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/archive", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(string exchangeService, string organizationName, string primaryEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] long quota) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync(_email_exchange.exchangeAccountArchive body, string exchangeService, string organizationName, string primaryEmailAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/changePassword
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordAsync(string exchangeService, string organizationName, string password, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        public Task<_email_exchange.exchangeAccountDiagnosis> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountDiagnosis>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/diagnostics", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync(string exchangeService, string organizationName, string password, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Export> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.Export>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/export", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        public Task<_email_exchange.ExportUrl> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.ExportUrl>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/exportURL", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/fullAccess", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountFullAccess> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountFullAccess>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/fullAccess/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        public Task<_email_exchange.OutlookUrl> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.OutlookUrl>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/outlookURL", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync(string exchangeService, _email_exchange.LanguageEnum language, string organizationName, string primaryEmailAddress, _email_exchange.OutlookVersionEnum version) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        public Task<_email_exchange.exchangeAccountProtocol> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountProtocol>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/protocol", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync(_email_exchange.exchangeAccountProtocol body, string exchangeService, string organizationName, string primaryEmailAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/sendAs", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync(long allowAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountSendAs>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/sendAs/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/sendOnBehalfTo", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeAccountSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountSendOnBehalfTo>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/sendOnBehalfTo/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/tasks", exchangeService, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks/{id}
        public Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdAsync(string exchangeService, long id, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.Task>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmai" +
                        "lAddress}/tasks/{id}", exchangeService, id, organizationName, primaryEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/terminate
        public Task<System.String> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateAsync(string exchangeService, string organizationName, string primaryEmailAddress) {
            return default(Task<System.String>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/activateSharepoint
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceActivateSharepointAsync(string exchangeService, string organizationName, string primaryEmailAddress, string subDomain) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync(string IP, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] bool HTTPS, [System.Runtime.InteropServices.OptionalAttribute()] bool IMAP, [System.Runtime.InteropServices.OptionalAttribute()] bool IMAPS, [System.Runtime.InteropServices.OptionalAttribute()] bool POP, [System.Runtime.InteropServices.OptionalAttribute()] bool POPS, [System.Runtime.InteropServices.OptionalAttribute()] bool SMTP, [System.Runtime.InteropServices.OptionalAttribute()] bool SMTPS, [System.Runtime.InteropServices.OptionalAttribute()] string displayName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(string exchangeService, string ip, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public Task<_email_exchange.exchangeServiceAuthorizedIp> GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(string exchangeService, string ip, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeServiceAuthorizedIp>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}", exchangeService, ip, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync(_email_exchange.exchangeServiceAuthorizedIp body, string exchangeService, string ip, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/changeHostname
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameAsync(string exchangeService, string hostname, string organizationName, bool useDnsAssist, [System.Runtime.InteropServices.OptionalAttribute()] string dcvEmail, [System.Runtime.InteropServices.OptionalAttribute()] bool useCname) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhCustomIsolationFieldEnum isolationField, [System.Runtime.InteropServices.OptionalAttribute()] string isolationValue, [System.Runtime.InteropServices.OptionalAttribute()] string name) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/customIsolation?{que" +
                        "ryParameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync(string exchangeService, _email_exchange.OvhCustomIsolationFieldEnum isolationField, string isolationValue, string name, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync(string exchangeService, string name, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        public Task<_email_exchange.exchangeCustomIsolation> GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync(string exchangeService, string name, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeCustomIsolation>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{nam" +
                        "e}", exchangeService, name, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/dcvEmails
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/dcvEmails", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string IMEI, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.DeviceActiveSyncStateEnum deviceState, [System.Runtime.InteropServices.OptionalAttribute()] string identity) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/device?{queryParamet" +
                        "ers}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        public Task<_email_exchange.exchangeServiceDevice> GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync(string exchangeService, string identity, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeServiceDevice>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}", exchangeService, identity, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync(_email_exchange.exchangeServiceDevice body, string exchangeService, string identity, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}/clearDevice
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceAsync(string exchangeService, string identity, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] bool main, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.ObjectStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain?{queryParamet" +
                        "ers}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainAsync(string exchangeService, string name, string organizationName, _email_exchange.DomainTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] bool autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureAutodiscover, [System.Runtime.InteropServices.OptionalAttribute()] bool configureDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureMx, [System.Runtime.InteropServices.OptionalAttribute()] bool configureSPF, [System.Runtime.InteropServices.OptionalAttribute()] bool main, [System.Runtime.InteropServices.OptionalAttribute()] string mxRelay, [System.Runtime.InteropServices.OptionalAttribute()] string organization2010, [System.Runtime.InteropServices.OptionalAttribute()] string sbrDefault, [System.Runtime.InteropServices.OptionalAttribute()] long sendConnectorIdDefault) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(string domainName, string exchangeService, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public Task<_email_exchange.Domain> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(string domainName, string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.Domain>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}", domainName, exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync(_email_exchange.Domain body, string domainName, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/changeDefaultSBR
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRAsync(string domainName, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string sbrDefault, [System.Runtime.InteropServices.OptionalAttribute()] long sendConnectorIdDefault) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string domainName, string exchangeService, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.disclaimer> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string domainName, string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.disclaimer>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/" +
                        "disclaimer", domainName, exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] bool outsideOnly) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync(_email_exchange.disclaimer body, string domainName, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimerAttribute
        public Task<_email_exchange.DisclaimerAttributeEnum[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeAsync(string domainName, string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.DisclaimerAttributeEnum[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/" +
                        "disclaimerAttribute", domainName, exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync(string domainName, string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/" +
                        "dkim", domainName, exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync(string domainName, string exchangeService, string organizationName, string selectorName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureDkim) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_exchange.dkim> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            return _client.GetFromJsonAsync<_email_exchange.dkim>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/" +
                        "dkim/{selectorName}", domainName, exchangeService, organizationName, selectorName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/disable
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/enable
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableAsync(string domainName, string exchangeService, string organizationName, string selectorName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkimSelector
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorAsync(string domainName, string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/" +
                        "dkimSelector", domainName, exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string lastName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/externalContact?{que" +
                        "ryParameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync(string exchangeService, string externalEmailAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] string initials, [System.Runtime.InteropServices.OptionalAttribute()] string lastName, [System.Runtime.InteropServices.OptionalAttribute()] string organization2010) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(string exchangeService, string externalEmailAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public Task<_email_exchange.exchangeExternalContact> GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(string exchangeService, string externalEmailAddress, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeExternalContact>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{ext" +
                        "ernalEmailAddress}", exchangeService, externalEmailAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync(_email_exchange.exchangeExternalContact body, string exchangeService, string externalEmailAddress, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.exchangeAccountImpersonation> GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeAccountImpersonation>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync(string exchangeService, string organizationName, string password) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser/changePassword
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordAsync(string exchangeService, string organizationName, string password) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonationPasswordPolicy
        public Task<_email_exchange.passwordPolicy> GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.passwordPolicy>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/impersonationPasswor" +
                        "dPolicy", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/license
        public Task<_email_exchange.DailyLicense[]> GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly fromDate, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OvhLicenceEnum license, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly toDate) {
            return _client.GetFromJsonAsync<_email_exchange.DailyLicense[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/license?{queryParame" +
                        "ters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] string mailingListAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList?{queryPa" +
                        "rameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync(_email_exchange.MailingListDepartRestrictionEnum departRestriction, string exchangeService, _email_exchange.MailingListJoinRestrictionEnum joinRestriction, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] long maxReceiveSize, [System.Runtime.InteropServices.OptionalAttribute()] long maxSendSize, [System.Runtime.InteropServices.OptionalAttribute()] bool senderAuthentification) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public Task<_email_exchange.mailingList> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.mailingList>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync(_email_exchange.mailingList body, string exchangeService, string mailingListAddress, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/alias", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        public Task<_email_exchange.exchangeMailingListAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync(string alias, string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeMailingListAlias>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/alias/{alias}", alias, exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/manager/account", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        public Task<_email_exchange.exchangeDistributionGroupManager> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync(string exchangeService, string mailingListAddress, long managerAccountId, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeDistributionGroupManager>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/manager/account/{managerAccountId}", exchangeService, mailingListAddress, managerAccountId, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/member/account", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync(string exchangeService, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] long memberAccountId, [System.Runtime.InteropServices.OptionalAttribute()] long memberContactId) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync(string exchangeService, string mailingListAddress, long memberAccountId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        public Task<_email_exchange.exchangeDistributionGroupMember> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync(string exchangeService, string mailingListAddress, long memberAccountId, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeDistributionGroupMember>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/member/account/{memberAccountId}", exchangeService, mailingListAddress, memberAccountId, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/member/contact", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync(string exchangeService, string mailingListAddress, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] long memberAccountId, [System.Runtime.InteropServices.OptionalAttribute()] long memberContactId) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync(string exchangeService, string mailingListAddress, long memberContactId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        public Task<_email_exchange.exchangeDistributionGroupMember> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync(string exchangeService, string mailingListAddress, long memberContactId, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeDistributionGroupMember>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/member/contact/{memberContactId}", exchangeService, mailingListAddress, memberContactId, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/sendAs", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync(long allowAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeDistributionGroupSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeDistributionGroupSendAs>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/sendAs/{allowedAccountId}", allowedAccountId, exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync(string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/sendOnBehalfTo", exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeDistributionGroupSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string mailingListAddress, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeDistributionGroupSendOnBehalfTo>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailing" +
                        "ListAddress}/sendOnBehalfTo/{allowedAccountId}", allowedAccountId, exchangeService, mailingListAddress, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability
        public Task<_email_exchange.OutlookVersions[]> GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.LanguageEnum outlookLanguage, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.OutlookVersionEnum outlookVersion) {
            return _client.GetFromJsonAsync<_email_exchange.OutlookVersions[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability?" +
                        "{queryParameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol
        public Task<_email_exchange.exchangeServiceProtocol> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeServiceProtocol>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/protocol", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync(_email_exchange.exchangeServiceProtocol body, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncM" +
                        "ailNotification", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        public Task<_email_exchange.exchangeServiceActiveSyncNotification> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync(string exchangeService, long notifiedAccountId, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeServiceActiveSyncNotification>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncM" +
                        "ailNotification/{notifiedAccountId}", exchangeService, notifiedAccountId, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string path) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/publicFolder?{queryP" +
                        "arameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync(string exchangeService, string organizationName, string path, long quota, _email_exchange.PublicFolderTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.PublicFolderRightTypeEnum anonymousPermission, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.PublicFolderRightTypeEnum defaultPermission) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(string exchangeService, string organizationName, string path) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public Task<_email_exchange.publicFolder> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(string exchangeService, string organizationName, string path) {
            return _client.GetFromJsonAsync<_email_exchange.publicFolder>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}", exchangeService, organizationName, path));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync(_email_exchange.publicFolder body, string exchangeService, string organizationName, string path) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync(string exchangeService, string organizationName, string path) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/" +
                        "permission", exchangeService, organizationName, path));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync(_email_exchange.PublicFolderRightTypeEnum accessRights, long allowedAccountId, string exchangeService, string organizationName, string path) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string path) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public Task<_email_exchange.exchangePublicFolderPermission> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string path) {
            return _client.GetFromJsonAsync<_email_exchange.exchangePublicFolderPermission>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/" +
                        "permission/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, path));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync(_email_exchange.exchangePublicFolderPermission body, long allowedAccountId, string exchangeService, string organizationName, string path) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota
        public Task<_email_exchange.PublicFolderQuota> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.PublicFolderQuota>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/renewSSL
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string dcv, [System.Runtime.InteropServices.OptionalAttribute()] bool useCname, [System.Runtime.InteropServices.OptionalAttribute()] bool useDnsAssist) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] string resourceEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount?{que" +
                        "ryParameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync(long capacity, string exchangeService, string organizationName, string resourceEmailAddress, _email_exchange.ResourceTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] bool addOrganizerToSubject, [System.Runtime.InteropServices.OptionalAttribute()] bool allowConflict, [System.Runtime.InteropServices.OptionalAttribute()] long bookingWindow, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] bool deleteComments, [System.Runtime.InteropServices.OptionalAttribute()] bool deleteSubject, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string location, [System.Runtime.InteropServices.OptionalAttribute()] long maximumDuration, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.ShowMeetingDetailsEnum showMeetingDetails) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public Task<_email_exchange.resourceAccount> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.resourceAccount>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{res" +
                        "ourceEmailAddress}", exchangeService, organizationName, resourceEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync(_email_exchange.resourceAccount body, string exchangeService, string organizationName, string resourceEmailAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync(string exchangeService, string organizationName, string resourceEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{res" +
                        "ourceEmailAddress}/delegate", exchangeService, organizationName, resourceEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        public Task<_email_exchange.exchangeResourceAccountDelegate> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string resourceEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeResourceAccountDelegate>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{res" +
                        "ourceEmailAddress}/delegate/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, resourceEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sendConnector", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync(string displayName, string exchangeService, string organizationName, string smartHost, [System.Runtime.InteropServices.OptionalAttribute()] long maxSendSize, [System.Runtime.InteropServices.OptionalAttribute()] string password, [System.Runtime.InteropServices.OptionalAttribute()] long port, [System.Runtime.InteropServices.OptionalAttribute()] bool requireTLS, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.smartHostAuthMechanismEnum smartHostAuthMechanism, [System.Runtime.InteropServices.OptionalAttribute()] string user) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(string exchangeService, long id, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public Task<_email_exchange.sendConnector> GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(string exchangeService, long id, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.sendConnector>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}", exchangeService, id, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync(_email_exchange.sendConnector body, string exchangeService, long id, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}/changeAuthentication
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationAsync(string exchangeService, long id, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string password, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.smartHostAuthMechanismEnum smartHostAuthMechanism, [System.Runtime.InteropServices.OptionalAttribute()] string user) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/server
        public Task<_email_exchange.Server> GetEmailExchangeOrganizationNameServiceExchangeServiceServerAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.Server>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/server", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/server
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceServerAsync(_email_exchange.Server body, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        public Task<_services.Service> GetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync(_services.Service body, string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync(string exchangeService, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] string sharedEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount?{query" +
                        "Parameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync(string exchangeService, string organizationName, long quota, string sharedEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] string initials, [System.Runtime.InteropServices.OptionalAttribute()] string lastName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.MailingFilterEnum[] mailingFilter) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public Task<_email_exchange.sharedAccount> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.sharedAccount>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        public System.Threading.Tasks.Task PutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync(_email_exchange.sharedAccount body, string exchangeService, string organizationName, string sharedEmailAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        public Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/alias", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        public Task<_email_exchange.exchangeSharedAccountAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync(string alias, string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeSharedAccountAlias>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/alias/{alias}", alias, exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/fullAccess", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountFullAccess> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeSharedAccountFullAccess>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/fullAccess/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/sendAs", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync(long allowAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeSharedAccountSendAs>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/sendAs/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/sendOnBehalfTo", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync(long allowAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_exchange.exchangeSharedAccountSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.exchangeSharedAccountSendOnBehalfTo>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/sendOnBehalfTo/{allowedAccountId}", allowedAccountId, exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksAsync(string exchangeService, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/tasks", exchangeService, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks/{id}
        public Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdAsync(string exchangeService, long id, string organizationName, string sharedEmailAddress) {
            return _client.GetFromJsonAsync<_email_exchange.Task>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{share" +
                        "dEmailAddress}/tasks/{id}", exchangeService, id, organizationName, sharedEmailAddress));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota
        public Task<_email_exchange.SharedAccountQuota> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.SharedAccountQuota>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/task
        public Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceTaskAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/task", exchangeService, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/task/{id}
        public Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdAsync(string exchangeService, long id, string organizationName) {
            return _client.GetFromJsonAsync<_email_exchange.Task>(string.Format("/email/exchange/{organizationName}/service/{exchangeService}/task/{id}", exchangeService, id, organizationName));
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/updateDeviceList
        public Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListAsync(string exchangeService, string organizationName) {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/updateFlagsOnAllAccounts
        public System.Threading.Tasks.Task PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsAsync(string exchangeService, string organizationName) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan
        public Task<System.String[]> GetEmailMxplanAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/mxplan?{queryParameters}", queryParameters));
        }
        
        // Path: /email/mxplan/{service}
        public Task<_email_mxplan.ServiceWithIAM> GetEmailMxplanServiceAsync(string service) {
            return _client.GetFromJsonAsync<_email_mxplan.ServiceWithIAM>(string.Format("/email/mxplan/{service}", service));
        }
        
        // Path: /email/mxplan/{service}
        public System.Threading.Tasks.Task PutEmailMxplanServiceAsync(_email_mxplan.Service body, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan/{service}/account
        public Task<System.String[]> GetEmailMxplanServiceAccountAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/mxplan/{service}/account?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailAsync(string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        public Task<_email_mxplan.Account> GetEmailMxplanServiceAccountEmailAsync(string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.Account>(string.Format("/email/mxplan/{service}/account/{email}", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        public System.Threading.Tasks.Task PutEmailMxplanServiceAccountEmailAsync(_email_mxplan.Account body, string email, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias
        public Task<System.String[]> GetEmailMxplanServiceAccountEmailAliasAsync(string email, string service) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/mxplan/{service}/account/{email}/alias", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailAliasAsync(string alias, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias/{alias}
        public Task<_email_mxplan.AccountAlias> GetEmailMxplanServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.AccountAlias>(string.Format("/email/mxplan/{service}/account/{email}/alias/{alias}", alias, email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/capabilities
        public Task<_email_mxplan.accountCapabilities> GetEmailMxplanServiceAccountEmailCapabilitiesAsync(string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.accountCapabilities>(string.Format("/email/mxplan/{service}/account/{email}/capabilities", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/changePassword
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailChangePasswordAsync(string email, string password, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/diagnostic
        public Task<_email_mxplan.AccountDiagnosis> GetEmailMxplanServiceAccountEmailDiagnosticAsync(string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.AccountDiagnosis>(string.Format("/email/mxplan/{service}/account/{email}/diagnostic", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/diagnostic
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailDiagnosticAsync(string email, string password, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess
        public Task<System.Int64[]> GetEmailMxplanServiceAccountEmailFullAccessAsync(string email, string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/mxplan/{service}/account/{email}/fullAccess", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailFullAccessAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_mxplan.AccountFullAccess> GetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.AccountFullAccess>(string.Format("/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}", allowedAccountId, email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs
        public Task<System.Int64[]> GetEmailMxplanServiceAccountEmailSendAsAsync(string email, string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/mxplan/{service}/account/{email}/sendAs", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailSendAsAsync(long allowAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_mxplan.AccountSendAs> GetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.AccountSendAs>(string.Format("/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}", allowedAccountId, email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo
        public Task<System.Int64[]> GetEmailMxplanServiceAccountEmailSendOnBehalfToAsync(string email, string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/mxplan/{service}/account/{email}/sendOnBehalfTo", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo
        public Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailSendOnBehalfToAsync(long allowAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_mxplan.AccountSendOnBehalfTo> GetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.AccountSendOnBehalfTo>(string.Format("/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}", allowedAccountId, email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/task
        public Task<System.Int64[]> GetEmailMxplanServiceAccountEmailTaskAsync(string email, string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/mxplan/{service}/account/{email}/task", email, service));
        }
        
        // Path: /email/mxplan/{service}/account/{email}/task/{id}
        public Task<_email_pro.Task> GetEmailMxplanServiceAccountEmailTaskIdAsync(string email, long id, string service) {
            return _client.GetFromJsonAsync<_email_pro.Task>(string.Format("/email/mxplan/{service}/account/{email}/task/{id}", email, id, service));
        }
        
        // Path: /email/mxplan/{service}/domain
        public Task<System.String[]> GetEmailMxplanServiceDomainAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] _email_pro.ObjectStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/mxplan/{service}/domain?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}
        public Task<_email_mxplan.Domain> GetEmailMxplanServiceDomainDomainNameAsync(string domainName, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.Domain>(string.Format("/email/mxplan/{service}/domain/{domainName}", domainName, service));
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}
        public System.Threading.Tasks.Task PutEmailMxplanServiceDomainDomainNameAsync(_email_mxplan.Domain body, string domainName, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> DeleteEmailMxplanServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.disclaimer> GetEmailMxplanServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            return _client.GetFromJsonAsync<_email_pro.disclaimer>(string.Format("/email/mxplan/{service}/domain/{domainName}/disclaimer", domainName, service));
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> PostEmailMxplanServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string service, [System.Runtime.InteropServices.OptionalAttribute()] bool outsideOnly) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        public System.Threading.Tasks.Task PutEmailMxplanServiceDomainDomainNameDisclaimerAsync(_email_pro.disclaimer body, string domainName, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimerAttribute
        public Task<_email_pro.DisclaimerAttributeEnum[]> GetEmailMxplanServiceDomainDomainNameDisclaimerAttributeAsync(string domainName, string service) {
            return _client.GetFromJsonAsync<_email_pro.DisclaimerAttributeEnum[]>(string.Format("/email/mxplan/{service}/domain/{domainName}/disclaimerAttribute", domainName, service));
        }
        
        // Path: /email/mxplan/{service}/externalContact
        public Task<System.String[]> GetEmailMxplanServiceExternalContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string lastName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/mxplan/{service}/externalContact?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/mxplan/{service}/externalContact
        public Task<_email_pro.Task> PostEmailMxplanServiceExternalContactAsync(string externalEmailAddress, string service, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] string initials, [System.Runtime.InteropServices.OptionalAttribute()] string lastName) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.Task> DeleteEmailMxplanServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        public Task<_email_mxplan.ExternalContact> GetEmailMxplanServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            return _client.GetFromJsonAsync<_email_mxplan.ExternalContact>(string.Format("/email/mxplan/{service}/externalContact/{externalEmailAddress}", externalEmailAddress, service));
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        public System.Threading.Tasks.Task PutEmailMxplanServiceExternalContactExternalEmailAddressAsync(_email_mxplan.ExternalContact body, string externalEmailAddress, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/mxplan/{service}/server
        public Task<_email_mxplan.Server> GetEmailMxplanServiceServerAsync(string service) {
            return _client.GetFromJsonAsync<_email_mxplan.Server>(string.Format("/email/mxplan/{service}/server", service));
        }
        
        // Path: /email/mxplan/{service}/task
        public Task<System.Int64[]> GetEmailMxplanServiceTaskAsync(string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/mxplan/{service}/task", service));
        }
        
        // Path: /email/mxplan/{service}/task/{id}
        public Task<_email_pro.Task> GetEmailMxplanServiceTaskIdAsync(long id, string service) {
            return _client.GetFromJsonAsync<_email_pro.Task>(string.Format("/email/mxplan/{service}/task/{id}", id, service));
        }
        
        // Path: /email/mxplan/{service}/updateFlagsOnAllAccounts
        public System.Threading.Tasks.Task PostEmailMxplanServiceUpdateFlagsOnAllAccountsAsync(string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro
        public Task<System.String[]> GetEmailProAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro?{queryParameters}", queryParameters));
        }
        
        // Path: /email/pro/{service}
        public Task<_email_pro.ServiceNativeWithIAM> GetEmailProServiceAsync(string service) {
            return _client.GetFromJsonAsync<_email_pro.ServiceNativeWithIAM>(string.Format("/email/pro/{service}", service));
        }
        
        // Path: /email/pro/{service}
        public System.Threading.Tasks.Task PutEmailProServiceAsync(_email_pro.Service body, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/account
        public Task<System.String[]> GetEmailProServiceAccountAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/account?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/pro/{service}/account/{email}
        public Task<_email_pro.AccountNative> GetEmailProServiceAccountEmailAsync(string service, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountNative>(string.Format("/email/pro/{service}/account/{email}", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}
        public Task<_email_pro.Task> DeleteEmailProServiceAccountEmailAsync(string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}
        public System.Threading.Tasks.Task PutEmailProServiceAccountEmailAsync(_email_pro.Account body, string email, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/account/{email}/alias
        public Task<System.String[]> GetEmailProServiceAccountEmailAliasAsync(string service, string email) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/account/{email}/alias", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/alias
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailAliasAsync(string alias, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.AccountAlias> GetEmailProServiceAccountEmailAliasAliasAsync(string service, string alias, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountAlias>(string.Format("/email/pro/{service}/account/{email}/alias/{alias}", service, alias, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/alias/{alias}
        public Task<_email_pro.Task> DeleteEmailProServiceAccountEmailAliasAliasAsync(string alias, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/changePassword
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailChangePasswordAsync(string email, string password, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/diagnostics
        public Task<_email_pro.AccountDiagnosis> GetEmailProServiceAccountEmailDiagnosticsAsync(string service, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountDiagnosis>(string.Format("/email/pro/{service}/account/{email}/diagnostics", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/diagnostics
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailDiagnosticsAsync(string email, string password, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess
        public Task<System.Int64[]> GetEmailProServiceAccountEmailFullAccessAsync(string service, string email) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/pro/{service}/account/{email}/fullAccess", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailFullAccessAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.AccountFullAccess> GetEmailProServiceAccountEmailFullAccessAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountFullAccess>(string.Format("/email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}", service, allowedAccountId, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs
        public Task<System.Int64[]> GetEmailProServiceAccountEmailSendAsAsync(string service, string email) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/pro/{service}/account/{email}/sendAs", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailSendAsAsync(long allowAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.AccountSendAs> GetEmailProServiceAccountEmailSendAsAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountSendAs>(string.Format("/email/pro/{service}/account/{email}/sendAs/{allowedAccountId}", service, allowedAccountId, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailProServiceAccountEmailSendAsAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo
        public Task<System.Int64[]> GetEmailProServiceAccountEmailSendOnBehalfToAsync(string service, string email) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/pro/{service}/account/{email}/sendOnBehalfTo", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo
        public Task<_email_pro.Task> PostEmailProServiceAccountEmailSendOnBehalfToAsync(long allowAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.AccountSendOnBehalfTo> GetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(string service, long allowedAccountId, string email) {
            return _client.GetFromJsonAsync<_email_pro.AccountSendOnBehalfTo>(string.Format("/email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}", service, allowedAccountId, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        public Task<_email_pro.Task> DeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync(long allowedAccountId, string email, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/tasks
        public Task<System.Int64[]> GetEmailProServiceAccountEmailTasksAsync(string service, string email) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/pro/{service}/account/{email}/tasks", service, email));
        }
        
        // Path: /email/pro/{service}/account/{email}/tasks/{id}
        public Task<_email_pro.Task> GetEmailProServiceAccountEmailTasksIdAsync(string service, string email, long id) {
            return _client.GetFromJsonAsync<_email_pro.Task>(string.Format("/email/pro/{service}/account/{email}/tasks/{id}", service, email, id));
        }
        
        // Path: /email/pro/{service}/account/{email}/terminate
        public Task<System.String> PostEmailProServiceAccountEmailTerminateAsync(string email, string service) {
            return default(Task<System.String>);
        }
        
        // Path: /email/pro/{service}/billingMigrated
        public Task<System.Boolean> GetEmailProServiceBillingMigratedAsync(string service) {
            return _client.GetFromJsonAsync<bool>(string.Format("/email/pro/{service}/billingMigrated", service));
        }
        
        // Path: /email/pro/{service}/billingPlan
        public Task<System.String> GetEmailProServiceBillingPlanAsync(string service) {
            return _client.GetFromJsonAsync<string>(string.Format("/email/pro/{service}/billingPlan", service));
        }
        
        // Path: /email/pro/{service}/changeContact
        public Task<System.Int64[]> PostEmailProServiceChangeContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/domain
        public Task<System.String[]> GetEmailProServiceDomainAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] _email_pro.ObjectStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/domain?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/pro/{service}/domain
        public Task<_email_pro.Task> PostEmailProServiceDomainAsync(string name, string service, _email_pro.DomainTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] bool autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureAutodiscover, [System.Runtime.InteropServices.OptionalAttribute()] bool configureDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureMx, [System.Runtime.InteropServices.OptionalAttribute()] bool configureSPF, [System.Runtime.InteropServices.OptionalAttribute()] string mxRelay) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        public Task<_email_pro.DomainNative> GetEmailProServiceDomainDomainNameAsync(string service, string domainName) {
            return _client.GetFromJsonAsync<_email_pro.DomainNative>(string.Format("/email/pro/{service}/domain/{domainName}", service, domainName));
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        public Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameAsync(string domainName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        public System.Threading.Tasks.Task PutEmailProServiceDomainDomainNameAsync(_email_pro.Domain body, string domainName, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.disclaimerNative> GetEmailProServiceDomainDomainNameDisclaimerAsync(string service, string domainName) {
            return _client.GetFromJsonAsync<_email_pro.disclaimerNative>(string.Format("/email/pro/{service}/domain/{domainName}/disclaimer", service, domainName));
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameDisclaimerAsync(string domainName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        public Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDisclaimerAsync(string content, string domainName, string service, [System.Runtime.InteropServices.OptionalAttribute()] bool outsideOnly) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        public System.Threading.Tasks.Task PutEmailProServiceDomainDomainNameDisclaimerAsync(_email_pro.disclaimer body, string domainName, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimerAttribute
        public Task<_email_pro.DisclaimerAttributeEnum[]> GetEmailProServiceDomainDomainNameDisclaimerAttributeAsync(string service, string domainName) {
            return _client.GetFromJsonAsync<_email_pro.DisclaimerAttributeEnum[]>(string.Format("/email/pro/{service}/domain/{domainName}/disclaimerAttribute", service, domainName));
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim
        public Task<System.String[]> GetEmailProServiceDomainDomainNameDkimAsync(string service, string domainName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/domain/{domainName}/dkim", service, domainName));
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim
        public Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimAsync(string domainName, string selectorName, string service, [System.Runtime.InteropServices.OptionalAttribute()] bool autoEnableDKIM, [System.Runtime.InteropServices.OptionalAttribute()] bool configureDkim) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_pro.Dkim> GetEmailProServiceDomainDomainNameDkimSelectorNameAsync(string service, string domainName, string selectorName) {
            return _client.GetFromJsonAsync<_email_pro.Dkim>(string.Format("/email/pro/{service}/domain/{domainName}/dkim/{selectorName}", service, domainName, selectorName));
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        public Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameDkimSelectorNameAsync(string domainName, string selectorName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}/disable
        public Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimSelectorNameDisableAsync(string domainName, string selectorName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}/enable
        public Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimSelectorNameEnableAsync(string domainName, string selectorName, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkimSelector
        public Task<System.String[]> GetEmailProServiceDomainDomainNameDkimSelectorAsync(string domainName, string service) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/domain/{domainName}/dkimSelector", domainName, service));
        }
        
        // Path: /email/pro/{service}/externalContact
        public Task<System.String[]> GetEmailProServiceExternalContactAsync(string service, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string externalEmailAddress, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string lastName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/email/pro/{service}/externalContact?{queryParameters}", service, queryParameters));
        }
        
        // Path: /email/pro/{service}/externalContact
        public Task<_email_pro.Task> PostEmailProServiceExternalContactAsync(string externalEmailAddress, string service, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] bool hiddenFromGAL, [System.Runtime.InteropServices.OptionalAttribute()] string initials, [System.Runtime.InteropServices.OptionalAttribute()] string lastName) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.ExternalContactNative> GetEmailProServiceExternalContactExternalEmailAddressAsync(string service, string externalEmailAddress) {
            return _client.GetFromJsonAsync<_email_pro.ExternalContactNative>(string.Format("/email/pro/{service}/externalContact/{externalEmailAddress}", service, externalEmailAddress));
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        public Task<_email_pro.Task> DeleteEmailProServiceExternalContactExternalEmailAddressAsync(string externalEmailAddress, string service) {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        public System.Threading.Tasks.Task PutEmailProServiceExternalContactExternalEmailAddressAsync(_email_pro.ExternalContact body, string externalEmailAddress, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/server
        public Task<_email_pro.Server> GetEmailProServiceServerAsync(string service) {
            return _client.GetFromJsonAsync<_email_pro.Server>(string.Format("/email/pro/{service}/server", service));
        }
        
        // Path: /email/pro/{service}/serviceInfos
        public Task<_services.Service> GetEmailProServiceServiceInfosAsync(string service) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/email/pro/{service}/serviceInfos", service));
        }
        
        // Path: /email/pro/{service}/serviceInfos
        public System.Threading.Tasks.Task PutEmailProServiceServiceInfosAsync(_services.Service body, string service) {
            return Task.CompletedTask;
        }
        
        // Path: /email/pro/{service}/task
        public Task<System.Int64[]> GetEmailProServiceTaskAsync(string service) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/email/pro/{service}/task", service));
        }
        
        // Path: /email/pro/{service}/task/{id}
        public Task<_email_pro.Task> GetEmailProServiceTaskIdAsync(string service, long id) {
            return _client.GetFromJsonAsync<_email_pro.Task>(string.Format("/email/pro/{service}/task/{id}", service, id));
        }
        
        // Path: /email/pro/{service}/updateFlagsOnAllAccounts
        public System.Threading.Tasks.Task PostEmailProServiceUpdateFlagsOnAllAccountsAsync(string service) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax
        public Task<System.String[]> GetFreefaxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/freefax?{queryParameters}", queryParameters));
        }
        
        // Path: /freefax/credits
        public Task<_freefax.BalanceInformations> GetFreefaxCreditsAsync() {
            return _client.GetFromJsonAsync<_freefax.BalanceInformations>("/freefax/credits");
        }
        
        // Path: /freefax/{serviceName}
        public Task<_freefax.FreefaxPropertiesWithIAM> GetFreefaxServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_freefax.FreefaxPropertiesWithIAM>(string.Format("/freefax/{serviceName}", serviceName));
        }
        
        // Path: /freefax/{serviceName}
        public System.Threading.Tasks.Task PutFreefaxServiceNameAsync(_freefax.FreefaxProperties body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/changePassword
        public Task<System.String> PostFreefaxServiceNameChangePasswordAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /freefax/{serviceName}/directory
        public Task<_telephony.DirectoryInfo> GetFreefaxServiceNameDirectoryAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryInfo>(string.Format("/freefax/{serviceName}/directory", serviceName));
        }
        
        // Path: /freefax/{serviceName}/directory
        public System.Threading.Tasks.Task PutFreefaxServiceNameDirectoryAsync(_telephony.DirectoryInfo body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/directory/fetchEntrepriseInformations
        public Task<_telephony.EntrepriseNumberInformationsTask> PostFreefaxServiceNameDirectoryFetchEntrepriseInformationsAsync(_telephony.EntrepriseNumber body, string serviceName) {
            return default(Task<_telephony.EntrepriseNumberInformationsTask>);
        }
        
        // Path: /freefax/{serviceName}/directory/getDirectoryServiceCode
        public Task<_telephony.DirectoryHeadingPJ[]> GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeAsync(string apeCode, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryHeadingPJ[]>(string.Format("/freefax/{serviceName}/directory/getDirectoryServiceCode?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /freefax/{serviceName}/directory/getWayTypes
        public Task<_telephony.DirectoryWayType[]> GetFreefaxServiceNameDirectoryGetWayTypesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryWayType[]>(string.Format("/freefax/{serviceName}/directory/getWayTypes", serviceName));
        }
        
        // Path: /freefax/{serviceName}/mainService
        public Task<System.String> GetFreefaxServiceNameMainServiceAsync(string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/freefax/{serviceName}/mainService", serviceName));
        }
        
        // Path: /freefax/{serviceName}/serviceInfos
        public Task<_services.Service> GetFreefaxServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/freefax/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /freefax/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutFreefaxServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/voicemail
        public Task<_telephony.VoicemailProperties> GetFreefaxServiceNameVoicemailAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailProperties>(string.Format("/freefax/{serviceName}/voicemail", serviceName));
        }
        
        // Path: /freefax/{serviceName}/voicemail
        public System.Threading.Tasks.Task PutFreefaxServiceNameVoicemailAsync(_telephony.VoicemailProperties body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/voicemail/changePassword
        public System.Threading.Tasks.Task PostFreefaxServiceNameVoicemailChangePasswordAsync(_telephony_voicemail.ChangePassword body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/voicemail/changeRouting
        public System.Threading.Tasks.Task PostFreefaxServiceNameVoicemailChangeRoutingAsync(_telephony_voicemail.ChangeRouting body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /freefax/{serviceName}/voicemail/routing
        public Task<_telephony.VoicefaxRoutingEnum> GetFreefaxServiceNameVoicemailRoutingAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicefaxRoutingEnum>(string.Format("/freefax/{serviceName}/voicemail/routing", serviceName));
        }
        
        // Path: /freefax/{serviceName}/voicemail/voicemailNumbers
        public Task<_telephony.VoicemailNumbers> GetFreefaxServiceNameVoicemailVoicemailNumbersAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailNumbers>(string.Format("/freefax/{serviceName}/voicemail/voicemailNumbers", serviceName));
        }
        
        // Path: /horizonView
        public Task<System.String[]> GetHorizonViewAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/horizonView?{queryParameters}", queryParameters));
        }
        
        // Path: /horizonView/{serviceName}
        public Task<_horizonView.DatacenterWithIAM> GetHorizonViewServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.DatacenterWithIAM>(string.Format("/horizonView/{serviceName}", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/accessPoint
        public Task<System.Int64[]> GetHorizonViewServiceNameAccessPointAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/horizonView/{serviceName}/accessPoint", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/accessPoint
        public Task<_horizonView.Task[]> PostHorizonViewServiceNameAccessPointAsync(_horizonView.PoolType poolType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string privateBlock, [System.Runtime.InteropServices.OptionalAttribute()] long privateVlan, [System.Runtime.InteropServices.OptionalAttribute()] string vrouterPoolPublicIp) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}
        public Task<_horizonView.Task[]> DeleteHorizonViewServiceNameAccessPointAccessPointIdAsync(long accessPointId, string serviceName) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}
        public Task<_horizonView.Pool> GetHorizonViewServiceNameAccessPointAccessPointIdAsync(long accessPointId, string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.Pool>(string.Format("/horizonView/{serviceName}/accessPoint/{accessPointId}", accessPointId, serviceName));
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/changeSessionTimeout
        public Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutAsync(long accessPointId, long expiration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum onSingleAP) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        public Task<System.Int64[]> GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync(long accessPointId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork", accessPointId, serviceName));
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        public Task<_horizonView.Task[]> PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync(long accessPointId, string network, string serviceName) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.Task[]> DeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync(long accessPointId, long customerNetworkId, string serviceName) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.CustomerNetworkPool> GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync(long accessPointId, long customerNetworkId, string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.CustomerNetworkPool>(string.Format("/horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerN" +
                        "etworkId}", accessPointId, customerNetworkId, serviceName));
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/disableTwoFA
        public Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAAsync(long accessPointId, string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/disableWindowsUsernameOption
        public Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionAsync(long accessPointId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum onSingleAP) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/enableTwoFA
        public Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAAsync(long accessPointId, string radiusIp, string secret, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum onSingleAP) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/enableWindowsUsernameOption
        public Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionAsync(long accessPointId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.AccessPointTypeEnum onSingleAP) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/confirmTermination
        public Task<System.String> PostHorizonViewServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork
        public Task<System.Int64[]> GetHorizonViewServiceNameCustomerNetworkAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/horizonView/{serviceName}/customerNetwork", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork
        public Task<_horizonView.Task[]> PostHorizonViewServiceNameCustomerNetworkAsync(string name, string network, string serviceName) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.Task[]> DeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync(long customerNetworkId, string serviceName) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        public Task<_horizonView.CustomerNetwork> GetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync(long customerNetworkId, string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.CustomerNetwork>(string.Format("/horizonView/{serviceName}/customerNetwork/{customerNetworkId}", customerNetworkId, serviceName));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon
        public Task<_horizonView.DedicatedHorizon> GetHorizonViewServiceNameDedicatedHorizonAsync(string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.DedicatedHorizon>(string.Format("/horizonView/{serviceName}/dedicatedHorizon", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser
        public Task<System.String[]> GetHorizonViewServiceNameDedicatedHorizonCustomerUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/horizonView/{serviceName}/dedicatedHorizon/customerUser", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser
        public Task<_horizonView.Task[]> PostHorizonViewServiceNameDedicatedHorizonCustomerUserAsync(string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] string email, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        public Task<_horizonView.Task[]> DeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync(string serviceName, string username) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        public Task<_horizonView.CustomerUser> GetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync(string serviceName, string username) {
            return _client.GetFromJsonAsync<_horizonView.CustomerUser>(string.Format("/horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}", serviceName, username));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}/changePassword
        public Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordAsync(string serviceName, string username, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/disableStorageAccelerator
        public Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorAsync(string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/enableStorageAccelerator
        public Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorAsync(string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/task
        public Task<System.Int64[]> GetHorizonViewServiceNameDedicatedHorizonTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _horizonView.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/horizonView/{serviceName}/dedicatedHorizon/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/task/{taskId}
        public Task<_horizonView.Task> GetHorizonViewServiceNameDedicatedHorizonTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_horizonView.Task>(string.Format("/horizonView/{serviceName}/dedicatedHorizon/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user
        public Task<_horizonView.User> GetHorizonViewServiceNameDedicatedHorizonUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.User>(string.Format("/horizonView/{serviceName}/dedicatedHorizon/user", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user/changePassword
        public Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user/changeProperties
        public Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string email) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust
        public Task<System.Int64[]> GetHorizonViewServiceNameDomainTrustAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/horizonView/{serviceName}/domainTrust", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/domainTrust
        public Task<_horizonView.Task[]> PostHorizonViewServiceNameDomainTrustAsync(string activeDirectoryIP, string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string dns1, [System.Runtime.InteropServices.OptionalAttribute()] string dns2) {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}
        public Task<_horizonView.DomainTrust> GetHorizonViewServiceNameDomainTrustDomainTrustIdAsync(long domainTrustId, string serviceName) {
            return _client.GetFromJsonAsync<_horizonView.DomainTrust>(string.Format("/horizonView/{serviceName}/domainTrust/{domainTrustId}", domainTrustId, serviceName));
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addChildDomain
        public Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainAsync(string activeDirectoryIP, string domain, long domainTrustId, string passphrase, string serviceAccountPassword, string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainController
        public Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerAsync(string domain, string domainControllerIp, long domainTrustId, string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainUserOnComposer
        public Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerAsync(string domain, long domainTrustId, string password, string serviceName, string username) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/createTrust
        public Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustAsync(long domainTrustId, string passphrase, string serviceAccountPassword, string serviceName) {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/serviceInfos
        public Task<_services.Service> GetHorizonViewServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/horizonView/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /horizonView/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutHorizonViewServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /horizonView/{serviceName}/terminate
        public Task<System.String> PostHorizonViewServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase
        public Task<System.String[]> GetHostingPrivateDatabaseAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/privateDatabase/availableOrderCapacities
        public Task<_hosting_privateDatabase.availableOrderCapacities> GetHostingPrivateDatabaseAvailableOrderCapacitiesAsync(_hosting_privateDatabase.OfferEnum offer) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.availableOrderCapacities>(string.Format("/hosting/privateDatabase/availableOrderCapacities?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}
        public Task<_hosting_privateDatabase.ServiceWithIAM> GetHostingPrivateDatabaseServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.ServiceWithIAM>(string.Format("/hosting/privateDatabase/{serviceName}", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}
        public System.Threading.Tasks.Task PutHostingPrivateDatabaseServiceNameAsync(_hosting_privateDatabase.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/availableVersions
        public Task<_hosting_privateDatabase.AvailableVersionEnum[]> GetHostingPrivateDatabaseServiceNameAvailableVersionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.AvailableVersionEnum[]>(string.Format("/hosting/privateDatabase/{serviceName}/availableVersions", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeContact
        public Task<System.Int64[]> PostHostingPrivateDatabaseServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeFtpPassword
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameChangeFtpPasswordAsync(_hosting_privateDatabase.ChangeFtpPasswordPayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeVersion
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameChangeVersionAsync(_hosting_privateDatabase.ChangeVersionPayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/config
        public Task<_hosting_privateDatabase.Configs> GetHostingPrivateDatabaseServiceNameConfigAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Configs>(string.Format("/hosting/privateDatabase/{serviceName}/config", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/config/update
        public Task<_hosting_privateDatabase.Configs> PostHostingPrivateDatabaseServiceNameConfigUpdateAsync(_hosting_privateDatabase.ConfigUpdatePayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Configs>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/confirmTermination
        public Task<System.String> PostHostingPrivateDatabaseServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/cpuThrottle
        public Task<_hosting_privateDatabase.CpuThrottle[]> GetHostingPrivateDatabaseServiceNameCpuThrottleAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.CpuThrottle[]>(string.Format("/hosting/privateDatabase/{serviceName}/cpuThrottle", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameDatabaseAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/database", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseAsync(_hosting_privateDatabase_Database.CreatePayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync(string databaseName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}
        public Task<_hosting_privateDatabase.Database> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync(string databaseName, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Database>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}", databaseName, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        public Task<System.Guid[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync(string databaseName, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy", databaseName, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        public Task<_hosting_privateDatabase_Database.Copy> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync(string databaseName, string serviceName) {
            return default(Task<_hosting_privateDatabase_Database.Copy>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        public System.Threading.Tasks.Task DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync(string databaseName, System.Guid id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        public Task<_hosting_privateDatabase_Database.Copy> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync(string databaseName, System.Guid id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase_Database.Copy>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}", databaseName, id, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copyRestore
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreAsync(_hosting_privateDatabase_Database.CopyRestorePayload body, string databaseName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        public Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync(string databaseName, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump", databaseName, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync(_hosting_privateDatabase_Database.CreateDump body, string databaseName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync(string databaseName, long id, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        public Task<_hosting_privateDatabase_Database.Dump> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync(string databaseName, long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase_Database.Dump>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}", databaseName, id, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}/restore
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreAsync(string databaseName, long id, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionAsync(string databaseName, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string extensionName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_extension.StatusEnum status) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension?{queryPa" +
                        "rameters}", databaseName, serviceName, queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}
        public Task<_hosting_privateDatabase.Extension> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameAsync(string databaseName, string extensionName, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Extension>(string.Format("/hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensi" +
                        "onName}", databaseName, extensionName, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/disable
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableAsync(string databaseName, string extensionName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/enable
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableAsync(string databaseName, string extensionName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/import
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportAsync(_hosting_privateDatabase_Database.ImportPayload body, string databaseName, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/databaseWizard
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseWizardAsync(_hosting_privateDatabase.DatabaseWizardPayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump
        public Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameDumpAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string databaseName, [System.Runtime.InteropServices.OptionalAttribute()] bool orphan) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/privateDatabase/{serviceName}/dump?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDumpDumpIdAsync(long dumpId, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}
        public Task<_hosting_privateDatabase.Dump> GetHostingPrivateDatabaseServiceNameDumpDumpIdAsync(long dumpId, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Dump>(string.Format("/hosting/privateDatabase/{serviceName}/dump/{dumpId}", dumpId, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}/restore
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreAsync(_hosting_privateDatabase_Dump.Restore body, long dumpId, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/generateTemporaryLogsLink
        public Task<_hosting_privateDatabase.TemporaryUrlInformations> PostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkAsync(string serviceName) {
            return default(Task<_hosting_privateDatabase.TemporaryUrlInformations>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/kind
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameLogKindAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/log/kind", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetHostingPrivateDatabaseServiceNameLogKindNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogKind>(string.Format("/hosting/privateDatabase/{serviceName}/log/kind/{name}", name, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription
        public Task<System.Guid[]> GetHostingPrivateDatabaseServiceNameLogSubscriptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/hosting/privateDatabase/{serviceName}/log/subscription?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostHostingPrivateDatabaseServiceNameLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation body, string serviceName) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync(string serviceName, System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}", serviceName, subscriptionId));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostHostingPrivateDatabaseServiceNameLogUrlAsync(_dbaas_logs.LogUrlCreation body, string serviceName) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/metricsToken
        public Task<_hosting_privateDatabase.MetricsToken> GetHostingPrivateDatabaseServiceNameMetricsTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.MetricsToken>(string.Format("/hosting/privateDatabase/{serviceName}/metricsToken", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/oom
        public Task<_hosting_privateDatabase.Oom[]> GetHostingPrivateDatabaseServiceNameOomAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Oom[]>(string.Format("/hosting/privateDatabase/{serviceName}/oom", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/quotaRefresh
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameQuotaRefreshAsync(string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/restart
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameRestartAsync(string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/serviceInfos
        public Task<_services.Service> GetHostingPrivateDatabaseServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/privateDatabase/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutHostingPrivateDatabaseServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/tasks
        public Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_task.FunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_privateDatabase_task.StatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/privateDatabase/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/tasks/{id}
        public Task<_hosting_privateDatabase.Task> GetHostingPrivateDatabaseServiceNameTasksIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Task>(string.Format("/hosting/privateDatabase/{serviceName}/tasks/{id}", id, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/terminate
        public Task<System.String> PostHostingPrivateDatabaseServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameUserAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/user", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserAsync(_hosting_privateDatabase_User.CreatePayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameUserUserNameAsync(string serviceName, string userName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}
        public Task<_hosting_privateDatabase.User> GetHostingPrivateDatabaseServiceNameUserUserNameAsync(string serviceName, string userName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.User>(string.Format("/hosting/privateDatabase/{serviceName}/user/{userName}", serviceName, userName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/changePassword
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordAsync(_hosting_privateDatabase_User.ChangePasswordPayload body, string serviceName, string userName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameUserUserNameGrantAsync(string serviceName, string userName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/user/{userName}/grant", serviceName, userName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameGrantAsync(_hosting_privateDatabase_User_Grant.Create body, string serviceName, string userName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync(string databaseName, string serviceName, string userName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        public Task<_hosting_privateDatabase_User.Grant> GetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync(string databaseName, string serviceName, string userName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase_User.Grant>(string.Format("/hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}", databaseName, serviceName, userName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}/update
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateAsync(_hosting_privateDatabase_User_Grant.Update body, string databaseName, string serviceName, string userName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.webhostingNetwork> GetHostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.webhostingNetwork>(string.Format("/hosting/privateDatabase/{serviceName}/webhostingNetwork", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameWebhostingNetworkAsync(string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webs
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameWebsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/webs", serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist
        public Task<System.String[]> GetHostingPrivateDatabaseServiceNameWhitelistAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string ip, [System.Runtime.InteropServices.OptionalAttribute()] bool service, [System.Runtime.InteropServices.OptionalAttribute()] bool sftp) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/privateDatabase/{serviceName}/whitelist?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist
        public Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameWhitelistAsync(_hosting_privateDatabase_Whitelist.CreatePayload body, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameWhitelistIpAsync(string ip, string serviceName) {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public Task<_hosting_privateDatabase.Whitelist> GetHostingPrivateDatabaseServiceNameWhitelistIpAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_privateDatabase.Whitelist>(string.Format("/hosting/privateDatabase/{serviceName}/whitelist/{ip}", ip, serviceName));
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        public System.Threading.Tasks.Task PutHostingPrivateDatabaseServiceNameWhitelistIpAsync(_hosting_privateDatabase.Whitelist body, string ip, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web
        public Task<System.String[]> GetHostingWebAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/attachedDomain
        public Task<System.String[]> GetHostingWebAttachedDomainAsync(string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/attachedDomain?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/availableOffer
        public Task<_hosting_web.OfferEnum[]> GetHostingWebAvailableOfferAsync(string domain) {
            return _client.GetFromJsonAsync<_hosting_web.OfferEnum[]>(string.Format("/hosting/web/availableOffer?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/incident
        public Task<System.String[]> GetHostingWebIncidentAsync() {
            return _client.GetFromJsonAsync<string[]>("/hosting/web/incident");
        }
        
        // Path: /hosting/web/localSeo/directoriesList
        public Task<_hosting_web_localSeo.DirectoriesList> GetHostingWebLocalSeoDirectoriesListAsync(_hosting_web_localSeo_location.CountryEnum country, _hosting_web_localSeo_location.OfferEnum offer) {
            return _client.GetFromJsonAsync<_hosting_web_localSeo.DirectoriesList>(string.Format("/hosting/web/localSeo/directoriesList?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/localSeo/emailAvailability
        public Task<_hosting_web_localSeo.EmailAvailability> GetHostingWebLocalSeoEmailAvailabilityAsync(string email) {
            return _client.GetFromJsonAsync<_hosting_web_localSeo.EmailAvailability>(string.Format("/hosting/web/localSeo/emailAvailability?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/localSeo/visibilityCheck
        public Task<_hosting_web_localSeo.VisibilityCheckResponse> PostHostingWebLocalSeoVisibilityCheckAsync(_hosting_web_localSeo_location.CountryEnum country, string name, string street, string zip) {
            return default(Task<_hosting_web_localSeo.VisibilityCheckResponse>);
        }
        
        // Path: /hosting/web/localSeo/visibilityCheckResult
        public Task<_hosting_web_localSeo.VisibilityCheckResultResponse[]> GetHostingWebLocalSeoVisibilityCheckResultAsync(string directory, long id, string token) {
            return _client.GetFromJsonAsync<_hosting_web_localSeo.VisibilityCheckResultResponse[]>(string.Format("/hosting/web/localSeo/visibilityCheckResult?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/moduleList
        public Task<System.Int64[]> GetHostingWebModuleListAsync([System.Runtime.InteropServices.OptionalAttribute()] bool active, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.BranchEnum branch, [System.Runtime.InteropServices.OptionalAttribute()] bool latest) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/moduleList?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/moduleList/{id}
        public Task<_hosting_web.ModuleList> GetHostingWebModuleListIdAsync(long id) {
            return _client.GetFromJsonAsync<_hosting_web.ModuleList>(string.Format("/hosting/web/moduleList/{id}", id));
        }
        
        // Path: /hosting/web/offerCapabilities
        public Task<_hosting_web.Capabilities> GetHostingWebOfferCapabilitiesAsync(_hosting_web.OfferCapabilitiesEnum offer) {
            return _client.GetFromJsonAsync<_hosting_web.Capabilities>(string.Format("/hosting/web/offerCapabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /hosting/web/vcs/supported
        public Task<_hosting_web.SupportedVcsEnum[]> GetHostingWebVcsSupportedAsync() {
            return _client.GetFromJsonAsync<_hosting_web.SupportedVcsEnum[]>("/hosting/web/vcs/supported");
        }
        
        // Path: /hosting/web/{serviceName}
        public Task<_hosting_web.ServiceWithIAM> GetHostingWebServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.ServiceWithIAM>(string.Format("/hosting/web/{serviceName}", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}
        public System.Threading.Tasks.Task PutHostingWebServiceNameAsync(_hosting_web.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain
        public Task<System.String[]> GetHostingWebServiceNameAttachedDomainAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string domain, [System.Runtime.InteropServices.OptionalAttribute()] string path) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/attachedDomain?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameAttachedDomainAsync(_hosting_web.AttachedDomain body, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        public Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameAttachedDomainDomainAsync(string domain, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool bypassDNSConfiguration) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        public Task<_hosting_web_attachedDomain.PublicAttachedDomain> GetHostingWebServiceNameAttachedDomainDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_attachedDomain.PublicAttachedDomain>(string.Format("/hosting/web/{serviceName}/attachedDomain/{domain}", domain, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        public System.Threading.Tasks.Task PutHostingWebServiceNameAttachedDomainDomainAsync(_hosting_web.AttachedDomain body, string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/digStatus
        public Task<_hosting_web_attachedDomain.DigStatus> GetHostingWebServiceNameAttachedDomainDomainDigStatusAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_attachedDomain.DigStatus>(string.Format("/hosting/web/{serviceName}/attachedDomain/{domain}/digStatus", domain, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/purgeCache
        public Task<_hosting_web.task> PostHostingWebServiceNameAttachedDomainDomainPurgeCacheAsync(string domain, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/restart
        public Task<_hosting_web.task> PostHostingWebServiceNameAttachedDomainDomainRestartAsync(string domain, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/availableConfigurations
        public Task<_hosting_web_configuration.VersionEnum[]> GetHostingWebServiceNameAvailableConfigurationsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_configuration.LanguageEnum language) {
            return _client.GetFromJsonAsync<_hosting_web_configuration.VersionEnum[]>(string.Format("/hosting/web/{serviceName}/availableConfigurations?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/boostHistory
        public Task<System.DateTime[]> GetHostingWebServiceNameBoostHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime date) {
            return _client.GetFromJsonAsync<System.DateTime[]>(string.Format("/hosting/web/{serviceName}/boostHistory?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/boostHistory/{date}
        public Task<_hosting_web.BoostHistory> GetHostingWebServiceNameBoostHistoryDateAsync(System.DateTime date, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.BoostHistory>(string.Format("/hosting/web/{serviceName}/boostHistory/{date}", date, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn
        public Task<_hosting_web.CDN> GetHostingWebServiceNameCdnAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.CDN>(string.Format("/hosting/web/{serviceName}/cdn", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/availableOptions
        public Task<_cdn.availableOptions[]> GetHostingWebServiceNameCdnAvailableOptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cdn.availableOptions[]>(string.Format("/hosting/web/{serviceName}/cdn/availableOptions", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain
        public Task<_cdn.domain[]> GetHostingWebServiceNameCdnDomainAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cdn.domain[]>(string.Format("/hosting/web/{serviceName}/cdn/domain", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}
        public Task<_cdn.domain> GetHostingWebServiceNameCdnDomainDomainNameAsync(string serviceName, string domainName) {
            return _client.GetFromJsonAsync<_cdn.domain>(string.Format("/hosting/web/{serviceName}/cdn/domain/{domainName}", serviceName, domainName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/logs
        public Task<_cdn.logs> GetHostingWebServiceNameCdnDomainDomainNameLogsAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly date) {
            return _client.GetFromJsonAsync<_cdn.logs>(string.Format("/hosting/web/{serviceName}/cdn/domain/{domainName}/logs?{queryParameters}", serviceName, domainName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option
        public Task<_cdn_domain.option[]> GetHostingWebServiceNameCdnDomainDomainNameOptionAsync(string serviceName, string domainName) {
            return _client.GetFromJsonAsync<_cdn_domain.option[]>(string.Format("/hosting/web/{serviceName}/cdn/domain/{domainName}/option", serviceName, domainName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option
        public Task<_cdn_domain.option> PostHostingWebServiceNameCdnDomainDomainNameOptionAsync(string serviceName, _cdn_domain_add.option body, string domainName) {
            return default(Task<_cdn_domain.option>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public System.Threading.Tasks.Task DeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, string domainName, string optionName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public Task<_cdn_domain.option> GetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, string domainName, string optionName) {
            return _client.GetFromJsonAsync<_cdn_domain.option>(string.Format("/hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}", serviceName, domainName, optionName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        public Task<_cdn_domain.option> PutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync(string serviceName, _cdn_domain.option body, string domainName, string optionName) {
            return default(Task<_cdn_domain.option>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/purge
        public Task<_cdn.operation> PostHostingWebServiceNameCdnDomainDomainNamePurgeAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] string pattern, [System.Runtime.InteropServices.OptionalAttribute()] _cdn.PurgeTypeEnum patternType) {
            return default(Task<_cdn.operation>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/refresh
        public Task<_cdn.operation> PostHostingWebServiceNameCdnDomainDomainNameRefreshAsync(string serviceName, string domainName) {
            return default(Task<_cdn.operation>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/statistics
        public Task<_cdn_domain.statistics[]> GetHostingWebServiceNameCdnDomainDomainNameStatisticsAsync(string serviceName, string domainName, [System.Runtime.InteropServices.OptionalAttribute()] _cdn.DomainStatisticsPeriodEnum period) {
            return _client.GetFromJsonAsync<_cdn_domain.statistics[]>(string.Format("/hosting/web/{serviceName}/cdn/domain/{domainName}/statistics?{queryParameters}", serviceName, domainName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/operation
        public Task<_cdn.operation[]> GetHostingWebServiceNameCdnOperationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_cdn.operation[]>(string.Format("/hosting/web/{serviceName}/cdn/operation", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/operation/{id}
        public Task<_cdn.operation> GetHostingWebServiceNameCdnOperationIdAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<_cdn.operation>(string.Format("/hosting/web/{serviceName}/cdn/operation/{id}", serviceName, id));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/serviceInfos
        public Task<_services.Service> GetHostingWebServiceNameCdnServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/web/{serviceName}/cdn/serviceInfos", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cdn/serviceInfosUpdate
        public System.Threading.Tasks.Task PostHostingWebServiceNameCdnServiceInfosUpdateAsync(_service.RenewType renew, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/cdn/terminate
        public Task<System.String> PostHostingWebServiceNameCdnTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/changeContact
        public Task<System.Int64[]> PostHostingWebServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/configuration
        public Task<_hosting_web.configuration> GetHostingWebServiceNameConfigurationAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.configuration>(string.Format("/hosting/web/{serviceName}/configuration", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/configuration
        public System.Threading.Tasks.Task PutHostingWebServiceNameConfigurationAsync(_hosting_web.configuration body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/confirmTermination
        public Task<System.String> PostHostingWebServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/cron
        public Task<System.Int64[]> GetHostingWebServiceNameCronAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string command, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string email, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web.LanguagesEnum language) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/cron?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/cron
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameCronAsync(_hosting_web.Cron body, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        public Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameCronIdAsync(long id, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        public Task<_hosting_web.Cron> GetHostingWebServiceNameCronIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.Cron>(string.Format("/hosting/web/{serviceName}/cron/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        public Task<System.String> PutHostingWebServiceNameCronIdAsync(_hosting_web.Cron body, long id, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/cronAvailableLanguage
        public Task<_hosting_web.LanguagesEnum[]> GetHostingWebServiceNameCronAvailableLanguageAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.LanguagesEnum[]>(string.Format("/hosting/web/{serviceName}/cronAvailableLanguage", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database
        public Task<System.String[]> GetHostingWebServiceNameDatabaseAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.ModeEnum mode, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.DatabaseTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string user) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/database?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/database
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseAsync(_hosting_web_database.DatabaseCapabilitiesTypeEnum capabilitie, string serviceName, _hosting_web_database.DatabaseCreationTypeEnum type, string user, [System.Runtime.InteropServices.OptionalAttribute()] string password, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.ExtraSqlQuotaEnum quota, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database.VersionEnum version) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameDatabaseNameAsync(string name, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}
        public Task<_hosting_web.database> GetHostingWebServiceNameDatabaseNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.database>(string.Format("/hosting/web/{serviceName}/database/{name}", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/capabilities
        public Task<_hosting_web_database.DatabaseCapabilities> GetHostingWebServiceNameDatabaseNameCapabilitiesAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_database.DatabaseCapabilities>(string.Format("/hosting/web/{serviceName}/database/{name}/capabilities", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/changePassword
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameChangePasswordAsync(string name, string password, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy
        public Task<System.Guid[]> GetHostingWebServiceNameDatabaseNameCopyAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/hosting/web/{serviceName}/database/{name}/copy", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy
        public Task<_hosting_web.database_copy> PostHostingWebServiceNameDatabaseNameCopyAsync(string name, string serviceName) {
            return default(Task<_hosting_web.database_copy>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy/{id}
        public System.Threading.Tasks.Task DeleteHostingWebServiceNameDatabaseNameCopyIdAsync(System.Guid id, string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy/{id}
        public Task<_hosting_web.database_copy> GetHostingWebServiceNameDatabaseNameCopyIdAsync(System.Guid id, string name, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.database_copy>(string.Format("/hosting/web/{serviceName}/database/{name}/copy/{id}", id, name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copyRestore
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameCopyRestoreAsync(System.Guid copyId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool flushDatabase) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump
        public Task<System.Int64[]> GetHostingWebServiceNameDatabaseNameDumpAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime deletionDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime deletionDateTo, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_database_dump.DateEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/database/{name}/dump?{queryParameters}", name, serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameDumpAsync(_hosting_web_database_dump.DateEnum date, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool sendEmail) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameDatabaseNameDumpIdAsync(long id, string name, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}
        public Task<_hosting_web.database_dump> GetHostingWebServiceNameDatabaseNameDumpIdAsync(long id, string name, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.database_dump>(string.Format("/hosting/web/{serviceName}/database/{name}/dump/{id}", id, name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}/restore
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameDumpIdRestoreAsync(long id, string name, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/import
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameImportAsync(string documentId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool flushDatabase, [System.Runtime.InteropServices.OptionalAttribute()] bool sendEmail) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/request
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameRequestAsync(_hosting_web_database.RequestActionEnum action, string name, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/restore
        public Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameRestoreAsync(_hosting_web_database_dump.DateEnum date, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool sendEmail) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/statistics
        public Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetHostingWebServiceNameDatabaseNameStatisticsAsync(string name, _hosting_web.StatisticsPeriodEnum period, string serviceName, _hosting_web_database.StatisticsTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.ChartSerie<_complexType.ChartTimestampValue>>(string.Format("/hosting/web/{serviceName}/database/{name}/statistics?{queryParameters}", name, serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/databaseAvailableType
        public Task<_hosting_web_database.DatabaseTypeEnum[]> GetHostingWebServiceNameDatabaseAvailableTypeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_database.DatabaseTypeEnum[]>(string.Format("/hosting/web/{serviceName}/databaseAvailableType", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/databaseAvailableVersion
        public Task<_hosting_web_database.AvailableVersionStruct> GetHostingWebServiceNameDatabaseAvailableVersionAsync(string serviceName, _hosting_web_database.DatabaseTypeEnum type) {
            return _client.GetFromJsonAsync<_hosting_web_database.AvailableVersionStruct>(string.Format("/hosting/web/{serviceName}/databaseAvailableVersion?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/databaseCreationCapabilities
        public Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetHostingWebServiceNameDatabaseCreationCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_database.CreationDatabaseCapabilities[]>(string.Format("/hosting/web/{serviceName}/databaseCreationCapabilities", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/dump
        public Task<System.Int64[]> GetHostingWebServiceNameDumpAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] string databaseName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime deletionDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime deletionDateTo, [System.Runtime.InteropServices.OptionalAttribute()] bool orphan) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/dump?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/dump/{id}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameDumpIdAsync(long id, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/dump/{id}
        public Task<_hosting_web.dump> GetHostingWebServiceNameDumpIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.dump>(string.Format("/hosting/web/{serviceName}/dump/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/email
        public Task<_hosting_web.email> GetHostingWebServiceNameEmailAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.email>(string.Format("/hosting/web/{serviceName}/email", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/email
        public System.Threading.Tasks.Task PutHostingWebServiceNameEmailAsync(_hosting_web.email body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/email/bounces
        public Task<_hosting_web_mail.Bounce[]> GetHostingWebServiceNameEmailBouncesAsync(long limit, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_mail.Bounce[]>(string.Format("/hosting/web/{serviceName}/email/bounces?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/email/request
        public Task<System.String> PostHostingWebServiceNameEmailRequestAsync(_hosting_web_mail.ActionEnum action, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/email/volumes
        public Task<_hosting_web_mail.VolumeHistory[]> GetHostingWebServiceNameEmailVolumesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_mail.VolumeHistory[]>(string.Format("/hosting/web/{serviceName}/email/volumes", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/emailOption
        public Task<System.Int64[]> GetHostingWebServiceNameEmailOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/emailOption", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}
        public Task<_hosting_web.emailoption> GetHostingWebServiceNameEmailOptionIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.emailoption>(string.Format("/hosting/web/{serviceName}/emailOption/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}/serviceInfos
        public Task<_services.Service> GetHostingWebServiceNameEmailOptionIdServiceInfosAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/web/{serviceName}/emailOption/{id}/serviceInfos", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}/terminate
        public Task<System.String> PostHostingWebServiceNameEmailOptionIdTerminateAsync(long id, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar
        public Task<System.String[]> GetHostingWebServiceNameEnvVarAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_envVar.TypeEnum type) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/envVar?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/envVar
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameEnvVarAsync(_hosting_web.EnvVarInput body, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameEnvVarKeyAsync(string key, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.EnvVar> GetHostingWebServiceNameEnvVarKeyAsync(string key, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.EnvVar>(string.Format("/hosting/web/{serviceName}/envVar/{key}", key, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        public Task<_hosting_web.PublicTask> PutHostingWebServiceNameEnvVarKeyAsync(_hosting_web.EnvVar body, string key, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso
        public Task<System.String[]> GetHostingWebServiceNameExtraSqlPersoAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/extraSqlPerso", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}
        public Task<_hosting_web.extrasqlperso> GetHostingWebServiceNameExtraSqlPersoNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.extrasqlperso>(string.Format("/hosting/web/{serviceName}/extraSqlPerso/{name}", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/databases
        public Task<System.String[]> GetHostingWebServiceNameExtraSqlPersoNameDatabasesAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/extraSqlPerso/{name}/databases", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfos
        public Task<_services.Service> GetHostingWebServiceNameExtraSqlPersoNameServiceInfosAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfos", name, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfosUpdate
        public System.Threading.Tasks.Task PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateAsync(string name, _service.RenewType renew, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/terminate
        public Task<System.String> PostHostingWebServiceNameExtraSqlPersoNameTerminateAsync(string name, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/freedom
        public Task<System.String[]> GetHostingWebServiceNameFreedomAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_freedom.StatusEnum status) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/freedom?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/freedom/{domain}
        public System.Threading.Tasks.Task DeleteHostingWebServiceNameFreedomDomainAsync(string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/freedom/{domain}
        public Task<_hosting_web.freedom> GetHostingWebServiceNameFreedomDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.freedom>(string.Format("/hosting/web/{serviceName}/freedom/{domain}", domain, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/indy
        public Task<System.String[]> GetHostingWebServiceNameIndyAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string login) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/indy?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/indy/{login}
        public Task<_hosting_web.indy> GetHostingWebServiceNameIndyLoginAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.indy>(string.Format("/hosting/web/{serviceName}/indy/{login}", login, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/key/ssh
        public Task<_hosting_web.Key> GetHostingWebServiceNameKeySshAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.Key>(string.Format("/hosting/web/{serviceName}/key/ssh", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/key/ssh
        public Task<_hosting_web.Key> PostHostingWebServiceNameKeySshAsync(string serviceName) {
            return default(Task<_hosting_web.Key>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account
        public Task<System.Int64[]> GetHostingWebServiceNameLocalSeoAccountAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string email) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/localSeo/account?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account/{id}
        public Task<_hosting_web.localSeo_account> GetHostingWebServiceNameLocalSeoAccountIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.localSeo_account>(string.Format("/hosting/web/{serviceName}/localSeo/account/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account/{id}/login
        public Task<System.String> PostHostingWebServiceNameLocalSeoAccountIdLoginAsync(long id, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/emailAvailability
        public Task<_hosting_web_localSeo.EmailAvailability> GetHostingWebServiceNameLocalSeoEmailAvailabilityAsync(string email, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_localSeo.EmailAvailability>(string.Format("/hosting/web/{serviceName}/localSeo/emailAvailability?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location
        public Task<System.Int64[]> GetHostingWebServiceNameLocalSeoLocationAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/localSeo/location", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}
        public Task<_hosting_web.localSeo_location> GetHostingWebServiceNameLocalSeoLocationIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.localSeo_location>(string.Format("/hosting/web/{serviceName}/localSeo/location/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/serviceInfos
        public Task<_services.Service> GetHostingWebServiceNameLocalSeoLocationIdServiceInfosAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/web/{serviceName}/localSeo/location/{id}/serviceInfos", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/serviceInfosUpdate
        public System.Threading.Tasks.Task PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateAsync(long id, _service.RenewType renew, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/terminate
        public Task<System.String> PostHostingWebServiceNameLocalSeoLocationIdTerminateAsync(long id, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/metricsToken
        public Task<_hosting_web.MetricsToken> GetHostingWebServiceNameMetricsTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.MetricsToken>(string.Format("/hosting/web/{serviceName}/metricsToken", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/module
        public Task<System.Int64[]> GetHostingWebServiceNameModuleAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/module", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/module
        public Task<_hosting_web.task> PostHostingWebServiceNameModuleAsync(long moduleId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string adminName, [System.Runtime.InteropServices.OptionalAttribute()] string adminPassword, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.DependencyType[] dependencies, [System.Runtime.InteropServices.OptionalAttribute()] string domain, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_module.LanguageEnum language, [System.Runtime.InteropServices.OptionalAttribute()] string path) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameModuleIdAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool purgeData) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}
        public Task<_hosting_web.module> GetHostingWebServiceNameModuleIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.module>(string.Format("/hosting/web/{serviceName}/module/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}/changePassword
        public Task<_hosting_web.task> PostHostingWebServiceNameModuleIdChangePasswordAsync(long id, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig
        public Task<System.Int64[]> GetHostingWebServiceNameOvhConfigAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool historical, [System.Runtime.InteropServices.OptionalAttribute()] string path) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/ovhConfig?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}
        public Task<_hosting_web.ovhConfig> GetHostingWebServiceNameOvhConfigIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.ovhConfig>(string.Format("/hosting/web/{serviceName}/ovhConfig/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}/changeConfiguration
        public Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigIdChangeConfigurationAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhconfig.ContainerEnum container, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.EngineNameEnum engineName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.AvailableEngineVersionEnum engineVersion, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.EnvironmentEnum environment, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_ovhConfig.HttpFirewallEnum httpFirewall) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}/rollback
        public Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigIdRollbackAsync(long id, long rollbackId, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigCapabilities
        public Task<_hosting_web.OvhConfigCapabilities[]> GetHostingWebServiceNameOvhConfigCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.OvhConfigCapabilities[]>(string.Format("/hosting/web/{serviceName}/ovhConfigCapabilities", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigRecommendedValues
        public Task<_hosting_web.OvhConfigRecommendedValues> GetHostingWebServiceNameOvhConfigRecommendedValuesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.OvhConfigRecommendedValues>(string.Format("/hosting/web/{serviceName}/ovhConfigRecommendedValues", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigRefresh
        public Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigRefreshAsync(string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs
        public Task<System.Int64[]> GetHostingWebServiceNameOwnLogsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string fqdn) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/ownLogs?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}
        public Task<_hosting_web.ownLogs> GetHostingWebServiceNameOwnLogsIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.ownLogs>(string.Format("/hosting/web/{serviceName}/ownLogs/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs
        public Task<System.String[]> GetHostingWebServiceNameOwnLogsIdUserLogsAsync(long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string login) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/ownLogs/{id}/userLogs?{queryParameters}", id, serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs
        public Task<System.String> PostHostingWebServiceNameOwnLogsIdUserLogsAsync(string description, long id, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long ownLogsId) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public Task<System.String> DeleteHostingWebServiceNameOwnLogsIdUserLogsLoginAsync(long id, string login, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public Task<_hosting_web.userLogs> GetHostingWebServiceNameOwnLogsIdUserLogsLoginAsync(long id, string login, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.userLogs>(string.Format("/hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}", id, login, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        public System.Threading.Tasks.Task PutHostingWebServiceNameOwnLogsIdUserLogsLoginAsync(_hosting_web.userLogs body, long id, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}/changePassword
        public Task<System.String> PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordAsync(long id, string login, string password, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/privateDatabaseCreationCapabilities
        public Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_database.CreationDatabaseCapabilities[]>(string.Format("/hosting/web/{serviceName}/privateDatabaseCreationCapabilities", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/privateDatabases
        public Task<System.String[]> GetHostingWebServiceNamePrivateDatabasesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/privateDatabases", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/request
        public Task<_hosting_web.task> PostHostingWebServiceNameRequestAsync(_hosting_web.RequestActionEnum action, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/requestBoost
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameRequestBoostAsync(_hosting_web.RequestBoostInput body, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/restoreSnapshot
        public Task<_hosting_web.task> PostHostingWebServiceNameRestoreSnapshotAsync(_hosting_web_backup.TypeEnum backup, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime
        public Task<System.Int64[]> GetHostingWebServiceNameRuntimeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.TypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/runtime?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/runtime
        public Task<_hosting_web.task> PostHostingWebServiceNameRuntimeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string appBootstrap, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.EnvEnum appEnv, [System.Runtime.InteropServices.OptionalAttribute()] string[] attachedDomains, [System.Runtime.InteropServices.OptionalAttribute()] bool isDefault, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] string publicDir, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_runtime.TypeEnum type) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameRuntimeIdAsync(long id, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        public Task<_hosting_web.runtime> GetHostingWebServiceNameRuntimeIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.runtime>(string.Format("/hosting/web/{serviceName}/runtime/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        public System.Threading.Tasks.Task PutHostingWebServiceNameRuntimeIdAsync(_hosting_web.runtime body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}/attachedDomains
        public Task<System.String[]> GetHostingWebServiceNameRuntimeIdAttachedDomainsAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/runtime/{id}/attachedDomains", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/runtimeAvailableTypes
        public Task<_hosting_web_runtime.TypeEnum[]> GetHostingWebServiceNameRuntimeAvailableTypesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string language) {
            return _client.GetFromJsonAsync<_hosting_web_runtime.TypeEnum[]>(string.Format("/hosting/web/{serviceName}/runtimeAvailableTypes?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/serviceInfos
        public Task<_services.Service> GetHostingWebServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/hosting/web/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutHostingWebServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> DeleteHostingWebServiceNameSslAsync(string serviceName) {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> GetHostingWebServiceNameSslAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.SSL>(string.Format("/hosting/web/{serviceName}/ssl", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        public Task<_hosting_web.SSL> PostHostingWebServiceNameSslAsync(_hosting_web.SSLInput body, string serviceName) {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl/domains
        public Task<System.String[]> GetHostingWebServiceNameSslDomainsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/ssl/domains", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/ssl/regenerate
        public Task<_hosting_web.SSL> PostHostingWebServiceNameSslRegenerateAsync(string serviceName) {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl/report
        public Task<_hosting_web_ssl.Report> GetHostingWebServiceNameSslReportAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_ssl.Report>(string.Format("/hosting/web/{serviceName}/ssl/report", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/statistics
        public Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetHostingWebServiceNameStatisticsAsync(_hosting_web.StatisticsPeriodEnum period, string serviceName, _hosting_web.StatisticsTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.ChartSerie<_complexType.ChartTimestampValue>>(string.Format("/hosting/web/{serviceName}/statistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/tasks
        public Task<System.Int64[]> GetHostingWebServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string function, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_task.StatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/tasks/{id}
        public Task<_hosting_web.PublicTask> GetHostingWebServiceNameTasksIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.PublicTask>(string.Format("/hosting/web/{serviceName}/tasks/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/terminate
        public Task<System.String> PostHostingWebServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/token
        public Task<System.String> GetHostingWebServiceNameTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/hosting/web/{serviceName}/token", serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/user
        public Task<System.String[]> GetHostingWebServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string home, [System.Runtime.InteropServices.OptionalAttribute()] string login) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/user?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/user
        public Task<_hosting_web.task> PostHostingWebServiceNameUserAsync(string home, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _hosting_web_user.SshStateEnum sshState) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        public Task<_hosting_web.task> DeleteHostingWebServiceNameUserLoginAsync(string login, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        public Task<_hosting_web.user> GetHostingWebServiceNameUserLoginAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.user>(string.Format("/hosting/web/{serviceName}/user/{login}", login, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        public System.Threading.Tasks.Task PutHostingWebServiceNameUserLoginAsync(_hosting_web.user body, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}/changePassword
        public Task<_hosting_web.task> PostHostingWebServiceNameUserLoginChangePasswordAsync(string login, string password, string serviceName) {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs
        public Task<System.String[]> GetHostingWebServiceNameUserLogsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string login) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/hosting/web/{serviceName}/userLogs?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/userLogs
        public Task<System.String> PostHostingWebServiceNameUserLogsAsync(string description, string login, string password, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long ownLogsId) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        public Task<System.String> DeleteHostingWebServiceNameUserLogsLoginAsync(string login, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        public Task<_hosting_web.userLogs> GetHostingWebServiceNameUserLogsLoginAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.userLogs>(string.Format("/hosting/web/{serviceName}/userLogs/{login}", login, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        public System.Threading.Tasks.Task PutHostingWebServiceNameUserLogsLoginAsync(_hosting_web.userLogs body, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}/changePassword
        public Task<System.String> PostHostingWebServiceNameUserLogsLoginChangePasswordAsync(string login, string password, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogsToken
        public Task<System.String> GetHostingWebServiceNameUserLogsTokenAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string attachedDomain, [System.Runtime.InteropServices.OptionalAttribute()] bool remoteCheck, [System.Runtime.InteropServices.OptionalAttribute()] long ttl) {
            return _client.GetFromJsonAsync<string>(string.Format("/hosting/web/{serviceName}/userLogsToken?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/vcs/webhooks
        public Task<_hosting_web.VcsWebhooks> GetHostingWebServiceNameVcsWebhooksAsync(string path, string serviceName, _hosting_web.SupportedVcsEnum vcs) {
            return _client.GetFromJsonAsync<_hosting_web.VcsWebhooks>(string.Format("/hosting/web/{serviceName}/vcs/webhooks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/website
        public Task<System.Int64[]> GetHostingWebServiceNameWebsiteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string path) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/website?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /hosting/web/{serviceName}/website
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameWebsiteAsync(_hosting_web_website.CreationRequest body, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameWebsiteIdAsync(bool deleteFiles, long id, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.Website> GetHostingWebServiceNameWebsiteIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.Website>(string.Format("/hosting/web/{serviceName}/website/{id}", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        public Task<_hosting_web.Website> PutHostingWebServiceNameWebsiteIdAsync(_hosting_web_website.Update body, long id, string serviceName) {
            return default(Task<_hosting_web.Website>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deploy
        public Task<_hosting_web.PublicTask> PostHostingWebServiceNameWebsiteIdDeployAsync(_hosting_web_website.DeploymentRequest body, long id, string serviceName) {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment
        public Task<System.Int64[]> GetHostingWebServiceNameWebsiteIdDeploymentAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/hosting/web/{serviceName}/website/{id}/deployment", id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}
        public Task<_hosting_web_website.Deployment> GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdAsync(long deploymentId, long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_website.Deployment>(string.Format("/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}", deploymentId, id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}/logs
        public Task<_hosting_web_website_deployment.LogsMessage[]> GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsAsync(long deploymentId, long id, string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web_website_deployment.LogsMessage[]>(string.Format("/hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}/logs", deploymentId, id, serviceName));
        }
        
        // Path: /hosting/web/{serviceName}/websiteCreationCapabilities
        public Task<_hosting_web.WebsiteCreationCapabilities> GetHostingWebServiceNameWebsiteCreationCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_hosting_web.WebsiteCreationCapabilities>(string.Format("/hosting/web/{serviceName}/websiteCreationCapabilities", serviceName));
        }
        
        // Path: /ip
        public Task<System.String[]> GetIpAsync([System.Runtime.InteropServices.OptionalAttribute()] string campus, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags, [System.Runtime.InteropServices.OptionalAttribute()] string ip, [System.Runtime.InteropServices.OptionalAttribute()] bool isAdditionalIp, [System.Runtime.InteropServices.OptionalAttribute()] string routedToServiceName, [System.Runtime.InteropServices.OptionalAttribute()] _ip.IpTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _ip.IpVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip?{queryParameters}", queryParameters));
        }
        
        // Path: /ip/campus
        public Task<_ip.Campus[]> GetIpCampusAsync() {
            return _client.GetFromJsonAsync<_ip.Campus[]>("/ip/campus");
        }
        
        // Path: /ip/service
        public Task<System.String[]> GetIpServiceAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/service?{queryParameters}", queryParameters));
        }
        
        // Path: /ip/service/{serviceName}
        public Task<_ip.ServiceIpWithIAM> GetIpServiceServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ip.ServiceIpWithIAM>(string.Format("/ip/service/{serviceName}", serviceName));
        }
        
        // Path: /ip/service/{serviceName}
        public System.Threading.Tasks.Task PutIpServiceServiceNameAsync(_ip.ServiceIp body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/service/{serviceName}/changeContact
        public Task<System.Int64[]> PostIpServiceServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/service/{serviceName}/confirmTermination
        public Task<System.String> PostIpServiceServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /ip/service/{serviceName}/serviceInfos
        public Task<_services.Service> GetIpServiceServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/ip/service/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /ip/service/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutIpServiceServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/service/{serviceName}/terminate
        public Task<System.String> PostIpServiceServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /ip/{ip}
        public Task<_ip.IpWithIAM> GetIpIpAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.IpWithIAM>(string.Format("/ip/{ip}", ip));
        }
        
        // Path: /ip/{ip}
        public System.Threading.Tasks.Task PutIpIpAsync(_ip.Ip body, string ip) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/antihack
        public Task<System.String[]> GetIpIpAntihackAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.BlockedIpStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/antihack?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/antihack/{ipBlocked}
        public Task<_ip.BlockedIp> GetIpIpAntihackIpBlockedAsync(string ip, string ipBlocked) {
            return _client.GetFromJsonAsync<_ip.BlockedIp>(string.Format("/ip/{ip}/antihack/{ipBlocked}", ip, ipBlocked));
        }
        
        // Path: /ip/{ip}/antihack/{ipBlocked}/unblock
        public System.Threading.Tasks.Task PostIpIpAntihackIpBlockedUnblockAsync(string ip, string ipBlocked) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/arp
        public Task<System.String[]> GetIpIpArpAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.ArpStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/arp?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/arp/{ipBlocked}
        public Task<_ip.ArpBlockedIp> GetIpIpArpIpBlockedAsync(string ip, string ipBlocked) {
            return _client.GetFromJsonAsync<_ip.ArpBlockedIp>(string.Format("/ip/{ip}/arp/{ipBlocked}", ip, ipBlocked));
        }
        
        // Path: /ip/{ip}/arp/{ipBlocked}/unblock
        public System.Threading.Tasks.Task PostIpIpArpIpBlockedUnblockAsync(string ip, string ipBlocked) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/aggregate
        public Task<_ip.ByoipAggregationPreview[]> GetIpIpBringYourOwnIpAggregateAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.ByoipAggregationPreview[]>(string.Format("/ip/{ip}/bringYourOwnIp/aggregate", ip));
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/aggregate
        public Task<_ip.IpTask> PostIpIpBringYourOwnIpAggregateAsync(string aggregationIp, string ip) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/slice
        public Task<_ip.ByoipSlicingPreview[]> GetIpIpBringYourOwnIpSliceAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.ByoipSlicingPreview[]>(string.Format("/ip/{ip}/bringYourOwnIp/slice", ip));
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/slice
        public Task<_ip.IpTask> PostIpIpBringYourOwnIpSliceAsync(string ip, long slicingSize) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/changeOrg
        public Task<_ip.IpTask> PostIpIpChangeOrgAsync(string ip, string organisation) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/delegation
        public Task<System.String[]> GetIpIpDelegationAsync(string ip) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/delegation", ip));
        }
        
        // Path: /ip/{ip}/delegation
        public Task<_ip.ReverseDelegation> PostIpIpDelegationAsync(string ip, string target) {
            return default(Task<_ip.ReverseDelegation>);
        }
        
        // Path: /ip/{ip}/delegation/{target}
        public System.Threading.Tasks.Task DeleteIpIpDelegationTargetAsync(string ip, string target) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/delegation/{target}
        public Task<_ip.ReverseDelegation> GetIpIpDelegationTargetAsync(string ip, string target) {
            return _client.GetFromJsonAsync<_ip.ReverseDelegation>(string.Format("/ip/{ip}/delegation/{target}", ip, target));
        }
        
        // Path: /ip/{ip}/firewall
        public Task<System.String[]> GetIpIpFirewallAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] bool enabled, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/firewall?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/firewall
        public Task<_ip.FirewallIp> PostIpIpFirewallAsync(string ip, string ipOnFirewall) {
            return default(Task<_ip.FirewallIp>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        public Task<System.String> DeleteIpIpFirewallIpOnFirewallAsync(string ip, string ipOnFirewall) {
            return default(Task<System.String>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        public Task<_ip.FirewallIp> GetIpIpFirewallIpOnFirewallAsync(string ip, string ipOnFirewall) {
            return _client.GetFromJsonAsync<_ip.FirewallIp>(string.Format("/ip/{ip}/firewall/{ipOnFirewall}", ip, ipOnFirewall));
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        public System.Threading.Tasks.Task PutIpIpFirewallIpOnFirewallAsync(_ip.FirewallIp body, string ip, string ipOnFirewall) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule
        public Task<System.Int64[]> GetIpIpFirewallIpOnFirewallRuleAsync(string ip, string ipOnFirewall, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallRuleStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ip/{ip}/firewall/{ipOnFirewall}/rule?{queryParameters}", ip, ipOnFirewall, queryParameters));
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule
        public Task<_ip.FirewallNetworkRule> PostIpIpFirewallIpOnFirewallRuleAsync(_ip.FirewallActionEnum action, string ip, string ipOnFirewall, _ip.FirewallProtocolEnum protocol, _ip.FirewallSequenceRangeEnum sequence, [System.Runtime.InteropServices.OptionalAttribute()] long destinationPort, [System.Runtime.InteropServices.OptionalAttribute()] string source, [System.Runtime.InteropServices.OptionalAttribute()] long sourcePort, [System.Runtime.InteropServices.OptionalAttribute()] _ip.FirewallOptionTCP tcpOption) {
            return default(Task<_ip.FirewallNetworkRule>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        public Task<_ip.FirewallNetworkRule> DeleteIpIpFirewallIpOnFirewallRuleSequenceAsync(string ip, string ipOnFirewall, long sequence) {
            return default(Task<_ip.FirewallNetworkRule>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        public Task<_ip.FirewallNetworkRule> GetIpIpFirewallIpOnFirewallRuleSequenceAsync(string ip, string ipOnFirewall, long sequence) {
            return _client.GetFromJsonAsync<_ip.FirewallNetworkRule>(string.Format("/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}", ip, ipOnFirewall, sequence));
        }
        
        // Path: /ip/{ip}/game
        public Task<System.String[]> GetIpIpGameAsync(string ip) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/game", ip));
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}
        public Task<_ip.GameMitigation> GetIpIpGameIpOnGameAsync(string ip, string ipOnGame) {
            return _client.GetFromJsonAsync<_ip.GameMitigation>(string.Format("/ip/{ip}/game/{ipOnGame}", ip, ipOnGame));
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}
        public System.Threading.Tasks.Task PutIpIpGameIpOnGameAsync(_ip.GameMitigation body, string ip, string ipOnGame) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule
        public Task<System.Int64[]> GetIpIpGameIpOnGameRuleAsync(string ip, string ipOnGame) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ip/{ip}/game/{ipOnGame}/rule", ip, ipOnGame));
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule
        public Task<_ip.GameMitigationRule> PostIpIpGameIpOnGameRuleAsync(string ip, string ipOnGame, _complexType.Range<long> ports, _ip.GameMitigationRuleProtocolEnum protocol) {
            return default(Task<_ip.GameMitigationRule>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule/{id}
        public Task<_ip.GameMitigationRule> DeleteIpIpGameIpOnGameRuleIdAsync(long id, string ip, string ipOnGame) {
            return default(Task<_ip.GameMitigationRule>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule/{id}
        public Task<_ip.GameMitigationRule> GetIpIpGameIpOnGameRuleIdAsync(long id, string ip, string ipOnGame) {
            return _client.GetFromJsonAsync<_ip.GameMitigationRule>(string.Format("/ip/{ip}/game/{ipOnGame}/rule/{id}", id, ip, ipOnGame));
        }
        
        // Path: /ip/{ip}/license/cloudLinux
        public Task<System.String[]> GetIpIpLicenseCloudLinuxAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/cloudLinux?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/cpanel
        public Task<System.String[]> GetIpIpLicenseCpanelAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/cpanel?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/directadmin
        public Task<System.String[]> GetIpIpLicenseDirectadminAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/directadmin?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/plesk
        public Task<System.String[]> GetIpIpLicensePleskAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/plesk?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/sqlserver
        public Task<System.String[]> GetIpIpLicenseSqlserverAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/sqlserver?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/virtuozzo
        public Task<System.String[]> GetIpIpLicenseVirtuozzoAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/virtuozzo?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/windows
        public Task<System.String[]> GetIpIpLicenseWindowsAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/windows?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/license/worklight
        public Task<System.String[]> GetIpIpLicenseWorklightAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/license/worklight?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/migrationToken
        public Task<_ip.IpMigrationToken> GetIpIpMigrationTokenAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.IpMigrationToken>(string.Format("/ip/{ip}/migrationToken", ip));
        }
        
        // Path: /ip/{ip}/migrationToken
        public Task<_ip.IpMigrationToken> PostIpIpMigrationTokenAsync(string customerId, string ip) {
            return default(Task<_ip.IpMigrationToken>);
        }
        
        // Path: /ip/{ip}/mitigation
        public Task<System.String[]> GetIpIpMitigationAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] bool auto, [System.Runtime.InteropServices.OptionalAttribute()] _ip.MitigationStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/mitigation?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/mitigation
        public Task<_ip.MitigationIp> PostIpIpMitigationAsync(string ip, string ipOnMitigation) {
            return default(Task<_ip.MitigationIp>);
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        public Task<_ip.MitigationIp> DeleteIpIpMitigationIpOnMitigationAsync(string ip, string ipOnMitigation) {
            return default(Task<_ip.MitigationIp>);
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        public Task<_ip.MitigationIp> GetIpIpMitigationIpOnMitigationAsync(string ip, string ipOnMitigation) {
            return _client.GetFromJsonAsync<_ip.MitigationIp>(string.Format("/ip/{ip}/mitigation/{ipOnMitigation}", ip, ipOnMitigation));
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        public System.Threading.Tasks.Task PutIpIpMitigationIpOnMitigationAsync(_ip.MitigationIp body, string ip, string ipOnMitigation) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/mitigationProfiles
        public Task<System.String[]> GetIpIpMitigationProfilesAsync(string ip) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/mitigationProfiles", ip));
        }
        
        // Path: /ip/{ip}/mitigationProfiles
        public Task<_ip.MitigationProfile> PostIpIpMitigationProfilesAsync(_ip.MitigationProfileAutoMitigationTimeOutEnum autoMitigationTimeOut, string ip, string ipMitigationProfile) {
            return default(Task<_ip.MitigationProfile>);
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public System.Threading.Tasks.Task DeleteIpIpMitigationProfilesIpMitigationProfileAsync(string ip, string ipMitigationProfile) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public Task<_ip.MitigationProfile> GetIpIpMitigationProfilesIpMitigationProfileAsync(string ip, string ipMitigationProfile) {
            return _client.GetFromJsonAsync<_ip.MitigationProfile>(string.Format("/ip/{ip}/mitigationProfiles/{ipMitigationProfile}", ip, ipMitigationProfile));
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        public System.Threading.Tasks.Task PutIpIpMitigationProfilesIpMitigationProfileAsync(_ip.MitigationProfile body, string ip, string ipMitigationProfile) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/move
        public Task<_ip.Destinations> GetIpIpMoveAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.Destinations>(string.Format("/ip/{ip}/move", ip));
        }
        
        // Path: /ip/{ip}/move
        public Task<_ip.IpTask> PostIpIpMoveAsync(string ip, string to, [System.Runtime.InteropServices.OptionalAttribute()] string nexthop) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/park
        public Task<_ip.IpTask> PostIpIpParkAsync(string ip) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/phishing
        public Task<System.Int64[]> GetIpIpPhishingAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] string ipOnAntiphishing, [System.Runtime.InteropServices.OptionalAttribute()] _ip.AntiphishingStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ip/{ip}/phishing?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/phishing/{id}
        public Task<_ip.Antiphishing> GetIpIpPhishingIdAsync(long id, string ip) {
            return _client.GetFromJsonAsync<_ip.Antiphishing>(string.Format("/ip/{ip}/phishing/{id}", id, ip));
        }
        
        // Path: /ip/{ip}/reverse
        public Task<System.String[]> GetIpIpReverseAsync(string ip) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/reverse", ip));
        }
        
        // Path: /ip/{ip}/reverse
        public Task<_ip.ReverseIp> PostIpIpReverseAsync(string ip, string ipReverse, string reverse) {
            return default(Task<_ip.ReverseIp>);
        }
        
        // Path: /ip/{ip}/reverse/{ipReverse}
        public System.Threading.Tasks.Task DeleteIpIpReverseIpReverseAsync(string ip, string ipReverse) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/reverse/{ipReverse}
        public Task<_ip.ReverseIp> GetIpIpReverseIpReverseAsync(string ip, string ipReverse) {
            return _client.GetFromJsonAsync<_ip.ReverseIp>(string.Format("/ip/{ip}/reverse/{ipReverse}", ip, ipReverse));
        }
        
        // Path: /ip/{ip}/ripe
        public Task<_ip.RipeInfos> GetIpIpRipeAsync(string ip) {
            return _client.GetFromJsonAsync<_ip.RipeInfos>(string.Format("/ip/{ip}/ripe", ip));
        }
        
        // Path: /ip/{ip}/ripe
        public System.Threading.Tasks.Task PutIpIpRipeAsync(_ip.RipeInfos body, string ip) {
            return Task.CompletedTask;
        }
        
        // Path: /ip/{ip}/spam
        public Task<System.String[]> GetIpIpSpamAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.SpamStateEnum state) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ip/{ip}/spam?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}
        public Task<_ip.SpamIp> GetIpIpSpamIpSpammingAsync(string ip, string ipSpamming) {
            return _client.GetFromJsonAsync<_ip.SpamIp>(string.Format("/ip/{ip}/spam/{ipSpamming}", ip, ipSpamming));
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}/stats
        public Task<_ip.SpamStats[]> GetIpIpSpamIpSpammingStatsAsync(System.DateTime from, string ip, string ipSpamming, System.DateTime to) {
            return _client.GetFromJsonAsync<_ip.SpamStats[]>(string.Format("/ip/{ip}/spam/{ipSpamming}/stats?{queryParameters}", ip, ipSpamming, queryParameters));
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}/unblock
        public Task<_ip.SpamIp> PostIpIpSpamIpSpammingUnblockAsync(string ip, string ipSpamming) {
            return default(Task<_ip.SpamIp>);
        }
        
        // Path: /ip/{ip}/task
        public Task<System.Int64[]> GetIpIpTaskAsync(string ip, [System.Runtime.InteropServices.OptionalAttribute()] _ip.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _ip.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ip/{ip}/task?{queryParameters}", ip, queryParameters));
        }
        
        // Path: /ip/{ip}/task/{taskId}
        public Task<_ip.IpTask> GetIpIpTaskTaskIdAsync(string ip, long taskId) {
            return _client.GetFromJsonAsync<_ip.IpTask>(string.Format("/ip/{ip}/task/{taskId}", ip, taskId));
        }
        
        // Path: /ip/{ip}/terminate
        public Task<_ip.IpTask> PostIpIpTerminateAsync(string ip) {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ipLoadbalancing
        public Task<System.String[]> GetIpLoadbalancingAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing?{queryParameters}", queryParameters));
        }
        
        // Path: /ipLoadbalancing/availableZones
        public Task<System.String[]> GetIpLoadbalancingAvailableZonesAsync() {
            return _client.GetFromJsonAsync<string[]>("/ipLoadbalancing/availableZones");
        }
        
        // Path: /ipLoadbalancing/{serviceName}
        public Task<_ipLoadbalancing.IpWithIAM> GetIpLoadbalancingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.IpWithIAM>(string.Format("/ipLoadbalancing/{serviceName}", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameAsync(_ipLoadbalancing.Ip body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFarmProbes
        public Task<_ipLoadbalancing.FarmAvailableProbe[]> GetIpLoadbalancingServiceNameAvailableFarmProbesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.FarmAvailableProbe[]>(string.Format("/ipLoadbalancing/{serviceName}/availableFarmProbes", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFarmType
        public Task<System.String[]> GetIpLoadbalancingServiceNameAvailableFarmTypeAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing/{serviceName}/availableFarmType", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFrontendType
        public Task<System.String[]> GetIpLoadbalancingServiceNameAvailableFrontendTypeAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing/{serviceName}/availableFrontendType", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableRouteActions
        public Task<_ipLoadbalancing.RouteAvailableAction[]> GetIpLoadbalancingServiceNameAvailableRouteActionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.RouteAvailableAction[]>(string.Format("/ipLoadbalancing/{serviceName}/availableRouteActions", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableRouteRules
        public Task<_ipLoadbalancing.RouteAvailableRule[]> GetIpLoadbalancingServiceNameAvailableRouteRulesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.RouteAvailableRule[]>(string.Format("/ipLoadbalancing/{serviceName}/availableRouteRules", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/changeContact
        public Task<System.Int64[]> PostIpLoadbalancingServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/confirmTermination
        public Task<System.String> PostIpLoadbalancingServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedFarms
        public Task<_ipLoadbalancing.DefinedFarm[]> GetIpLoadbalancingServiceNameDefinedFarmsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.DefinedFarm[]>(string.Format("/ipLoadbalancing/{serviceName}/definedFarms?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedFrontends
        public Task<_ipLoadbalancing.DefinedFrontend[]> GetIpLoadbalancingServiceNameDefinedFrontendsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.DefinedFrontend[]>(string.Format("/ipLoadbalancing/{serviceName}/definedFrontends", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedRoutes
        public Task<_ipLoadbalancing.DefinedRoute[]> GetIpLoadbalancingServiceNameDefinedRoutesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.DefinedRoute[]>(string.Format("/ipLoadbalancing/{serviceName}/definedRoutes", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/failover
        public Task<System.String[]> GetIpLoadbalancingServiceNameFailoverAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing/{serviceName}/failover", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/freeCertificate
        public Task<_ipLoadbalancing_Task.Task> PostIpLoadbalancingServiceNameFreeCertificateAsync(string[] fqdn, string serviceName) {
            return default(Task<_ipLoadbalancing_Task.Task>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/http/farm?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm
        public Task<_ipLoadbalancing_backendHttp.BackendHttp> PostIpLoadbalancingServiceNameHttpFarmAsync(string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BalanceHTTPEnum balance, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long port, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendProbe probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.StickinessHTTPEnum stickiness, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId) {
            return default(Task<_ipLoadbalancing_backendHttp.BackendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameHttpFarmFarmIdAsync(long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public Task<_ipLoadbalancing_backendHttp.BackendHttp> GetIpLoadbalancingServiceNameHttpFarmFarmIdAsync(long farmId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendHttp.BackendHttp>(string.Format("/ipLoadbalancing/{serviceName}/http/farm/{farmId}", farmId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameHttpFarmFarmIdAsync(_ipLoadbalancing_backendHttp.BackendHttp body, long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string address, [System.Runtime.InteropServices.OptionalAttribute()] string cookie, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server?{queryParameters}", farmId, serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> PostIpLoadbalancingServiceNameHttpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] bool backup, [System.Runtime.InteropServices.OptionalAttribute()] string chain, [System.Runtime.InteropServices.OptionalAttribute()] string cookie, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.OnMarkedDownEnum onMarkedDown, [System.Runtime.InteropServices.OptionalAttribute()] long port, [System.Runtime.InteropServices.OptionalAttribute()] bool probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.ProxyProtocolVersionEnum proxyProtocolVersion, [System.Runtime.InteropServices.OptionalAttribute()] bool ssl, [System.Runtime.InteropServices.OptionalAttribute()] long weight) {
            return default(Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> GetIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>(string.Format("/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}", farmId, serverId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer body, long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] long defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] string port, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/http/frontend?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend
        public Task<_ipLoadbalancing_frontendHttp.FrontendHttp> PostIpLoadbalancingServiceNameHttpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] string[] allowedSource, [System.Runtime.InteropServices.OptionalAttribute()] string[] dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] long defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] string[] deniedSource, [System.Runtime.InteropServices.OptionalAttribute()] bool disabled, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] bool hsts, [System.Runtime.InteropServices.OptionalAttribute()] string[] httpHeader, [System.Runtime.InteropServices.OptionalAttribute()] string redirectLocation, [System.Runtime.InteropServices.OptionalAttribute()] bool ssl) {
            return default(Task<_ipLoadbalancing_frontendHttp.FrontendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendHttp.FrontendHttp> GetIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_frontendHttp.FrontendHttp>(string.Format("/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}", frontendId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync(_ipLoadbalancing_frontendHttp.FrontendHttp body, long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpRouteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long frontendId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/http/route?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route
        public Task<_ipLoadbalancing_RouteHttp.RouteHttp> PostIpLoadbalancingServiceNameHttpRouteAsync(_ipLoadbalancing.RouteHttpAction action, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long frontendId, [System.Runtime.InteropServices.OptionalAttribute()] long weight) {
            return default(Task<_ipLoadbalancing_RouteHttp.RouteHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameHttpRouteRouteIdAsync(long routeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        public Task<_ipLoadbalancing_RouteHttp.RouteHttp> GetIpLoadbalancingServiceNameHttpRouteRouteIdAsync(long routeId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_RouteHttp.RouteHttp>(string.Format("/ipLoadbalancing/{serviceName}/http/route/{routeId}", routeId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameHttpRouteRouteIdAsync(_ipLoadbalancing_RouteHttp.RouteHttp body, long routeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync(long routeId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule", routeId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        public Task<_ipLoadbalancing_RouteRule.RouteRule> PostIpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync(string field, _ipLoadbalancing.RouteRuleMatchesEnum match, long routeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] bool negate, [System.Runtime.InteropServices.OptionalAttribute()] string pattern, [System.Runtime.InteropServices.OptionalAttribute()] string subField) {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public Task<_ipLoadbalancing_RouteRule.RouteRule> GetIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_RouteRule.RouteRule>(string.Format("/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}", routeId, ruleId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync(_ipLoadbalancing_RouteRule.RouteRule body, long routeId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/instancesState
        public Task<_ipLoadbalancing.InstancesState[]> GetIpLoadbalancingServiceNameInstancesStateAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.InstancesState[]>(string.Format("/ipLoadbalancing/{serviceName}/instancesState", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/metricsToken
        public Task<_ipLoadbalancing.MetricsToken> GetIpLoadbalancingServiceNameMetricsTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.MetricsToken>(string.Format("/ipLoadbalancing/{serviceName}/metricsToken", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/natIp
        public Task<_ipLoadbalancing.NatIps[]> GetIpLoadbalancingServiceNameNatIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.NatIps[]>(string.Format("/ipLoadbalancing/{serviceName}/natIp", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/pendingChanges
        public Task<_ipLoadbalancing.PendingChanges[]> GetIpLoadbalancingServiceNamePendingChangesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.PendingChanges[]>(string.Format("/ipLoadbalancing/{serviceName}/pendingChanges", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota
        public Task<System.String[]> GetIpLoadbalancingServiceNameQuotaAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing/{serviceName}/quota", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota/{zone}
        public Task<_ipLoadbalancing_Quota.Quota> GetIpLoadbalancingServiceNameQuotaZoneAsync(string serviceName, string zone) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_Quota.Quota>(string.Format("/ipLoadbalancing/{serviceName}/quota/{zone}", serviceName, zone));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota/{zone}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameQuotaZoneAsync(_ipLoadbalancing_Quota.Quota body, string serviceName, string zone) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quotaHistory
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameQuotaHistoryAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly historizedDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly historizedDateTo, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/quotaHistory?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quotaHistory/{id}
        public Task<_ipLoadbalancing_QuotaHistory.QuotaHistory> GetIpLoadbalancingServiceNameQuotaHistoryIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_QuotaHistory.QuotaHistory>(string.Format("/ipLoadbalancing/{serviceName}/quotaHistory/{id}", id, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/refresh
        public Task<_ipLoadbalancing_Task.Task> PostIpLoadbalancingServiceNameRefreshAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return default(Task<_ipLoadbalancing_Task.Task>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/serviceInfos
        public Task<_services.Service> GetIpLoadbalancingServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/ipLoadbalancing/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameSslAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime expireDate, [System.Runtime.InteropServices.OptionalAttribute()] string fingerprint, [System.Runtime.InteropServices.OptionalAttribute()] string serial, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.SslTypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/ssl?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl
        public Task<_ipLoadbalancing_Ssl.Ssl> PostIpLoadbalancingServiceNameSslAsync(string certificate, string key, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string chain, [System.Runtime.InteropServices.OptionalAttribute()] string displayName) {
            return default(Task<_ipLoadbalancing_Ssl.Ssl>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameSslIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        public Task<_ipLoadbalancing_Ssl.Ssl> GetIpLoadbalancingServiceNameSslIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_Ssl.Ssl>(string.Format("/ipLoadbalancing/{serviceName}/ssl/{id}", id, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameSslIdAsync(_ipLoadbalancing_Ssl.Ssl body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/status
        public Task<_ipLoadbalancing.Status> GetIpLoadbalancingServiceNameStatusAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.Status>(string.Format("/ipLoadbalancing/{serviceName}/status", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/task
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.TaskActionEnum action, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDateTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime doneDateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime doneDateTo, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/task/{id}
        public Task<_ipLoadbalancing_Task.Task> GetIpLoadbalancingServiceNameTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_Task.Task>(string.Format("/ipLoadbalancing/{serviceName}/task/{id}", id, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/tcp/farm?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm
        public Task<_ipLoadbalancing_backendTcp.BackendTcp> PostIpLoadbalancingServiceNameTcpFarmAsync(string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BalanceTCPEnum balance, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long port, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendProbe probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.StickinessTCPEnum stickiness, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId) {
            return default(Task<_ipLoadbalancing_backendTcp.BackendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameTcpFarmFarmIdAsync(long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public Task<_ipLoadbalancing_backendTcp.BackendTcp> GetIpLoadbalancingServiceNameTcpFarmFarmIdAsync(long farmId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendTcp.BackendTcp>(string.Format("/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}", farmId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameTcpFarmFarmIdAsync(_ipLoadbalancing_backendTcp.BackendTcp body, long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string address, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server?{queryParameters}", farmId, serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> PostIpLoadbalancingServiceNameTcpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] bool backup, [System.Runtime.InteropServices.OptionalAttribute()] string chain, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.OnMarkedDownEnum onMarkedDown, [System.Runtime.InteropServices.OptionalAttribute()] long port, [System.Runtime.InteropServices.OptionalAttribute()] bool probe, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.ProxyProtocolVersionEnum proxyProtocolVersion, [System.Runtime.InteropServices.OptionalAttribute()] bool ssl, [System.Runtime.InteropServices.OptionalAttribute()] long weight) {
            return default(Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> GetIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>(string.Format("/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}", farmId, serverId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer body, long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] long defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] string port, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/tcp/frontend?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend
        public Task<_ipLoadbalancing_frontendTcp.FrontendTcp> PostIpLoadbalancingServiceNameTcpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] string[] allowedSource, [System.Runtime.InteropServices.OptionalAttribute()] string[] dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] long defaultSslId, [System.Runtime.InteropServices.OptionalAttribute()] string[] deniedSource, [System.Runtime.InteropServices.OptionalAttribute()] bool disabled, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] bool ssl) {
            return default(Task<_ipLoadbalancing_frontendTcp.FrontendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendTcp.FrontendTcp> GetIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_frontendTcp.FrontendTcp>(string.Format("/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}", frontendId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync(_ipLoadbalancing_frontendTcp.FrontendTcp body, long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpRouteAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long frontendId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/tcp/route?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route
        public Task<_ipLoadbalancing_RouteTcp.RouteTcp> PostIpLoadbalancingServiceNameTcpRouteAsync(_ipLoadbalancing.RouteTcpAction action, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long frontendId, [System.Runtime.InteropServices.OptionalAttribute()] long weight) {
            return default(Task<_ipLoadbalancing_RouteTcp.RouteTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameTcpRouteRouteIdAsync(long routeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public Task<_ipLoadbalancing_RouteTcp.RouteTcp> GetIpLoadbalancingServiceNameTcpRouteRouteIdAsync(long routeId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_RouteTcp.RouteTcp>(string.Format("/ipLoadbalancing/{serviceName}/tcp/route/{routeId}", routeId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameTcpRouteRouteIdAsync(_ipLoadbalancing_RouteTcp.RouteTcp body, long routeId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync(long routeId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule", routeId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        public Task<_ipLoadbalancing_RouteRule.RouteRule> PostIpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync(string field, _ipLoadbalancing.RouteRuleMatchesEnum match, long routeId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] bool negate, [System.Runtime.InteropServices.OptionalAttribute()] string pattern, [System.Runtime.InteropServices.OptionalAttribute()] string subField) {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public Task<_ipLoadbalancing_RouteRule.RouteRule> GetIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(long routeId, long ruleId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_RouteRule.RouteRule>(string.Format("/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}", routeId, ruleId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync(_ipLoadbalancing_RouteRule.RouteRule body, long routeId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/terminate
        public Task<System.String> PostIpLoadbalancingServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFarmAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/udp/farm?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm
        public Task<_ipLoadbalancing_backendUdp.BackendUdp> PostIpLoadbalancingServiceNameUdpFarmAsync(long port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long vrackNetworkId) {
            return default(Task<_ipLoadbalancing_backendUdp.BackendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameUdpFarmFarmIdAsync(long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public Task<_ipLoadbalancing_backendUdp.BackendUdp> GetIpLoadbalancingServiceNameUdpFarmFarmIdAsync(long farmId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendUdp.BackendUdp>(string.Format("/ipLoadbalancing/{serviceName}/udp/farm/{farmId}", farmId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameUdpFarmFarmIdAsync(_ipLoadbalancing_backendUdp.BackendUdp body, long farmId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFarmFarmIdServerAsync(long farmId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string address, [System.Runtime.InteropServices.OptionalAttribute()] _ipLoadbalancing.BackendCustomerServerStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server?{queryParameters}", farmId, serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        public Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> PostIpLoadbalancingServiceNameUdpFarmFarmIdServerAsync(string address, long farmId, string serviceName, _ipLoadbalancing.BackendCustomerServerStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long port) {
            return default(Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> GetIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(long farmId, long serverId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>(string.Format("/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}", farmId, serverId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync(_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer body, long farmId, long serverId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFrontendAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] string port, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/udp/frontend?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend
        public Task<_ipLoadbalancing_frontendUdp.FrontendUdp> PostIpLoadbalancingServiceNameUdpFrontendAsync(string port, string serviceName, string zone, [System.Runtime.InteropServices.OptionalAttribute()] string[] dedicatedIpfo, [System.Runtime.InteropServices.OptionalAttribute()] long defaultFarmId, [System.Runtime.InteropServices.OptionalAttribute()] bool disabled, [System.Runtime.InteropServices.OptionalAttribute()] string displayName) {
            return default(Task<_ipLoadbalancing_frontendUdp.FrontendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public Task<_ipLoadbalancing_frontendUdp.FrontendUdp> GetIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(long frontendId, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_frontendUdp.FrontendUdp>(string.Format("/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}", frontendId, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync(_ipLoadbalancing_frontendUdp.FrontendUdp body, long frontendId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network
        public Task<System.Int64[]> GetIpLoadbalancingServiceNameVrackNetworkAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string subnet, [System.Runtime.InteropServices.OptionalAttribute()] long vlan) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ipLoadbalancing/{serviceName}/vrack/network?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostIpLoadbalancingServiceNameVrackNetworkAsync(string natIp, string serviceName, string subnet, [System.Runtime.InteropServices.OptionalAttribute()] string displayName, [System.Runtime.InteropServices.OptionalAttribute()] long[] farmId, [System.Runtime.InteropServices.OptionalAttribute()] long vlan) {
            return default(Task<_ipLoadbalancing_VrackNetwork.VrackNetwork>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public System.Threading.Tasks.Task DeleteIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(string serviceName, long vrackNetworkId) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> GetIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(string serviceName, long vrackNetworkId) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_VrackNetwork.VrackNetwork>(string.Format("/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}", serviceName, vrackNetworkId));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        public System.Threading.Tasks.Task PutIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync(_ipLoadbalancing_VrackNetwork.VrackNetwork body, string serviceName, long vrackNetworkId) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}/updateFarmId
        public Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdUpdateFarmIdAsync(long[] farmId, string serviceName, long vrackNetworkId) {
            return default(Task<_ipLoadbalancing_VrackNetwork.VrackNetwork>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/networkCreationRules
        public Task<_ipLoadbalancing.VrackNetworkCreationRules> GetIpLoadbalancingServiceNameVrackNetworkCreationRulesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.VrackNetworkCreationRules>(string.Format("/ipLoadbalancing/{serviceName}/vrack/networkCreationRules", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/status
        public Task<_ipLoadbalancing.VrackInformation> GetIpLoadbalancingServiceNameVrackStatusAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing.VrackInformation>(string.Format("/ipLoadbalancing/{serviceName}/vrack/status", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone
        public Task<System.String[]> GetIpLoadbalancingServiceNameZoneAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ipLoadbalancing/{serviceName}/zone", serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}
        public Task<_ipLoadbalancing_Zone.Zone> GetIpLoadbalancingServiceNameZoneNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_ipLoadbalancing_Zone.Zone>(string.Format("/ipLoadbalancing/{serviceName}/zone/{name}", name, serviceName));
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}/cancelTermination
        public System.Threading.Tasks.Task PostIpLoadbalancingServiceNameZoneNameCancelTerminationAsync(string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}/terminate
        public System.Threading.Tasks.Task PostIpLoadbalancingServiceNameZoneNameTerminateAsync(string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/cloudLinux
        public Task<System.String[]> GetLicenseCloudLinuxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/cloudLinux?{queryParameters}", queryParameters));
        }
        
        // Path: /license/cloudLinux/orderableVersions
        public Task<_license.CloudLinuxOrderConfiguration[]> GetLicenseCloudLinuxOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.CloudLinuxOrderConfiguration[]>(string.Format("/license/cloudLinux/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/cloudLinux/{serviceName}
        public Task<_license_cloudLinux.CloudLinuxWithIAM> GetLicenseCloudLinuxServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_cloudLinux.CloudLinuxWithIAM>(string.Format("/license/cloudLinux/{serviceName}", serviceName));
        }
        
        // Path: /license/cloudLinux/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseCloudLinuxServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseCloudLinuxServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/cloudLinux/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/cloudLinux/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseCloudLinuxServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/cloudLinux/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseCloudLinuxServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/cloudLinux/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/cloudLinux/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseCloudLinuxServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/cloudLinux/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/cloudLinux/{serviceName}/terminate
        public Task<System.String> PostLicenseCloudLinuxServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/cpanel
        public Task<System.String[]> GetLicenseCpanelAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/cpanel?{queryParameters}", queryParameters));
        }
        
        // Path: /license/cpanel/orderableVersions
        public Task<_license.CpanelOrderConfiguration[]> GetLicenseCpanelOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.CpanelOrderConfiguration[]>(string.Format("/license/cpanel/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/cpanel/{serviceName}
        public Task<_license_cpanel.CpanelWithIAM> GetLicenseCpanelServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_cpanel.CpanelWithIAM>(string.Format("/license/cpanel/{serviceName}", serviceName));
        }
        
        // Path: /license/cpanel/{serviceName}
        public System.Threading.Tasks.Task PutLicenseCpanelServiceNameAsync(_license_cpanel.Cpanel body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/cpanel/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetLicenseCpanelServiceNameAllowedDestinationIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/cpanel/{serviceName}/allowedDestinationIp", serviceName));
        }
        
        // Path: /license/cpanel/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetLicenseCpanelServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            return _client.GetFromJsonAsync<_license.ChangeIpStatus>(string.Format("/license/cpanel/{serviceName}/canLicenseBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/cpanel/{serviceName}/changeIp
        public Task<_license.Task> PostLicenseCpanelServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/cpanel/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseCpanelServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/cpanel/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseCpanelServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/cpanel/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/cpanel/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseCpanelServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/cpanel/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseCpanelServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/cpanel/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/cpanel/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseCpanelServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/cpanel/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/cpanel/{serviceName}/terminate
        public Task<System.String> PostLicenseCpanelServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/directadmin
        public Task<System.String[]> GetLicenseDirectadminAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/directadmin?{queryParameters}", queryParameters));
        }
        
        // Path: /license/directadmin/orderableVersions
        public Task<_license.DirectAdminOrderConfiguration[]> GetLicenseDirectadminOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.DirectAdminOrderConfiguration[]>(string.Format("/license/directadmin/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/directadmin/{serviceName}
        public Task<_license_directadmin.DirectAdminWithIAM> GetLicenseDirectadminServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_directadmin.DirectAdminWithIAM>(string.Format("/license/directadmin/{serviceName}", serviceName));
        }
        
        // Path: /license/directadmin/{serviceName}
        public System.Threading.Tasks.Task PutLicenseDirectadminServiceNameAsync(_license_directadmin.DirectAdmin body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/directadmin/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetLicenseDirectadminServiceNameAllowedDestinationIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/directadmin/{serviceName}/allowedDestinationIp", serviceName));
        }
        
        // Path: /license/directadmin/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetLicenseDirectadminServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            return _client.GetFromJsonAsync<_license.ChangeIpStatus>(string.Format("/license/directadmin/{serviceName}/canLicenseBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/directadmin/{serviceName}/changeIp
        public Task<_license.Task> PostLicenseDirectadminServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/directadmin/{serviceName}/changeOs
        public Task<_license.Task> PostLicenseDirectadminServiceNameChangeOsAsync(_license.DirectAdminOsEnum os, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/directadmin/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseDirectadminServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/directadmin/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseDirectadminServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/directadmin/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/directadmin/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseDirectadminServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/directadmin/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseDirectadminServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/directadmin/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/directadmin/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseDirectadminServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/directadmin/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/directadmin/{serviceName}/terminate
        public Task<System.String> PostLicenseDirectadminServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/office
        public Task<System.String[]> GetLicenseOfficeAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/office?{queryParameters}", queryParameters));
        }
        
        // Path: /license/office/{serviceName}
        public Task<_license_office.OfficeTenantNativeWithIAM> GetLicenseOfficeServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_office.OfficeTenantNativeWithIAM>(string.Format("/license/office/{serviceName}", serviceName));
        }
        
        // Path: /license/office/{serviceName}
        public System.Threading.Tasks.Task PutLicenseOfficeServiceNameAsync(_license_office.OfficeTenantNative body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/office/{serviceName}/domain
        public Task<System.String[]> GetLicenseOfficeServiceNameDomainAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/office/{serviceName}/domain", serviceName));
        }
        
        // Path: /license/office/{serviceName}/domain/{domainName}
        public Task<_license_office.DomainNative> GetLicenseOfficeServiceNameDomainDomainNameAsync(string domainName, string serviceName) {
            return _client.GetFromJsonAsync<_license_office.DomainNative>(string.Format("/license/office/{serviceName}/domain/{domainName}", domainName, serviceName));
        }
        
        // Path: /license/office/{serviceName}/pendingTask
        public Task<System.Int64[]> GetLicenseOfficeServiceNamePendingTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/office/{serviceName}/pendingTask", serviceName));
        }
        
        // Path: /license/office/{serviceName}/pendingTask/{id}
        public Task<_license_office.OfficeTaskNative> GetLicenseOfficeServiceNamePendingTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_license_office.OfficeTaskNative>(string.Format("/license/office/{serviceName}/pendingTask/{id}", id, serviceName));
        }
        
        // Path: /license/office/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseOfficeServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/office/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/office/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseOfficeServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/office/{serviceName}/usageStatistics
        public Task<_license_office.OfficeCurrentStatisticsNative[]> GetLicenseOfficeServiceNameUsageStatisticsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime to) {
            return _client.GetFromJsonAsync<_license_office.OfficeCurrentStatisticsNative[]>(string.Format("/license/office/{serviceName}/usageStatistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/office/{serviceName}/user
        public Task<System.String[]> GetLicenseOfficeServiceNameUserAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string activationEmail, [System.Runtime.InteropServices.OptionalAttribute()] string firstName, [System.Runtime.InteropServices.OptionalAttribute()] string lastName, [System.Runtime.InteropServices.OptionalAttribute()] _license_office.LicenseEnum[] licences) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/office/{serviceName}/user?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/office/{serviceName}/user
        public Task<_license_office.OfficeTaskNative> PostLicenseOfficeServiceNameUserAsync(_license_office.PostUserNative body, string serviceName) {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        public Task<_license_office.OfficeTaskNative> DeleteLicenseOfficeServiceNameUserActivationEmailAsync(string activationEmail, string serviceName) {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        public Task<_license_office.OfficeUserNative> GetLicenseOfficeServiceNameUserActivationEmailAsync(string activationEmail, string serviceName) {
            return _client.GetFromJsonAsync<_license_office.OfficeUserNative>(string.Format("/license/office/{serviceName}/user/{activationEmail}", activationEmail, serviceName));
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        public System.Threading.Tasks.Task PutLicenseOfficeServiceNameUserActivationEmailAsync(_license_office.OfficeUserNativeUpdate body, string activationEmail, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}/changePassword
        public Task<_license_office.OfficeTaskNative> PostLicenseOfficeServiceNameUserActivationEmailChangePasswordAsync(_license_office.OfficeTenantPostChangePassword body, string activationEmail, string serviceName) {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/officePrepaid
        public Task<System.String[]> GetLicenseOfficePrepaidAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/officePrepaid?{queryParameters}", queryParameters));
        }
        
        // Path: /license/officePrepaid/{serviceName}
        public Task<_license_officePrepaid.OfficeUserNativeWithIAM> GetLicenseOfficePrepaidServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_officePrepaid.OfficeUserNativeWithIAM>(string.Format("/license/officePrepaid/{serviceName}", serviceName));
        }
        
        // Path: /license/officePrepaid/{serviceName}
        public System.Threading.Tasks.Task PutLicenseOfficePrepaidServiceNameAsync(_license_officePrepaid.PutOfficeUserNative body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/officePrepaid/{serviceName}/changePassword
        public Task<_license_officePrepaid.OfficeTaskNative> PostLicenseOfficePrepaidServiceNameChangePasswordAsync(_license_officePrepaid.OfficeTenantPostChangePassword body, string serviceName) {
            return default(Task<_license_officePrepaid.OfficeTaskNative>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseOfficePrepaidServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/parentTenant
        public Task<_license_office.OfficeTenant> GetLicenseOfficePrepaidServiceNameParentTenantAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_office.OfficeTenant>(string.Format("/license/officePrepaid/{serviceName}/parentTenant", serviceName));
        }
        
        // Path: /license/officePrepaid/{serviceName}/parentTenant
        public System.Threading.Tasks.Task PutLicenseOfficePrepaidServiceNameParentTenantAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string displayName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/officePrepaid/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseOfficePrepaidServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/officePrepaid/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/officePrepaid/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseOfficePrepaidServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantPendingTask
        public Task<System.Int64[]> GetLicenseOfficePrepaidServiceNameTenantPendingTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/officePrepaid/{serviceName}/tenantPendingTask", serviceName));
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantPendingTask/{id}
        public Task<_license_officePrepaid.OfficeTaskNative> GetLicenseOfficePrepaidServiceNameTenantPendingTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_license_officePrepaid.OfficeTaskNative>(string.Format("/license/officePrepaid/{serviceName}/tenantPendingTask/{id}", id, serviceName));
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantUsageStatistics
        public Task<_license_officePrepaid.OfficeCurrentStatisticsNative[]> GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime from, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime to) {
            return _client.GetFromJsonAsync<_license_officePrepaid.OfficeCurrentStatisticsNative[]>(string.Format("/license/officePrepaid/{serviceName}/tenantUsageStatistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/officePrepaid/{serviceName}/terminate
        public Task<System.String> PostLicenseOfficePrepaidServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/unconfigure
        public Task<_license_officePrepaid.OfficeTaskNative> PostLicenseOfficePrepaidServiceNameUnconfigureAsync(string serviceName) {
            return default(Task<_license_officePrepaid.OfficeTaskNative>);
        }
        
        // Path: /license/plesk
        public Task<System.String[]> GetLicensePleskAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/plesk?{queryParameters}", queryParameters));
        }
        
        // Path: /license/plesk/orderableVersions
        public Task<_license.PleskOrderConfiguration[]> GetLicensePleskOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.PleskOrderConfiguration[]>(string.Format("/license/plesk/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/plesk/{serviceName}
        public Task<_license_plesk.PleskWithIAM> GetLicensePleskServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_plesk.PleskWithIAM>(string.Format("/license/plesk/{serviceName}", serviceName));
        }
        
        // Path: /license/plesk/{serviceName}
        public System.Threading.Tasks.Task PutLicensePleskServiceNameAsync(_license_plesk.Plesk body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/plesk/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetLicensePleskServiceNameAllowedDestinationIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/plesk/{serviceName}/allowedDestinationIp", serviceName));
        }
        
        // Path: /license/plesk/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetLicensePleskServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            return _client.GetFromJsonAsync<_license.ChangeIpStatus>(string.Format("/license/plesk/{serviceName}/canLicenseBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/plesk/{serviceName}/changeIp
        public Task<_license.Task> PostLicensePleskServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/plesk/{serviceName}/confirmTermination
        public Task<System.String> PostLicensePleskServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/plesk/{serviceName}/option
        public Task<_license.OptionLabel[]> GetLicensePleskServiceNameOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license.OptionLabel[]>(string.Format("/license/plesk/{serviceName}/option", serviceName));
        }
        
        // Path: /license/plesk/{serviceName}/option/{label}
        public Task<_license.Task> DeleteLicensePleskServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/plesk/{serviceName}/option/{label}
        public Task<_license.Option> GetLicensePleskServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return _client.GetFromJsonAsync<_license.Option>(string.Format("/license/plesk/{serviceName}/option/{label}", label, serviceName));
        }
        
        // Path: /license/plesk/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicensePleskServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/plesk/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/plesk/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicensePleskServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/plesk/{serviceName}/tasks
        public Task<System.Int64[]> GetLicensePleskServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/plesk/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/plesk/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicensePleskServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/plesk/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/plesk/{serviceName}/terminate
        public Task<System.String> PostLicensePleskServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/redhat
        public Task<System.String[]> GetLicenseRedhatAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/redhat?{queryParameters}", queryParameters));
        }
        
        // Path: /license/redhat/{serviceName}
        public Task<_license_redhat.RedHatWithIAM> GetLicenseRedhatServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_redhat.RedHatWithIAM>(string.Format("/license/redhat/{serviceName}", serviceName));
        }
        
        // Path: /license/redhat/{serviceName}
        public System.Threading.Tasks.Task PutLicenseRedhatServiceNameAsync(_license_redhat.RedHat body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/redhat/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseRedhatServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/redhat/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseRedhatServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/redhat/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/redhat/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseRedhatServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/redhat/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseRedhatServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/redhat/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/redhat/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseRedhatServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/redhat/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/redhat/{serviceName}/terminate
        public Task<System.String> PostLicenseRedhatServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/sqlserver
        public Task<System.String[]> GetLicenseSqlserverAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/sqlserver?{queryParameters}", queryParameters));
        }
        
        // Path: /license/sqlserver/orderableVersions
        public Task<_license.SqlServerOrderConfiguration[]> GetLicenseSqlserverOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.SqlServerOrderConfiguration[]>(string.Format("/license/sqlserver/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/sqlserver/{serviceName}
        public Task<_license_sqlserver.SqlServerWithIAM> GetLicenseSqlserverServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_sqlserver.SqlServerWithIAM>(string.Format("/license/sqlserver/{serviceName}", serviceName));
        }
        
        // Path: /license/sqlserver/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseSqlserverServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/sqlserver/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseSqlserverServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/sqlserver/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/sqlserver/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseSqlserverServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/sqlserver/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseSqlserverServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/sqlserver/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/sqlserver/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseSqlserverServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/sqlserver/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/sqlserver/{serviceName}/terminate
        public Task<System.String> PostLicenseSqlserverServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/virtuozzo
        public Task<System.String[]> GetLicenseVirtuozzoAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/virtuozzo?{queryParameters}", queryParameters));
        }
        
        // Path: /license/virtuozzo/orderableVersions
        public Task<_license.VirtuozzoOrderConfiguration[]> GetLicenseVirtuozzoOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.VirtuozzoOrderConfiguration[]>(string.Format("/license/virtuozzo/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/virtuozzo/{serviceName}
        public Task<_license_virtuozzo.VirtuozzoWithIAM> GetLicenseVirtuozzoServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_virtuozzo.VirtuozzoWithIAM>(string.Format("/license/virtuozzo/{serviceName}", serviceName));
        }
        
        // Path: /license/virtuozzo/{serviceName}
        public System.Threading.Tasks.Task PutLicenseVirtuozzoServiceNameAsync(_license_virtuozzo.Virtuozzo body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/virtuozzo/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetLicenseVirtuozzoServiceNameAllowedDestinationIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/virtuozzo/{serviceName}/allowedDestinationIp", serviceName));
        }
        
        // Path: /license/virtuozzo/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            return _client.GetFromJsonAsync<_license.ChangeIpStatus>(string.Format("/license/virtuozzo/{serviceName}/canLicenseBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/virtuozzo/{serviceName}/changeIp
        public Task<_license.Task> PostLicenseVirtuozzoServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseVirtuozzoServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/option
        public Task<_license.OptionLabel[]> GetLicenseVirtuozzoServiceNameOptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OptionLabel label) {
            return _client.GetFromJsonAsync<_license.OptionLabel[]>(string.Format("/license/virtuozzo/{serviceName}/option?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/virtuozzo/{serviceName}/option/{label}
        public Task<_license.Task> DeleteLicenseVirtuozzoServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/option/{label}
        public Task<_license.Option> GetLicenseVirtuozzoServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return _client.GetFromJsonAsync<_license.Option>(string.Format("/license/virtuozzo/{serviceName}/option/{label}", label, serviceName));
        }
        
        // Path: /license/virtuozzo/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseVirtuozzoServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/virtuozzo/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/virtuozzo/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseVirtuozzoServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/virtuozzo/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseVirtuozzoServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/virtuozzo/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/virtuozzo/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseVirtuozzoServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/virtuozzo/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/virtuozzo/{serviceName}/terminate
        public Task<System.String> PostLicenseVirtuozzoServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/windows
        public Task<System.String[]> GetLicenseWindowsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/windows?{queryParameters}", queryParameters));
        }
        
        // Path: /license/windows/orderableVersions
        public Task<_license.WindowsOrderConfiguration[]> GetLicenseWindowsOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.WindowsOrderConfiguration[]>(string.Format("/license/windows/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/windows/{serviceName}
        public Task<_license_windows.WindowsWithIAM> GetLicenseWindowsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_windows.WindowsWithIAM>(string.Format("/license/windows/{serviceName}", serviceName));
        }
        
        // Path: /license/windows/{serviceName}
        public System.Threading.Tasks.Task PutLicenseWindowsServiceNameAsync(_license_windows.Windows body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/windows/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseWindowsServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/windows/{serviceName}/option
        public Task<_license.OptionLabel[]> GetLicenseWindowsServiceNameOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license.OptionLabel[]>(string.Format("/license/windows/{serviceName}/option", serviceName));
        }
        
        // Path: /license/windows/{serviceName}/option/{label}
        public Task<_license.Task> DeleteLicenseWindowsServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/windows/{serviceName}/option/{label}
        public Task<_license.Option> GetLicenseWindowsServiceNameOptionLabelAsync(_license.OptionLabel label, string serviceName) {
            return _client.GetFromJsonAsync<_license.Option>(string.Format("/license/windows/{serviceName}/option/{label}", label, serviceName));
        }
        
        // Path: /license/windows/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseWindowsServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/windows/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/windows/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseWindowsServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/windows/{serviceName}/sqlServer
        public Task<_license.Task> PostLicenseWindowsServiceNameSqlServerAsync(string licenseId, string serviceName, _license.WindowsSqlVersionEnum version) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/windows/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseWindowsServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/windows/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/windows/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseWindowsServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/windows/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/windows/{serviceName}/terminate
        public Task<System.String> PostLicenseWindowsServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /license/worklight
        public Task<System.String[]> GetLicenseWorklightAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/worklight?{queryParameters}", queryParameters));
        }
        
        // Path: /license/worklight/orderableVersions
        public Task<_license.WorkLightOrderConfiguration[]> GetLicenseWorklightOrderableVersionsAsync(string ip) {
            return _client.GetFromJsonAsync<_license.WorkLightOrderConfiguration[]>(string.Format("/license/worklight/orderableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /license/worklight/{serviceName}
        public Task<_license_worklight.WorkLightWithIAM> GetLicenseWorklightServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_license_worklight.WorkLightWithIAM>(string.Format("/license/worklight/{serviceName}", serviceName));
        }
        
        // Path: /license/worklight/{serviceName}
        public System.Threading.Tasks.Task PutLicenseWorklightServiceNameAsync(_license_worklight.WorkLight body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/worklight/{serviceName}/allowedDestinationIp
        public Task<System.String[]> GetLicenseWorklightServiceNameAllowedDestinationIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/license/worklight/{serviceName}/allowedDestinationIp", serviceName));
        }
        
        // Path: /license/worklight/{serviceName}/canLicenseBeMovedTo
        public Task<_license.ChangeIpStatus> GetLicenseWorklightServiceNameCanLicenseBeMovedToAsync(string destinationIp, string serviceName) {
            return _client.GetFromJsonAsync<_license.ChangeIpStatus>(string.Format("/license/worklight/{serviceName}/canLicenseBeMovedTo?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/worklight/{serviceName}/changeIp
        public Task<_license.Task> PostLicenseWorklightServiceNameChangeIpAsync(string destinationIp, string serviceName) {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/worklight/{serviceName}/confirmTermination
        public Task<System.String> PostLicenseWorklightServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /license/worklight/{serviceName}/serviceInfos
        public Task<_services.Service> GetLicenseWorklightServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/license/worklight/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /license/worklight/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutLicenseWorklightServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /license/worklight/{serviceName}/tasks
        public Task<System.Int64[]> GetLicenseWorklightServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.ActionType action, [System.Runtime.InteropServices.OptionalAttribute()] _license.TaskStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/license/worklight/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /license/worklight/{serviceName}/tasks/{taskId}
        public Task<_license.Task> GetLicenseWorklightServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_license.Task>(string.Format("/license/worklight/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /license/worklight/{serviceName}/terminate
        public Task<System.String> PostLicenseWorklightServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /me
        public Task<_nichandle.Nichandle> GetMeAsync() {
            return _client.GetFromJsonAsync<_nichandle.Nichandle>("/me");
        }
        
        // Path: /me
        public System.Threading.Tasks.Task PutMeAsync(_nichandle.Nichandle body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/abuse
        public Task<System.String[]> GetMeAbuseAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/abuse");
        }
        
        // Path: /me/abuse/{id}
        public Task<_me_abuse.Abuse> GetMeAbuseIdAsync(string id) {
            return _client.GetFromJsonAsync<_me_abuse.Abuse>(string.Format("/me/abuse/{id}", id));
        }
        
        // Path: /me/accessRestriction/backupCode
        public System.Threading.Tasks.Task DeleteMeAccessRestrictionBackupCodeAsync() {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/backupCode
        public Task<_nichandle_accessRestriction.SOTPAccount> GetMeAccessRestrictionBackupCodeAsync() {
            return _client.GetFromJsonAsync<_nichandle_accessRestriction.SOTPAccount>("/me/accessRestriction/backupCode");
        }
        
        // Path: /me/accessRestriction/backupCode
        public Task<_nichandle_accessRestriction.SOTPSecret> PostMeAccessRestrictionBackupCodeAsync() {
            return default(Task<_nichandle_accessRestriction.SOTPSecret>);
        }
        
        // Path: /me/accessRestriction/backupCode/disable
        public System.Threading.Tasks.Task PostMeAccessRestrictionBackupCodeDisableAsync(string code) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/backupCode/enable
        public System.Threading.Tasks.Task PostMeAccessRestrictionBackupCodeEnableAsync(string code) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/backupCode/validate
        public Task<_nichandle_accessRestriction.SOTPValidate> PostMeAccessRestrictionBackupCodeValidateAsync(string code) {
            return default(Task<_nichandle_accessRestriction.SOTPValidate>);
        }
        
        // Path: /me/accessRestriction/developerMode
        public Task<_nichandle.DeveloperModeRestriction> GetMeAccessRestrictionDeveloperModeAsync() {
            return _client.GetFromJsonAsync<_nichandle.DeveloperModeRestriction>("/me/accessRestriction/developerMode");
        }
        
        // Path: /me/accessRestriction/developerMode
        public System.Threading.Tasks.Task PutMeAccessRestrictionDeveloperModeAsync(_nichandle.DeveloperModeRestriction body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/ip
        public Task<System.Int64[]> GetMeAccessRestrictionIpAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/accessRestriction/ip");
        }
        
        // Path: /me/accessRestriction/ip
        public System.Threading.Tasks.Task PostMeAccessRestrictionIpAsync(string ip, _nichandle_accessRestriction.IpRestrictionRuleEnum rule, bool warning) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/ip/{id}
        public System.Threading.Tasks.Task DeleteMeAccessRestrictionIpIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/ip/{id}
        public Task<_nichandle.IpRestriction> GetMeAccessRestrictionIpIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle.IpRestriction>(string.Format("/me/accessRestriction/ip/{id}", id));
        }
        
        // Path: /me/accessRestriction/ip/{id}
        public System.Threading.Tasks.Task PutMeAccessRestrictionIpIdAsync(_nichandle.IpRestriction body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/ipDefaultRule
        public Task<_nichandle.IpRestrictionDefaultRule> GetMeAccessRestrictionIpDefaultRuleAsync() {
            return _client.GetFromJsonAsync<_nichandle.IpRestrictionDefaultRule>("/me/accessRestriction/ipDefaultRule");
        }
        
        // Path: /me/accessRestriction/ipDefaultRule
        public System.Threading.Tasks.Task PutMeAccessRestrictionIpDefaultRuleAsync(_nichandle.IpRestrictionDefaultRule body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/sms
        public Task<System.Int64[]> GetMeAccessRestrictionSmsAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/accessRestriction/sms");
        }
        
        // Path: /me/accessRestriction/sms
        public Task<_nichandle_accessRestriction.SmsSecret> PostMeAccessRestrictionSmsAsync(string phone) {
            return default(Task<_nichandle_accessRestriction.SmsSecret>);
        }
        
        // Path: /me/accessRestriction/sms/{id}
        public System.Threading.Tasks.Task DeleteMeAccessRestrictionSmsIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/sms/{id}
        public Task<_nichandle_accessRestriction.SmsAccount> GetMeAccessRestrictionSmsIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle_accessRestriction.SmsAccount>(string.Format("/me/accessRestriction/sms/{id}", id));
        }
        
        // Path: /me/accessRestriction/sms/{id}
        public System.Threading.Tasks.Task PutMeAccessRestrictionSmsIdAsync(_nichandle_accessRestriction.SmsAccount body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/sms/{id}/disable
        public System.Threading.Tasks.Task PostMeAccessRestrictionSmsIdDisableAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/sms/{id}/enable
        public System.Threading.Tasks.Task PostMeAccessRestrictionSmsIdEnableAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/sms/{id}/sendCode
        public Task<_nichandle_accessRestriction.SmsCode> PostMeAccessRestrictionSmsIdSendCodeAsync(long id) {
            return default(Task<_nichandle_accessRestriction.SmsCode>);
        }
        
        // Path: /me/accessRestriction/sms/{id}/validate
        public System.Threading.Tasks.Task PostMeAccessRestrictionSmsIdValidateAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/totp
        public Task<System.Int64[]> GetMeAccessRestrictionTotpAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/accessRestriction/totp");
        }
        
        // Path: /me/accessRestriction/totp
        public Task<_nichandle_accessRestriction.TOTPSecret> PostMeAccessRestrictionTotpAsync() {
            return default(Task<_nichandle_accessRestriction.TOTPSecret>);
        }
        
        // Path: /me/accessRestriction/totp/{id}
        public System.Threading.Tasks.Task DeleteMeAccessRestrictionTotpIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/totp/{id}
        public Task<_nichandle_accessRestriction.TOTPAccount> GetMeAccessRestrictionTotpIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle_accessRestriction.TOTPAccount>(string.Format("/me/accessRestriction/totp/{id}", id));
        }
        
        // Path: /me/accessRestriction/totp/{id}
        public System.Threading.Tasks.Task PutMeAccessRestrictionTotpIdAsync(_nichandle_accessRestriction.TOTPAccount body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/totp/{id}/disable
        public System.Threading.Tasks.Task PostMeAccessRestrictionTotpIdDisableAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/totp/{id}/enable
        public System.Threading.Tasks.Task PostMeAccessRestrictionTotpIdEnableAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/totp/{id}/validate
        public System.Threading.Tasks.Task PostMeAccessRestrictionTotpIdValidateAsync(string code, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/u2f
        public Task<System.Int64[]> GetMeAccessRestrictionU2fAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/accessRestriction/u2f");
        }
        
        // Path: /me/accessRestriction/u2f
        public Task<_nichandle_accessRestriction.U2FRegisterChallenge> PostMeAccessRestrictionU2fAsync() {
            return default(Task<_nichandle_accessRestriction.U2FRegisterChallenge>);
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        public System.Threading.Tasks.Task DeleteMeAccessRestrictionU2fIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        public Task<_nichandle_accessRestriction.U2FAccount> GetMeAccessRestrictionU2fIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle_accessRestriction.U2FAccount>(string.Format("/me/accessRestriction/u2f/{id}", id));
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        public System.Threading.Tasks.Task PutMeAccessRestrictionU2fIdAsync(_nichandle_accessRestriction.U2FAccount body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/u2f/{id}/disable
        public System.Threading.Tasks.Task PostMeAccessRestrictionU2fIdDisableAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/u2f/{id}/enable
        public System.Threading.Tasks.Task PostMeAccessRestrictionU2fIdEnableAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/accessRestriction/u2f/{id}/validate
        public System.Threading.Tasks.Task PostMeAccessRestrictionU2fIdValidateAsync(string attestationObject, string clientDataJSON, long id, string rawId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/agreements
        public Task<System.Int64[]> GetMeAgreementsAsync([System.Runtime.InteropServices.OptionalAttribute()] _agreements.AgreementStateEnum agreed, [System.Runtime.InteropServices.OptionalAttribute()] long contractId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/agreements?{queryParameters}", queryParameters));
        }
        
        // Path: /me/agreements/{id}
        public Task<_agreements.ContractAgreement> GetMeAgreementsIdAsync(long id) {
            return _client.GetFromJsonAsync<_agreements.ContractAgreement>(string.Format("/me/agreements/{id}", id));
        }
        
        // Path: /me/agreements/{id}/accept
        public Task<System.String> PostMeAgreementsIdAcceptAsync(long id) {
            return default(Task<System.String>);
        }
        
        // Path: /me/agreements/{id}/contract
        public Task<_agreements.Contract> GetMeAgreementsIdContractAsync(long id) {
            return _client.GetFromJsonAsync<_agreements.Contract>(string.Format("/me/agreements/{id}/contract", id));
        }
        
        // Path: /me/api/application
        public Task<System.Int64[]> GetMeApiApplicationAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/api/application");
        }
        
        // Path: /me/api/application/{applicationId}
        public System.Threading.Tasks.Task DeleteMeApiApplicationApplicationIdAsync(long applicationId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/api/application/{applicationId}
        public Task<_auth.ApiApplication> GetMeApiApplicationApplicationIdAsync(long applicationId) {
            return _client.GetFromJsonAsync<_auth.ApiApplication>(string.Format("/me/api/application/{applicationId}", applicationId));
        }
        
        // Path: /me/api/credential
        public Task<System.Int64[]> GetMeApiCredentialAsync([System.Runtime.InteropServices.OptionalAttribute()] long applicationId, [System.Runtime.InteropServices.OptionalAttribute()] _auth.CredentialStateEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/api/credential?{queryParameters}", queryParameters));
        }
        
        // Path: /me/api/credential/{credentialId}
        public System.Threading.Tasks.Task DeleteMeApiCredentialCredentialIdAsync(long credentialId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/api/credential/{credentialId}
        public Task<_auth.ApiCredential> GetMeApiCredentialCredentialIdAsync(long credentialId) {
            return _client.GetFromJsonAsync<_auth.ApiCredential>(string.Format("/me/api/credential/{credentialId}", credentialId));
        }
        
        // Path: /me/api/credential/{credentialId}
        public System.Threading.Tasks.Task PutMeApiCredentialCredentialIdAsync(_auth.ApiCredential body, long credentialId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/api/credential/{credentialId}/application
        public Task<_auth.ApiApplication> GetMeApiCredentialCredentialIdApplicationAsync(long credentialId) {
            return _client.GetFromJsonAsync<_auth.ApiApplication>(string.Format("/me/api/credential/{credentialId}/application", credentialId));
        }
        
        // Path: /me/api/log/kind
        public Task<System.String[]> GetMeApiLogKindAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/api/log/kind");
        }
        
        // Path: /me/api/log/kind/{name}
        public Task<_dbaas_logs.LogKind> GetMeApiLogKindNameAsync(string name) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogKind>(string.Format("/me/api/log/kind/{name}", name));
        }
        
        // Path: /me/api/log/subscription
        public Task<System.Guid[]> GetMeApiLogSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] string kind) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/me/api/log/subscription?{queryParameters}", queryParameters));
        }
        
        // Path: /me/api/log/subscription
        public Task<_dbaas_logs.LogSubscriptionResponse> PostMeApiLogSubscriptionAsync(_dbaas_logs.LogSubscriptionCreation body) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /me/api/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscriptionResponse> DeleteMeApiLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /me/api/log/subscription/{subscriptionId}
        public Task<_dbaas_logs.LogSubscription> GetMeApiLogSubscriptionSubscriptionIdAsync(System.Guid subscriptionId) {
            return _client.GetFromJsonAsync<_dbaas_logs.LogSubscription>(string.Format("/me/api/log/subscription/{subscriptionId}", subscriptionId));
        }
        
        // Path: /me/api/log/url
        public Task<_dbaas_logs.TemporaryLogsLink> PostMeApiLogUrlAsync(_dbaas_logs.LogUrlCreation body) {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /me/api/logs/forward
        public Task<_apilogs.ForwardResponse> PostMeApiLogsForwardAsync(_apilogs.ForwardRequest body) {
            return default(Task<_apilogs.ForwardResponse>);
        }
        
        // Path: /me/api/logs/self
        public Task<System.Int64[]> GetMeApiLogsSelfAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/api/logs/self");
        }
        
        // Path: /me/api/logs/self/{logId}
        public Task<_api.Log> GetMeApiLogsSelfLogIdAsync(long logId) {
            return _client.GetFromJsonAsync<_api.Log>(string.Format("/me/api/logs/self/{logId}", logId));
        }
        
        // Path: /me/api/logs/services
        public Task<System.Int64[]> GetMeApiLogsServicesAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/api/logs/services");
        }
        
        // Path: /me/api/logs/services/{logId}
        public Task<_api.Log> GetMeApiLogsServicesLogIdAsync(long logId) {
            return _client.GetFromJsonAsync<_api.Log>(string.Format("/me/api/logs/services/{logId}", logId));
        }
        
        // Path: /me/api/oauth2/client
        public Task<System.String[]> GetMeApiOauth2ClientAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/api/oauth2/client");
        }
        
        // Path: /me/api/oauth2/client
        public Task<_oauth2.clientSecret> PostMeApiOauth2ClientAsync(_oauth2.clientRequest body) {
            return default(Task<_oauth2.clientSecret>);
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        public System.Threading.Tasks.Task DeleteMeApiOauth2ClientClientIdAsync(string clientId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        public Task<_oauth2.client> GetMeApiOauth2ClientClientIdAsync(string clientId) {
            return _client.GetFromJsonAsync<_oauth2.client>(string.Format("/me/api/oauth2/client/{clientId}", clientId));
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        public System.Threading.Tasks.Task PutMeApiOauth2ClientClientIdAsync(_oauth2.client body, string clientId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/autorenew
        public Task<_nichandle.NicAutorenewInfos> GetMeAutorenewAsync() {
            return _client.GetFromJsonAsync<_nichandle.NicAutorenewInfos>("/me/autorenew");
        }
        
        // Path: /me/autorenew
        public System.Threading.Tasks.Task PostMeAutorenewAsync(long renewDay) {
            return Task.CompletedTask;
        }
        
        // Path: /me/autorenew
        public System.Threading.Tasks.Task PutMeAutorenewAsync(_nichandle.NicAutorenewInfos body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/availableAutomaticPaymentMeans
        public Task<_billing.AutomaticPaymentMean> GetMeAvailableAutomaticPaymentMeansAsync() {
            return _client.GetFromJsonAsync<_billing.AutomaticPaymentMean>("/me/availableAutomaticPaymentMeans");
        }
        
        // Path: /me/bill
        public Task<System.String[]> GetMeBillAsync([System.Runtime.InteropServices.OptionalAttribute()] _billing.CategoryEnum category, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo, [System.Runtime.InteropServices.OptionalAttribute()] long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/bill?{queryParameters}", queryParameters));
        }
        
        // Path: /me/bill/export
        public System.Threading.Tasks.Task PostMeBillExportAsync(_billing.ArchiveTypeEnum archiveType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate, [System.Runtime.InteropServices.OptionalAttribute()] string[] ids, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime startDate) {
            return Task.CompletedTask;
        }
        
        // Path: /me/bill/{billId}
        public Task<_billing.Bill> GetMeBillBillIdAsync(string billId) {
            return _client.GetFromJsonAsync<_billing.Bill>(string.Format("/me/bill/{billId}", billId));
        }
        
        // Path: /me/bill/{billId}/debt
        public Task<_debt.Debt> GetMeBillBillIdDebtAsync(string billId) {
            return _client.GetFromJsonAsync<_debt.Debt>(string.Format("/me/bill/{billId}/debt", billId));
        }
        
        // Path: /me/bill/{billId}/debt/operation
        public Task<System.Int64[]> GetMeBillBillIdDebtOperationAsync(string billId, [System.Runtime.InteropServices.OptionalAttribute()] long depositOrderId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/bill/{billId}/debt/operation?{queryParameters}", billId, queryParameters));
        }
        
        // Path: /me/bill/{billId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetMeBillBillIdDebtOperationOperationIdAsync(string billId, long operationId) {
            return _client.GetFromJsonAsync<_debt.Operation>(string.Format("/me/bill/{billId}/debt/operation/{operationId}", billId, operationId));
        }
        
        // Path: /me/bill/{billId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetMeBillBillIdDebtOperationOperationIdAssociatedObjectAsync(string billId, long operationId) {
            return _client.GetFromJsonAsync<_debt_entry.AssociatedObject>(string.Format("/me/bill/{billId}/debt/operation/{operationId}/associatedObject", billId, operationId));
        }
        
        // Path: /me/bill/{billId}/debt/pay
        public Task<_billing.Order> PostMeBillBillIdDebtPayAsync(string billId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/bill/{billId}/details
        public Task<System.String[]> GetMeBillBillIdDetailsAsync(string billId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/bill/{billId}/details", billId));
        }
        
        // Path: /me/bill/{billId}/details/{billDetailId}
        public Task<_billing.BillDetail> GetMeBillBillIdDetailsBillDetailIdAsync(string billDetailId, string billId) {
            return _client.GetFromJsonAsync<_billing.BillDetail>(string.Format("/me/bill/{billId}/details/{billDetailId}", billDetailId, billId));
        }
        
        // Path: /me/bill/{billId}/payment
        public Task<_billing.Payment> GetMeBillBillIdPaymentAsync(string billId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/bill/{billId}/payment", billId));
        }
        
        // Path: /me/billing/group
        public Task<System.Int64[]> GetMeBillingGroupAsync([System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] long serviceId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/billing/group?{queryParameters}", queryParameters));
        }
        
        // Path: /me/billing/group
        public Task<_me_billing_group.BillingGroup> PostMeBillingGroupAsync(_me_billing_group.BillingGroup body) {
            return default(Task<_me_billing_group.BillingGroup>);
        }
        
        // Path: /me/billing/group/{groupId}
        public System.Threading.Tasks.Task DeleteMeBillingGroupGroupIdAsync(long groupId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/group/{groupId}
        public Task<_me_billing_group.BillingGroup> GetMeBillingGroupGroupIdAsync(long groupId) {
            return _client.GetFromJsonAsync<_me_billing_group.BillingGroup>(string.Format("/me/billing/group/{groupId}", groupId));
        }
        
        // Path: /me/billing/group/{groupId}
        public System.Threading.Tasks.Task PutMeBillingGroupGroupIdAsync(_me_billing_group.BillingGroup body, long groupId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/group/{groupId}/service
        public Task<System.Int64[]> GetMeBillingGroupGroupIdServiceAsync(long groupId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/billing/group/{groupId}/service", groupId));
        }
        
        // Path: /me/billing/group/{groupId}/service
        public Task<_me_billing_group.Service> PostMeBillingGroupGroupIdServiceAsync(_me_billing_group_service.Create body, long groupId) {
            return default(Task<_me_billing_group.Service>);
        }
        
        // Path: /me/billing/group/{groupId}/service/{serviceId}
        public System.Threading.Tasks.Task DeleteMeBillingGroupGroupIdServiceServiceIdAsync(long groupId, long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/group/{groupId}/service/{serviceId}
        public Task<_me_billing_group.Service> GetMeBillingGroupGroupIdServiceServiceIdAsync(long groupId, long serviceId) {
            return _client.GetFromJsonAsync<_me_billing_group.Service>(string.Format("/me/billing/group/{groupId}/service/{serviceId}", groupId, serviceId));
        }
        
        // Path: /me/billing/invoicesByPostalMail
        public Task<System.Boolean> GetMeBillingInvoicesByPostalMailAsync() {
            return _client.GetFromJsonAsync<bool>("/me/billing/invoicesByPostalMail");
        }
        
        // Path: /me/billing/invoicesByPostalMail
        public System.Threading.Tasks.Task PostMeBillingInvoicesByPostalMailAsync(bool enable) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/purchaseOrder
        public Task<System.Int64[]> GetMeBillingPurchaseOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] long billingGroupId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/billing/purchaseOrder?{queryParameters}", queryParameters));
        }
        
        // Path: /me/billing/purchaseOrder
        public Task<_me_billing_purchaseOrder.PurchaseOrder> PostMeBillingPurchaseOrderAsync(_me_billing_purchaseOrder.Creation body) {
            return default(Task<_me_billing_purchaseOrder.PurchaseOrder>);
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        public System.Threading.Tasks.Task DeleteMeBillingPurchaseOrderIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        public Task<_me_billing_purchaseOrder.PurchaseOrder> GetMeBillingPurchaseOrderIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_billing_purchaseOrder.PurchaseOrder>(string.Format("/me/billing/purchaseOrder/{id}", id));
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        public System.Threading.Tasks.Task PutMeBillingPurchaseOrderIdAsync(_me_billing_purchaseOrder.Update body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/billing/report/consumption
        public Task<System.String[]> GetMeBillingReportConsumptionAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/billing/report/consumption");
        }
        
        // Path: /me/billing/report/consumption
        public Task<_me_billing_report_consumption.CreationResponse> PostMeBillingReportConsumptionAsync(_me_billing_report_consumption.CreationRequest body) {
            return default(Task<_me_billing_report_consumption.CreationResponse>);
        }
        
        // Path: /me/billing/report/consumption/{taskId}
        public Task<_me_billing_report.Consumption> GetMeBillingReportConsumptionTaskIdAsync(string taskId) {
            return _client.GetFromJsonAsync<_me_billing_report.Consumption>(string.Format("/me/billing/report/consumption/{taskId}", taskId));
        }
        
        // Path: /me/bringYourOwnIp/token
        public Task<System.String> GetMeBringYourOwnIpTokenAsync(_ip.CampusEnum campus) {
            return _client.GetFromJsonAsync<string>(string.Format("/me/bringYourOwnIp/token?{queryParameters}", queryParameters));
        }
        
        // Path: /me/carbonCalculator/hasInvoice
        public Task<_carbonCalculator.HasInvoiceResponse> GetMeCarbonCalculatorHasInvoiceAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly date) {
            return _client.GetFromJsonAsync<_carbonCalculator.HasInvoiceResponse>(string.Format("/me/carbonCalculator/hasInvoice?{queryParameters}", queryParameters));
        }
        
        // Path: /me/carbonCalculator/task
        public Task<_carbonCalculator.Task[]> GetMeCarbonCalculatorTaskAsync() {
            return _client.GetFromJsonAsync<_carbonCalculator.Task[]>("/me/carbonCalculator/task");
        }
        
        // Path: /me/carbonCalculator/task
        public Task<_carbonCalculator.CalculationResponse> PostMeCarbonCalculatorTaskAsync(_carbonCalculator.CalculationRequest body) {
            return default(Task<_carbonCalculator.CalculationResponse>);
        }
        
        // Path: /me/carbonCalculator/task/{taskID}
        public Task<_carbonCalculator.Task> GetMeCarbonCalculatorTaskTaskIDAsync(string taskID) {
            return _client.GetFromJsonAsync<_carbonCalculator.Task>(string.Format("/me/carbonCalculator/task/{taskID}", taskID));
        }
        
        // Path: /me/certificates
        public Task<System.String[]> GetMeCertificatesAsync([System.Runtime.InteropServices.OptionalAttribute()] string name) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/certificates?{queryParameters}", queryParameters));
        }
        
        // Path: /me/changeEmail
        public Task<_nichandle_emailChange.Task> PostMeChangeEmailAsync(string newEmail) {
            return default(Task<_nichandle_emailChange.Task>);
        }
        
        // Path: /me/changePassword
        public System.Threading.Tasks.Task PostMeChangePasswordAsync() {
            return Task.CompletedTask;
        }
        
        // Path: /me/consent
        public Task<_me_consent.Campaign[]> GetMeConsentAsync() {
            return _client.GetFromJsonAsync<_me_consent.Campaign[]>("/me/consent");
        }
        
        // Path: /me/consent/{campaignName}
        public Task<_me_consent.Campaign> GetMeConsentCampaignNameAsync(string campaignName) {
            return _client.GetFromJsonAsync<_me_consent.Campaign>(string.Format("/me/consent/{campaignName}", campaignName));
        }
        
        // Path: /me/consent/{campaignName}/decision
        public Task<_me_consent.Consent> GetMeConsentCampaignNameDecisionAsync(string campaignName) {
            return _client.GetFromJsonAsync<_me_consent.Consent>(string.Format("/me/consent/{campaignName}/decision", campaignName));
        }
        
        // Path: /me/consent/{campaignName}/decision
        public System.Threading.Tasks.Task PutMeConsentCampaignNameDecisionAsync(_me_consent.Decision body, string campaignName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/consumption/usage/current
        public Task<_me_consumption.Transaction[]> GetMeConsumptionUsageCurrentAsync() {
            return _client.GetFromJsonAsync<_me_consumption.Transaction[]>("/me/consumption/usage/current");
        }
        
        // Path: /me/consumption/usage/forecast
        public Task<_me_consumption.Transaction[]> GetMeConsumptionUsageForecastAsync() {
            return _client.GetFromJsonAsync<_me_consumption.Transaction[]>("/me/consumption/usage/forecast");
        }
        
        // Path: /me/consumption/usage/history
        public Task<_me_consumption.Transaction[]> GetMeConsumptionUsageHistoryAsync(System.DateTime beginDate, System.DateTime endDate) {
            return _client.GetFromJsonAsync<_me_consumption.Transaction[]>(string.Format("/me/consumption/usage/history?{queryParameters}", queryParameters));
        }
        
        // Path: /me/contact
        public Task<System.Int64[]> GetMeContactAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/contact");
        }
        
        // Path: /me/contact
        public Task<_me_contact.Contact> PostMeContactAsync(_me_contact.Contact body) {
            return default(Task<_me_contact.Contact>);
        }
        
        // Path: /me/contact/{contactId}
        public Task<_me_contact.Contact> GetMeContactContactIdAsync(long contactId) {
            return _client.GetFromJsonAsync<_me_contact.Contact>(string.Format("/me/contact/{contactId}", contactId));
        }
        
        // Path: /me/contact/{contactId}
        public Task<_me_contact.Contact> PutMeContactContactIdAsync(_me_contact.Contact body, long contactId) {
            return default(Task<_me_contact.Contact>);
        }
        
        // Path: /me/contact/{contactId}/fields
        public Task<_me_contact.FieldInformation[]> GetMeContactContactIdFieldsAsync(long contactId) {
            return _client.GetFromJsonAsync<_me_contact.FieldInformation[]>(string.Format("/me/contact/{contactId}/fields", contactId));
        }
        
        // Path: /me/credit/balance
        public Task<System.String[]> GetMeCreditBalanceAsync([System.Runtime.InteropServices.OptionalAttribute()] _me_credit_balance.TypeEnum type) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/credit/balance?{queryParameters}", queryParameters));
        }
        
        // Path: /me/credit/balance/{balanceName}
        public Task<_me_credit.Balance> GetMeCreditBalanceBalanceNameAsync(string balanceName) {
            return _client.GetFromJsonAsync<_me_credit.Balance>(string.Format("/me/credit/balance/{balanceName}", balanceName));
        }
        
        // Path: /me/credit/balance/{balanceName}/movement
        public Task<System.Int64[]> GetMeCreditBalanceBalanceNameMovementAsync(string balanceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/credit/balance/{balanceName}/movement", balanceName));
        }
        
        // Path: /me/credit/balance/{balanceName}/movement/{movementId}
        public Task<_me_credit_balance.Movement> GetMeCreditBalanceBalanceNameMovementMovementIdAsync(string balanceName, long movementId) {
            return _client.GetFromJsonAsync<_me_credit_balance.Movement>(string.Format("/me/credit/balance/{balanceName}/movement/{movementId}", balanceName, movementId));
        }
        
        // Path: /me/credit/code
        public Task<_me_credit_balance.Movement> PostMeCreditCodeAsync(_me_credit_code.Redeem body) {
            return default(Task<_me_credit_balance.Movement>);
        }
        
        // Path: /me/debtAccount
        public Task<_debt.Balance> GetMeDebtAccountAsync() {
            return _client.GetFromJsonAsync<_debt.Balance>("/me/debtAccount");
        }
        
        // Path: /me/debtAccount/debt
        public Task<System.Int64[]> GetMeDebtAccountDebtAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/debtAccount/debt");
        }
        
        // Path: /me/debtAccount/debt/{debtId}
        public Task<_debt.Debt> GetMeDebtAccountDebtDebtIdAsync(long debtId) {
            return _client.GetFromJsonAsync<_debt.Debt>(string.Format("/me/debtAccount/debt/{debtId}", debtId));
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation
        public Task<System.Int64[]> GetMeDebtAccountDebtDebtIdOperationAsync(long debtId, [System.Runtime.InteropServices.OptionalAttribute()] long depositOrderId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/debtAccount/debt/{debtId}/operation?{queryParameters}", debtId, queryParameters));
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation/{operationId}
        public Task<_debt.Operation> GetMeDebtAccountDebtDebtIdOperationOperationIdAsync(long debtId, long operationId) {
            return _client.GetFromJsonAsync<_debt.Operation>(string.Format("/me/debtAccount/debt/{debtId}/operation/{operationId}", debtId, operationId));
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectAsync(long debtId, long operationId) {
            return _client.GetFromJsonAsync<_debt_entry.AssociatedObject>(string.Format("/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject", debtId, operationId));
        }
        
        // Path: /me/debtAccount/debt/{debtId}/pay
        public Task<_billing.Order> PostMeDebtAccountDebtDebtIdPayAsync(long debtId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/debtAccount/pay
        public Task<_billing.Order> PostMeDebtAccountPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/deposit
        public Task<System.String[]> GetMeDepositAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo, [System.Runtime.InteropServices.OptionalAttribute()] long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/deposit?{queryParameters}", queryParameters));
        }
        
        // Path: /me/deposit/{depositId}
        public Task<_billing.Deposit> GetMeDepositDepositIdAsync(string depositId) {
            return _client.GetFromJsonAsync<_billing.Deposit>(string.Format("/me/deposit/{depositId}", depositId));
        }
        
        // Path: /me/deposit/{depositId}/details
        public Task<System.String[]> GetMeDepositDepositIdDetailsAsync(string depositId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/deposit/{depositId}/details", depositId));
        }
        
        // Path: /me/deposit/{depositId}/details/{depositDetailId}
        public Task<_billing.DepositDetail> GetMeDepositDepositIdDetailsDepositDetailIdAsync(string depositDetailId, string depositId) {
            return _client.GetFromJsonAsync<_billing.DepositDetail>(string.Format("/me/deposit/{depositId}/details/{depositDetailId}", depositDetailId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills
        public Task<System.String[]> GetMeDepositDepositIdPaidBillsAsync(string depositId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/deposit/{depositId}/paidBills", depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}
        public Task<_billing.Bill> GetMeDepositDepositIdPaidBillsBillIdAsync(string billId, string depositId) {
            return _client.GetFromJsonAsync<_billing.Bill>(string.Format("/me/deposit/{depositId}/paidBills/{billId}", billId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt
        public Task<_debt.Debt> GetMeDepositDepositIdPaidBillsBillIdDebtAsync(string billId, string depositId) {
            return _client.GetFromJsonAsync<_debt.Debt>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/debt", billId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation
        public Task<System.Int64[]> GetMeDepositDepositIdPaidBillsBillIdDebtOperationAsync(string billId, string depositId, [System.Runtime.InteropServices.OptionalAttribute()] long depositOrderId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/debt/operation?{queryParameters}", billId, depositId, queryParameters));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAsync(string billId, string depositId, long operationId) {
            return _client.GetFromJsonAsync<_debt.Operation>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}", billId, depositId, operationId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectAsync(string billId, string depositId, long operationId) {
            return _client.GetFromJsonAsync<_debt_entry.AssociatedObject>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associate" +
                        "dObject", billId, depositId, operationId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/pay
        public Task<_billing.Order> PostMeDepositDepositIdPaidBillsBillIdDebtPayAsync(string billId, string depositId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/details
        public Task<System.String[]> GetMeDepositDepositIdPaidBillsBillIdDetailsAsync(string billId, string depositId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/details", billId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}
        public Task<_billing.BillDetail> GetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdAsync(string billDetailId, string billId, string depositId) {
            return _client.GetFromJsonAsync<_billing.BillDetail>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}", billDetailId, billId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/payment
        public Task<_billing.Payment> GetMeDepositDepositIdPaidBillsBillIdPaymentAsync(string billId, string depositId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/deposit/{depositId}/paidBills/{billId}/payment", billId, depositId));
        }
        
        // Path: /me/deposit/{depositId}/payment
        public Task<_billing.Payment> GetMeDepositDepositIdPaymentAsync(string depositId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/deposit/{depositId}/payment", depositId));
        }
        
        // Path: /me/document
        public Task<System.Guid[]> GetMeDocumentAsync() {
            return _client.GetFromJsonAsync<System.Guid[]>("/me/document");
        }
        
        // Path: /me/document
        public Task<_nichandle_document.Document> PostMeDocumentAsync(string name, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string> tags) {
            return default(Task<_nichandle_document.Document>);
        }
        
        // Path: /me/document/cors
        public System.Threading.Tasks.Task PostMeDocumentCorsAsync(string origin) {
            return Task.CompletedTask;
        }
        
        // Path: /me/document/{id}
        public System.Threading.Tasks.Task DeleteMeDocumentIdAsync(System.Guid id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/document/{id}
        public Task<_nichandle_document.Document> GetMeDocumentIdAsync(System.Guid id) {
            return _client.GetFromJsonAsync<_nichandle_document.Document>(string.Format("/me/document/{id}", id));
        }
        
        // Path: /me/document/{id}
        public System.Threading.Tasks.Task PutMeDocumentIdAsync(_nichandle_document.Document body, System.Guid id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/fax/customDomains
        public Task<System.Int64[]> GetMeFaxCustomDomainsAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/fax/customDomains");
        }
        
        // Path: /me/fax/customDomains
        public Task<_telephony.MailDomain2Service> PostMeFaxCustomDomainsAsync(string domain) {
            return default(Task<_telephony.MailDomain2Service>);
        }
        
        // Path: /me/fax/customDomains/{id}
        public System.Threading.Tasks.Task DeleteMeFaxCustomDomainsIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/fax/customDomains/{id}
        public Task<_telephony.MailDomain2Service> GetMeFaxCustomDomainsIdAsync(long id) {
            return _client.GetFromJsonAsync<_telephony.MailDomain2Service>(string.Format("/me/fax/customDomains/{id}", id));
        }
        
        // Path: /me/fidelityAccount
        public Task<_billing.FidelityAccount> GetMeFidelityAccountAsync() {
            return _client.GetFromJsonAsync<_billing.FidelityAccount>("/me/fidelityAccount");
        }
        
        // Path: /me/fidelityAccount
        public System.Threading.Tasks.Task PutMeFidelityAccountAsync(_billing.FidelityAccount body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/fidelityAccount/creditOrder
        public Task<_billing.Order> PostMeFidelityAccountCreditOrderAsync(long amount) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/fidelityAccount/movements
        public Task<System.Int64[]> GetMeFidelityAccountMovementsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/fidelityAccount/movements?{queryParameters}", queryParameters));
        }
        
        // Path: /me/fidelityAccount/movements/{movementId}
        public Task<_billing.FidelityMovement> GetMeFidelityAccountMovementsMovementIdAsync(long movementId) {
            return _client.GetFromJsonAsync<_billing.FidelityMovement>(string.Format("/me/fidelityAccount/movements/{movementId}", movementId));
        }
        
        // Path: /me/geolocation
        public Task<_me_geolocation.ContinentCountryLocation> PostMeGeolocationAsync() {
            return default(Task<_me_geolocation.ContinentCountryLocation>);
        }
        
        // Path: /me/identity/group
        public Task<System.String[]> GetMeIdentityGroupAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/identity/group");
        }
        
        // Path: /me/identity/group
        public Task<_auth.Group> PostMeIdentityGroupAsync(_auth.GroupRequest body) {
            return default(Task<_auth.Group>);
        }
        
        // Path: /me/identity/group/{group}
        public System.Threading.Tasks.Task DeleteMeIdentityGroupGroupAsync(string group) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/group/{group}
        public Task<_auth.Group> GetMeIdentityGroupGroupAsync(string group) {
            return _client.GetFromJsonAsync<_auth.Group>(string.Format("/me/identity/group/{group}", group));
        }
        
        // Path: /me/identity/group/{group}
        public System.Threading.Tasks.Task PutMeIdentityGroupGroupAsync(_auth.Group body, string group) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/provider
        public System.Threading.Tasks.Task DeleteMeIdentityProviderAsync() {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/provider
        public Task<_auth.Provider> GetMeIdentityProviderAsync() {
            return _client.GetFromJsonAsync<_auth.Provider>("/me/identity/provider");
        }
        
        // Path: /me/identity/provider
        public Task<_auth.Provider> PostMeIdentityProviderAsync(_auth.ProviderRequest body) {
            return default(Task<_auth.Provider>);
        }
        
        // Path: /me/identity/provider
        public System.Threading.Tasks.Task PutMeIdentityProviderAsync(_auth.Provider body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/user
        public Task<System.String[]> GetMeIdentityUserAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/identity/user");
        }
        
        // Path: /me/identity/user
        public System.Threading.Tasks.Task PostMeIdentityUserAsync(_auth.UserRequest body) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/user/{user}
        public System.Threading.Tasks.Task DeleteMeIdentityUserUserAsync(string user) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/user/{user}
        public Task<_auth.User> GetMeIdentityUserUserAsync(string user) {
            return _client.GetFromJsonAsync<_auth.User>(string.Format("/me/identity/user/{user}", user));
        }
        
        // Path: /me/identity/user/{user}
        public System.Threading.Tasks.Task PutMeIdentityUserUserAsync(_auth.User body, string user) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/user/{user}/disable
        public System.Threading.Tasks.Task PostMeIdentityUserUserDisableAsync(string user) {
            return Task.CompletedTask;
        }
        
        // Path: /me/identity/user/{user}/enable
        public System.Threading.Tasks.Task PostMeIdentityUserUserEnableAsync(string user) {
            return Task.CompletedTask;
        }
        
        // Path: /me/incident/sbg/migrateServices
        public Task<_me_incident.ServiceMigration[]> GetMeIncidentSbgMigrateServicesAsync() {
            return _client.GetFromJsonAsync<_me_incident.ServiceMigration[]>("/me/incident/sbg/migrateServices");
        }
        
        // Path: /me/incident/sbg/migrateServices
        public Task<_me_incident.Order> PostMeIncidentSbgMigrateServicesAsync(_me_incident.MigrateServices body) {
            return default(Task<_me_incident.Order>);
        }
        
        // Path: /me/insight
        public Task<_me_insight.Access> GetMeInsightAsync() {
            return _client.GetFromJsonAsync<_me_insight.Access>("/me/insight");
        }
        
        // Path: /me/installationTemplate
        public Task<System.String[]> GetMeInstallationTemplateAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/installationTemplate");
        }
        
        // Path: /me/installationTemplate
        public System.Threading.Tasks.Task PostMeInstallationTemplateAsync(string baseTemplateName, string name) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}
        public System.Threading.Tasks.Task DeleteMeInstallationTemplateTemplateNameAsync(string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}
        public Task<_dedicated_installationTemplate.Templates> GetMeInstallationTemplateTemplateNameAsync(string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.Templates>(string.Format("/me/installationTemplate/{templateName}", templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}
        public System.Threading.Tasks.Task PutMeInstallationTemplateTemplateNameAsync(_dedicated_installationTemplate.Templates body, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/checkIntegrity
        public System.Threading.Tasks.Task PostMeInstallationTemplateTemplateNameCheckIntegrityAsync(string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme
        public Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeAsync(string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/installationTemplate/{templateName}/partitionScheme", templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme
        public System.Threading.Tasks.Task PostMeInstallationTemplateTemplateNamePartitionSchemeAsync(string name, long priority, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public System.Threading.Tasks.Task DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.templatePartitioningSchemes>(string.Format("/me/installationTemplate/{templateName}/partitionScheme/{schemeName}", schemeName, templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        public System.Threading.Tasks.Task PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync(_dedicated_installationTemplate.templatePartitioningSchemes body, string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid" +
                        "", schemeName, templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        public System.Threading.Tasks.Task PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync(string[] disks, _dedicated.TemplateOsHardwareRaidEnum mode, string name, string schemeName, long step, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public System.Threading.Tasks.Task DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public Task<_dedicated_installationTemplate.hardwareRaid> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(string name, string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.hardwareRaid>(string.Format("/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid" +
                        "/{name}", name, schemeName, templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        public System.Threading.Tasks.Task PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync(_dedicated_installationTemplate.hardwareRaid body, string name, string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(string schemeName, string templateName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition", schemeName, templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        public System.Threading.Tasks.Task PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync(_dedicated_server.FileSystemEnum filesystem, string mountpoint, string schemeName, long size, long step, string templateName, _dedicated.TemplatePartitionTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _dedicated_server.PartitionRaidEnum raid, [System.Runtime.InteropServices.OptionalAttribute()] string volumeName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public System.Threading.Tasks.Task DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public Task<_dedicated_installationTemplate.templatePartitions> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(string mountpoint, string schemeName, string templateName) {
            return _client.GetFromJsonAsync<_dedicated_installationTemplate.templatePartitions>(string.Format("/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{m" +
                        "ountpoint}", mountpoint, schemeName, templateName));
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        public System.Threading.Tasks.Task PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync(_dedicated_installationTemplate.templatePartitions body, string mountpoint, string schemeName, string templateName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ipOrganisation
        public Task<System.String[]> GetMeIpOrganisationAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/ipOrganisation");
        }
        
        // Path: /me/ipOrganisation
        public System.Threading.Tasks.Task PostMeIpOrganisationAsync(string abuse_mailbox, string address, string city, _nichandle.CountryEnum country, string firstname, string lastname, string phone, _nichandle.IpRegistryEnum registry, [System.Runtime.InteropServices.OptionalAttribute()] string state, [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        public System.Threading.Tasks.Task DeleteMeIpOrganisationOrganisationIdAsync(string organisationId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        public Task<_nichandle.Ipv4Org> GetMeIpOrganisationOrganisationIdAsync(string organisationId) {
            return _client.GetFromJsonAsync<_nichandle.Ipv4Org>(string.Format("/me/ipOrganisation/{organisationId}", organisationId));
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        public System.Threading.Tasks.Task PutMeIpOrganisationOrganisationIdAsync(_nichandle.Ipv4Org body, string organisationId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/logs/audit
        public Task<_audit.Log[]> GetMeLogsAuditAsync() {
            return _client.GetFromJsonAsync<_audit.Log[]>("/me/logs/audit");
        }
        
        // Path: /me/logs/audit/forward
        public Task<_audit_log.ForwardResponse> PostMeLogsAuditForwardAsync(_audit_log.ForwardRequest body) {
            return default(Task<_audit_log.ForwardResponse>);
        }
        
        // Path: /me/mailingList/availableLists
        public Task<System.String[]> GetMeMailingListAvailableListsAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/mailingList/availableLists");
        }
        
        // Path: /me/mailingList/subscribe
        public System.Threading.Tasks.Task PostMeMailingListSubscribeAsync(string email, string mailingList) {
            return Task.CompletedTask;
        }
        
        // Path: /me/marketing
        public Task<_me_marketing.Consent> GetMeMarketingAsync() {
            return _client.GetFromJsonAsync<_me_marketing.Consent>("/me/marketing");
        }
        
        // Path: /me/marketing
        public Task<_me_marketing.Consent> PutMeMarketingAsync(_me_marketing.Consent body) {
            return default(Task<_me_marketing.Consent>);
        }
        
        // Path: /me/migration
        public Task<System.Int64[]> GetMeMigrationAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/migration");
        }
        
        // Path: /me/migration/{migrationId}
        public Task<_me.Migration> GetMeMigrationMigrationIdAsync(long migrationId) {
            return _client.GetFromJsonAsync<_me.Migration>(string.Format("/me/migration/{migrationId}", migrationId));
        }
        
        // Path: /me/migration/{migrationId}/contract
        public Task<System.Int64[]> GetMeMigrationMigrationIdContractAsync(long migrationId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/migration/{migrationId}/contract", migrationId));
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}
        public Task<_me_migration.Contract> GetMeMigrationMigrationIdContractContractIdAsync(long contractId, long migrationId) {
            return _client.GetFromJsonAsync<_me_migration.Contract>(string.Format("/me/migration/{migrationId}/contract/{contractId}", contractId, migrationId));
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}/accept
        public Task<_me_agreements.ContractAgreement> PostMeMigrationMigrationIdContractContractIdAcceptAsync(long contractId, long migrationId) {
            return default(Task<_me_agreements.ContractAgreement>);
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}/agreement
        public Task<_me_agreements.ContractAgreement> GetMeMigrationMigrationIdContractContractIdAgreementAsync(long contractId, long migrationId) {
            return _client.GetFromJsonAsync<_me_agreements.ContractAgreement>(string.Format("/me/migration/{migrationId}/contract/{contractId}/agreement", contractId, migrationId));
        }
        
        // Path: /me/notification/email/history
        public Task<System.Int64[]> GetMeNotificationEmailHistoryAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/notification/email/history");
        }
        
        // Path: /me/notification/email/history/{id}
        public Task<_nichandle.EmailNotification> GetMeNotificationEmailHistoryIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle.EmailNotification>(string.Format("/me/notification/email/history/{id}", id));
        }
        
        // Path: /me/order
        public Task<System.Int64[]> GetMeOrderAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/order?{queryParameters}", queryParameters));
        }
        
        // Path: /me/order/{orderId}
        public Task<_billing.Order> GetMeOrderOrderIdAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing.Order>(string.Format("/me/order/{orderId}", orderId));
        }
        
        // Path: /me/order/{orderId}/associatedObject
        public Task<_billing_order.AssociatedObject> GetMeOrderOrderIdAssociatedObjectAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.AssociatedObject>(string.Format("/me/order/{orderId}/associatedObject", orderId));
        }
        
        // Path: /me/order/{orderId}/availableRegisteredPaymentMean
        public Task<_billing_order.RegisteredPaymentMean[]> GetMeOrderOrderIdAvailableRegisteredPaymentMeanAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.RegisteredPaymentMean[]>(string.Format("/me/order/{orderId}/availableRegisteredPaymentMean", orderId));
        }
        
        // Path: /me/order/{orderId}/balance
        public Task<System.String[]> GetMeOrderOrderIdBalanceAsync(long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/order/{orderId}/balance", orderId));
        }
        
        // Path: /me/order/{orderId}/balance
        public Task<_billing.CreditBalance> PostMeOrderOrderIdBalanceAsync(string balanceName, long orderId) {
            return default(Task<_billing.CreditBalance>);
        }
        
        // Path: /me/order/{orderId}/balance/{balanceName}
        public System.Threading.Tasks.Task DeleteMeOrderOrderIdBalanceBalanceNameAsync(string balanceName, long orderId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/order/{orderId}/balance/{balanceName}
        public Task<_billing.CreditBalance> GetMeOrderOrderIdBalanceBalanceNameAsync(string balanceName, long orderId) {
            return _client.GetFromJsonAsync<_billing.CreditBalance>(string.Format("/me/order/{orderId}/balance/{balanceName}", balanceName, orderId));
        }
        
        // Path: /me/order/{orderId}/consumption/details
        public Task<_billing_order.ConsumptionDetails> GetMeOrderOrderIdConsumptionDetailsAsync(_consumption.ConsumptionExportFormatsEnum fileFormat, long orderId) {
            return _client.GetFromJsonAsync<_billing_order.ConsumptionDetails>(string.Format("/me/order/{orderId}/consumption/details?{queryParameters}", orderId, queryParameters));
        }
        
        // Path: /me/order/{orderId}/debt
        public Task<_debt.Debt> GetMeOrderOrderIdDebtAsync(long orderId) {
            return _client.GetFromJsonAsync<_debt.Debt>(string.Format("/me/order/{orderId}/debt", orderId));
        }
        
        // Path: /me/order/{orderId}/debt/operation
        public Task<System.Int64[]> GetMeOrderOrderIdDebtOperationAsync(long orderId, [System.Runtime.InteropServices.OptionalAttribute()] long depositOrderId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/order/{orderId}/debt/operation?{queryParameters}", orderId, queryParameters));
        }
        
        // Path: /me/order/{orderId}/debt/operation/{operationId}
        public Task<_debt.Operation> GetMeOrderOrderIdDebtOperationOperationIdAsync(long operationId, long orderId) {
            return _client.GetFromJsonAsync<_debt.Operation>(string.Format("/me/order/{orderId}/debt/operation/{operationId}", operationId, orderId));
        }
        
        // Path: /me/order/{orderId}/debt/operation/{operationId}/associatedObject
        public Task<_debt_entry.AssociatedObject> GetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectAsync(long operationId, long orderId) {
            return _client.GetFromJsonAsync<_debt_entry.AssociatedObject>(string.Format("/me/order/{orderId}/debt/operation/{operationId}/associatedObject", operationId, orderId));
        }
        
        // Path: /me/order/{orderId}/debt/pay
        public Task<_billing.Order> PostMeOrderOrderIdDebtPayAsync(long orderId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/order/{orderId}/details
        public Task<System.Int64[]> GetMeOrderOrderIdDetailsAsync(long orderId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/order/{orderId}/details", orderId));
        }
        
        // Path: /me/order/{orderId}/details/{orderDetailId}
        public Task<_billing.OrderDetail> GetMeOrderOrderIdDetailsOrderDetailIdAsync(long orderDetailId, long orderId) {
            return _client.GetFromJsonAsync<_billing.OrderDetail>(string.Format("/me/order/{orderId}/details/{orderDetailId}", orderDetailId, orderId));
        }
        
        // Path: /me/order/{orderId}/details/{orderDetailId}/extension
        public Task<_billing.ItemDetail> GetMeOrderOrderIdDetailsOrderDetailIdExtensionAsync(long orderDetailId, long orderId) {
            return _client.GetFromJsonAsync<_billing.ItemDetail>(string.Format("/me/order/{orderId}/details/{orderDetailId}/extension", orderDetailId, orderId));
        }
        
        // Path: /me/order/{orderId}/followUp
        public Task<_billing_order.FollowUp[]> GetMeOrderOrderIdFollowUpAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.FollowUp[]>(string.Format("/me/order/{orderId}/followUp", orderId));
        }
        
        // Path: /me/order/{orderId}/pay
        public System.Threading.Tasks.Task PostMeOrderOrderIdPayAsync(long orderId, _billing_order.PayWithPaymentMethod paymentMethod) {
            return Task.CompletedTask;
        }
        
        // Path: /me/order/{orderId}/payWithRegisteredPaymentMean
        public System.Threading.Tasks.Task PostMeOrderOrderIdPayWithRegisteredPaymentMeanAsync(long orderId, _billing.ReusablePaymentMeanEnum paymentMean, [System.Runtime.InteropServices.OptionalAttribute()] long paymentMeanId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/order/{orderId}/payment
        public Task<_billing.Payment> GetMeOrderOrderIdPaymentAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/order/{orderId}/payment", orderId));
        }
        
        // Path: /me/order/{orderId}/paymentMeans
        public Task<_billing_order.PaymentMeans> GetMeOrderOrderIdPaymentMeansAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.PaymentMeans>(string.Format("/me/order/{orderId}/paymentMeans", orderId));
        }
        
        // Path: /me/order/{orderId}/paymentMethods
        public Task<_billing_order.PaymentMethods> GetMeOrderOrderIdPaymentMethodsAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.PaymentMethods>(string.Format("/me/order/{orderId}/paymentMethods", orderId));
        }
        
        // Path: /me/order/{orderId}/retraction
        public System.Threading.Tasks.Task PostMeOrderOrderIdRetractionAsync(long orderId, _billing_order.RetractionReasonEnum reason, [System.Runtime.InteropServices.OptionalAttribute()] string comment) {
            return Task.CompletedTask;
        }
        
        // Path: /me/order/{orderId}/status
        public Task<_billing_order.OrderStatusEnum> GetMeOrderOrderIdStatusAsync(long orderId) {
            return _client.GetFromJsonAsync<_billing_order.OrderStatusEnum>(string.Format("/me/order/{orderId}/status", orderId));
        }
        
        // Path: /me/order/{orderId}/waiveRetraction
        public System.Threading.Tasks.Task PostMeOrderOrderIdWaiveRetractionAsync(long orderId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ovhAccount
        public Task<System.String[]> GetMeOvhAccountAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/ovhAccount");
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}
        public Task<_billing.OvhAccount> GetMeOvhAccountOvhAccountIdAsync(string ovhAccountId) {
            return _client.GetFromJsonAsync<_billing.OvhAccount>(string.Format("/me/ovhAccount/{ovhAccountId}", ovhAccountId));
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}
        public System.Threading.Tasks.Task PutMeOvhAccountOvhAccountIdAsync(_billing.OvhAccount body, string ovhAccountId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/creditOrder
        public Task<_billing.Order> PostMeOvhAccountOvhAccountIdCreditOrderAsync(long amount, string ovhAccountId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements
        public Task<System.Int64[]> GetMeOvhAccountOvhAccountIdMovementsAsync(string ovhAccountId, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/ovhAccount/{ovhAccountId}/movements?{queryParameters}", ovhAccountId, queryParameters));
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements/{movementId}
        public Task<_billing.Movement> GetMeOvhAccountOvhAccountIdMovementsMovementIdAsync(long movementId, string ovhAccountId) {
            return _client.GetFromJsonAsync<_billing.Movement>(string.Format("/me/ovhAccount/{ovhAccountId}/movements/{movementId}", movementId, ovhAccountId));
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund
        public System.Threading.Tasks.Task PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundAsync(long amount, long movementId, string ovhAccountId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/retrieveMoney
        public Task<_billing.Order> PostMeOvhAccountOvhAccountIdRetrieveMoneyAsync(long amount, long bankAccountId, string ovhAccountId) {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/partnerLevel
        public Task<_me_partnerLevel.Level> GetMePartnerLevelAsync() {
            return _client.GetFromJsonAsync<_me_partnerLevel.Level>("/me/partnerLevel");
        }
        
        // Path: /me/passwordRecover
        public System.Threading.Tasks.Task PostMePasswordRecoverAsync(_nichandle.OvhCompanyEnum ovhCompany, string ovhId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/payment/availableMethods
        public Task<_me_payment.AvailablePaymentMethod[]> GetMePaymentAvailableMethodsAsync() {
            return _client.GetFromJsonAsync<_me_payment.AvailablePaymentMethod[]>("/me/payment/availableMethods");
        }
        
        // Path: /me/payment/method
        public Task<System.Int64[]> GetMePaymentMethodAsync([System.Runtime.InteropServices.OptionalAttribute()] bool @default, [System.Runtime.InteropServices.OptionalAttribute()] string paymentType, [System.Runtime.InteropServices.OptionalAttribute()] _me_payment_method.StatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/payment/method?{queryParameters}", queryParameters));
        }
        
        // Path: /me/payment/method
        public Task<_me_payment_method.Validation> PostMePaymentMethodAsync(_me_payment_method.Creation body) {
            return default(Task<_me_payment_method.Validation>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> DeleteMePaymentMethodPaymentMethodIdAsync(long paymentMethodId) {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> GetMePaymentMethodPaymentMethodIdAsync(long paymentMethodId) {
            return _client.GetFromJsonAsync<_me_payment.PaymentMethod>(string.Format("/me/payment/method/{paymentMethodId}", paymentMethodId));
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        public Task<_me_payment.PaymentMethod> PutMePaymentMethodPaymentMethodIdAsync(_me_payment.PaymentMethod body, long paymentMethodId) {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}/challenge
        public System.Threading.Tasks.Task PostMePaymentMethodPaymentMethodIdChallengeAsync(_me_payment_method.Challenge body, long paymentMethodId) {
            return Task.CompletedTask;
        }
        
        // Path: /me/payment/method/{paymentMethodId}/details
        public Task<_me_payment_method.Validation> PostMePaymentMethodPaymentMethodIdDetailsAsync(_me_payment_method.Details body, long paymentMethodId) {
            return default(Task<_me_payment_method.Validation>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}/finalize
        public Task<_me_payment.PaymentMethod> PostMePaymentMethodPaymentMethodIdFinalizeAsync(_me_payment_method.Finalize body, long paymentMethodId) {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/transaction
        public Task<System.Int64[]> GetMePaymentTransactionAsync([System.Runtime.InteropServices.OptionalAttribute()] long paymentMethodId, [System.Runtime.InteropServices.OptionalAttribute()] _me_payment_transaction.StatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/payment/transaction?{queryParameters}", queryParameters));
        }
        
        // Path: /me/payment/transaction/{transactionId}
        public Task<_me_payment.Transaction> GetMePaymentTransactionTransactionIdAsync(long transactionId) {
            return _client.GetFromJsonAsync<_me_payment.Transaction>(string.Format("/me/payment/transaction/{transactionId}", transactionId));
        }
        
        // Path: /me/paymentMean/bankAccount
        public Task<System.Int64[]> GetMePaymentMeanBankAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] _me_paymentMean.BankAccountStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/paymentMean/bankAccount?{queryParameters}", queryParameters));
        }
        
        // Path: /me/paymentMean/bankAccount
        public Task<_me_paymentMean.BankAccountValidation> PostMePaymentMeanBankAccountAsync(_me_paymentMean.BankAccountCreation body) {
            return default(Task<_me_paymentMean.BankAccountValidation>);
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        public System.Threading.Tasks.Task DeleteMePaymentMeanBankAccountIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        public Task<_me_paymentMean.BankAccount> GetMePaymentMeanBankAccountIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_paymentMean.BankAccount>(string.Format("/me/paymentMean/bankAccount/{id}", id));
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        public System.Threading.Tasks.Task PutMePaymentMeanBankAccountIdAsync(_me_paymentMean.BankAccount body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/bankAccount/{id}/challenge
        public System.Threading.Tasks.Task PostMePaymentMeanBankAccountIdChallengeAsync(_me_paymentMean.BankAccountChallengeCreation body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean
        public System.Threading.Tasks.Task PostMePaymentMeanBankAccountIdChooseAsDefaultPaymentMeanAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/creditCard
        public Task<System.Int64[]> GetMePaymentMeanCreditCardAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/paymentMean/creditCard");
        }
        
        // Path: /me/paymentMean/creditCard
        public Task<_me_paymentMean.CreditCardValidation> PostMePaymentMeanCreditCardAsync(_me_paymentMean.CreditCardCreation body) {
            return default(Task<_me_paymentMean.CreditCardValidation>);
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        public System.Threading.Tasks.Task DeleteMePaymentMeanCreditCardIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        public Task<_me_paymentMean.CreditCard> GetMePaymentMeanCreditCardIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_paymentMean.CreditCard>(string.Format("/me/paymentMean/creditCard/{id}", id));
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        public System.Threading.Tasks.Task PutMePaymentMeanCreditCardIdAsync(_me_paymentMean.CreditCard body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/creditCard/{id}/challenge
        public System.Threading.Tasks.Task PostMePaymentMeanCreditCardIdChallengeAsync(_me_paymentMean.CreditCardChallengeCreation body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean
        public System.Threading.Tasks.Task PostMePaymentMeanCreditCardIdChooseAsDefaultPaymentMeanAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount
        public Task<System.Int64[]> GetMePaymentMeanDeferredPaymentAccountAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/paymentMean/deferredPaymentAccount");
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}
        public Task<_me_paymentMean.Deferred> GetMePaymentMeanDeferredPaymentAccountIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_paymentMean.Deferred>(string.Format("/me/paymentMean/deferredPaymentAccount/{id}", id));
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}
        public System.Threading.Tasks.Task PutMePaymentMeanDeferredPaymentAccountIdAsync(_me_paymentMean.Deferred body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean
        public System.Threading.Tasks.Task PostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/paypal
        public Task<System.Int64[]> GetMePaymentMeanPaypalAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/paymentMean/paypal");
        }
        
        // Path: /me/paymentMean/paypal
        public Task<_me_paymentMean.PaypalValidation> PostMePaymentMeanPaypalAsync(_me_paymentMean.PaypalCreation body) {
            return default(Task<_me_paymentMean.PaypalValidation>);
        }
        
        // Path: /me/paymentMean/paypal/{id}
        public System.Threading.Tasks.Task DeleteMePaymentMeanPaypalIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/paypal/{id}
        public Task<_me_paymentMean.Paypal> GetMePaymentMeanPaypalIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_paymentMean.Paypal>(string.Format("/me/paymentMean/paypal/{id}", id));
        }
        
        // Path: /me/paymentMean/paypal/{id}
        public System.Threading.Tasks.Task PutMePaymentMeanPaypalIdAsync(_me_paymentMean.Paypal body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/paypal/{id}/challenge
        public System.Threading.Tasks.Task PostMePaymentMeanPaypalIdChallengeAsync(_me_paymentMean.PaypalChallengeCreation body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean
        public System.Threading.Tasks.Task PostMePaymentMeanPaypalIdChooseAsDefaultPaymentMeanAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/recommendations
        public Task<_recommendations.Recommendations> GetMeRecommendationsAsync([System.Runtime.InteropServices.OptionalAttribute()] long max, [System.Runtime.InteropServices.OptionalAttribute()] _recommendations.productRangesEnum range) {
            return _client.GetFromJsonAsync<_recommendations.Recommendations>(string.Format("/me/recommendations?{queryParameters}", queryParameters));
        }
        
        // Path: /me/refund
        public Task<System.String[]> GetMeRefundAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo, [System.Runtime.InteropServices.OptionalAttribute()] long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/refund?{queryParameters}", queryParameters));
        }
        
        // Path: /me/refund/export
        public System.Threading.Tasks.Task PostMeRefundExportAsync(_billing.ArchiveTypeEnum archiveType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate, [System.Runtime.InteropServices.OptionalAttribute()] string[] ids, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime startDate) {
            return Task.CompletedTask;
        }
        
        // Path: /me/refund/{refundId}
        public Task<_billing.Refund> GetMeRefundRefundIdAsync(string refundId) {
            return _client.GetFromJsonAsync<_billing.Refund>(string.Format("/me/refund/{refundId}", refundId));
        }
        
        // Path: /me/refund/{refundId}/details
        public Task<System.String[]> GetMeRefundRefundIdDetailsAsync(string refundId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/refund/{refundId}/details", refundId));
        }
        
        // Path: /me/refund/{refundId}/details/{refundDetailId}
        public Task<_billing.RefundDetail> GetMeRefundRefundIdDetailsRefundDetailIdAsync(string refundDetailId, string refundId) {
            return _client.GetFromJsonAsync<_billing.RefundDetail>(string.Format("/me/refund/{refundId}/details/{refundDetailId}", refundDetailId, refundId));
        }
        
        // Path: /me/refund/{refundId}/payment
        public Task<_billing.Payment> GetMeRefundRefundIdPaymentAsync(string refundId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/refund/{refundId}/payment", refundId));
        }
        
        // Path: /me/reverseBill
        public Task<System.String[]> GetMeReverseBillAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo, [System.Runtime.InteropServices.OptionalAttribute()] long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/reverseBill?{queryParameters}", queryParameters));
        }
        
        // Path: /me/reverseBill/{reverseBillId}
        public Task<_billing.ReverseBill> GetMeReverseBillReverseBillIdAsync(string reverseBillId) {
            return _client.GetFromJsonAsync<_billing.ReverseBill>(string.Format("/me/reverseBill/{reverseBillId}", reverseBillId));
        }
        
        // Path: /me/reverseBill/{reverseBillId}/details
        public Task<System.String[]> GetMeReverseBillReverseBillIdDetailsAsync(string reverseBillId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/reverseBill/{reverseBillId}/details", reverseBillId));
        }
        
        // Path: /me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}
        public Task<_billing.ReversableBillDetail> GetMeReverseBillReverseBillIdDetailsReverseBillDetailIdAsync(string reverseBillDetailId, string reverseBillId) {
            return _client.GetFromJsonAsync<_billing.ReversableBillDetail>(string.Format("/me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}", reverseBillDetailId, reverseBillId));
        }
        
        // Path: /me/reverseBill/{reverseBillId}/payment
        public Task<_billing.Payment> GetMeReverseBillReverseBillIdPaymentAsync(string reverseBillId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/reverseBill/{reverseBillId}/payment", reverseBillId));
        }
        
        // Path: /me/sla
        public Task<System.Int64[]> GetMeSlaAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/sla");
        }
        
        // Path: /me/sla/{id}
        public Task<_billing.SlaOperation> GetMeSlaIdAsync(long id) {
            return _client.GetFromJsonAsync<_billing.SlaOperation>(string.Format("/me/sla/{id}", id));
        }
        
        // Path: /me/sla/{id}/apply
        public System.Threading.Tasks.Task PostMeSlaIdApplyAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/sla/{id}/canBeApplied
        public Task<System.Boolean> GetMeSlaIdCanBeAppliedAsync(long id) {
            return _client.GetFromJsonAsync<bool>(string.Format("/me/sla/{id}/canBeApplied", id));
        }
        
        // Path: /me/sla/{id}/services
        public Task<_billing.SlaOperationService[]> GetMeSlaIdServicesAsync(long id) {
            return _client.GetFromJsonAsync<_billing.SlaOperationService[]>(string.Format("/me/sla/{id}/services", id));
        }
        
        // Path: /me/sla/{id}/status
        public Task<System.String> GetMeSlaIdStatusAsync(long id) {
            return _client.GetFromJsonAsync<string>(string.Format("/me/sla/{id}/status", id));
        }
        
        // Path: /me/sshKey
        public Task<System.String[]> GetMeSshKeyAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/sshKey");
        }
        
        // Path: /me/sshKey
        public System.Threading.Tasks.Task PostMeSshKeyAsync(string key, string keyName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/sshKey/{keyName}
        public System.Threading.Tasks.Task DeleteMeSshKeyKeyNameAsync(string keyName) {
            return Task.CompletedTask;
        }
        
        // Path: /me/sshKey/{keyName}
        public Task<_nichandle.sshKey> GetMeSshKeyKeyNameAsync(string keyName) {
            return _client.GetFromJsonAsync<_nichandle.sshKey>(string.Format("/me/sshKey/{keyName}", keyName));
        }
        
        // Path: /me/subAccount
        public Task<System.Int64[]> GetMeSubAccountAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/subAccount");
        }
        
        // Path: /me/subAccount
        public Task<System.Int64> PostMeSubAccountAsync([System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<System.Int64>);
        }
        
        // Path: /me/subAccount/{id}
        public Task<_nichandle.SubAccount> GetMeSubAccountIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle.SubAccount>(string.Format("/me/subAccount/{id}", id));
        }
        
        // Path: /me/subAccount/{id}
        public System.Threading.Tasks.Task PutMeSubAccountIdAsync(_nichandle.SubAccount body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/subAccount/{id}/createConsumerKey
        public Task<_nichandle.SubAccountConsumerKey> PostMeSubAccountIdCreateConsumerKeyAsync(long id) {
            return default(Task<_nichandle.SubAccountConsumerKey>);
        }
        
        // Path: /me/subscription
        public Task<System.String[]> GetMeSubscriptionAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/subscription");
        }
        
        // Path: /me/subscription/{subscriptionType}
        public Task<_nichandle.Subscription> GetMeSubscriptionSubscriptionTypeAsync(string subscriptionType) {
            return _client.GetFromJsonAsync<_nichandle.Subscription>(string.Format("/me/subscription/{subscriptionType}", subscriptionType));
        }
        
        // Path: /me/subscription/{subscriptionType}
        public System.Threading.Tasks.Task PutMeSubscriptionSubscriptionTypeAsync(_nichandle.Subscription body, string subscriptionType) {
            return Task.CompletedTask;
        }
        
        // Path: /me/supportLevel
        public Task<_me_SupportLevel.Level> GetMeSupportLevelAsync() {
            return _client.GetFromJsonAsync<_me_SupportLevel.Level>("/me/supportLevel");
        }
        
        // Path: /me/tag
        public Task<System.String[]> GetMeTagAsync() {
            return _client.GetFromJsonAsync<string[]>("/me/tag");
        }
        
        // Path: /me/tag
        public Task<_me_tag.Tag> PostMeTagAsync(_me_tag.Creation body) {
            return default(Task<_me_tag.Tag>);
        }
        
        // Path: /me/tag/available
        public Task<_me_tag.AvailableTag[]> GetMeTagAvailableAsync() {
            return _client.GetFromJsonAsync<_me_tag.AvailableTag[]>("/me/tag/available");
        }
        
        // Path: /me/tag/{tag}
        public Task<_me_tag.Tag> DeleteMeTagTagAsync(string tag) {
            return default(Task<_me_tag.Tag>);
        }
        
        // Path: /me/tag/{tag}
        public Task<_me_tag.Tag> GetMeTagTagAsync(string tag) {
            return _client.GetFromJsonAsync<_me_tag.Tag>(string.Format("/me/tag/{tag}", tag));
        }
        
        // Path: /me/task/contactChange
        public Task<System.Int64[]> GetMeTaskContactChangeAsync([System.Runtime.InteropServices.OptionalAttribute()] string askingAccount, [System.Runtime.InteropServices.OptionalAttribute()] _nichandle_changeContact.TaskStateEnum state, [System.Runtime.InteropServices.OptionalAttribute()] string toAccount) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/task/contactChange?{queryParameters}", queryParameters));
        }
        
        // Path: /me/task/contactChange/{id}
        public Task<_nichandle_contactChange.Task> GetMeTaskContactChangeIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle_contactChange.Task>(string.Format("/me/task/contactChange/{id}", id));
        }
        
        // Path: /me/task/contactChange/{id}/accept
        public System.Threading.Tasks.Task PostMeTaskContactChangeIdAcceptAsync(long id, string token) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/contactChange/{id}/refuse
        public System.Threading.Tasks.Task PostMeTaskContactChangeIdRefuseAsync(long id, string token) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/contactChange/{id}/resendEmail
        public System.Threading.Tasks.Task PostMeTaskContactChangeIdResendEmailAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/dns
        public Task<System.Int64[]> GetMeTaskDnsAsync([System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.TaskStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/task/dns?{queryParameters}", queryParameters));
        }
        
        // Path: /me/task/dns/{id}
        public Task<_me_dns.Task> GetMeTaskDnsIdAsync(long id) {
            return _client.GetFromJsonAsync<_me_dns.Task>(string.Format("/me/task/dns/{id}", id));
        }
        
        // Path: /me/task/dns/{id}/accelerate
        public System.Threading.Tasks.Task PostMeTaskDnsIdAccelerateAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/dns/{id}/cancel
        public System.Threading.Tasks.Task PostMeTaskDnsIdCancelAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/dns/{id}/relaunch
        public System.Threading.Tasks.Task PostMeTaskDnsIdRelaunchAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/domain
        public Task<System.Int64[]> GetMeTaskDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] string domain, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _domain.OperationStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/task/domain?{queryParameters}", queryParameters));
        }
        
        // Path: /me/task/domain/{id}
        public Task<_domain.Task> GetMeTaskDomainIdAsync(long id) {
            return _client.GetFromJsonAsync<_domain.Task>(string.Format("/me/task/domain/{id}", id));
        }
        
        // Path: /me/task/domain/{id}/accelerate
        public System.Threading.Tasks.Task PostMeTaskDomainIdAccelerateAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/domain/{id}/argument
        public Task<System.String[]> GetMeTaskDomainIdArgumentAsync(long id) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/task/domain/{id}/argument", id));
        }
        
        // Path: /me/task/domain/{id}/argument/{key}
        public Task<_nichandle.DomainTaskArgument> GetMeTaskDomainIdArgumentKeyAsync(long id, string key) {
            return _client.GetFromJsonAsync<_nichandle.DomainTaskArgument>(string.Format("/me/task/domain/{id}/argument/{key}", id, key));
        }
        
        // Path: /me/task/domain/{id}/argument/{key}
        public System.Threading.Tasks.Task PutMeTaskDomainIdArgumentKeyAsync(_nichandle.DomainTaskArgument body, long id, string key) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/domain/{id}/cancel
        public System.Threading.Tasks.Task PostMeTaskDomainIdCancelAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/domain/{id}/progressbar
        public Task<_nichandle.DomainTaskProgressBar> GetMeTaskDomainIdProgressbarAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle.DomainTaskProgressBar>(string.Format("/me/task/domain/{id}/progressbar", id));
        }
        
        // Path: /me/task/domain/{id}/relaunch
        public System.Threading.Tasks.Task PostMeTaskDomainIdRelaunchAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/emailChange
        public Task<System.Int64[]> GetMeTaskEmailChangeAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle_changeEmail.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/me/task/emailChange?{queryParameters}", queryParameters));
        }
        
        // Path: /me/task/emailChange/{id}
        public Task<_nichandle_emailChange.Task> GetMeTaskEmailChangeIdAsync(long id) {
            return _client.GetFromJsonAsync<_nichandle_emailChange.Task>(string.Format("/me/task/emailChange/{id}", id));
        }
        
        // Path: /me/task/emailChange/{id}/accept
        public System.Threading.Tasks.Task PostMeTaskEmailChangeIdAcceptAsync(long id, string token) {
            return Task.CompletedTask;
        }
        
        // Path: /me/task/emailChange/{id}/refuse
        public System.Threading.Tasks.Task PostMeTaskEmailChangeIdRefuseAsync(long id, string token) {
            return Task.CompletedTask;
        }
        
        // Path: /me/telephony/defaultIpRestriction
        public Task<System.Int64[]> GetMeTelephonyDefaultIpRestrictionAsync() {
            return _client.GetFromJsonAsync<long[]>("/me/telephony/defaultIpRestriction");
        }
        
        // Path: /me/telephony/defaultIpRestriction
        public Task<_telephony.DefaultIpRestriction> PostMeTelephonyDefaultIpRestrictionAsync(string subnet, _telephony.ProtocolEnum type) {
            return default(Task<_telephony.DefaultIpRestriction>);
        }
        
        // Path: /me/telephony/defaultIpRestriction/{id}
        public System.Threading.Tasks.Task DeleteMeTelephonyDefaultIpRestrictionIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /me/telephony/defaultIpRestriction/{id}
        public Task<_telephony.DefaultIpRestriction> GetMeTelephonyDefaultIpRestrictionIdAsync(long id) {
            return _client.GetFromJsonAsync<_telephony.DefaultIpRestriction>(string.Format("/me/telephony/defaultIpRestriction/{id}", id));
        }
        
        // Path: /me/telephony/settings
        public Task<_telephony.Settings> GetMeTelephonySettingsAsync() {
            return _client.GetFromJsonAsync<_telephony.Settings>("/me/telephony/settings");
        }
        
        // Path: /me/telephony/settings
        public System.Threading.Tasks.Task PostMeTelephonySettingsAsync(_telephony.Settings settings) {
            return Task.CompletedTask;
        }
        
        // Path: /me/vipStatus
        public Task<_nichandle.VipStatus> GetMeVipStatusAsync() {
            return _client.GetFromJsonAsync<_nichandle.VipStatus>("/me/vipStatus");
        }
        
        // Path: /me/voucher/checkValidity
        public Task<_nichandle.VoucherStatus> PostMeVoucherCheckValidityAsync(string voucher) {
            return default(Task<_nichandle.VoucherStatus>);
        }
        
        // Path: /me/withdrawal
        public Task<System.String[]> GetMeWithdrawalAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateTo, [System.Runtime.InteropServices.OptionalAttribute()] long orderId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/withdrawal?{queryParameters}", queryParameters));
        }
        
        // Path: /me/withdrawal/{withdrawalId}
        public Task<_billing.Withdrawal> GetMeWithdrawalWithdrawalIdAsync(string withdrawalId) {
            return _client.GetFromJsonAsync<_billing.Withdrawal>(string.Format("/me/withdrawal/{withdrawalId}", withdrawalId));
        }
        
        // Path: /me/withdrawal/{withdrawalId}/details
        public Task<System.String[]> GetMeWithdrawalWithdrawalIdDetailsAsync(string withdrawalId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/me/withdrawal/{withdrawalId}/details", withdrawalId));
        }
        
        // Path: /me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}
        public Task<_billing.WithdrawalDetail> GetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdAsync(string withdrawalDetailId, string withdrawalId) {
            return _client.GetFromJsonAsync<_billing.WithdrawalDetail>(string.Format("/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}", withdrawalDetailId, withdrawalId));
        }
        
        // Path: /me/withdrawal/{withdrawalId}/payment
        public Task<_billing.Payment> GetMeWithdrawalWithdrawalIdPaymentAsync(string withdrawalId) {
            return _client.GetFromJsonAsync<_billing.Payment>(string.Format("/me/withdrawal/{withdrawalId}/payment", withdrawalId));
        }
        
        // Path: /me/xdsl/setting
        public Task<_xdsl.Setting> GetMeXdslSettingAsync() {
            return _client.GetFromJsonAsync<_xdsl.Setting>("/me/xdsl/setting");
        }
        
        // Path: /me/xdsl/setting
        public System.Threading.Tasks.Task PostMeXdslSettingAsync([System.Runtime.InteropServices.OptionalAttribute()] bool resellerFastModemShipping, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerModemBasicConfig) {
            return Task.CompletedTask;
        }
        
        // Path: /metrics
        public Task<System.String[]> GetMetricsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/metrics?{queryParameters}", queryParameters));
        }
        
        // Path: /metrics/{serviceName}
        public Task<_metrics_api.ServiceWithIAM> GetMetricsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_metrics_api.ServiceWithIAM>(string.Format("/metrics/{serviceName}", serviceName));
        }
        
        // Path: /metrics/{serviceName}
        public Task<_metrics_api.Service> PutMetricsServiceNameAsync(_metrics.Update body, string serviceName) {
            return default(Task<_metrics_api.Service>);
        }
        
        // Path: /metrics/{serviceName}/changeContact
        public Task<System.Int64[]> PostMetricsServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /metrics/{serviceName}/confirmTermination
        public Task<System.String> PostMetricsServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/consumption
        public Task<_metrics_api.Consumption> GetMetricsServiceNameConsumptionAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long duration) {
            return _client.GetFromJsonAsync<_metrics_api.Consumption>(string.Format("/metrics/{serviceName}/consumption?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /metrics/{serviceName}/lookup/token
        public Task<System.String[]> PostMetricsServiceNameLookupTokenAsync(_metrics.LookupTokenCreation body, string serviceName) {
            return default(Task<System.String[]>);
        }
        
        // Path: /metrics/{serviceName}/quota
        public Task<System.String> PutMetricsServiceNameQuotaAsync(_metrics.QuotaUpdate body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/serviceInfos
        public Task<_services.Service> GetMetricsServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/metrics/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /metrics/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutMetricsServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /metrics/{serviceName}/terminate
        public Task<System.String> PostMetricsServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/token
        public Task<System.String[]> GetMetricsServiceNameTokenAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/metrics/{serviceName}/token", serviceName));
        }
        
        // Path: /metrics/{serviceName}/token
        public Task<_metrics_api.Token> PostMetricsServiceNameTokenAsync(_metrics.TokenCreation body, string serviceName) {
            return default(Task<_metrics_api.Token>);
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        public System.Threading.Tasks.Task DeleteMetricsServiceNameTokenTokenIdAsync(string serviceName, string tokenId) {
            return Task.CompletedTask;
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        public Task<_metrics_api.Token> GetMetricsServiceNameTokenTokenIdAsync(string serviceName, string tokenId) {
            return _client.GetFromJsonAsync<_metrics_api.Token>(string.Format("/metrics/{serviceName}/token/{tokenId}", serviceName, tokenId));
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        public Task<_metrics_api.Token> PutMetricsServiceNameTokenTokenIdAsync(_metrics.TokenUpdate body, string serviceName, string tokenId) {
            return default(Task<_metrics_api.Token>);
        }
        
        // Path: /msServices
        public Task<System.String[]> GetMsServicesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/msServices?{queryParameters}", queryParameters));
        }
        
        // Path: /msServices/sharepoint
        public Task<System.String[]> GetMsServicesSharepointAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/msServices/sharepoint?{queryParameters}", queryParameters));
        }
        
        // Path: /msServices/sharepoint/{domain}
        public Task<_msServices.SharepointServiceInfoWithIAM> GetMsServicesSharepointDomainAsync(string domain) {
            return _client.GetFromJsonAsync<_msServices.SharepointServiceInfoWithIAM>(string.Format("/msServices/sharepoint/{domain}", domain));
        }
        
        // Path: /msServices/sharepoint/{domain}/serviceInfos
        public Task<_services.Service> GetMsServicesSharepointDomainServiceInfosAsync(string domain) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/msServices/sharepoint/{domain}/serviceInfos", domain));
        }
        
        // Path: /msServices/sharepoint/{domain}/serviceInfos
        public System.Threading.Tasks.Task PutMsServicesSharepointDomainServiceInfosAsync(_services.Service body, string domain) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}
        public Task<_msServices.ActiveDirectoryOrganizationalUnitWithIAM> GetMsServicesServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_msServices.ActiveDirectoryOrganizationalUnitWithIAM>(string.Format("/msServices/{serviceName}", serviceName));
        }
        
        // Path: /msServices/{serviceName}
        public System.Threading.Tasks.Task PutMsServicesServiceNameAsync(_msServices.ActiveDirectoryOrganizationalUnit body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/account
        public Task<System.String[]> GetMsServicesServiceNameAccountAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string company, [System.Runtime.InteropServices.OptionalAttribute()] long id, [System.Runtime.InteropServices.OptionalAttribute()] string userPrincipalName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/msServices/{serviceName}/account?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}
        public Task<_msServices.Account> GetMsServicesServiceNameAccountUserPrincipalNameAsync(string serviceName, string userPrincipalName) {
            return _client.GetFromJsonAsync<_msServices.Account>(string.Format("/msServices/{serviceName}/account/{userPrincipalName}", serviceName, userPrincipalName));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}
        public System.Threading.Tasks.Task PutMsServicesServiceNameAccountUserPrincipalNameAsync(_msServices.Account body, string serviceName, string userPrincipalName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/changePassword
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordAsync(string password, string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange
        public Task<_msServices.ExchangeInformation> GetMsServicesServiceNameAccountUserPrincipalNameExchangeAsync(string serviceName, string userPrincipalName) {
            return _client.GetFromJsonAsync<_msServices.ExchangeInformation>(string.Format("/msServices/{serviceName}/account/{userPrincipalName}/exchange", serviceName, userPrincipalName));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange
        public System.Threading.Tasks.Task PutMsServicesServiceNameAccountUserPrincipalNameExchangeAsync(_msServices.ExchangeInformation body, string serviceName, string userPrincipalName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange/configure
        public Task<_msServices.exchangeTask> PostMsServicesServiceNameAccountUserPrincipalNameExchangeConfigureAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.exchangeTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.Task> DeleteMsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.MfaInformation> GetMsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            return _client.GetFromJsonAsync<_msServices.MfaInformation>(string.Format("/msServices/{serviceName}/account/{userPrincipalName}/mfa", serviceName, userPrincipalName));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/disable
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableAsync(long period, string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/enable
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaEnableAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/reset
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaResetAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        public Task<_msServices.SharepointInformation> GetMsServicesServiceNameAccountUserPrincipalNameSharepointAsync(string serviceName, string userPrincipalName) {
            return _client.GetFromJsonAsync<_msServices.SharepointInformation>(string.Format("/msServices/{serviceName}/account/{userPrincipalName}/sharepoint", serviceName, userPrincipalName));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        public System.Threading.Tasks.Task PutMsServicesServiceNameAccountUserPrincipalNameSharepointAsync(_msServices.SharepointInformation body, string serviceName, string userPrincipalName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint/clearSpace
        public Task<_msServices.sharepointTask> PostMsServicesServiceNameAccountUserPrincipalNameSharepointClearSpaceAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint/configure
        public Task<_msServices.sharepointTask> PostMsServicesServiceNameAccountUserPrincipalNameSharepointConfigureAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.Task> DeleteMsServicesServiceNameAccountUserPrincipalNameSyncAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.SyncInformation> GetMsServicesServiceNameAccountUserPrincipalNameSyncAsync(string serviceName, string userPrincipalName) {
            return _client.GetFromJsonAsync<_msServices.SyncInformation>(string.Format("/msServices/{serviceName}/account/{userPrincipalName}/sync", serviceName, userPrincipalName));
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameSyncAsync(_msServices.SyncLicenseEnum license, string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync/configure
        public Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameSyncConfigureAsync(string serviceName, string userPrincipalName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/changeContact
        public Task<System.Int64[]> PostMsServicesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /msServices/{serviceName}/createMfaOnAllUsers
        public Task<_msServices.Task> PostMsServicesServiceNameCreateMfaOnAllUsersAsync(string serviceName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/exchange
        public Task<_msServices.ExchangeService> GetMsServicesServiceNameExchangeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_msServices.ExchangeService>(string.Format("/msServices/{serviceName}/exchange", serviceName));
        }
        
        // Path: /msServices/{serviceName}/exchange
        public System.Threading.Tasks.Task PutMsServicesServiceNameExchangeAsync(_msServices.ExchangeService body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/exchange/billingMigrated
        public Task<System.Boolean> GetMsServicesServiceNameExchangeBillingMigratedAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/msServices/{serviceName}/exchange/billingMigrated", serviceName));
        }
        
        // Path: /msServices/{serviceName}/exchange/task
        public Task<System.Int64[]> GetMsServicesServiceNameExchangeTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/msServices/{serviceName}/exchange/task", serviceName));
        }
        
        // Path: /msServices/{serviceName}/exchange/task/{id}
        public Task<_msServices.exchangeTask> GetMsServicesServiceNameExchangeTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_msServices.exchangeTask>(string.Format("/msServices/{serviceName}/exchange/task/{id}", id, serviceName));
        }
        
        // Path: /msServices/{serviceName}/removeMfaOnAllUsers
        public Task<_msServices.Task> PostMsServicesServiceNameRemoveMfaOnAllUsersAsync(string serviceName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint
        public Task<_msServices.SharepointService> GetMsServicesServiceNameSharepointAsync(string serviceName) {
            return _client.GetFromJsonAsync<_msServices.SharepointService>(string.Format("/msServices/{serviceName}/sharepoint", serviceName));
        }
        
        // Path: /msServices/{serviceName}/sharepoint
        public System.Threading.Tasks.Task PutMsServicesServiceNameSharepointAsync(_msServices.SharepointService body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /msServices/{serviceName}/sharepoint/billingMigrated
        public Task<System.Boolean> GetMsServicesServiceNameSharepointBillingMigratedAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/msServices/{serviceName}/sharepoint/billingMigrated", serviceName));
        }
        
        // Path: /msServices/{serviceName}/sharepoint/license
        public Task<_msServices.SharepointDailyLicense[]> GetMsServicesServiceNameSharepointLicenseAsync(_msServices.LicensePeriodEnum period, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.SharepointLicenseEnum license) {
            return _client.GetFromJsonAsync<_msServices.SharepointDailyLicense[]>(string.Format("/msServices/{serviceName}/sharepoint/license?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /msServices/{serviceName}/sharepoint/restoreAdminRights
        public Task<_msServices.sharepointTask> PostMsServicesServiceNameSharepointRestoreAdminRightsAsync(string serviceName) {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint/task
        public Task<System.Int64[]> GetMsServicesServiceNameSharepointTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string function, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/msServices/{serviceName}/sharepoint/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /msServices/{serviceName}/sharepoint/task/{id}
        public Task<_msServices.sharepointTask> GetMsServicesServiceNameSharepointTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_msServices.sharepointTask>(string.Format("/msServices/{serviceName}/sharepoint/task/{id}", id, serviceName));
        }
        
        // Path: /msServices/{serviceName}/sync
        public Task<_msServices.Task> DeleteMsServicesServiceNameSyncAsync(string serviceName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync
        public Task<_msServices.SyncService> GetMsServicesServiceNameSyncAsync(string serviceName) {
            return _client.GetFromJsonAsync<_msServices.SyncService>(string.Format("/msServices/{serviceName}/sync", serviceName));
        }
        
        // Path: /msServices/{serviceName}/sync/changePassword
        public Task<_msServices.Task> PostMsServicesServiceNameSyncChangePasswordAsync(string password, string serviceName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync/clientSoftwareURL
        public Task<_msServices.ActiveDirectorySyncClientUrl> GetMsServicesServiceNameSyncClientSoftwareURLAsync(string serviceName) {
            return _client.GetFromJsonAsync<_msServices.ActiveDirectorySyncClientUrl>(string.Format("/msServices/{serviceName}/sync/clientSoftwareURL", serviceName));
        }
        
        // Path: /msServices/{serviceName}/sync/clientSoftwareURL
        public Task<_msServices.Task> PostMsServicesServiceNameSyncClientSoftwareURLAsync(string serviceName) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync/license
        public Task<_msServices.SyncDailyLicense[]> GetMsServicesServiceNameSyncLicenseAsync(_msServices.LicensePeriodEnum period, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.SyncLicenseEnum license) {
            return _client.GetFromJsonAsync<_msServices.SyncDailyLicense[]>(string.Format("/msServices/{serviceName}/sync/license?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /msServices/{serviceName}/task
        public Task<System.Int64[]> GetMsServicesServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskFunctionEnum function, [System.Runtime.InteropServices.OptionalAttribute()] _msServices.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/msServices/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /msServices/{serviceName}/task/{id}
        public Task<_msServices.Task> GetMsServicesServiceNameTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_msServices.Task>(string.Format("/msServices/{serviceName}/task/{id}", id, serviceName));
        }
        
        // Path: /msServices/{serviceName}/upnSuffix
        public Task<System.String[]> GetMsServicesServiceNameUpnSuffixAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/msServices/{serviceName}/upnSuffix", serviceName));
        }
        
        // Path: /msServices/{serviceName}/upnSuffix
        public Task<_msServices.Task> PostMsServicesServiceNameUpnSuffixAsync(string serviceName, string suffix) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix/{suffix}
        public Task<_msServices.Task> DeleteMsServicesServiceNameUpnSuffixSuffixAsync(string serviceName, string suffix) {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix/{suffix}
        public Task<_msServices.upnSuffix> GetMsServicesServiceNameUpnSuffixSuffixAsync(string serviceName, string suffix) {
            return _client.GetFromJsonAsync<_msServices.upnSuffix>(string.Format("/msServices/{serviceName}/upnSuffix/{suffix}", serviceName, suffix));
        }
        
        // Path: /newAccount
        public Task<_nichandle.NewAccountAndToken> PostNewAccountAsync(
                    _nichandle.CountryEnum country, 
                    string email, 
                    _nichandle.LegalFormEnum legalform, 
                    _nichandle.OvhCompanyEnum ovhCompany, 
                    _nichandle.OvhSubsidiaryEnum ovhSubsidiary, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string address, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string area, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string birthCity, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string birthDay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string companyNationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string corporationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string italianSDI, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LanguageEnum language, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string nationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum phoneCountry, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.PhoneTypeEnum phoneType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string purposeOfPurchase, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.GenderEnum sex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string spareEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string vat, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return default(Task<_nichandle.NewAccountAndToken>);
        }
        
        // Path: /newAccount/area
        public Task<System.String[]> GetNewAccountAreaAsync(_nichandle.CountryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/newAccount/area?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/contracts
        public Task<_order.Contract[]> GetNewAccountContractsAsync(_nichandle.OvhCompanyEnum company, _nichandle.OvhSubsidiaryEnum subsidiary) {
            return _client.GetFromJsonAsync<_order.Contract[]>(string.Format("/newAccount/contracts?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/corporationType
        public Task<System.String[]> GetNewAccountCorporationTypeAsync(_nichandle.CountryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/newAccount/corporationType?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/countries
        public Task<_nichandle.CountryEnum[]> GetNewAccountCountriesAsync(_nichandle.OvhCompanyEnum ovhCompany, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_nichandle.CountryEnum[]>(string.Format("/newAccount/countries?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/creationRules
        public Task<_nichandle.CreationRules> GetNewAccountCreationRulesAsync(_nichandle.CountryEnum country, _nichandle.LegalFormEnum legalform, _nichandle.OvhCompanyEnum ovhCompany, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_nichandle.CreationRules>(string.Format("/newAccount/creationRules?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/legalform
        public Task<System.String[]> GetNewAccountLegalformAsync(_nichandle.CountryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/newAccount/legalform?{queryParameters}", queryParameters));
        }
        
        // Path: /newAccount/rules
        public Task<_nichandle.CreationRule[]> PostNewAccountRulesAsync(
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CreationRulesActionEnum action, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string address, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string area, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string birthCity, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string birthDay, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string companyNationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string corporationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum country, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string fax, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string italianSDI, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LanguageEnum language, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.LegalFormEnum legalform, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string nationalIdentificationNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhCompanyEnum ovhCompany, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.OvhSubsidiaryEnum ovhSubsidiary, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum phoneCountry, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.PhoneTypeEnum phoneType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string purposeOfPurchase, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _nichandle.GenderEnum sex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string spareEmail, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string vat, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return default(Task<_nichandle.CreationRule[]>);
        }
        
        // Path: /nutanix
        public Task<System.String[]> GetNutanixAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/nutanix?{queryParameters}", queryParameters));
        }
        
        // Path: /nutanix/availabilities
        public Task<_nutanix.availability[]> GetNutanixAvailabilitiesAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] bool erasureCoding, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] bool rackAwareness, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.RedundancyFactorEnum redundancyFactor, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_nutanix.availability[]>(string.Format("/nutanix/availabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /nutanix/availabilities/raw
        public Task<_nutanix.AvailabilitiesRaw[]> GetNutanixAvailabilitiesRawAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] string datacenters, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.DeploymentTypeEnum deploymentType, [System.Runtime.InteropServices.OptionalAttribute()] bool erasureCoding, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeDatacenters, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeRegions, [System.Runtime.InteropServices.OptionalAttribute()] string memory, [System.Runtime.InteropServices.OptionalAttribute()] string planCode, [System.Runtime.InteropServices.OptionalAttribute()] _nutanix.RedundancyFactorEnum redundancyFactor, [System.Runtime.InteropServices.OptionalAttribute()] string regions, [System.Runtime.InteropServices.OptionalAttribute()] string server, [System.Runtime.InteropServices.OptionalAttribute()] string storage, [System.Runtime.InteropServices.OptionalAttribute()] string systemStorage) {
            return _client.GetFromJsonAsync<_nutanix.AvailabilitiesRaw[]>(string.Format("/nutanix/availabilities/raw?{queryParameters}", queryParameters));
        }
        
        // Path: /nutanix/availableVersions
        public Task<System.String[]> GetNutanixAvailableVersionsAsync([System.Runtime.InteropServices.OptionalAttribute()] string fqn) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/nutanix/availableVersions?{queryParameters}", queryParameters));
        }
        
        // Path: /nutanix/requirements
        public Task<_nutanix.Requirements> GetNutanixRequirementsAsync(bool erasureCoding, bool rackAwareness, _nutanix.RedundancyFactorEnum redundancyFactor) {
            return _client.GetFromJsonAsync<_nutanix.Requirements>(string.Format("/nutanix/requirements?{queryParameters}", queryParameters));
        }
        
        // Path: /nutanix/{serviceName}
        public Task<_nutanix.stateWithIAM> GetNutanixServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_nutanix.stateWithIAM>(string.Format("/nutanix/{serviceName}", serviceName));
        }
        
        // Path: /nutanix/{serviceName}
        public Task<_nutanix.state> PutNutanixServiceNameAsync(_nutanix.cluster body, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool redeploycluster, [System.Runtime.InteropServices.OptionalAttribute()] bool scaleUp) {
            return default(Task<_nutanix.state>);
        }
        
        // Path: /nutanix/{serviceName}/changeContact
        public Task<System.Int64[]> PostNutanixServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /nutanix/{serviceName}/confirmTermination
        public Task<System.String> PostNutanixServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /nutanix/{serviceName}/serviceInfos
        public Task<_services.Service> GetNutanixServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/nutanix/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /nutanix/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutNutanixServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /nutanix/{serviceName}/terminate
        public Task<System.String> PostNutanixServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /order/cart
        public Task<System.String[]> GetOrderCartAsync([System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cart?{queryParameters}", queryParameters));
        }
        
        // Path: /order/cart
        public Task<_order_cart.Cart> PostOrderCartAsync(_order_cart.Creation body) {
            return default(Task<_order_cart.Cart>);
        }
        
        // Path: /order/cart/{cartId}
        public System.Threading.Tasks.Task DeleteOrderCartCartIdAsync(string cartId) {
            return Task.CompletedTask;
        }
        
        // Path: /order/cart/{cartId}
        public Task<_order_cart.Cart> GetOrderCartCartIdAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.Cart>(string.Format("/order/cart/{cartId}", cartId));
        }
        
        // Path: /order/cart/{cartId}
        public Task<_order_cart.Cart> PutOrderCartCartIdAsync(_order_cart.Update body, string cartId) {
            return default(Task<_order_cart.Cart>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesHostingWebAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesHostingWeb", cartId));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesHostingWebAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesHostingWebOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesHostingWeb/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb/options
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesHostingWebOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesPublicCloudAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesPublicCloud", cartId));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesPublicCloudAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesPublicCloud/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud/options
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesTelecomAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesTelecom", cartId));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesTelecomAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesTelecomOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/advisoryServicesTelecom/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom/options
        public Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesTelecomOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/analytics
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAnalyticsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/analytics", cartId));
        }
        
        // Path: /order/cart/{cartId}/analytics
        public Task<_order_cart.Item> PostOrderCartCartIdAnalyticsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/analytics/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAnalyticsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/analytics/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/analytics/options
        public Task<_order_cart.Item> PostOrderCartCartIdAnalyticsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/assign
        public System.Threading.Tasks.Task PostOrderCartCartIdAssignAsync(string cartId) {
            return Task.CompletedTask;
        }
        
        // Path: /order/cart/{cartId}/baremetalServers
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdBaremetalServersAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/baremetalServers", cartId));
        }
        
        // Path: /order/cart/{cartId}/baremetalServers
        public Task<_order_cart.Item> PostOrderCartCartIdBaremetalServersAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/baremetalServers/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdBaremetalServersOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/baremetalServers/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/baremetalServers/options
        public Task<_order_cart.Item> PostOrderCartCartIdBaremetalServersOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/bringYourOwnIp
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdBringYourOwnIpAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/bringYourOwnIp", cartId));
        }
        
        // Path: /order/cart/{cartId}/bringYourOwnIp
        public Task<_order_cart.Item> PostOrderCartCartIdBringYourOwnIpAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cdn
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCdnAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/cdn", cartId));
        }
        
        // Path: /order/cart/{cartId}/cdn
        public Task<_order_cart.Item> PostOrderCartCartIdCdnAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cdn/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCdnOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/cdn/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/cdn/options
        public Task<_order_cart.Item> PostOrderCartCartIdCdnOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cephaas
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCephaasAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/cephaas", cartId));
        }
        
        // Path: /order/cart/{cartId}/cephaas
        public Task<_order_cart.Item> PostOrderCartCartIdCephaasAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cephaas/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCephaasOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/cephaas/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/cephaas/options
        public Task<_order_cart.Item> PostOrderCartCartIdCephaasOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/checkout
        public Task<_order.Order> GetOrderCartCartIdCheckoutAsync(string cartId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cart/{cartId}/checkout", cartId));
        }
        
        // Path: /order/cart/{cartId}/checkout
        public Task<_order.Order> PostOrderCartCartIdCheckoutAsync(_order_cart.Checkout body, string cartId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cart/{cartId}/cloud
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/cloud", cartId));
        }
        
        // Path: /order/cart/{cartId}/cloud
        public Task<_order_cart.Item> PostOrderCartCartIdCloudAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCloudOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/cloud/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/cloud/options
        public Task<_order_cart.Item> PostOrderCartCartIdCloudOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudDB
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudDBAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/cloudDB", cartId));
        }
        
        // Path: /order/cart/{cartId}/cloudDB
        public Task<_order_cart.Item> PostOrderCartCartIdCloudDBAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudwebAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/cloudweb", cartId));
        }
        
        // Path: /order/cart/{cartId}/cloudweb
        public Task<_order_cart.Item> PostOrderCartCartIdCloudwebAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCloudwebOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/cloudweb/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/cloudweb/options
        public Task<_order_cart.Item> PostOrderCartCartIdCloudwebOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/coupon
        public System.Threading.Tasks.Task DeleteOrderCartCartIdCouponAsync(string cartId, string coupon) {
            return Task.CompletedTask;
        }
        
        // Path: /order/cart/{cartId}/coupon
        public Task<System.String[]> GetOrderCartCartIdCouponAsync(string cartId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cart/{cartId}/coupon", cartId));
        }
        
        // Path: /order/cart/{cartId}/coupon
        public Task<System.String[]> PostOrderCartCartIdCouponAsync(_order_cart.CouponCreation body, string cartId) {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cart/{cartId}/csp2
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCsp2Async(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/csp2", cartId));
        }
        
        // Path: /order/cart/{cartId}/csp2
        public Task<_order_cart.Item> PostOrderCartCartIdCsp2Async(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/csp2/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCsp2OptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/csp2/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/csp2/options
        public Task<_order_cart.Item> PostOrderCartCartIdCsp2OptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dbaasTimeseries
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDbaasTimeseriesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dbaasTimeseries", cartId));
        }
        
        // Path: /order/cart/{cartId}/dbaasTimeseries
        public Task<_order_cart.Item> PostOrderCartCartIdDbaasTimeseriesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicated
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] string family, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicated?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicated
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicated/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string family) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicated/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicated/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedCloudAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] string family, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedCloud?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedCloudAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedCloudOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string family) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedCloud/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedCloudOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedDirectSalesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedDirectSales", cartId));
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedDirectSalesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedDirectSalesOptionsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedDirectSales/options", cartId));
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedDirectSalesOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedLabsAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedLabs?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedLabsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedLabsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedLabs/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedLabsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedLegacyAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedLegacy", cartId));
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedLegacyAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedLegacyOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedLegacy/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedLegacyOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedPciVpsAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] string family, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedPciVps?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedPciVpsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedPciVpsOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string family) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedPciVps/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedPciVpsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedResellerAsync(string cartId, [System.Runtime.InteropServices.OptionalAttribute()] string family, [System.Runtime.InteropServices.OptionalAttribute()] string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedReseller?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedResellerOptionsAsync(string cartId, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string family) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dedicatedReseller/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller/options
        public Task<_order_cart.Item> PostOrderCartCartIdDedicatedResellerOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/deskaas
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDeskaasAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/deskaas", cartId));
        }
        
        // Path: /order/cart/{cartId}/deskaas
        public Task<_order_cart.Item> PostOrderCartCartIdDeskaasAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/discover
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDiscoverAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/discover", cartId));
        }
        
        // Path: /order/cart/{cartId}/discover
        public Task<_order_cart.Item> PostOrderCartCartIdDiscoverAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/discover/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDiscoverOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/discover/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/discover/options
        public Task<_order_cart.Item> PostOrderCartCartIdDiscoverOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dns
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDnsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/dns", cartId));
        }
        
        // Path: /order/cart/{cartId}/dns
        public Task<_order_cart.Item> PostOrderCartCartIdDnsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dns/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDnsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/dns/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/dns/options
        public Task<_order_cart.Item> PostOrderCartCartIdDnsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domain
        public Task<_order_cart.ProductInformation[]> GetOrderCartCartIdDomainAsync(string cartId, string domain) {
            return _client.GetFromJsonAsync<_order_cart.ProductInformation[]>(string.Format("/order/cart/{cartId}/domain?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/domain
        public Task<_order_cart.Item> PostOrderCartCartIdDomainAsync(_order_cart.GenericDomainCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domain/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDomainOptionsAsync(string cartId, string domain) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/domain/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/domain/options
        public Task<_order_cart.Item> PostOrderCartCartIdDomainOptionsAsync(_order_cart.GenericDomainOptionsCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domainPacks
        public Task<_order_cart.DomainPacksProductInformation[]> GetOrderCartCartIdDomainPacksAsync(string cartId, string domain) {
            return _client.GetFromJsonAsync<_order_cart.DomainPacksProductInformation[]>(string.Format("/order/cart/{cartId}/domainPacks?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/domainPacks
        public Task<_order_cart.Item> PostOrderCartCartIdDomainPacksAsync(_order_cart.DomainPacksCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domainRestore
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDomainRestoreAsync(string cartId, string domain) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/domainRestore?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/eco
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEcoAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/eco", cartId));
        }
        
        // Path: /order/cart/{cartId}/eco
        public Task<_order_cart.Item> PostOrderCartCartIdEcoAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/eco/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdEcoOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/eco/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/eco/options
        public Task<_order_cart.Item> PostOrderCartCartIdEcoOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailDomain
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEmailDomainAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/emailDomain", cartId));
        }
        
        // Path: /order/cart/{cartId}/emailDomain
        public Task<_order_cart.Item> PostOrderCartCartIdEmailDomainAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailpro
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEmailproAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/emailpro", cartId));
        }
        
        // Path: /order/cart/{cartId}/emailpro
        public Task<_order_cart.Item> PostOrderCartCartIdEmailproAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailpro/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdEmailproOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/emailpro/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/emailpro/options
        public Task<_order_cart.Item> PostOrderCartCartIdEmailproOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchange
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdExchangeAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/exchange", cartId));
        }
        
        // Path: /order/cart/{cartId}/exchange
        public Task<_order_cart.Item> PostOrderCartCartIdExchangeAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchange/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdExchangeOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/exchange/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/exchange/options
        public Task<_order_cart.Item> PostOrderCartCartIdExchangeOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdExchangeEnterpriseAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/exchangeEnterprise", cartId));
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise
        public Task<_order_cart.Item> PostOrderCartCartIdExchangeEnterpriseAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdExchangeEnterpriseOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/exchangeEnterprise/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise/options
        public Task<_order_cart.Item> PostOrderCartCartIdExchangeEnterpriseOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ip
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ip", cartId));
        }
        
        // Path: /order/cart/{cartId}/ip
        public Task<_order_cart.Item> PostOrderCartCartIdIpAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ip/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIpOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/ip/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/ip/options
        public Task<_order_cart.Item> PostOrderCartCartIdIpOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpLoadbalancingAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ipLoadbalancing", cartId));
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing
        public Task<_order_cart.Item> PostOrderCartCartIdIpLoadbalancingAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIpLoadbalancingOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/ipLoadbalancing/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing/options
        public Task<_order_cart.Item> PostOrderCartCartIdIpLoadbalancingOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ipReseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/ipReseller
        public Task<_order_cart.Item> PostOrderCartCartIdIpResellerAsync(string cartId, string duration, string planCode, string pricingMode, long quantity) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIspPublicAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ispPublic", cartId));
        }
        
        // Path: /order/cart/{cartId}/ispPublic
        public Task<_order_cart.Item> PostOrderCartCartIdIspPublicAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIspPublicOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/ispPublic/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/ispPublic/options
        public Task<_order_cart.Item> PostOrderCartCartIdIspPublicOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIspResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ispReseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/ispReseller
        public Task<_order_cart.Item> PostOrderCartCartIdIspResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIspResellerOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/ispReseller/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/ispReseller/options
        public Task<_order_cart.Item> PostOrderCartCartIdIspResellerOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/item
        public Task<System.Int64[]> GetOrderCartCartIdItemAsync(string cartId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/order/cart/{cartId}/item", cartId));
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        public System.Threading.Tasks.Task DeleteOrderCartCartIdItemItemIdAsync(string cartId, long itemId) {
            return Task.CompletedTask;
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        public Task<_order_cart.Item> GetOrderCartCartIdItemItemIdAsync(string cartId, long itemId) {
            return _client.GetFromJsonAsync<_order_cart.Item>(string.Format("/order/cart/{cartId}/item/{itemId}", cartId, itemId));
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        public Task<_order_cart.Item> PutOrderCartCartIdItemItemIdAsync(_order_cart.ItemUpdate body, string cartId, long itemId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration
        public Task<System.Int64[]> GetOrderCartCartIdItemItemIdConfigurationAsync(string cartId, long itemId, [System.Runtime.InteropServices.OptionalAttribute()] string label) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/order/cart/{cartId}/item/{itemId}/configuration?{queryParameters}", cartId, itemId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration
        public Task<_order_cart.ConfigurationItem> PostOrderCartCartIdItemItemIdConfigurationAsync(_order_cart.ItemConfigurationCreation body, string cartId, long itemId) {
            return default(Task<_order_cart.ConfigurationItem>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        public System.Threading.Tasks.Task DeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdAsync(string cartId, long configurationId, long itemId) {
            return Task.CompletedTask;
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        public Task<_order_cart.ConfigurationItem> GetOrderCartCartIdItemItemIdConfigurationConfigurationIdAsync(string cartId, long configurationId, long itemId) {
            return _client.GetFromJsonAsync<_order_cart.ConfigurationItem>(string.Format("/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}", cartId, configurationId, itemId));
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/requiredConfiguration
        public Task<_order_cart.ConfigurationRequirements[]> GetOrderCartCartIdItemItemIdRequiredConfigurationAsync(string cartId, long itemId) {
            return _client.GetFromJsonAsync<_order_cart.ConfigurationRequirements[]>(string.Format("/order/cart/{cartId}/item/{itemId}/requiredConfiguration", cartId, itemId));
        }
        
        // Path: /order/cart/{cartId}/kubernetes
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdKubernetesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/kubernetes", cartId));
        }
        
        // Path: /order/cart/{cartId}/kubernetes
        public Task<_order_cart.Item> PostOrderCartCartIdKubernetesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/kubernetes/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdKubernetesOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/kubernetes/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/kubernetes/options
        public Task<_order_cart.Item> PostOrderCartCartIdKubernetesOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseCloudLinux
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseCloudLinuxAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseCloudLinux", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseCloudLinux
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseCloudLinuxAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseDirectadmin
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseDirectadminAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseDirectadmin", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseDirectadmin
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseDirectadminAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicensePleskAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licensePlesk", cartId));
        }
        
        // Path: /order/cart/{cartId}/licensePlesk
        public Task<_order_cart.Item> PostOrderCartCartIdLicensePleskAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdLicensePleskOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/licensePlesk/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/licensePlesk/options
        public Task<_order_cart.Item> PostOrderCartCartIdLicensePleskOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseSqlServer
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseSqlServerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseSqlServer", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseSqlServer
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseSqlServerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseVirtuozzo
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseVirtuozzoAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseVirtuozzo", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseVirtuozzo
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseVirtuozzoAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseWindows
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseWindowsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseWindows", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseWindows
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseWindowsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseWorklight
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseWorklightAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licenseWorklight", cartId));
        }
        
        // Path: /order/cart/{cartId}/licenseWorklight
        public Task<_order_cart.Item> PostOrderCartCartIdLicenseWorklightAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensecPanel
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicensecPanelAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/licensecPanel", cartId));
        }
        
        // Path: /order/cart/{cartId}/licensecPanel
        public Task<_order_cart.Item> PostOrderCartCartIdLicensecPanelAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/logs
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLogsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/logs", cartId));
        }
        
        // Path: /order/cart/{cartId}/logs
        public Task<_order_cart.Item> PostOrderCartCartIdLogsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/logs/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdLogsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/logs/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/logs/options
        public Task<_order_cart.Item> PostOrderCartCartIdLogsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/managedServices
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdManagedServicesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/managedServices", cartId));
        }
        
        // Path: /order/cart/{cartId}/managedServices
        public Task<_order_cart.Item> PostOrderCartCartIdManagedServicesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/managedServices/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdManagedServicesOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/managedServices/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/managedServices/options
        public Task<_order_cart.Item> PostOrderCartCartIdManagedServicesOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/metrics
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdMetricsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/metrics", cartId));
        }
        
        // Path: /order/cart/{cartId}/metrics
        public Task<_order_cart.Item> PostOrderCartCartIdMetricsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/metrics/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdMetricsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/metrics/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/metrics/options
        public Task<_order_cart.Item> PostOrderCartCartIdMetricsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/microsoft
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdMicrosoftAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/microsoft", cartId));
        }
        
        // Path: /order/cart/{cartId}/microsoft
        public Task<_order_cart.Item> PostOrderCartCartIdMicrosoftAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/microsoft/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdMicrosoftOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/microsoft/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/microsoft/options
        public Task<_order_cart.Item> PostOrderCartCartIdMicrosoftOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nasha
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNashaAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/nasha", cartId));
        }
        
        // Path: /order/cart/{cartId}/nasha
        public Task<_order_cart.Item> PostOrderCartCartIdNashaAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nasha/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNashaOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/nasha/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/nasha/options
        public Task<_order_cart.Item> PostOrderCartCartIdNashaOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/netapp
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNetappAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/netapp", cartId));
        }
        
        // Path: /order/cart/{cartId}/netapp
        public Task<_order_cart.Item> PostOrderCartCartIdNetappAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/netapp/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNetappOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/netapp/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/netapp/options
        public Task<_order_cart.Item> PostOrderCartCartIdNetappOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nutanix
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNutanixAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/nutanix", cartId));
        }
        
        // Path: /order/cart/{cartId}/nutanix
        public Task<_order_cart.Item> PostOrderCartCartIdNutanixAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nutanix/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNutanixOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/nutanix/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/nutanix/options
        public Task<_order_cart.Item> PostOrderCartCartIdNutanixOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOffice365Async(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/office365", cartId));
        }
        
        // Path: /order/cart/{cartId}/office365
        public Task<_order_cart.Item> PostOrderCartCartIdOffice365Async(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOffice365OptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/office365/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/office365/options
        public Task<_order_cart.Item> PostOrderCartCartIdOffice365OptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOffice365PrepaidAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/office365Prepaid", cartId));
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid
        public Task<_order_cart.Item> PostOrderCartCartIdOffice365PrepaidAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOffice365PrepaidOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/office365Prepaid/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid/options
        public Task<_order_cart.Item> PostOrderCartCartIdOffice365PrepaidOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOfficePrepaidAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/officePrepaid", cartId));
        }
        
        // Path: /order/cart/{cartId}/officePrepaid
        public Task<_order_cart.Item> PostOrderCartCartIdOfficePrepaidAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOfficePrepaidOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/officePrepaid/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/officePrepaid/options
        public Task<_order_cart.Item> PostOrderCartCartIdOfficePrepaidOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/okms
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOkmsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/okms", cartId));
        }
        
        // Path: /order/cart/{cartId}/okms
        public Task<_order_cart.Item> PostOrderCartCartIdOkmsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otb
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOtbAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/otb", cartId));
        }
        
        // Path: /order/cart/{cartId}/otb
        public Task<_order_cart.Item> PostOrderCartCartIdOtbAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otb/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOtbOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/otb/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/otb/options
        public Task<_order_cart.Item> PostOrderCartCartIdOtbOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOtbResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/otbReseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/otbReseller
        public Task<_order_cart.Item> PostOrderCartCartIdOtbResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOtbResellerOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/otbReseller/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/otbReseller/options
        public Task<_order_cart.Item> PostOrderCartCartIdOtbResellerOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ovhCloudConnect
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOvhCloudConnectAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/ovhCloudConnect", cartId));
        }
        
        // Path: /order/cart/{cartId}/ovhCloudConnect
        public Task<_order_cart.Item> PostOrderCartCartIdOvhCloudConnectAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/paasmon
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPaasmonAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/paasmon", cartId));
        }
        
        // Path: /order/cart/{cartId}/paasmon
        public Task<_order_cart.Item> PostOrderCartCartIdPaasmonAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPacksProfessionalServicesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/packsProfessionalServices", cartId));
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices
        public Task<_order_cart.Item> PostOrderCartCartIdPacksProfessionalServicesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPacksProfessionalServicesOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/packsProfessionalServices/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices/options
        public Task<_order_cart.Item> PostOrderCartCartIdPacksProfessionalServicesOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/powerHosting
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPowerHostingAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/powerHosting", cartId));
        }
        
        // Path: /order/cart/{cartId}/powerHosting
        public Task<_order_cart.Item> PostOrderCartCartIdPowerHostingAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloud", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloud
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloud/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloud/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudCDIAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudCDI", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudCDIAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudCDIOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudCDI/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudCDIOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudDCAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudDC", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudDCAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudDCOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudDC/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudDCOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudEnterpriseAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudEnterprise", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudEnterpriseAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudEnterpriseOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudEnterprise/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudEnterpriseOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudReseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudResellerOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudReseller/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudResellerEnterpriseAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudResellerEnterprise", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerEnterpriseAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudResellerEnterprise/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudSDDCAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudSDDC", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudSDDCAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudSDDCOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/privateCloudSDDC/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC/options
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudSDDCOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateSQL
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateSQLAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/privateSQL", cartId));
        }
        
        // Path: /order/cart/{cartId}/privateSQL
        public Task<_order_cart.Item> PostOrderCartCartIdPrivateSQLAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/reseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/reseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/reseller
        public Task<_order_cart.Item> PostOrderCartCartIdResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSharepointAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/sharepoint", cartId));
        }
        
        // Path: /order/cart/{cartId}/sharepoint
        public Task<_order_cart.Item> PostOrderCartCartIdSharepointAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSharepointOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/sharepoint/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/sharepoint/options
        public Task<_order_cart.Item> PostOrderCartCartIdSharepointOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sms
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSmsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/sms", cartId));
        }
        
        // Path: /order/cart/{cartId}/sms
        public Task<_order_cart.Item> PostOrderCartCartIdSmsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSslComodoAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/sslComodo", cartId));
        }
        
        // Path: /order/cart/{cartId}/sslComodo
        public Task<_order_cart.Item> PostOrderCartCartIdSslComodoAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSslComodoOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/sslComodo/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/sslComodo/options
        public Task<_order_cart.Item> PostOrderCartCartIdSslComodoOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSslGatewayAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/sslGateway", cartId));
        }
        
        // Path: /order/cart/{cartId}/sslGateway
        public Task<_order_cart.Item> PostOrderCartCartIdSslGatewayAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSslGatewayOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/sslGateway/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/sslGateway/options
        public Task<_order_cart.Item> PostOrderCartCartIdSslGatewayOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/summary
        public Task<_order.Order> GetOrderCartCartIdSummaryAsync(string cartId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cart/{cartId}/summary", cartId));
        }
        
        // Path: /order/cart/{cartId}/support
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSupportAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/support", cartId));
        }
        
        // Path: /order/cart/{cartId}/support
        public Task<_order_cart.Item> PostOrderCartCartIdSupportAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/telephony
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdTelephonyAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/telephony", cartId));
        }
        
        // Path: /order/cart/{cartId}/telephony
        public Task<_order_cart.Item> PostOrderCartCartIdTelephonyAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/telephony/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdTelephonyOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/telephony/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/telephony/options
        public Task<_order_cart.Item> PostOrderCartCartIdTelephonyOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vco
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVcoAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vco", cartId));
        }
        
        // Path: /order/cart/{cartId}/vco
        public Task<_order_cart.Item> PostOrderCartCartIdVcoAsync(string cartId, string duration, string planCode, string pricingMode, long quantity) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vdi
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVdiAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vdi", cartId));
        }
        
        // Path: /order/cart/{cartId}/vdi
        public Task<_order_cart.Item> PostOrderCartCartIdVdiAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vdi/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVdiOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/vdi/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/vdi/options
        public Task<_order_cart.Item> PostOrderCartCartIdVdiOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVeeamEnterpriseAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/veeamEnterprise", cartId));
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise
        public Task<_order_cart.Item> PostOrderCartCartIdVeeamEnterpriseAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVeeamEnterpriseOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/veeamEnterprise/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise/options
        public Task<_order_cart.Item> PostOrderCartCartIdVeeamEnterpriseOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVeeamccAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/veeamcc", cartId));
        }
        
        // Path: /order/cart/{cartId}/veeamcc
        public Task<_order_cart.Item> PostOrderCartCartIdVeeamccAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVeeamccOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/veeamcc/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/veeamcc/options
        public Task<_order_cart.Item> PostOrderCartCartIdVeeamccOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vps
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVpsAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vps", cartId));
        }
        
        // Path: /order/cart/{cartId}/vps
        public Task<_order_cart.Item> PostOrderCartCartIdVpsAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vps/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVpsOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/vps/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/vps/options
        public Task<_order_cart.Item> PostOrderCartCartIdVpsOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrack
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vrack", cartId));
        }
        
        // Path: /order/cart/{cartId}/vrack
        public Task<_order_cart.Item> PostOrderCartCartIdVrackAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrackReseller
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackResellerAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vrackReseller", cartId));
        }
        
        // Path: /order/cart/{cartId}/vrackReseller
        public Task<_order_cart.Item> PostOrderCartCartIdVrackResellerAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrackServices
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackServicesAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/vrackServices", cartId));
        }
        
        // Path: /order/cart/{cartId}/vrackServices
        public Task<_order_cart.Item> PostOrderCartCartIdVrackServicesAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webHosting
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdWebHostingAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/webHosting", cartId));
        }
        
        // Path: /order/cart/{cartId}/webHosting
        public Task<_order_cart.Item> PostOrderCartCartIdWebHostingAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webHosting/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdWebHostingOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/webHosting/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/webHosting/options
        public Task<_order_cart.Item> PostOrderCartCartIdWebHostingOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdWebPaaSAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/webPaaS", cartId));
        }
        
        // Path: /order/cart/{cartId}/webPaaS
        public Task<_order_cart.Item> PostOrderCartCartIdWebPaaSAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdWebPaaSOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/webPaaS/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/webPaaS/options
        public Task<_order_cart.Item> PostOrderCartCartIdWebPaaSOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/xdsl
        public Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdXdslAsync(string cartId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/cart/{cartId}/xdsl", cartId));
        }
        
        // Path: /order/cart/{cartId}/xdsl
        public Task<_order_cart.Item> PostOrderCartCartIdXdslAsync(_order_cart.GenericProductCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/xdsl/options
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdXdslOptionsAsync(string cartId, string planCode) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cart/{cartId}/xdsl/options?{queryParameters}", cartId, queryParameters));
        }
        
        // Path: /order/cart/{cartId}/xdsl/options
        public Task<_order_cart.Item> PostOrderCartCartIdXdslOptionsAsync(_order_cart.GenericOptionCreation body, string cartId) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/baremetalServers
        public Task<System.String[]> GetOrderCartServiceOptionBaremetalServersAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/baremetalServers");
        }
        
        // Path: /order/cartServiceOption/baremetalServers/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionBaremetalServersServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/baremetalServers/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/baremetalServers/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionBaremetalServersServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/cloud
        public Task<System.String[]> GetOrderCartServiceOptionCloudAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/cloud");
        }
        
        // Path: /order/cartServiceOption/cloud/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionCloudServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/cloud/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/cloud/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionCloudServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/dedicated
        public Task<System.String[]> GetOrderCartServiceOptionDedicatedAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/dedicated");
        }
        
        // Path: /order/cartServiceOption/dedicated/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDedicatedServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/dedicated/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/dedicated/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionDedicatedServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/dns
        public Task<System.String[]> GetOrderCartServiceOptionDnsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/dns");
        }
        
        // Path: /order/cartServiceOption/dns/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDnsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/dns/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/dns/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionDnsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/domain
        public Task<System.String[]> GetOrderCartServiceOptionDomainAsync([System.Runtime.InteropServices.OptionalAttribute()] string whoisOwner) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cartServiceOption/domain?{queryParameters}", queryParameters));
        }
        
        // Path: /order/cartServiceOption/domain/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDomainServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/domain/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/domain/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionDomainServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/emailpro
        public Task<System.String[]> GetOrderCartServiceOptionEmailproAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/emailpro");
        }
        
        // Path: /order/cartServiceOption/emailpro/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionEmailproServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/emailpro/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/emailpro/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionEmailproServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing
        public Task<System.String[]> GetOrderCartServiceOptionIpLoadbalancingAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/ipLoadbalancing");
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionIpLoadbalancingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/ipLoadbalancing/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionIpLoadbalancingServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/logs
        public Task<System.String[]> GetOrderCartServiceOptionLogsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/logs");
        }
        
        // Path: /order/cartServiceOption/logs/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionLogsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/logs/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/logs/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionLogsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/microsoft
        public Task<System.String[]> GetOrderCartServiceOptionMicrosoftAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/microsoft");
        }
        
        // Path: /order/cartServiceOption/microsoft/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionMicrosoftServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/microsoft/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/microsoft/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionMicrosoftServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/microsoftExchange
        public Task<System.String[]> GetOrderCartServiceOptionMicrosoftExchangeAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/microsoftExchange");
        }
        
        // Path: /order/cartServiceOption/microsoftExchange/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionMicrosoftExchangeServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/microsoftExchange/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/microsoftExchange/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionMicrosoftExchangeServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/nutanix
        public Task<System.String[]> GetOrderCartServiceOptionNutanixAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/nutanix");
        }
        
        // Path: /order/cartServiceOption/nutanix/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionNutanixServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/nutanix/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/nutanix/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionNutanixServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/office365Prepaid
        public Task<System.String[]> GetOrderCartServiceOptionOffice365PrepaidAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/office365Prepaid");
        }
        
        // Path: /order/cartServiceOption/office365Prepaid/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionOffice365PrepaidServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/office365Prepaid/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/office365Prepaid/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionOffice365PrepaidServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/officePrepaid
        public Task<System.String[]> GetOrderCartServiceOptionOfficePrepaidAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/officePrepaid");
        }
        
        // Path: /order/cartServiceOption/officePrepaid/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionOfficePrepaidServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/officePrepaid/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/officePrepaid/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionOfficePrepaidServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloud
        public Task<System.String[]> GetOrderCartServiceOptionPrivateCloudAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/privateCloud");
        }
        
        // Path: /order/cartServiceOption/privateCloud/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/privateCloud/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/privateCloud/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise
        public Task<System.String[]> GetOrderCartServiceOptionPrivateCloudEnterpriseAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/privateCloudEnterprise");
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/privateCloudEnterprise/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller
        public Task<System.String[]> GetOrderCartServiceOptionPrivateCloudResellerAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/privateCloudReseller");
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudResellerServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/privateCloudReseller/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudResellerServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise
        public Task<System.String[]> GetOrderCartServiceOptionPrivateCloudResellerEnterpriseAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/privateCloudResellerEnterprise");
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sharepoint
        public Task<System.String[]> GetOrderCartServiceOptionSharepointAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/sharepoint");
        }
        
        // Path: /order/cartServiceOption/sharepoint/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSharepointServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/sharepoint/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/sharepoint/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionSharepointServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sms
        public Task<System.String[]> GetOrderCartServiceOptionSmsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/sms");
        }
        
        // Path: /order/cartServiceOption/sms/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSmsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/sms/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/sms/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionSmsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sslGateway
        public Task<System.String[]> GetOrderCartServiceOptionSslGatewayAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/sslGateway");
        }
        
        // Path: /order/cartServiceOption/sslGateway/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSslGatewayServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/sslGateway/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/sslGateway/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionSslGatewayServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vdi
        public Task<System.String[]> GetOrderCartServiceOptionVdiAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/vdi");
        }
        
        // Path: /order/cartServiceOption/vdi/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVdiServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/vdi/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/vdi/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionVdiServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector
        public Task<System.String[]> GetOrderCartServiceOptionVmwareCloudDirectorAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/vmwareCloudDirector");
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVmwareCloudDirectorServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/vmwareCloudDirector/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionVmwareCloudDirectorServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirectorBackup
        public Task<System.String[]> GetOrderCartServiceOptionVmwareCloudDirectorBackupAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/vmwareCloudDirectorBackup");
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirectorBackup/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/vmwareCloudDirectorBackup/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/vps
        public Task<System.String[]> GetOrderCartServiceOptionVpsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/vps");
        }
        
        // Path: /order/cartServiceOption/vps/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVpsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/vps/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/vps/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionVpsServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/webHosting
        public Task<System.String[]> GetOrderCartServiceOptionWebHostingAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/webHosting");
        }
        
        // Path: /order/cartServiceOption/webHosting/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionWebHostingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/webHosting/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/webHosting/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionWebHostingServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/webPaaS
        public Task<System.String[]> GetOrderCartServiceOptionWebPaaSAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cartServiceOption/webPaaS");
        }
        
        // Path: /order/cartServiceOption/webPaaS/{serviceName}
        public Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionWebPaaSServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericOptionDefinition[]>(string.Format("/order/cartServiceOption/webPaaS/{serviceName}", serviceName));
        }
        
        // Path: /order/cartServiceOption/webPaaS/{serviceName}
        public Task<_order_cart.Item> PostOrderCartServiceOptionWebPaaSServiceNameAsync(string cartId, string duration, string planCode, string pricingMode, long quantity, string serviceName) {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/catalog/formatted
        public Task<System.String[]> GetOrderCatalogFormattedAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/catalog/formatted");
        }
        
        // Path: /order/catalog/formatted/bringYourOwnIp
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedBringYourOwnIpAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/bringYourOwnIp?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/cloud
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/cloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/dedicated
        public Task<_order_catalog_dedicated.Catalog> GetOrderCatalogFormattedDedicatedAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_dedicated.Catalog>(string.Format("/order/catalog/formatted/dedicated?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/discover
        public Task<_order_catalog_dedicated.Catalog> GetOrderCatalogFormattedDiscoverAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_dedicated.Catalog>(string.Format("/order/catalog/formatted/discover?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/ip
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedIpAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/ip?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseCloudLinux
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseCloudLinuxAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseCloudLinux?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseDirectadmin
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseDirectadminAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseDirectadmin?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licensePlesk
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicensePleskAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licensePlesk?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseSqlServer
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseSqlServerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseSqlServer?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseVirtuozzo
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseVirtuozzoAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseVirtuozzo?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseWindows
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseWindowsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseWindows?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licenseWorklight
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseWorklightAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licenseWorklight?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/licensecPanel
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicensecPanelAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/licensecPanel?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/logs
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedLogsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/logs?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloud
        public Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_pcc.Catalog>(string.Format("/order/catalog/formatted/privateCloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudCDI
        public Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudCDIAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_privateCloud.Catalog>(string.Format("/order/catalog/formatted/privateCloudCDI?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudDC
        public Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudDCAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_privateCloud.Catalog>(string.Format("/order/catalog/formatted/privateCloudDC?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudEnterprise
        public Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_pcc.Catalog>(string.Format("/order/catalog/formatted/privateCloudEnterprise?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudReseller
        public Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudResellerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_pcc.Catalog>(string.Format("/order/catalog/formatted/privateCloudReseller?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudResellerEnterprise
        public Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudResellerEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_pcc.Catalog>(string.Format("/order/catalog/formatted/privateCloudResellerEnterprise?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/privateCloudSDDC
        public Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudSDDCAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_privateCloud.Catalog>(string.Format("/order/catalog/formatted/privateCloudSDDC?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/reseller
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedResellerAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/reseller?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/formatted/vps
        public Task<_order_catalog.Catalog> GetOrderCatalogFormattedVpsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog.Catalog>(string.Format("/order/catalog/formatted/vps?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/private/privateCloud
        public Task<_order_catalog_pcc.Catalog> GetOrderCatalogPrivatePrivateCloudAsync(string catalogName, _nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_pcc.Catalog>(string.Format("/order/catalog/private/privateCloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/advisoryServicesHostingWeb
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesHostingWebAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/advisoryServicesHostingWeb?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/advisoryServicesPublicCloud
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesPublicCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/advisoryServicesPublicCloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/advisoryServicesTelecom
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesTelecomAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/advisoryServicesTelecom?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/baremetalServers
        public Task<_order_catalog_public.DedicatedServerCatalog> GetOrderCatalogPublicBaremetalServersAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.DedicatedServerCatalog>(string.Format("/order/catalog/public/baremetalServers?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/cloud
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/cloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/cloudDB
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicCloudDBAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/cloudDB?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/dns
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicDnsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/dns?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/domain
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicDomainAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/domain?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/eco
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEcoAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/eco?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/emailDomain
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEmailDomainAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/emailDomain?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/emailpro
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEmailproAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/emailpro?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/exchange
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicExchangeAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/exchange?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/ipLoadbalancing
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicIpLoadbalancingAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/ipLoadbalancing?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/licensecPanel
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicLicensecPanelAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/licensecPanel?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/logs
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicLogsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/logs?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/nasha
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNashaAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/nasha?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/netapp
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNetappAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/netapp?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/nutanix
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNutanixAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/nutanix?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/office365Prepaid
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOffice365PrepaidAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/office365Prepaid?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/officePrepaid
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOfficePrepaidAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/officePrepaid?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/okms
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOkmsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/okms?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/ovhCloudConnect
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOvhCloudConnectAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/ovhCloudConnect?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/packsProfessionalServices
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPacksProfessionalServicesAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/packsProfessionalServices?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/privateCloud
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateCloudAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/privateCloud?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/privateCloudEnterprise
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateCloudEnterpriseAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/privateCloudEnterprise?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/privateSQL
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateSQLAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/privateSQL?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/telephony
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicTelephonyAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/telephony?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/vps
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicVpsAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/vps?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/webHosting
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicWebHostingAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/webHosting?{queryParameters}", queryParameters));
        }
        
        // Path: /order/catalog/public/webPaaS
        public Task<_order_catalog_public.Catalog> GetOrderCatalogPublicWebPaaSAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary) {
            return _client.GetFromJsonAsync<_order_catalog_public.Catalog>(string.Format("/order/catalog/public/webPaaS?{queryParameters}", queryParameters));
        }
        
        // Path: /order/cdn/dedicated
        public Task<System.String[]> GetOrderCdnDedicatedAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cdn/dedicated");
        }
        
        // Path: /order/cdn/dedicated/new
        public Task<System.String[]> GetOrderCdnDedicatedNewAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cdn/dedicated/new");
        }
        
        // Path: /order/cdn/dedicated/new/{duration}
        public Task<_order.Order> GetOrderCdnDedicatedNewDurationAsync(string duration) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cdn/dedicated/new/{duration}", duration));
        }
        
        // Path: /order/cdn/dedicated/new/{duration}
        public Task<_order.Order> PostOrderCdnDedicatedNewDurationAsync(string duration) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}
        public Task<System.String[]> GetOrderCdnDedicatedServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cdn/dedicated/{serviceName}", serviceName));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend
        public Task<System.String[]> GetOrderCdnDedicatedServiceNameBackendAsync(long backend, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cdn/dedicated/{serviceName}/backend?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend/{duration}
        public Task<_order.Order> GetOrderCdnDedicatedServiceNameBackendDurationAsync(long backend, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cdn/dedicated/{serviceName}/backend/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend/{duration}
        public Task<_order.Order> PostOrderCdnDedicatedServiceNameBackendDurationAsync(long backend, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule
        public Task<System.String[]> GetOrderCdnDedicatedServiceNameCacheRuleAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cdn/dedicated/{serviceName}/cacheRule?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        public Task<_order.Order> GetOrderCdnDedicatedServiceNameCacheRuleDurationAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cdn/dedicated/{serviceName}/cacheRule/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        public Task<_order.Order> PostOrderCdnDedicatedServiceNameCacheRuleDurationAsync(_cdnanycast.OrderCacheRuleEnum cacheRule, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota
        public Task<System.String[]> GetOrderCdnDedicatedServiceNameQuotaAsync(_cdnanycast.OrderQuotaEnum quota, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cdn/dedicated/{serviceName}/quota?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota/{duration}
        public Task<_order.Order> GetOrderCdnDedicatedServiceNameQuotaDurationAsync(string duration, _cdnanycast.OrderQuotaEnum quota, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cdn/dedicated/{serviceName}/quota/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota/{duration}
        public Task<_order.Order> PostOrderCdnDedicatedServiceNameQuotaDurationAsync(string duration, _cdnanycast.OrderQuotaEnum quota, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cloud/project
        public Task<System.String[]> GetOrderCloudProjectAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/cloud/project");
        }
        
        // Path: /order/cloud/project/{serviceName}
        public Task<System.String[]> GetOrderCloudProjectServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/cloud/project/{serviceName}", serviceName));
        }
        
        // Path: /order/cloud/project/{serviceName}/credit
        public Task<_order.Order> GetOrderCloudProjectServiceNameCreditAsync(long amount, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/cloud/project/{serviceName}/credit?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/cloud/project/{serviceName}/credit
        public Task<_order.Order> PostOrderCloudProjectServiceNameCreditAsync(long amount, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/housing
        public Task<System.String[]> GetOrderDedicatedHousingAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/dedicated/housing");
        }
        
        // Path: /order/dedicated/housing/{serviceName}
        public Task<System.String[]> GetOrderDedicatedHousingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/housing/{serviceName}", serviceName));
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC
        public Task<System.String[]> GetOrderDedicatedHousingServiceNameAPCAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/housing/{serviceName}/APC", serviceName));
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC/{duration}
        public Task<_order.Order> GetOrderDedicatedHousingServiceNameAPCDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/housing/{serviceName}/APC/{duration}", duration, serviceName));
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC/{duration}
        public Task<_order.Order> PostOrderDedicatedHousingServiceNameAPCDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server
        public Task<System.String[]> GetOrderDedicatedServerAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/dedicated/server");
        }
        
        // Path: /order/dedicated/server/{serviceName}
        public Task<System.String[]> GetOrderDedicatedServerServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}", serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage
        public Task<System.String[]> GetOrderDedicatedServerServiceNameBackupStorageAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/backupStorage?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameBackupStorageDurationAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/backupStorage/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameBackupStorageDurationAsync(_dedicated_server.BackupStorageCapacityEnum capacity, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth
        public Task<System.String[]> GetOrderDedicatedServerServiceNameBandwidthAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/bandwidth?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameBandwidthDurationAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string duration, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/bandwidth/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameBandwidthDurationAsync(_dedicated_server.BandwidthOrderEnum bandwidth, string duration, string serviceName, _dedicated_server.BandwidthOrderTypeEnum type) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack
        public Task<System.String[]> GetOrderDedicatedServerServiceNameBandwidthvRackAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/bandwidthvRack?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameBandwidthvRackDurationAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/bandwidthvRack/{duration}?{queryParameters}" +
                        "", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameBandwidthvRackDurationAsync(_dedicated_server.BandwidthvRackOrderEnum bandwidth, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature
        public Task<System.String[]> GetOrderDedicatedServerServiceNameFeatureAsync(_dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/feature?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameFeatureDurationAsync(string duration, _dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/feature/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameFeatureDurationAsync(string duration, _dedicated_server.OrderableSysFeatureEnum feature, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall
        public Task<System.String[]> GetOrderDedicatedServerServiceNameFirewallAsync(_dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/firewall?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameFirewallDurationAsync(string duration, _dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/firewall/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameFirewallDurationAsync(string duration, _dedicated_server.FirewallModelEnum firewallModel, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration
        public Task<System.String[]> GetOrderDedicatedServerServiceNameIpMigrationAsync(string ip, string serviceName, string token) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/ipMigration?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameIpMigrationDurationAsync(string duration, string ip, string serviceName, string token) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/ipMigration/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameIpMigrationDurationAsync(string duration, string ip, string serviceName, string token) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm
        public Task<System.String[]> GetOrderDedicatedServerServiceNameKvmAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/kvm", serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameKvmDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/kvm/{duration}", duration, serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameKvmDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress
        public Task<System.String[]> GetOrderDedicatedServerServiceNameKvmExpressAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/kvmExpress", serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameKvmExpressDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/kvmExpress/{duration}", duration, serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameKvmExpressDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse
        public Task<System.String[]> GetOrderDedicatedServerServiceNameProfessionalUseAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/professionalUse", serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameProfessionalUseDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/professionalUse/{duration}", duration, serviceName));
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameProfessionalUseDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic
        public Task<System.String[]> GetOrderDedicatedServerServiceNameTrafficAsync(string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/traffic?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameTrafficDurationAsync(string duration, string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/traffic/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameTrafficDurationAsync(string duration, string serviceName, _dedicated_server.TrafficOrderEnum traffic) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey
        public Task<System.String[]> GetOrderDedicatedServerServiceNameUsbKeyAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicated/server/{serviceName}/usbKey?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey/{duration}
        public Task<_order.Order> GetOrderDedicatedServerServiceNameUsbKeyDurationAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicated/server/{serviceName}/usbKey/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey/{duration}
        public Task<_order.Order> PostOrderDedicatedServerServiceNameUsbKeyDurationAsync(_dedicated_server.UsbKeyCapacityEnum capacity, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud
        public Task<System.String[]> GetOrderDedicatedCloudAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/dedicatedCloud");
        }
        
        // Path: /order/dedicatedCloud/{serviceName}
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}", serviceName));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameAdditionalBandwidthAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}/additionalBandwidth?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}?{queryParamete" +
                        "rs}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync(_dedicatedCloud.AdditionalBandwidthEnum bandwidth, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameFilerAsync(string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}/filer?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer/{duration}
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameFilerDurationAsync(string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/filer/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer/{duration}
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameFilerDurationAsync(string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long datacenterId, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameHostAsync(long datacenterId, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}/host?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host/{duration}
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameHostDurationAsync(long datacenterId, string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/host/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host/{duration}
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameHostDurationAsync(long datacenterId, string duration, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long quantity) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameIpAsync(_dedicatedCloud.IpCountriesEnum country, string description, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}/ip?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip/{duration}
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameIpDurationAsync(_dedicatedCloud.IpCountriesEnum country, string description, string duration, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/ip/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip/{duration}
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameIpDurationAsync(_dedicatedCloud.IpCountriesEnum country, string description, string duration, long estimatedClientsNumber, string networkName, string serviceName, _dedicatedCloud.OrderableIpBlockRangeEnum size, string usage) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/spla
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameSplaAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/spla", serviceName));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/spla
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameSplaAsync(string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource
        public Task<System.String[]> GetOrderDedicatedCloudServiceNameUpgradeRessourceAsync(string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] long upgradedRessourceId) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/dedicatedCloud/{serviceName}/upgradeRessource?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync(string duration, string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] long upgradedRessourceId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}?{queryParameters}" +
                        "", duration, serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync(string duration, string serviceName, _dedicatedCloud_ressources.UpgradeTypeEnum upgradeType, _dedicatedCloud_ressources.UpgradeRessourceTypeEnum upgradedRessourceType, [System.Runtime.InteropServices.OptionalAttribute()] long upgradedRessourceId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/vdi
        public Task<_order.Order> GetOrderDedicatedCloudServiceNameVdiAsync(long datacenterId, string firstPublicIpAddress, string secondPublicIpAddress, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/dedicatedCloud/{serviceName}/vdi?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/vdi
        public Task<_order.Order> PostOrderDedicatedCloudServiceNameVdiAsync(long datacenterId, string firstPublicIpAddress, string secondPublicIpAddress, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone
        public Task<System.String[]> GetOrderDomainZoneAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/domain/zone");
        }
        
        // Path: /order/domain/zone/new
        public Task<_order.Order> GetOrderDomainZoneNewAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] bool minimized) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/domain/zone/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/domain/zone/new
        public Task<_order.Order> PostOrderDomainZoneNewAsync(string zoneName, [System.Runtime.InteropServices.OptionalAttribute()] bool minimized) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone/{zoneName}
        public Task<System.String[]> GetOrderDomainZoneZoneNameAsync(string zoneName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/domain/zone/{zoneName}", zoneName));
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast
        public Task<System.String[]> GetOrderDomainZoneZoneNameDnsAnycastAsync(string zoneName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/domain/zone/{zoneName}/dnsAnycast", zoneName));
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast/{duration}
        public Task<_order.Order> GetOrderDomainZoneZoneNameDnsAnycastDurationAsync(string duration, string zoneName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/domain/zone/{zoneName}/dnsAnycast/{duration}", duration, zoneName));
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast/{duration}
        public Task<_order.Order> PostOrderDomainZoneZoneNameDnsAnycastDurationAsync(string duration, string zoneName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain
        public Task<System.String[]> GetOrderEmailDomainAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/email/domain");
        }
        
        // Path: /order/email/domain/new
        public Task<System.String[]> GetOrderEmailDomainNewAsync(string domain, _email_domain.OfferEnum offer) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/domain/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/email/domain/new/{duration}
        public Task<_order.Order> GetOrderEmailDomainNewDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/domain/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/email/domain/new/{duration}
        public Task<_order.Order> PostOrderEmailDomainNewDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain/{domain}
        public Task<System.String[]> GetOrderEmailDomainDomainAsync(string domain) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/domain/{domain}", domain));
        }
        
        // Path: /order/email/domain/{domain}/upgrade
        public Task<System.String[]> GetOrderEmailDomainDomainUpgradeAsync(string domain, _email_domain.OfferEnum offer) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/domain/{domain}/upgrade?{queryParameters}", domain, queryParameters));
        }
        
        // Path: /order/email/domain/{domain}/upgrade/{duration}
        public Task<_order.Order> GetOrderEmailDomainDomainUpgradeDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/domain/{domain}/upgrade/{duration}?{queryParameters}", domain, duration, queryParameters));
        }
        
        // Path: /order/email/domain/{domain}/upgrade/{duration}
        public Task<_order.Order> PostOrderEmailDomainDomainUpgradeDurationAsync(string domain, string duration, _email_domain.OfferEnum offer) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange
        public Task<System.String[]> GetOrderEmailExchangeAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/email/exchange");
        }
        
        // Path: /order/email/exchange/{organizationName}/service
        public Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceAsync(string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/exchange/{organizationName}/service", organizationName));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}
        public Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}", exchangeService, organizationName));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account
        public Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync(string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum storageQuota) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/account?{query" +
                        "Parameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        public Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync(string duration, string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum storageQuota) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/account/{durat" +
                        "ion}?{queryParameters}", duration, exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        public Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync(string duration, string exchangeService, _email_exchange.OvhLicenceEnum licence, long number, string organizationName, [System.Runtime.InteropServices.OptionalAttribute()] _email_exchange.accountQuotaEnum storageQuota) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade
        public Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeAsync(string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade" +
                        "?{queryParameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        public Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync(string duration, string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade" +
                        "/{duration}?{queryParameters}", duration, exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        public Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync(string duration, string exchangeService, _email_exchange.accountQuotaEnum newQuota, string organizationName, string primaryEmailAddress) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        public Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace", exchangeService, organizationName));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        public Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync(string exchangeService, string organizationName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook
        public Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookAsync(string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/outlook?{query" +
                        "Parameters}", exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        public Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync(string duration, string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{durat" +
                        "ion}?{queryParameters}", duration, exchangeService, organizationName, queryParameters));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        public Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync(string duration, string exchangeService, _email_exchange.OutlookVersionEnum licence, string organizationName, string primaryEmailAddress) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        public Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync(string exchangeService, string organizationName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/exchange/{organizationName}/service/{exchangeService}/upgrade", exchangeService, organizationName));
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        public Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync(string exchangeService, string organizationName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/pro
        public Task<System.String[]> GetOrderEmailProAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/email/pro");
        }
        
        // Path: /order/email/pro/{service}
        public Task<System.String[]> GetOrderEmailProServiceAsync(string service) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/pro/{service}", service));
        }
        
        // Path: /order/email/pro/{service}/account
        public Task<System.String[]> GetOrderEmailProServiceAccountAsync(long number, string service) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/email/pro/{service}/account?{queryParameters}", service, queryParameters));
        }
        
        // Path: /order/email/pro/{service}/account/{duration}
        public Task<_order.Order> GetOrderEmailProServiceAccountDurationAsync(string duration, long number, string service) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/email/pro/{service}/account/{duration}?{queryParameters}", duration, service, queryParameters));
        }
        
        // Path: /order/email/pro/{service}/account/{duration}
        public Task<_order.Order> PostOrderEmailProServiceAccountDurationAsync(string duration, long number, string service) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax
        public Task<System.String[]> GetOrderFreefaxAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/freefax");
        }
        
        // Path: /order/freefax/new
        public Task<_order.Order> GetOrderFreefaxNewAsync(_freefax.QuantityEnum quantity) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/freefax/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/freefax/new
        public Task<_order.Order> PostOrderFreefaxNewAsync(_freefax.QuantityEnum quantity) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax/{serviceName}
        public Task<System.String[]> GetOrderFreefaxServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/freefax/{serviceName}", serviceName));
        }
        
        // Path: /order/freefax/{serviceName}/convertToVoicefax
        public Task<_order.Order> GetOrderFreefaxServiceNameConvertToVoicefaxAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/freefax/{serviceName}/convertToVoicefax?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/freefax/{serviceName}/convertToVoicefax
        public Task<_order.Order> PostOrderFreefaxServiceNameConvertToVoicefaxAsync(string billingAccount, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/hosting/web
        public Task<System.String[]> GetOrderHostingWebAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/hosting/web");
        }
        
        // Path: /order/hosting/web/{serviceName}
        public Task<System.String[]> GetOrderHostingWebServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/hosting/web/{serviceName}", serviceName));
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade
        public Task<System.String[]> GetOrderHostingWebServiceNameUpgradeAsync(_hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly startTime, [System.Runtime.InteropServices.OptionalAttribute()] bool waiveRetractationPeriod) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/hosting/web/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderHostingWebServiceNameUpgradeDurationAsync(string duration, _hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly startTime, [System.Runtime.InteropServices.OptionalAttribute()] bool waiveRetractationPeriod) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/hosting/web/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderHostingWebServiceNameUpgradeDurationAsync(string duration, _hosting_web.OfferEnum offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.TimeOnly startTime, [System.Runtime.InteropServices.OptionalAttribute()] bool waiveRetractationPeriod) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cloudLinux/new
        public Task<System.String[]> GetOrderLicenseCloudLinuxNewAsync(string ip, _license.CloudLinuxVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/cloudLinux/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/cloudLinux/new/{duration}
        public Task<_order.Order> GetOrderLicenseCloudLinuxNewDurationAsync(string duration, string ip, _license.CloudLinuxVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/cloudLinux/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/cloudLinux/new/{duration}
        public Task<_order.Order> PostOrderLicenseCloudLinuxNewDurationAsync(string duration, string ip, _license.CloudLinuxVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel
        public Task<System.String[]> GetOrderLicenseCpanelAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/cpanel");
        }
        
        // Path: /order/license/cpanel/new
        public Task<System.String[]> GetOrderLicenseCpanelNewAsync(string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/cpanel/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/cpanel/new/{duration}
        public Task<_order.Order> GetOrderLicenseCpanelNewDurationAsync(string duration, string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/cpanel/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/cpanel/new/{duration}
        public Task<_order.Order> PostOrderLicenseCpanelNewDurationAsync(string duration, string ip, _license.OrderableCpanelVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel/{serviceName}
        public Task<System.String[]> GetOrderLicenseCpanelServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/cpanel/{serviceName}", serviceName));
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicenseCpanelServiceNameUpgradeAsync(string serviceName, _license.OrderableCpanelVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/cpanel/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicenseCpanelServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.OrderableCpanelVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/cpanel/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicenseCpanelServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.OrderableCpanelVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/directadmin/new
        public Task<System.String[]> GetOrderLicenseDirectadminNewAsync(string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/directadmin/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/directadmin/new/{duration}
        public Task<_order.Order> GetOrderLicenseDirectadminNewDurationAsync(string duration, string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/directadmin/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/directadmin/new/{duration}
        public Task<_order.Order> PostOrderLicenseDirectadminNewDurationAsync(string duration, string ip, _license.OrderableDirectAdminVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/office/new
        public Task<System.String[]> GetOrderLicenseOfficeNewAsync([System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/office/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/office/new/{duration}
        public Task<_order.Order> GetOrderLicenseOfficeNewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/office/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/office/new/{duration}
        public Task<_order.Order> PostOrderLicenseOfficeNewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk
        public Task<System.String[]> GetOrderLicensePleskAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/plesk");
        }
        
        // Path: /order/license/plesk/new
        public Task<System.String[]> GetOrderLicensePleskNewAsync(string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/plesk/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/plesk/new/{duration}
        public Task<_order.Order> GetOrderLicensePleskNewDurationAsync(string duration, string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/plesk/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/plesk/new/{duration}
        public Task<_order.Order> PostOrderLicensePleskNewDurationAsync(string duration, string ip, _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk/{serviceName}
        public Task<System.String[]> GetOrderLicensePleskServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/plesk/{serviceName}", serviceName));
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicensePleskServiceNameUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/plesk/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicensePleskServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/plesk/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicensePleskServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntispamEnum antispam, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderableAntivirusEnum antivirus, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskApplicationSetEnum applicationSet, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskDomainNumberEnum domainNumber, [System.Runtime.InteropServices.OptionalAttribute()] _license.OrderablePleskLanguagePackEnum languagePackNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool powerpack, [System.Runtime.InteropServices.OptionalAttribute()] bool resellerManagement, [System.Runtime.InteropServices.OptionalAttribute()] _license.PleskVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] bool wordpressToolkit) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver
        public Task<System.String[]> GetOrderLicenseSqlserverAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/sqlserver");
        }
        
        // Path: /order/license/sqlserver/new
        public Task<System.String[]> GetOrderLicenseSqlserverNewAsync(string ip, _license.SqlServerVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/sqlserver/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/sqlserver/new/{duration}
        public Task<_order.Order> GetOrderLicenseSqlserverNewDurationAsync(string duration, string ip, _license.SqlServerVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/sqlserver/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/sqlserver/new/{duration}
        public Task<_order.Order> PostOrderLicenseSqlserverNewDurationAsync(string duration, string ip, _license.SqlServerVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver/{serviceName}
        public Task<System.String[]> GetOrderLicenseSqlserverServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/sqlserver/{serviceName}", serviceName));
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicenseSqlserverServiceNameUpgradeAsync(string serviceName, _license.SqlServerVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/sqlserver/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicenseSqlserverServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.SqlServerVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/sqlserver/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicenseSqlserverServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.SqlServerVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo
        public Task<System.String[]> GetOrderLicenseVirtuozzoAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/virtuozzo");
        }
        
        // Path: /order/license/virtuozzo/new
        public Task<System.String[]> GetOrderLicenseVirtuozzoNewAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/virtuozzo/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/virtuozzo/new/{duration}
        public Task<_order.Order> GetOrderLicenseVirtuozzoNewDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/virtuozzo/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/virtuozzo/new/{duration}
        public Task<_order.Order> PostOrderLicenseVirtuozzoNewDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string ip, _license.OrderableVirtuozzoVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo/{serviceName}
        public Task<System.String[]> GetOrderLicenseVirtuozzoServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/virtuozzo/{serviceName}", serviceName));
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicenseVirtuozzoServiceNameUpgradeAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/virtuozzo/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicenseVirtuozzoServiceNameUpgradeDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/virtuozzo/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicenseVirtuozzoServiceNameUpgradeDurationAsync(_license.OrderableVirtuozzoContainerNumberEnum containerNumber, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows
        public Task<System.String[]> GetOrderLicenseWindowsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/windows");
        }
        
        // Path: /order/license/windows/new
        public Task<System.String[]> GetOrderLicenseWindowsNewAsync(string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/windows/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/windows/new/{duration}
        public Task<_order.Order> GetOrderLicenseWindowsNewDurationAsync(string duration, string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/windows/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/windows/new/{duration}
        public Task<_order.Order> PostOrderLicenseWindowsNewDurationAsync(string duration, string ip, _license.WindowsOsVersionEnum version, [System.Runtime.InteropServices.OptionalAttribute()] _license.LicenseTypeEnum serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows/{serviceName}
        public Task<System.String[]> GetOrderLicenseWindowsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/windows/{serviceName}", serviceName));
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicenseWindowsServiceNameUpgradeAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/windows/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicenseWindowsServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/windows/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicenseWindowsServiceNameUpgradeDurationAsync(string duration, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsSqlVersionEnum sqlVersion, [System.Runtime.InteropServices.OptionalAttribute()] _license.WindowsOsVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight
        public Task<System.String[]> GetOrderLicenseWorklightAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/license/worklight");
        }
        
        // Path: /order/license/worklight/new
        public Task<System.String[]> GetOrderLicenseWorklightNewAsync(string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/worklight/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/license/worklight/new/{duration}
        public Task<_order.Order> GetOrderLicenseWorklightNewDurationAsync(string duration, string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/worklight/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/license/worklight/new/{duration}
        public Task<_order.Order> PostOrderLicenseWorklightNewDurationAsync(string duration, string ip, bool lessThan1000Users, _license.WorkLightVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight/{serviceName}
        public Task<System.String[]> GetOrderLicenseWorklightServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/worklight/{serviceName}", serviceName));
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade
        public Task<System.String[]> GetOrderLicenseWorklightServiceNameUpgradeAsync(string serviceName, _license.WorkLightVersionEnum version) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/license/worklight/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderLicenseWorklightServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.WorkLightVersionEnum version) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/license/worklight/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderLicenseWorklightServiceNameUpgradeDurationAsync(string duration, string serviceName, _license.WorkLightVersionEnum version) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox
        public Task<System.String[]> GetOrderOverTheBoxAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/overTheBox");
        }
        
        // Path: /order/overTheBox/new
        public Task<System.String[]> GetOrderOverTheBoxNewAsync(string offer, [System.Runtime.InteropServices.OptionalAttribute()] string deviceId, [System.Runtime.InteropServices.OptionalAttribute()] string voucher) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/overTheBox/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/overTheBox/new/{duration}
        public Task<_order.Order> GetOrderOverTheBoxNewDurationAsync(string duration, string offer, [System.Runtime.InteropServices.OptionalAttribute()] string deviceId, [System.Runtime.InteropServices.OptionalAttribute()] string voucher) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/overTheBox/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/overTheBox/new/{duration}
        public Task<_order.Order> PostOrderOverTheBoxNewDurationAsync(string duration, string offer, [System.Runtime.InteropServices.OptionalAttribute()] string deviceId, [System.Runtime.InteropServices.OptionalAttribute()] string voucher) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox/{serviceName}
        public Task<System.String[]> GetOrderOverTheBoxServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/overTheBox/{serviceName}", serviceName));
        }
        
        // Path: /order/overTheBox/{serviceName}/migrate
        public Task<_order.Order> GetOrderOverTheBoxServiceNameMigrateAsync(bool hardware, string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactID, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ShippingMethodEnum shippingMethod, [System.Runtime.InteropServices.OptionalAttribute()] long shippingRelayID) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/overTheBox/{serviceName}/migrate?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/overTheBox/{serviceName}/migrate
        public Task<_order.Order> PostOrderOverTheBoxServiceNameMigrateAsync(bool hardware, string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactID, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ShippingMethodEnum shippingMethod, [System.Runtime.InteropServices.OptionalAttribute()] long shippingRelayID) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/saas/csp2/new
        public Task<System.String[]> GetOrderSaasCsp2NewAsync([System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/saas/csp2/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/saas/csp2/new/{duration}
        public Task<_order.Order> GetOrderSaasCsp2NewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/saas/csp2/new/{duration}?{queryParameters}", duration, queryParameters));
        }
        
        // Path: /order/saas/csp2/new/{duration}
        public Task<_order.Order> PostOrderSaasCsp2NewDurationAsync(string duration, [System.Runtime.InteropServices.OptionalAttribute()] string giftCode, [System.Runtime.InteropServices.OptionalAttribute()] long officeBusinessQuantity, [System.Runtime.InteropServices.OptionalAttribute()] long officeProPlusQuantity) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms
        public Task<System.String[]> GetOrderSmsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/sms");
        }
        
        // Path: /order/sms/new
        public Task<_order.Order> GetOrderSmsNewAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ChannelEnum channel, [System.Runtime.InteropServices.OptionalAttribute()] bool smpp) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/sms/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/sms/new
        public Task<_order.Order> PostOrderSmsNewAsync(long quantity, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ChannelEnum channel, [System.Runtime.InteropServices.OptionalAttribute()] bool smpp) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms/{serviceName}
        public Task<System.String[]> GetOrderSmsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/sms/{serviceName}", serviceName));
        }
        
        // Path: /order/sms/{serviceName}/credits
        public Task<_order.Order> GetOrderSmsServiceNameCreditsAsync(long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/sms/{serviceName}/credits?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/sms/{serviceName}/credits
        public Task<_order.Order> PostOrderSmsServiceNameCreditsAsync(long quantity, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony
        public Task<System.String[]> GetOrderTelephonyAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/telephony");
        }
        
        // Path: /order/telephony/lines
        public Task<System.String[]> GetOrderTelephonyLinesAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/telephony/lines");
        }
        
        // Path: /order/telephony/lines/{serviceName}
        public Task<System.String[]> GetOrderTelephonyLinesServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/telephony/lines/{serviceName}", serviceName));
        }
        
        // Path: /order/telephony/lines/{serviceName}/addSimultaneousLines
        public Task<_order.Order> GetOrderTelephonyLinesServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/lines/{serviceName}/addSimultaneousLines?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/lines/{serviceName}/addSimultaneousLines
        public Task<_order.Order> PostOrderTelephonyLinesServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/hardware
        public Task<_order.Order> GetOrderTelephonyLinesServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/lines/{serviceName}/hardware?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/lines/{serviceName}/hardware
        public Task<_order.Order> PostOrderTelephonyLinesServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/lines/{serviceName}/updateSimultaneousChannels?{queryParameters}" +
                        "", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/lines/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/new
        public Task<_order.Order> GetOrderTelephonyNewAsync() {
            return _client.GetFromJsonAsync<_order.Order>("/order/telephony/new");
        }
        
        // Path: /order/telephony/new
        public Task<_order.Order> PostOrderTelephonyNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/spare/new
        public Task<_order.Order> GetOrderTelephonySpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/spare/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/telephony/spare/new
        public Task<_order.Order> PostOrderTelephonySpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks
        public Task<System.String[]> GetOrderTelephonyTrunksAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/telephony/trunks");
        }
        
        // Path: /order/telephony/trunks/{serviceName}
        public Task<System.String[]> GetOrderTelephonyTrunksServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/telephony/trunks/{serviceName}", serviceName));
        }
        
        // Path: /order/telephony/trunks/{serviceName}/addSimultaneousLines
        public Task<_order.Order> GetOrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/trunks/{serviceName}/addSimultaneousLines?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/trunks/{serviceName}/addSimultaneousLines
        public Task<_order.Order> PostOrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync(string billingAccount, long quantity, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/hardware
        public Task<_order.Order> GetOrderTelephonyTrunksServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/trunks/{serviceName}/hardware?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/trunks/{serviceName}/hardware
        public Task<_order.Order> PostOrderTelephonyTrunksServiceNameHardwareAsync(string hardware, bool retractation, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/trunks/{serviceName}/updateSimultaneousChannels?{queryParameters" +
                        "}", serviceName, queryParameters));
        }
        
        // Path: /order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        public Task<_order.Order> PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync(long quantity, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}
        public Task<System.String[]> GetOrderTelephonyBillingAccountAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/telephony/{billingAccount}", billingAccount));
        }
        
        // Path: /order/telephony/{billingAccount}/accessories
        public Task<_order.Order> GetOrderTelephonyBillingAccountAccessoriesAsync(string[] accessories, string billingAccount, bool retractation, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/accessories?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/accessories
        public Task<_order.Order> PostOrderTelephonyBillingAccountAccessoriesAsync(string[] accessories, string billingAccount, bool retractation, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/line
        public Task<_order.Order> GetOrderTelephonyBillingAccountLineAsync(string billingAccount, bool[] displayUniversalDirectories, long[] extraSimultaneousLines, string[] offers, long[] ownerContactIds, long quantity, bool retractation, long shippingContactId, _telephony.LineTypeEnum[] types, [System.Runtime.InteropServices.OptionalAttribute()] string brand, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string[] zones) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/line?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/line
        public Task<_order.Order> PostOrderTelephonyBillingAccountLineAsync(string billingAccount, bool[] displayUniversalDirectories, long[] extraSimultaneousLines, string[] offers, long[] ownerContactIds, long quantity, bool retractation, long shippingContactId, _telephony.LineTypeEnum[] types, [System.Runtime.InteropServices.OptionalAttribute()] string brand, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string[] zones) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberGeographic
        public Task<_order.Order> GetOrderTelephonyBillingAccountNumberGeographicAsync(
                    string billingAccount, 
                    string city, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    string zone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/numberGeographic?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/numberGeographic
        public Task<_order.Order> PostOrderTelephonyBillingAccountNumberGeographicAsync(
                    string billingAccount, 
                    string city, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    string zone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberNogeographic
        public Task<_order.Order> GetOrderTelephonyBillingAccountNumberNogeographicAsync(
                    string billingAccount, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/numberNogeographic?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/numberNogeographic
        public Task<_order.Order> PostOrderTelephonyBillingAccountNumberNogeographicAsync(
                    string billingAccount, 
                    _telephony.NumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    _telephony.NumberOffer offer, 
                    bool retractation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string socialNomination, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberSpecial
        public Task<_order.Order> GetOrderTelephonyBillingAccountNumberSpecialAsync(
                    string billingAccount, 
                    _telephony.SpecialNumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    string range, 
                    bool retractation, 
                    string siret, 
                    string socialNomination, 
                    _telephony.NumberSpecialTypologyEnum typology, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string addressExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string cedex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool displaySearchReverse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string postBox, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string urbanDistrict, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/numberSpecial?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/numberSpecial
        public Task<_order.Order> PostOrderTelephonyBillingAccountNumberSpecialAsync(
                    string billingAccount, 
                    _telephony.SpecialNumberCountryEnum country, 
                    bool displayUniversalDirectory, 
                    _nichandle.LegalFormEnum legalform, 
                    string range, 
                    bool retractation, 
                    string siret, 
                    string socialNomination, 
                    _telephony.NumberSpecialTypologyEnum typology, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string addressExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ape, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string cedex, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string city, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string description, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool displaySearchReverse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string email, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstname, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string name, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string organisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string phone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony.NumberPoolEnum pool, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string postBox, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string specificNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string urbanDistrict, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string zip) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/portability
        public Task<_order.Order> GetOrderTelephonyBillingAccountPortabilityAsync(
                    string billingAccount, 
                    string callNumber, 
                    string city, 
                    _telephony_portability.CountriesAvailable country, 
                    bool displayUniversalDirectory, 
                    string name, 
                    _telephony_portability.OfferType offer, 
                    _telephony_portability.SocialReason socialReason, 
                    string streetName, 
                    double streetNumber, 
                    string zip, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly desireDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool executeAsSoonAsPossible, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool fiabilisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] double floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string lineToRedirectAliasTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string listNumbers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string mobilePhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string rio, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.SpecialNumberCategoryEnum specialNumberCategory, 
                    [System.Runtime.InteropServices.OptionalAttribute()] double stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.NumberType type) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/portability?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/portability
        public Task<_order.Order> PostOrderTelephonyBillingAccountPortabilityAsync(
                    string billingAccount, 
                    string callNumber, 
                    string city, 
                    _telephony_portability.CountriesAvailable country, 
                    bool displayUniversalDirectory, 
                    string name, 
                    _telephony_portability.OfferType offer, 
                    _telephony_portability.SocialReason socialReason, 
                    string streetName, 
                    double streetNumber, 
                    string zip, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactNumber, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateOnly desireDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool executeAsSoonAsPossible, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool fiabilisation, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string firstName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] double floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string lineToRedirectAliasTo, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string listNumbers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string mobilePhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string rio, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string siret, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.SpecialNumberCategoryEnum specialNumberCategory, 
                    [System.Runtime.InteropServices.OptionalAttribute()] double stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetNumberExtra, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string streetType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _telephony_portability.NumberType type) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/securityDeposit
        public Task<_order.Order> GetOrderTelephonyBillingAccountSecurityDepositAsync(_telephony.SecurityDepositAmountsEnum amount, string billingAccount) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/telephony/{billingAccount}/securityDeposit?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /order/telephony/{billingAccount}/securityDeposit
        public Task<_order.Order> PostOrderTelephonyBillingAccountSecurityDepositAsync(_telephony.SecurityDepositAmountsEnum amount, string billingAccount) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth
        public Task<System.String[]> GetOrderUpgradeBaremetalPrivateBandwidthAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/baremetalPrivateBandwidth");
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeBaremetalPrivateBandwidthServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/baremetalPrivateBandwidth/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}?{queryParameter" +
                        "s}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth
        public Task<System.String[]> GetOrderUpgradeBaremetalPublicBandwidthAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/baremetalPublicBandwidth");
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeBaremetalPublicBandwidthServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/baremetalPublicBandwidth/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}?{queryParameters" +
                        "}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cephaas
        public Task<System.String[]> GetOrderUpgradeCephaasAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/cephaas");
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeCephaasServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/cephaas/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeCephaasServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/cephaas/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeCephaasServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cloudDB
        public Task<System.String[]> GetOrderUpgradeCloudDBAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/cloudDB");
        }
        
        // Path: /order/upgrade/cloudDB/{domain}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeCloudDBDomainAsync(string domain) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/cloudDB/{domain}", domain));
        }
        
        // Path: /order/upgrade/cloudDB/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeCloudDBDomainPlanCodeAsync(string domain, string planCode, long quantity) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/cloudDB/{domain}/{planCode}?{queryParameters}", domain, planCode, queryParameters));
        }
        
        // Path: /order/upgrade/cloudDB/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeCloudDBDomainPlanCodeAsync(string domain, string planCode, long quantity, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/emailDomain
        public Task<System.String[]> GetOrderUpgradeEmailDomainAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/emailDomain");
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeEmailDomainServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/emailDomain/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeEmailDomainServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/emailDomain/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeEmailDomainServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/ipLoadbalancing
        public Task<System.String[]> GetOrderUpgradeIpLoadbalancingAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/ipLoadbalancing");
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeIpLoadbalancingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/ipLoadbalancing/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/ipLoadbalancing/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensePlesk
        public Task<System.String[]> GetOrderUpgradeLicensePleskAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/licensePlesk");
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLicensePleskServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/licensePlesk/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLicensePleskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/licensePlesk/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLicensePleskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensecPanel
        public Task<System.String[]> GetOrderUpgradeLicensecPanelAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/licensecPanel");
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLicensecPanelServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/licensecPanel/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLicensecPanelServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/licensecPanel/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLicensecPanelServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/logs
        public Task<System.String[]> GetOrderUpgradeLogsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/logs");
        }
        
        // Path: /order/upgrade/logs/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLogsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/logs/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/logs/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLogsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/logs/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/logs/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLogsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/metrics
        public Task<System.String[]> GetOrderUpgradeMetricsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/metrics");
        }
        
        // Path: /order/upgrade/metrics/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeMetricsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/metrics/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/metrics/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeMetricsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/metrics/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/metrics/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeMetricsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/microsoftExchange
        public Task<System.String[]> GetOrderUpgradeMicrosoftExchangeAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/microsoftExchange");
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeMicrosoftExchangeServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/microsoftExchange/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/microsoftExchange/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloud
        public Task<System.String[]> GetOrderUpgradePrivateCloudAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/privateCloud");
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateCloudServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/privateCloud/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateCloudServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/privateCloud/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateCloudServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloudManagementFee
        public Task<System.String[]> GetOrderUpgradePrivateCloudManagementFeeAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/privateCloudManagementFee");
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateCloudManagementFeeServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/privateCloudManagementFee/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}?{queryParameter" +
                        "s}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateSQL
        public Task<System.String[]> GetOrderUpgradePrivateSQLAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/privateSQL");
        }
        
        // Path: /order/upgrade/privateSQL/{domain}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateSQLDomainAsync(string domain) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/privateSQL/{domain}", domain));
        }
        
        // Path: /order/upgrade/privateSQL/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateSQLDomainPlanCodeAsync(string domain, string planCode, long quantity) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/privateSQL/{domain}/{planCode}?{queryParameters}", domain, planCode, queryParameters));
        }
        
        // Path: /order/upgrade/privateSQL/{domain}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateSQLDomainPlanCodeAsync(string domain, string planCode, long quantity, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/sslGateway
        public Task<System.String[]> GetOrderUpgradeSslGatewayAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/sslGateway");
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeSslGatewayServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/sslGateway/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeSslGatewayServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/sslGateway/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeSslGatewayServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vps
        public Task<System.String[]> GetOrderUpgradeVpsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/vps");
        }
        
        // Path: /order/upgrade/vps/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeVpsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/vps/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/vps/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeVpsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/vps/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/vps/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeVpsServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk
        public Task<System.String[]> GetOrderUpgradeVpsAdditionalDiskAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/vpsAdditionalDisk");
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeVpsAdditionalDiskServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/vpsAdditionalDisk/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webHosting
        public Task<System.String[]> GetOrderUpgradeWebHostingAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/webHosting");
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeWebHostingServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/webHosting/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeWebHostingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/webHosting/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeWebHostingServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webPaaS
        public Task<System.String[]> GetOrderUpgradeWebPaaSAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/upgrade/webPaaS");
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}
        public Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeWebPaaSServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/order/upgrade/webPaaS/{serviceName}", serviceName));
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeWebPaaSServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_order_upgrade.OperationAndOrder>(string.Format("/order/upgrade/webPaaS/{serviceName}/{planCode}?{queryParameters}", planCode, serviceName, queryParameters));
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}/{planCode}
        public Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeWebPaaSServiceNamePlanCodeAsync(string planCode, long quantity, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoPayWithPreferredPaymentMethod) {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/veeamCloudConnect
        public Task<System.String[]> GetOrderVeeamCloudConnectAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/veeamCloudConnect");
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}
        public Task<System.String[]> GetOrderVeeamCloudConnectServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/veeamCloudConnect/{serviceName}", serviceName));
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade
        public Task<System.String[]> GetOrderVeeamCloudConnectServiceNameUpgradeAsync(_veeamCloudConnect.Offer offer, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/veeamCloudConnect/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderVeeamCloudConnectServiceNameUpgradeDurationAsync(string duration, _veeamCloudConnect.Offer offer, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/veeamCloudConnect/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderVeeamCloudConnectServiceNameUpgradeDurationAsync(string duration, _veeamCloudConnect.Offer offer, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps
        public Task<System.String[]> GetOrderVpsAsync() {
            return _client.GetFromJsonAsync<string[]>("/order/vps");
        }
        
        // Path: /order/vps/{serviceName}
        public Task<System.String[]> GetOrderVpsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk
        public Task<System.String[]> GetOrderVpsServiceNameAdditionalDiskAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/additionalDisk?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameAdditionalDiskDurationAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/additionalDisk/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameAdditionalDiskDurationAsync(_vps_additionalDisk.AdditionalDiskSizeEnum additionalDiskSize, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup
        public Task<System.String[]> GetOrderVpsServiceNameAutomatedBackupAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/automatedBackup", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameAutomatedBackupDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/automatedBackup/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameAutomatedBackupDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/cpanel
        public Task<System.String[]> GetOrderVpsServiceNameCpanelAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/cpanel", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/cpanel/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameCpanelDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/cpanel/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/cpanel/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameCpanelDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup
        public Task<System.String[]> GetOrderVpsServiceNameFtpbackupAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/ftpbackup", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameFtpbackupDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/ftpbackup/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameFtpbackupDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/plesk
        public Task<System.String[]> GetOrderVpsServiceNamePleskAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/plesk?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/plesk/{duration}
        public Task<_order.Order> GetOrderVpsServiceNamePleskDurationAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/plesk/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/plesk/{duration}
        public Task<_order.Order> PostOrderVpsServiceNamePleskDurationAsync(_vps.PleskLicenseDomainNumberEnum domainNumber, string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/snapshot
        public Task<System.String[]> GetOrderVpsServiceNameSnapshotAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/snapshot", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/snapshot/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameSnapshotDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/snapshot/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/snapshot/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameSnapshotDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/upgrade
        public Task<System.String[]> GetOrderVpsServiceNameUpgradeAsync(string model, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/upgrade?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/upgrade/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameUpgradeDurationAsync(string duration, string model, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/upgrade/{duration}?{queryParameters}", duration, serviceName, queryParameters));
        }
        
        // Path: /order/vps/{serviceName}/upgrade/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameUpgradeDurationAsync(string duration, string model, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/veeam
        public Task<System.String[]> GetOrderVpsServiceNameVeeamAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/veeam", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/veeam/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameVeeamDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/veeam/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/veeam/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameVeeamDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/windows
        public Task<System.String[]> GetOrderVpsServiceNameWindowsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/order/vps/{serviceName}/windows", serviceName));
        }
        
        // Path: /order/vps/{serviceName}/windows/{duration}
        public Task<_order.Order> GetOrderVpsServiceNameWindowsDurationAsync(string duration, string serviceName) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/vps/{serviceName}/windows/{duration}", duration, serviceName));
        }
        
        // Path: /order/vps/{serviceName}/windows/{duration}
        public Task<_order.Order> PostOrderVpsServiceNameWindowsDurationAsync(string duration, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/xdsl/spare/new
        public Task<_order.Order> GetOrderXdslSpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return _client.GetFromJsonAsync<_order.Order>(string.Format("/order/xdsl/spare/new?{queryParameters}", queryParameters));
        }
        
        // Path: /order/xdsl/spare/new
        public Task<_order.Order> PostOrderXdslSpareNewAsync(string brand, long quantity, long shippingContactId, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId) {
            return default(Task<_order.Order>);
        }
        
        // Path: /overTheBox
        public Task<System.String[]> GetOverTheBoxAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox?{queryParameters}", queryParameters));
        }
        
        // Path: /overTheBox/availableOffers
        public Task<_price_OverTheBox.OfferEnum[]> GetOverTheBoxAvailableOffersAsync() {
            return _client.GetFromJsonAsync<_price_OverTheBox.OfferEnum[]>("/overTheBox/availableOffers");
        }
        
        // Path: /overTheBox/devices
        public Task<_overTheBox.DeviceForRegistration[]> PostOverTheBoxDevicesAsync() {
            return default(Task<_overTheBox.DeviceForRegistration[]>);
        }
        
        // Path: /overTheBox/hardware
        public Task<System.String[]> GetOverTheBoxHardwareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/hardware?{queryParameters}", queryParameters));
        }
        
        // Path: /overTheBox/hardware/available
        public Task<System.String[]> GetOverTheBoxHardwareAvailableAsync() {
            return _client.GetFromJsonAsync<string[]>("/overTheBox/hardware/available");
        }
        
        // Path: /overTheBox/hardware/{hardwareName}
        public Task<_overTheBox.HardwareWithIAM> GetOverTheBoxHardwareHardwareNameAsync(string hardwareName) {
            return _client.GetFromJsonAsync<_overTheBox.HardwareWithIAM>(string.Format("/overTheBox/hardware/{hardwareName}", hardwareName));
        }
        
        // Path: /overTheBox/{serviceName}
        public System.Threading.Tasks.Task DeleteOverTheBoxServiceNameAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}
        public Task<_overTheBox.ServiceWithIAM> GetOverTheBoxServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.ServiceWithIAM>(string.Format("/overTheBox/{serviceName}", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}
        public System.Threading.Tasks.Task PutOverTheBoxServiceNameAsync(_overTheBox.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/autoMTU
        public System.Threading.Tasks.Task PutOverTheBoxServiceNameAutoMTUAsync(_overTheBox.AvailableStatusEnum mtuAuto, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/availableReleaseChannels
        public Task<System.String[]> GetOverTheBoxServiceNameAvailableReleaseChannelsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/{serviceName}/availableReleaseChannels", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/backups
        public Task<System.String[]> GetOverTheBoxServiceNameBackupsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/{serviceName}/backups", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/backups/{backupId}
        public System.Threading.Tasks.Task DeleteOverTheBoxServiceNameBackupsBackupIdAsync(string backupId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/backups/{backupId}
        public Task<_overTheBox.Backup> GetOverTheBoxServiceNameBackupsBackupIdAsync(string backupId, string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.Backup>(string.Format("/overTheBox/{serviceName}/backups/{backupId}", backupId, serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/cancelResiliation
        public System.Threading.Tasks.Task PostOverTheBoxServiceNameCancelResiliationAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/changeContact
        public Task<System.Int64[]> PostOverTheBoxServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /overTheBox/{serviceName}/device
        public System.Threading.Tasks.Task DeleteOverTheBoxServiceNameDeviceAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/device
        public Task<_overTheBox.Device> GetOverTheBoxServiceNameDeviceAsync(string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.Device>(string.Format("/overTheBox/{serviceName}/device", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/device/actions
        public Task<System.String[]> GetOverTheBoxServiceNameDeviceActionsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.ActionStatusEnum status) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/{serviceName}/device/actions?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /overTheBox/{serviceName}/device/actions
        public Task<_overTheBox.DeviceAction> PostOverTheBoxServiceNameDeviceActionsAsync(string name, string serviceName) {
            return default(Task<_overTheBox.DeviceAction>);
        }
        
        // Path: /overTheBox/{serviceName}/device/actions/{actionId}
        public Task<_overTheBox.DeviceAction> GetOverTheBoxServiceNameDeviceActionsActionIdAsync(string actionId, string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.DeviceAction>(string.Format("/overTheBox/{serviceName}/device/actions/{actionId}", actionId, serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/device/availableActions
        public Task<_overTheBox.AvailableDeviceAction[]> GetOverTheBoxServiceNameDeviceAvailableActionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.AvailableDeviceAction[]>(string.Format("/overTheBox/{serviceName}/device/availableActions", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/device/backup
        public Task<_overTheBox.DeviceAction> PostOverTheBoxServiceNameDeviceBackupAsync(string serviceName) {
            return default(Task<_overTheBox.DeviceAction>);
        }
        
        // Path: /overTheBox/{serviceName}/device/hardware
        public Task<_overTheBox.Hardware> GetOverTheBoxServiceNameDeviceHardwareAsync(string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.Hardware>(string.Format("/overTheBox/{serviceName}/device/hardware", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/device/logs
        public Task<_overTheBox.TemporaryLogsLink> PostOverTheBoxServiceNameDeviceLogsAsync(string serviceName) {
            return default(Task<_overTheBox.TemporaryLogsLink>);
        }
        
        // Path: /overTheBox/{serviceName}/device/restoreBackup
        public Task<_overTheBox.DeviceAction[]> PostOverTheBoxServiceNameDeviceRestoreBackupAsync(string backupId, string serviceName) {
            return default(Task<_overTheBox.DeviceAction[]>);
        }
        
        // Path: /overTheBox/{serviceName}/linkDevice
        public System.Threading.Tasks.Task PostOverTheBoxServiceNameLinkDeviceAsync(string deviceId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/linkHardware
        public System.Threading.Tasks.Task PostOverTheBoxServiceNameLinkHardwareAsync(string hardwareName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/migration/changeOffers
        public Task<_overTheBox.OrderMigration> PostOverTheBoxServiceNameMigrationChangeOffersAsync(string offer, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string hardwareName, [System.Runtime.InteropServices.OptionalAttribute()] string shippingContactID) {
            return default(Task<_overTheBox.OrderMigration>);
        }
        
        // Path: /overTheBox/{serviceName}/migration/offers
        public Task<_overTheBox.AvailableMigrationOffer[]> GetOverTheBoxServiceNameMigrationOffersAsync(string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.AvailableMigrationOffer[]>(string.Format("/overTheBox/{serviceName}/migration/offers", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses
        public Task<System.String[]> GetOverTheBoxServiceNameRemoteAccessesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/{serviceName}/remoteAccesses", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses
        public Task<_overTheBox.RemoteAccess> PostOverTheBoxServiceNameRemoteAccessesAsync(long exposedPort, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string allowedIp, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime expirationDate, [System.Runtime.InteropServices.OptionalAttribute()] string publicKey) {
            return default(Task<_overTheBox.RemoteAccess>);
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        public System.Threading.Tasks.Task DeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync(string remoteAccessId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        public Task<_overTheBox.RemoteAccess> GetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync(string remoteAccessId, string serviceName) {
            return _client.GetFromJsonAsync<_overTheBox.RemoteAccess>(string.Format("/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}", remoteAccessId, serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}/authorize
        public System.Threading.Tasks.Task PostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeAsync(string remoteAccessId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/serviceInfos
        public Task<_services.Service> GetOverTheBoxServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/overTheBox/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /overTheBox/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutOverTheBoxServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /overTheBox/{serviceName}/statistics
        public Task<_otb_device.statistics[]> GetOverTheBoxServiceNameStatisticsAsync(string serviceName, _otb.DeviceStatisticsTypeEnum metricsType, [System.Runtime.InteropServices.OptionalAttribute()] _otb.DeviceStatisticsPeriodEnum period) {
            return _client.GetFromJsonAsync<_otb_device.statistics[]>(string.Format("/overTheBox/{serviceName}/statistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /overTheBox/{serviceName}/tasks
        public Task<System.String[]> GetOverTheBoxServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _overTheBox.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/overTheBox/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /overTheBox/{serviceName}/tasks/{taskId}
        public Task<_overTheBox.Task> GetOverTheBoxServiceNameTasksTaskIdAsync(string serviceName, string taskId) {
            return _client.GetFromJsonAsync<_overTheBox.Task>(string.Format("/overTheBox/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /ovhCloudConnect
        public Task<System.Guid[]> GetOvhCloudConnectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/ovhCloudConnect?{queryParameters}", queryParameters));
        }
        
        // Path: /ovhCloudConnect/{serviceName}
        public Task<_ovhcloudconnect.ServiceWithIAM> GetOvhCloudConnectServiceNameAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.ServiceWithIAM>(string.Format("/ovhCloudConnect/{serviceName}", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}
        public System.Threading.Tasks.Task PutOvhCloudConnectServiceNameAsync(_ovhcloudconnect.Update body, System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ovhCloudConnect/{serviceName}/changeContact
        public Task<System.Int64[]> PostOvhCloudConnectServiceNameChangeContactAsync(_services.changeContact body, System.Guid serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/config/pop", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop
        public Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopAsync(_ovhcloudconnect.PopConfig body, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}
        public Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdAsync(long popId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}
        public Task<_ovhcloudconnect.PopConfig> GetOvhCloudConnectServiceNameConfigPopPopIdAsync(long popId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.PopConfig>(string.Format("/ovhCloudConnect/{serviceName}/config/pop/{popId}", popId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync(long popId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter", popId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        public Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync(_ovhcloudconnect.DatacenterConfig body, long popId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        public Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync(long datacenterId, long popId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        public Task<_ovhcloudconnect.DatacenterConfig> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync(long datacenterId, long popId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.DatacenterConfig>(string.Format("/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}", datacenterId, popId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync(long datacenterId, long popId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra" +
                        "", datacenterId, popId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        public Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync(_ovhcloudconnect.DatacenterExtraConfig body, long datacenterId, long popId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        public Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync(long datacenterId, long extraId, long popId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        public Task<_ovhcloudconnect.DatacenterExtraConfig> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync(long datacenterId, long extraId, long popId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.DatacenterExtraConfig>(string.Format("/ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra" +
                        "/{extraId}", datacenterId, extraId, popId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/confirmTermination
        public Task<System.String> PostOvhCloudConnectServiceNameConfirmTerminationAsync(_services.confirmTermination body, System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/datacenter
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameDatacenterAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/datacenter", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/datacenter/{id}
        public Task<_ovhcloudconnect.Datacenter> GetOvhCloudConnectServiceNameDatacenterIdAsync(long id, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Datacenter>(string.Format("/ovhCloudConnect/{serviceName}/datacenter/{id}", id, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameDiagnosticAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/diagnostic", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic
        public Task<_ovhcloudconnect.Diagnostic> PostOvhCloudConnectServiceNameDiagnosticAsync(_ovhcloudconnect.DiagnosticConfiguration body, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Diagnostic>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic/{id}
        public Task<_ovhcloudconnect.Diagnostic> GetOvhCloudConnectServiceNameDiagnosticIdAsync(long id, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Diagnostic>(string.Format("/ovhCloudConnect/{serviceName}/diagnostic/{id}", id, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/incident
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameIncidentAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/incident", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/incident/{id}
        public Task<_ovhcloudconnect.Incident> GetOvhCloudConnectServiceNameIncidentIdAsync(long id, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Incident>(string.Format("/ovhCloudConnect/{serviceName}/incident/{id}", id, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameInterfaceAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/interface", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}
        public Task<_ovhcloudconnect.Interface> GetOvhCloudConnectServiceNameInterfaceIdAsync(long id, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Interface>(string.Format("/ovhCloudConnect/{serviceName}/interface/{id}", id, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/lock
        public Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameInterfaceIdLockAsync(long id, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/statistics
        public Task<_ovhcloudconnect.Metrics[]> GetOvhCloudConnectServiceNameInterfaceIdStatisticsAsync(long id, _ovhcloudconnect_interface.MetricsPeriodEnum period, System.Guid serviceName, _ovhcloudconnect_interface.MetricsTypeEnum type) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Metrics[]>(string.Format("/ovhCloudConnect/{serviceName}/interface/{id}/statistics?{queryParameters}", id, serviceName, queryParameters));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/unlock
        public Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameInterfaceIdUnlockAsync(long id, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/loa
        public Task<System.String> PostOvhCloudConnectServiceNameLoaAsync(System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        public System.Threading.Tasks.Task DeleteOvhCloudConnectServiceNameMonitoringAsync(System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        public Task<_ovhcloudconnect.Monitoring[]> GetOvhCloudConnectServiceNameMonitoringAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Monitoring[]>(string.Format("/ovhCloudConnect/{serviceName}/monitoring", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        public System.Threading.Tasks.Task PostOvhCloudConnectServiceNameMonitoringAsync(_ovhcloudconnect.Subscriptions body, System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceInfos
        public Task<_services.Service> GetOvhCloudConnectServiceNameServiceInfosAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/ovhCloudConnect/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutOvhCloudConnectServiceNameServiceInfosAsync(_services.Service body, System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameServiceKeyAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/serviceKey", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}
        public Task<_ovhcloudconnect.Key> GetOvhCloudConnectServiceNameServiceKeyServiceKeyIdAsync(long serviceKeyId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Key>(string.Format("/ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}", serviceKeyId, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/regenerate
        public Task<_ovhcloudconnect.Key> PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateAsync(long serviceKeyId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.Key>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/send
        public Task<_ovhcloudconnect.SendKeyAnswer> PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendAsync(_ovhcloudconnect.To body, long serviceKeyId, System.Guid serviceName) {
            return default(Task<_ovhcloudconnect.SendKeyAnswer>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/task
        public Task<System.Int64[]> GetOvhCloudConnectServiceNameTaskAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ovhCloudConnect/{serviceName}/task", serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/task/{id}
        public Task<_ovhcloudconnect.Task> GetOvhCloudConnectServiceNameTaskIdAsync(long id, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_ovhcloudconnect.Task>(string.Format("/ovhCloudConnect/{serviceName}/task/{id}", id, serviceName));
        }
        
        // Path: /ovhCloudConnect/{serviceName}/terminate
        public Task<System.String> PostOvhCloudConnectServiceNameTerminateAsync(System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /pack/siptrunk
        public Task<System.String[]> GetPackSiptrunkAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/siptrunk?{queryParameters}", queryParameters));
        }
        
        // Path: /pack/siptrunk/{packName}
        public Task<_pack_siptrunk.PackSipTrunkWithIAM> GetPackSiptrunkPackNameAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_siptrunk.PackSipTrunkWithIAM>(string.Format("/pack/siptrunk/{packName}", packName));
        }
        
        // Path: /pack/siptrunk/{packName}/changeContact
        public Task<System.Int64[]> PostPackSiptrunkPackNameChangeContactAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /pack/siptrunk/{packName}/serviceInfos
        public Task<_services.Service> GetPackSiptrunkPackNameServiceInfosAsync(string packName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/pack/siptrunk/{packName}/serviceInfos", packName));
        }
        
        // Path: /pack/siptrunk/{packName}/serviceInfos
        public System.Threading.Tasks.Task PutPackSiptrunkPackNameServiceInfosAsync(_services.Service body, string packName) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl
        public Task<System.String[]> GetPackXdslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl?{queryParameters}", queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}
        public Task<_pack_xdsl.PackAdslWithIAM> GetPackXdslPackNameAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.PackAdslWithIAM>(string.Format("/pack/xdsl/{packName}", packName));
        }
        
        // Path: /pack/xdsl/{packName}
        public System.Threading.Tasks.Task PutPackXdslPackNameAsync(_pack_xdsl.PackAdsl body, string packName) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/moveOffer
        public Task<_pack_xdsl.AsyncTask<long>> PostPackXdslPackNameAddressMoveMoveOfferAsync(
                    bool acceptContracts, 
                    string eligibilityReference, 
                    bool keepCurrentNumber, 
                    _pack_xdsl.ModemOptionEnum modem, 
                    string offerName, 
                    bool otp, 
                    string packName, 
                    string productCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string building, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string buildingReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactPhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string door, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long engageMonths, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_eligibility.InstallationTypeEnum installationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _xdsl_eligibility.BookMeetingSlot meeting, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long mondialRelayId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime moveOutDate, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string nicShipping, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ontShippingContact, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[] options, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string otpReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string residence, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToDelete[] subServicesToDelete, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToKeep[] subServicesToKeep) {
            return default(Task<_pack_xdsl.AsyncTask<long>>);
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/offers
        public Task<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>> PostPackXdslPackNameAddressMoveOffersAsync(string eligibilityReference, string packName) {
            return default(Task<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>>);
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/servicesToDeleteUnpackTerms
        public Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostPackXdslPackNameAddressMoveServicesToDeleteUnpackTermsAsync(string eligibilityReference, string offerName, string packName, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[] options) {
            return default(Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]>);
        }
        
        // Path: /pack/xdsl/{packName}/canCancelResiliation
        public Task<System.Boolean> GetPackXdslPackNameCanCancelResiliationAsync(string packName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/pack/xdsl/{packName}/canCancelResiliation", packName));
        }
        
        // Path: /pack/xdsl/{packName}/cancelResiliation
        public System.Threading.Tasks.Task PostPackXdslPackNameCancelResiliationAsync(string packName) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl/{packName}/changeContact
        public Task<System.Int64[]> PostPackXdslPackNameChangeContactAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /pack/xdsl/{packName}/contactOwner
        public Task<_pack_xdsl.ContactInfos> GetPackXdslPackNameContactOwnerAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ContactInfos>(string.Format("/pack/xdsl/{packName}/contactOwner", packName));
        }
        
        // Path: /pack/xdsl/{packName}/domain/options/tlds
        public Task<System.String[]> GetPackXdslPackNameDomainOptionsTldsAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/domain/options/tlds", packName));
        }
        
        // Path: /pack/xdsl/{packName}/domain/services
        public Task<System.String[]> GetPackXdslPackNameDomainServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/domain/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/domain/services
        public Task<_pack_xdsl.Task> PostPackXdslPackNameDomainServicesAsync(_pack_xdsl.DomainActionEnum action, string domain, string packName, string tld, [System.Runtime.InteropServices.OptionalAttribute()] string authInfo) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/options/domains
        public Task<System.String[]> GetPackXdslPackNameEmailProOptionsDomainsAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/emailPro/options/domains", packName));
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/options/isEmailAvailable
        public Task<System.Boolean> GetPackXdslPackNameEmailProOptionsIsEmailAvailableAsync(string email, string packName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/pack/xdsl/{packName}/emailPro/options/isEmailAvailable?{queryParameters}", packName, queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/services
        public Task<System.String[]> GetPackXdslPackNameEmailProServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/emailPro/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/services
        public Task<_pack_xdsl.Task> PostPackXdslPackNameEmailProServicesAsync(string email, string packName, string password) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeAccount/services
        public Task<System.String[]> GetPackXdslPackNameExchangeAccountServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/exchangeAccount/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/exchangeAccount/services/{domain}
        public Task<_pack_xdsl.ExchangeAccountService> GetPackXdslPackNameExchangeAccountServicesDomainAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ExchangeAccountService>(string.Format("/pack/xdsl/{packName}/exchangeAccount/services/{domain}", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/exchangeIndividual/options/domains
        public Task<System.String[]> GetPackXdslPackNameExchangeIndividualOptionsDomainsAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/exchangeIndividual/options/domains", packName));
        }
        
        // Path: /pack/xdsl/{packName}/exchangeIndividual/options/isEmailAvailable
        public Task<System.Boolean> GetPackXdslPackNameExchangeIndividualOptionsIsEmailAvailableAsync(string email, string packName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/pack/xdsl/{packName}/exchangeIndividual/options/isEmailAvailable?{queryParameter" +
                        "s}", packName, queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}/exchangeOrganization/services
        public Task<System.String[]> GetPackXdslPackNameExchangeOrganizationServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/exchangeOrganization/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/options/domains
        public Task<System.String[]> GetPackXdslPackNameHostedEmailOptionsDomainsAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/hostedEmail/options/domains", packName));
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services
        public Task<System.String[]> GetPackXdslPackNameHostedEmailServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/hostedEmail/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services
        public Task<_pack_xdsl.Task> PostPackXdslPackNameHostedEmailServicesAsync(string email, string packName, string password) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}
        public System.Threading.Tasks.Task DeletePackXdslPackNameHostedEmailServicesDomainAsync(string domain, string packName) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}
        public Task<_pack_xdsl.HostedEmailService> GetPackXdslPackNameHostedEmailServicesDomainAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.HostedEmailService>(string.Format("/pack/xdsl/{packName}/hostedEmail/services/{domain}", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/account
        public Task<_pack_xdsl_HostedEmail.Account> GetPackXdslPackNameHostedEmailServicesDomainAccountAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl_HostedEmail.Account>(string.Format("/pack/xdsl/{packName}/hostedEmail/services/{domain}/account", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/changePassword
        public System.Threading.Tasks.Task PostPackXdslPackNameHostedEmailServicesDomainChangePasswordAsync(string domain, string packName, string password) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/configuration
        public Task<_pack_xdsl_HostedEmail.Configuration> GetPackXdslPackNameHostedEmailServicesDomainConfigurationAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl_HostedEmail.Configuration>(string.Format("/pack/xdsl/{packName}/hostedEmail/services/{domain}/configuration", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/migration/migrate
        public Task<_pack_xdsl.Task> PostPackXdslPackNameMigrationMigrateAsync(
                    bool acceptContracts, 
                    _pack_xdsl.ModemOptionEnum modem, 
                    string offerName, 
                    string packName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string buildingReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string contactPhone, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long engageMonths, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string floor, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _connectivity_eligibility.InstallationTypeEnum installationType, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _xdsl_eligibility.BookMeetingSlot meeting, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long mondialRelayId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string nicShipping, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string ontShippingContact, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[] options, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool otp, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string otpReference, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string productCode, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string stair, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToDelete[] subServicesToDelete, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferServiceToKeep[] subServicesToKeep) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/migration/offers
        public Task<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>> PostPackXdslPackNameMigrationOffersAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] string buildingReference) {
            return default(Task<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>>);
        }
        
        // Path: /pack/xdsl/{packName}/migration/servicesToDeleteUnpackTerms
        public Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostPackXdslPackNameMigrationServicesToDeleteUnpackTermsAsync(string offerName, string packName, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl_migration.OfferOption[] options) {
            return default(Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]>);
        }
        
        // Path: /pack/xdsl/{packName}/promotionCode/capabilities
        public Task<_pack_xdsl_promotionCode.Capabilities> GetPackXdslPackNamePromotionCodeCapabilitiesAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl_promotionCode.Capabilities>(string.Format("/pack/xdsl/{packName}/promotionCode/capabilities", packName));
        }
        
        // Path: /pack/xdsl/{packName}/promotionCode/generate
        public Task<_pack_xdsl.Task> PostPackXdslPackNamePromotionCodeGenerateAsync(string packName) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/resiliate
        public Task<_pack_xdsl.ResiliationFollowUpDetail> PostPackXdslPackNameResiliateAsync(string packName, _pack_xdsl.ResiliationSurvey resiliationSurvey, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime resiliationDate, [System.Runtime.InteropServices.OptionalAttribute()] double[] servicesToKeep) {
            return default(Task<_pack_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /pack/xdsl/{packName}/resiliationFollowUp
        public Task<_pack_xdsl.ResiliationFollowUpDetail> GetPackXdslPackNameResiliationFollowUpAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ResiliationFollowUpDetail>(string.Format("/pack/xdsl/{packName}/resiliationFollowUp", packName));
        }
        
        // Path: /pack/xdsl/{packName}/resiliationTerms
        public Task<_pack_xdsl.ResiliationTerms> GetPackXdslPackNameResiliationTermsAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime resiliationDate) {
            return _client.GetFromJsonAsync<_pack_xdsl.ResiliationTerms>(string.Format("/pack/xdsl/{packName}/resiliationTerms?{queryParameters}", packName, queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}/serviceInfos
        public Task<_services.Service> GetPackXdslPackNameServiceInfosAsync(string packName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/pack/xdsl/{packName}/serviceInfos", packName));
        }
        
        // Path: /pack/xdsl/{packName}/serviceInfos
        public System.Threading.Tasks.Task PutPackXdslPackNameServiceInfosAsync(_services.Service body, string packName) {
            return Task.CompletedTask;
        }
        
        // Path: /pack/xdsl/{packName}/services
        public Task<_pack_xdsl.ServiceInformation[]> GetPackXdslPackNameServicesAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ServiceInformation[]>(string.Format("/pack/xdsl/{packName}/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/shippingAddresses
        public Task<_pack_xdsl.ShippingAddress[]> GetPackXdslPackNameShippingAddressesAsync(_pack_xdsl.ShippingAddressContextEnum context, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ShippingAddress[]>(string.Format("/pack/xdsl/{packName}/shippingAddresses?{queryParameters}", packName, queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}/subServices
        public Task<System.String[]> GetPackXdslPackNameSubServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/subServices", packName));
        }
        
        // Path: /pack/xdsl/{packName}/subServices/{domain}
        public Task<_pack_xdsl.Service> GetPackXdslPackNameSubServicesDomainAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.Service>(string.Format("/pack/xdsl/{packName}/subServices/{domain}", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/subServices/{domain}/keepServiceTerms
        public Task<_pack_xdsl.UnpackTerms> GetPackXdslPackNameSubServicesDomainKeepServiceTermsAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.UnpackTerms>(string.Format("/pack/xdsl/{packName}/subServices/{domain}/keepServiceTerms", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/tasks
        public Task<System.Int64[]> GetPackXdslPackNameTasksAsync(string packName, [System.Runtime.InteropServices.OptionalAttribute()] string function, [System.Runtime.InteropServices.OptionalAttribute()] _pack_xdsl.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/pack/xdsl/{packName}/tasks?{queryParameters}", packName, queryParameters));
        }
        
        // Path: /pack/xdsl/{packName}/tasks/{id}
        public Task<_pack_xdsl.Task> GetPackXdslPackNameTasksIdAsync(long id, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.Task>(string.Format("/pack/xdsl/{packName}/tasks/{id}", id, packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipBillingAccount/services
        public Task<System.String[]> GetPackXdslPackNameVoipBillingAccountServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/voipBillingAccount/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipEcofax/services
        public Task<System.String[]> GetPackXdslPackNameVoipEcofaxServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/voipEcofax/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipEcofax/services
        public Task<_pack_xdsl.Task> PostPackXdslPackNameVoipEcofaxServicesAsync(string packName) {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/customShippingAddress
        public Task<System.Int64> PostPackXdslPackNameVoipLineOptionsCustomShippingAddressAsync(string address, string cityName, string firstName, string lastName, string packName, string zipCode) {
            return default(Task<System.Int64>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/hardwares
        public Task<_pack_xdsl.VoIPHardware[]> GetPackXdslPackNameVoipLineOptionsHardwaresAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.VoIPHardware[]>(string.Format("/pack/xdsl/{packName}/voipLine/options/hardwares", packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/shippingAddresses
        public Task<_pack_xdsl.ShippingAddress[]> GetPackXdslPackNameVoipLineOptionsShippingAddressesAsync(string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.ShippingAddress[]>(string.Format("/pack/xdsl/{packName}/voipLine/options/shippingAddresses", packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services
        public Task<System.String[]> GetPackXdslPackNameVoipLineServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/voipLine/services", packName));
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services
        public Task<_pack_xdsl.VoIPLineOrder> PostPackXdslPackNameVoipLineServicesAsync(string[] hardwareNames, string packName, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string shippingId) {
            return default(Task<_pack_xdsl.VoIPLineOrder>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services/{domain}
        public Task<_pack_xdsl.VoipLineService> GetPackXdslPackNameVoipLineServicesDomainAsync(string domain, string packName) {
            return _client.GetFromJsonAsync<_pack_xdsl.VoipLineService>(string.Format("/pack/xdsl/{packName}/voipLine/services/{domain}", domain, packName));
        }
        
        // Path: /pack/xdsl/{packName}/xdslAccess/services
        public Task<System.String[]> GetPackXdslPackNameXdslAccessServicesAsync(string packName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/pack/xdsl/{packName}/xdslAccess/services", packName));
        }
        
        // Path: /partner
        public Task<_partner2.Partner> GetPartnerAsync() {
            return _client.GetFromJsonAsync<_partner2.Partner>("/partner");
        }
        
        // Path: /partner
        public System.Threading.Tasks.Task PostPartnerAsync(_partner2.Partner body) {
            return Task.CompletedTask;
        }
        
        // Path: /price/dedicated/server/antiDDoSPro/{commercialRange}
        public Task<_order.Price> GetPriceDedicatedServerAntiDDoSProCommercialRangeAsync(_price_Dedicated_Server.AntiDDoSProEnum commercialRange) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicated/server/antiDDoSPro/{commercialRange}", commercialRange));
        }
        
        // Path: /price/dedicated/server/backupStorage/{capacity}
        public Task<_order.Price> GetPriceDedicatedServerBackupStorageCapacityAsync(_price_Dedicated_Server.BackupStorageEnum capacity) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicated/server/backupStorage/{capacity}", capacity));
        }
        
        // Path: /price/dedicated/server/firewall/{firewallModel}
        public Task<_order.Price> GetPriceDedicatedServerFirewallFirewallModelAsync(_price_Dedicated_Server.FirewallEnum firewallModel) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicated/server/firewall/{firewallModel}", firewallModel));
        }
        
        // Path: /price/dedicated/server/ip/{routedTo}
        public Task<_order.Price> GetPriceDedicatedServerIpRoutedToAsync(_price_Dedicated_Server.IpEnum routedTo) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicated/server/ip/{routedTo}", routedTo));
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/bhs1a/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/bhs1a/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/bhs1a/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Bhs1a_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/bhs1a/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/rbx2a/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/rbx2a/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/rbx2a/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Rbx2a_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/rbx2a/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/sbg1a/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/sbg1a/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aHostHourlyHostProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/sbg1a/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aHostMonthlyHostProfileAsync(_price_DedicatedCloud__2013v1_Sbg1a_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2013v1/sbg1a/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2014v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v3_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v4_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v5_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v6_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Enterprise_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/enterprise/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2016v7_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v1_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v1/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v2_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v2/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v3_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v3/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v4_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v4/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v5_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v5/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v6_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v6/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Bhs1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Eri1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/eri1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Lim1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/lim1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2b_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Rbx2d_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Sbg1a_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/hourly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureFilerHourlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Filer.HourlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/hourly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/monthly/{filerProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureFilerMonthlyFilerProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Filer.MonthlyEnum filerProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/monthly/{filerProfile}", filerProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/host/hourly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureHostHourlyHostProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Host.HourlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/hourly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/host/monthly/{hostProfile}
        public Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureHostMonthlyHostProfileAsync(_price_DedicatedCloud__2018v7_Waw1c_Infrastructure_Host.MonthlyEnum hostProfile) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/dedicatedCloud/2018v7/waw1c/infrastructure/host/monthly/{hostProfile}", hostProfile));
        }
        
        // Path: /price/domain/zone/option/{optionName}
        public Task<_order.Price> GetPriceDomainZoneOptionOptionNameAsync(_price_Domain_Zone.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/domain/zone/option/{optionName}", optionName));
        }
        
        // Path: /price/hosting/privateDatabase/{privateDatabaseName}
        public Task<_order.Price> GetPriceHostingPrivateDatabasePrivateDatabaseNameAsync(_price_Hosting.PrivateDatabaseEnum privateDatabaseName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/hosting/privateDatabase/{privateDatabaseName}", privateDatabaseName));
        }
        
        // Path: /price/hosting/web/cdn/{cdnName}
        public Task<_order.Price> GetPriceHostingWebCdnCdnNameAsync(_price_Hosting_Web.CdnEnum cdnName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/hosting/web/cdn/{cdnName}", cdnName));
        }
        
        // Path: /price/hosting/web/extraSqlPerso/{extraSqlPersoName}
        public Task<_order.Price> GetPriceHostingWebExtraSqlPersoExtraSqlPersoNameAsync(_price_Hosting_Web.ExtraSqlPersoEnum extraSqlPersoName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/hosting/web/extraSqlPerso/{extraSqlPersoName}", extraSqlPersoName));
        }
        
        // Path: /price/hosting/web/ssl/{sslName}
        public Task<_order.Price> GetPriceHostingWebSslSslNameAsync(_price_Hosting_Web.SslEnum sslName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/hosting/web/ssl/{sslName}", sslName));
        }
        
        // Path: /price/license/office/{officeName}
        public Task<_order.Price> GetPriceLicenseOfficeOfficeNameAsync(_price_License.OfficeEnum officeName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/license/office/{officeName}", officeName));
        }
        
        // Path: /price/overTheBox/offer/{offerName}
        public Task<_order.Price> GetPriceOverTheBoxOfferOfferNameAsync(_price_OverTheBox.OfferEnum offerName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/overTheBox/offer/{offerName}", offerName));
        }
        
        // Path: /price/saas/csp2/license/{licenseName}
        public Task<_order.Price> GetPriceSaasCsp2LicenseLicenseNameAsync(_price_Saas_Csp2.LicenseEnum licenseName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/saas/csp2/license/{licenseName}", licenseName));
        }
        
        // Path: /price/vps/2013v1/classic/model/{modelName}
        public Task<_order.Price> GetPriceVps2013v1ClassicModelModelNameAsync(_price_Vps__2013v1_Classic.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2013v1/classic/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2013v1/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2013v1CloudModelModelNameAsync(_price_Vps__2013v1_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2013v1/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2013v1/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2013v1CloudOptionOptionNameAsync(_price_Vps__2013v1_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2013v1/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2013v1/lowlat/model/{modelName}
        public Task<_order.Price> GetPriceVps2013v1LowlatModelModelNameAsync(_price_Vps__2013v1_Lowlat.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2013v1/lowlat/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2014v1/classic/model/{modelName}
        public Task<_order.Price> GetPriceVps2014v1ClassicModelModelNameAsync(_price_Vps__2014v1_Classic.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2014v1/classic/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2014v1/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2014v1CloudModelModelNameAsync(_price_Vps__2014v1_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2014v1/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2014v1/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2014v1CloudOptionOptionNameAsync(_price_Vps__2014v1_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2014v1/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2015v1/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2015v1CloudModelModelNameAsync(_price_Vps__2015v1_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2015v1/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2015v1CloudOptionOptionNameAsync(_price_Vps__2015v1_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2015v1/cloudram/model/{modelName}
        public Task<_order.Price> GetPriceVps2015v1CloudramModelModelNameAsync(_price_Vps__2015v1_Cloudram.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/cloudram/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2015v1/cloudram/option/{optionName}
        public Task<_order.Price> GetPriceVps2015v1CloudramOptionOptionNameAsync(_price_Vps__2015v1_Cloudram.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/cloudram/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2015v1/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2015v1SsdModelModelNameAsync(_price_Vps__2015v1_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2015v1/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2015v1SsdOptionOptionNameAsync(_price_Vps__2015v1_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2015v1/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v1/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v1SsdModelModelNameAsync(_price_Vps__2017v1_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v1/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v1/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v1SsdOptionOptionNameAsync(_price_Vps__2017v1_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v1/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v2/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v2CloudModelModelNameAsync(_price_Vps__2017v2_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v2/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v2CloudOptionOptionNameAsync(_price_Vps__2017v2_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v2/cloudram/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v2CloudramModelModelNameAsync(_price_Vps__2017v2_Cloudram.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/cloudram/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v2/cloudram/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v2CloudramOptionOptionNameAsync(_price_Vps__2017v2_Cloudram.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/cloudram/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v2/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v2SsdModelModelNameAsync(_price_Vps__2017v2_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v2/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v2SsdOptionOptionNameAsync(_price_Vps__2017v2_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v2/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v3/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v3CloudModelModelNameAsync(_price_Vps__2017v3_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v3/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v3CloudOptionOptionNameAsync(_price_Vps__2017v3_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v3/cloudram/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v3CloudramModelModelNameAsync(_price_Vps__2017v3_Cloudram.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/cloudram/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v3/cloudram/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v3CloudramOptionOptionNameAsync(_price_Vps__2017v3_Cloudram.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/cloudram/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2017v3/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2017v3SsdModelModelNameAsync(_price_Vps__2017v3_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2017v3/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2017v3SsdOptionOptionNameAsync(_price_Vps__2017v3_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2017v3/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2018v1/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVps2018v1CloudModelModelNameAsync(_price_Vps__2018v1_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2018v1/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVps2018v1CloudOptionOptionNameAsync(_price_Vps__2018v1_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2018v1/cloudram/model/{modelName}
        public Task<_order.Price> GetPriceVps2018v1CloudramModelModelNameAsync(_price_Vps__2018v1_Cloudram.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/cloudram/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2018v1/cloudram/option/{optionName}
        public Task<_order.Price> GetPriceVps2018v1CloudramOptionOptionNameAsync(_price_Vps__2018v1_Cloudram.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/cloudram/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2018v1/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2018v1SsdModelModelNameAsync(_price_Vps__2018v1_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2018v1/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2018v1SsdOptionOptionNameAsync(_price_Vps__2018v1_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v1/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/2018v2/ssd/model/{modelName}
        public Task<_order.Price> GetPriceVps2018v2SsdModelModelNameAsync(_price_Vps__2018v2_Ssd.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v2/ssd/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/2018v2/ssd/option/{optionName}
        public Task<_order.Price> GetPriceVps2018v2SsdOptionOptionNameAsync(_price_Vps__2018v2_Ssd.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/2018v2/ssd/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/classic/model/{modelName}
        public Task<_order.Price> GetPriceVpsClassicModelModelNameAsync(_price_Vps_Classic.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/classic/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/cloud/model/{modelName}
        public Task<_order.Price> GetPriceVpsCloudModelModelNameAsync(_price_Vps_Cloud.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/cloud/model/{modelName}", modelName));
        }
        
        // Path: /price/vps/cloud/option/{optionName}
        public Task<_order.Price> GetPriceVpsCloudOptionOptionNameAsync(_price_Vps_Cloud.OptionEnum optionName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/cloud/option/{optionName}", optionName));
        }
        
        // Path: /price/vps/lowlat/model/{modelName}
        public Task<_order.Price> GetPriceVpsLowlatModelModelNameAsync(_price_Vps_Lowlat.ModelEnum modelName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/vps/lowlat/model/{modelName}", modelName));
        }
        
        // Path: /price/xdsl/addressMove/fee/{option}
        public Task<_order.Price> GetPriceXdslAddressMoveFeeOptionAsync(_price_Xdsl_AddressMove.FeeEnum option) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/addressMove/fee/{option}", option));
        }
        
        // Path: /price/xdsl/installation/{offer}
        public Task<_order.Price> GetPriceXdslInstallationOfferAsync(_price_Xdsl.InstallationEnum offer) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/installation/{offer}", offer));
        }
        
        // Path: /price/xdsl/offers/{offersName}
        public Task<_order.Price> GetPriceXdslOffersOffersNameAsync(_price_Xdsl.OffersEnum offersName) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/offers/{offersName}", offersName));
        }
        
        // Path: /price/xdsl/options/installation/{option}
        public Task<_order.Price> GetPriceXdslOptionsInstallationOptionAsync(_price_Xdsl_Options.InstallationEnum option) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/options/installation/{option}", option));
        }
        
        // Path: /price/xdsl/options/ipv4/{ipRange}
        public Task<_order.Price> GetPriceXdslOptionsIpv4IpRangeAsync(_price_Xdsl_Options.Ipv4Enum ipRange) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/options/ipv4/{ipRange}", ipRange));
        }
        
        // Path: /price/xdsl/options/line/{lineAction}
        public Task<_order.Price> GetPriceXdslOptionsLineLineActionAsync(_price_Xdsl_Options.LineEnum lineAction) {
            return _client.GetFromJsonAsync<_order.Price>(string.Format("/price/xdsl/options/line/{lineAction}", lineAction));
        }
        
        // Path: /products/catalog
        public Task<System.Int64[]> GetProductsCatalogAsync() {
            return _client.GetFromJsonAsync<long[]>("/products/catalog");
        }
        
        // Path: /products/catalog/{catalogId}
        public Task<_products_catalog.Catalog> GetProductsCatalogCatalogIdAsync(long catalogId, _products_catalog.CatalogNameEnum catalogName, _products_partners.OvhSubsidiaryEnum subsidiary) {
            return _client.GetFromJsonAsync<_products_catalog.Catalog>(string.Format("/products/catalog/{catalogId}?{queryParameters}", catalogId, queryParameters));
        }
        
        // Path: /products/catalog/{catalogId}/addons
        public Task<_products_catalog.Plan[]> GetProductsCatalogCatalogIdAddonsAsync(long catalogId, _products_catalog.CatalogNameEnum catalogName, _products_partners.OvhSubsidiaryEnum subsidiary, [System.Runtime.InteropServices.OptionalAttribute()] bool activePromotion, [System.Runtime.InteropServices.OptionalAttribute()] string blobs, [System.Runtime.InteropServices.OptionalAttribute()] string[] codePlan, [System.Runtime.InteropServices.OptionalAttribute()] string[] family, [System.Runtime.InteropServices.OptionalAttribute()] string[] invoiceName) {
            return _client.GetFromJsonAsync<_products_catalog.Plan[]>(string.Format("/products/catalog/{catalogId}/addons?{queryParameters}", catalogId, queryParameters));
        }
        
        // Path: /products/catalog/{catalogId}/fullPlans
        public Task<_products_catalog.PlanFull[]> GetProductsCatalogCatalogIdFullPlansAsync(long catalogId, _products_catalog.CatalogNameEnum catalogName, _products_partners.OvhSubsidiaryEnum subsidiary, [System.Runtime.InteropServices.OptionalAttribute()] bool activePromotion, [System.Runtime.InteropServices.OptionalAttribute()] string blobs, [System.Runtime.InteropServices.OptionalAttribute()] string[] codePlan, [System.Runtime.InteropServices.OptionalAttribute()] string[] family, [System.Runtime.InteropServices.OptionalAttribute()] string[] invoiceName) {
            return _client.GetFromJsonAsync<_products_catalog.PlanFull[]>(string.Format("/products/catalog/{catalogId}/fullPlans?{queryParameters}", catalogId, queryParameters));
        }
        
        // Path: /products/catalog/{catalogId}/plans
        public Task<_products_catalog.Plan[]> GetProductsCatalogCatalogIdPlansAsync(long catalogId, _products_catalog.CatalogNameEnum catalogName, _products_partners.OvhSubsidiaryEnum subsidiary, [System.Runtime.InteropServices.OptionalAttribute()] bool activePromotion, [System.Runtime.InteropServices.OptionalAttribute()] string blobs, [System.Runtime.InteropServices.OptionalAttribute()] string[] family, [System.Runtime.InteropServices.OptionalAttribute()] string[] invoiceName, [System.Runtime.InteropServices.OptionalAttribute()] string[] planCode) {
            return _client.GetFromJsonAsync<_products_catalog.Plan[]>(string.Format("/products/catalog/{catalogId}/plans?{queryParameters}", catalogId, queryParameters));
        }
        
        // Path: /products/catalog/{catalogId}/products
        public Task<_products_catalog.Product[]> GetProductsCatalogCatalogIdProductsAsync(long catalogId, _products_catalog.CatalogNameEnum catalogName, _products_partners.OvhSubsidiaryEnum subsidiary, [System.Runtime.InteropServices.OptionalAttribute()] string blobs, [System.Runtime.InteropServices.OptionalAttribute()] string[] codeProduct) {
            return _client.GetFromJsonAsync<_products_catalog.Product[]>(string.Format("/products/catalog/{catalogId}/products?{queryParameters}", catalogId, queryParameters));
        }
        
        // Path: /saas/csp2
        public Task<System.String[]> GetSaasCsp2Async([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/saas/csp2?{queryParameters}", queryParameters));
        }
        
        // Path: /saas/csp2/{serviceName}
        public Task<_saas_csp2.OfficeTenantWithIAM> GetSaasCsp2ServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_saas_csp2.OfficeTenantWithIAM>(string.Format("/saas/csp2/{serviceName}", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}
        public System.Threading.Tasks.Task PutSaasCsp2ServiceNameAsync(_saas_csp2.OfficeTenant body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /saas/csp2/{serviceName}/billingPeriodPeaks
        public Task<_saas_csp2.BillingStatistics> GetSaasCsp2ServiceNameBillingPeriodPeaksAsync(string serviceName) {
            return _client.GetFromJsonAsync<_saas_csp2.BillingStatistics>(string.Format("/saas/csp2/{serviceName}/billingPeriodPeaks", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}/orderableLicenses
        public Task<System.Int64[]> GetSaasCsp2ServiceNameOrderableLicensesAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/saas/csp2/{serviceName}/orderableLicenses", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}/orderableLicenses/{id}
        public Task<_saas_csp2.OfficeLicence> GetSaasCsp2ServiceNameOrderableLicensesIdAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<_saas_csp2.OfficeLicence>(string.Format("/saas/csp2/{serviceName}/orderableLicenses/{id}", serviceName, id));
        }
        
        // Path: /saas/csp2/{serviceName}/serviceInfos
        public Task<_services.Service> GetSaasCsp2ServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/saas/csp2/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutSaasCsp2ServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /saas/csp2/{serviceName}/subscription
        public Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/saas/csp2/{serviceName}/subscription", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}/subscription
        public Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionAsync(string serviceName, _saas_csp2.SubscriptionCreation body) {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}
        public Task<_saas_csp2.OfficeTask> DeleteSaasCsp2ServiceNameSubscriptionIdAsync(string serviceName, long id) {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}
        public Task<_saas_csp2.OfficeSubscription> GetSaasCsp2ServiceNameSubscriptionIdAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<_saas_csp2.OfficeSubscription>(string.Format("/saas/csp2/{serviceName}/subscription/{id}", serviceName, id));
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/addonsSubscriptionIds
        public Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/saas/csp2/{serviceName}/subscription/{id}/addonsSubscriptionIds", serviceName, id));
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/availableAddonLicenses
        public Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/saas/csp2/{serviceName}/subscription/{id}/availableAddonLicenses", serviceName, id));
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/changeQuantity
        public Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionIdChangeQuantityAsync(string serviceName, _saas_csp2.SubscriptionChangeQuantityCreation body, long id) {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/orderAddon
        public Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionIdOrderAddonAsync(string serviceName, _saas_csp2.SubscriptionOrderAddonCreation body, long id) {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/task
        public Task<System.Int64[]> GetSaasCsp2ServiceNameTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/saas/csp2/{serviceName}/task", serviceName));
        }
        
        // Path: /saas/csp2/{serviceName}/task/{id}
        public Task<_saas_csp2.OfficeTask> GetSaasCsp2ServiceNameTaskIdAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<_saas_csp2.OfficeTask>(string.Format("/saas/csp2/{serviceName}/task/{id}", serviceName, id));
        }
        
        // Path: /saas/csp2/{serviceName}/usageStatistics
        public Task<_saas_csp2.Statistics[]> GetSaasCsp2ServiceNameUsageStatisticsAsync(string serviceName, _msServices.LicensePeriodEnum timePeriod) {
            return _client.GetFromJsonAsync<_saas_csp2.Statistics[]>(string.Format("/saas/csp2/{serviceName}/usageStatistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /secret/retrieve
        public Task<_secret.Secret> PostSecretRetrieveAsync(string id) {
            return default(Task<_secret.Secret>);
        }
        
        // Path: /service
        public Task<System.Int64[]> GetServiceAsync() {
            return _client.GetFromJsonAsync<long[]>("/service");
        }
        
        // Path: /service/{serviceId}
        public Task<_serviceList.Service> GetServiceServiceIdAsync(long serviceId) {
            return _client.GetFromJsonAsync<_serviceList.Service>(string.Format("/service/{serviceId}", serviceId));
        }
        
        // Path: /service/{serviceId}
        public System.Threading.Tasks.Task PutServiceServiceIdAsync(_serviceList.Service body, long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /service/{serviceId}/renew
        public Task<_service_renew.RenewDescription[]> GetServiceServiceIdRenewAsync(string serviceId, [System.Runtime.InteropServices.OptionalAttribute()] bool includeOptions) {
            return _client.GetFromJsonAsync<_service_renew.RenewDescription[]>(string.Format("/service/{serviceId}/renew?{queryParameters}", serviceId, queryParameters));
        }
        
        // Path: /service/{serviceId}/renew
        public Task<_service_renew.RenewOrder> PostServiceServiceIdRenewAsync(string duration, string serviceId, long[] services, [System.Runtime.InteropServices.OptionalAttribute()] bool dryRun) {
            return default(Task<_service_renew.RenewOrder>);
        }
        
        // Path: /service/{serviceId}/reopen
        public System.Threading.Tasks.Task PostServiceServiceIdReopenAsync(long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /service/{serviceId}/suspend
        public System.Threading.Tasks.Task PostServiceServiceIdSuspendAsync(long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /service/{serviceId}/terminate
        public System.Threading.Tasks.Task PostServiceServiceIdTerminateAsync(long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /services
        public Task<System.Int64[]> GetServicesAsync([System.Runtime.InteropServices.OptionalAttribute()] string orderBy, [System.Runtime.InteropServices.OptionalAttribute()] string resourceName, [System.Runtime.InteropServices.OptionalAttribute()] string routes, [System.Runtime.InteropServices.OptionalAttribute()] string sort) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/services?{queryParameters}", queryParameters));
        }
        
        // Path: /services/{serviceId}
        public Task<_services_expanded.Service> GetServicesServiceIdAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_expanded.Service>(string.Format("/services/{serviceId}", serviceId));
        }
        
        // Path: /services/{serviceId}
        public System.Threading.Tasks.Task PutServicesServiceIdAsync(_services_update.Service body, long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /services/{serviceId}/billing/engagement
        public Task<_services_billing_engagement.Engagement> GetServicesServiceIdBillingEngagementAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_billing_engagement.Engagement>(string.Format("/services/{serviceId}/billing/engagement", serviceId));
        }
        
        // Path: /services/{serviceId}/billing/engagement/available
        public Task<_services_billing.Pricing[]> GetServicesServiceIdBillingEngagementAvailableAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_billing.Pricing[]>(string.Format("/services/{serviceId}/billing/engagement/available", serviceId));
        }
        
        // Path: /services/{serviceId}/billing/engagement/endRule
        public System.Threading.Tasks.Task PutServicesServiceIdBillingEngagementEndRuleAsync(_services_billing_engagement.UpdateEndRuleRequest body, long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /services/{serviceId}/billing/engagement/flush
        public Task<_services_billing_engagement.EngagementFlushOrder> PostServicesServiceIdBillingEngagementFlushAsync(_services_billing_engagement.EngagementFlushRequest body, long serviceId) {
            return default(Task<_services_billing_engagement.EngagementFlushOrder>);
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        public System.Threading.Tasks.Task DeleteServicesServiceIdBillingEngagementRequestAsync(long serviceId) {
            return Task.CompletedTask;
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        public Task<_services_billing_engagement.EngagementRequest> GetServicesServiceIdBillingEngagementRequestAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_billing_engagement.EngagementRequest>(string.Format("/services/{serviceId}/billing/engagement/request", serviceId));
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        public Task<_services_billing_engagement.EngagementRequest> PostServicesServiceIdBillingEngagementRequestAsync(_services_billing_engagement.EngagementRequestCreation body, long serviceId) {
            return default(Task<_services_billing_engagement.EngagementRequest>);
        }
        
        // Path: /services/{serviceId}/consumption
        public Task<_services_consumption.Summary> GetServicesServiceIdConsumptionAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_consumption.Summary>(string.Format("/services/{serviceId}/consumption", serviceId));
        }
        
        // Path: /services/{serviceId}/consumption/element
        public Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionElementAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] string planFamily, [System.Runtime.InteropServices.OptionalAttribute()] string uniqueId) {
            return _client.GetFromJsonAsync<_services_consumption.Element[]>(string.Format("/services/{serviceId}/consumption/element?{queryParameters}", serviceId, queryParameters));
        }
        
        // Path: /services/{serviceId}/consumption/forecast
        public Task<_services_consumption.Summary> GetServicesServiceIdConsumptionForecastAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_consumption.Summary>(string.Format("/services/{serviceId}/consumption/forecast", serviceId));
        }
        
        // Path: /services/{serviceId}/consumption/forecast/element
        public Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionForecastElementAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] string planFamily, [System.Runtime.InteropServices.OptionalAttribute()] string uniqueId) {
            return _client.GetFromJsonAsync<_services_consumption.Element[]>(string.Format("/services/{serviceId}/consumption/forecast/element?{queryParameters}", serviceId, queryParameters));
        }
        
        // Path: /services/{serviceId}/consumption/history
        public Task<System.Int64[]> GetServicesServiceIdConsumptionHistoryAsync(long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] string planFamily, [System.Runtime.InteropServices.OptionalAttribute()] string uniqueId) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/services/{serviceId}/consumption/history?{queryParameters}", serviceId, queryParameters));
        }
        
        // Path: /services/{serviceId}/consumption/history/{id}
        public Task<_services_consumption.Summary> GetServicesServiceIdConsumptionHistoryIdAsync(long id, long serviceId) {
            return _client.GetFromJsonAsync<_services_consumption.Summary>(string.Format("/services/{serviceId}/consumption/history/{id}", id, serviceId));
        }
        
        // Path: /services/{serviceId}/consumption/history/{id}/element
        public Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionHistoryIdElementAsync(long id, long serviceId, [System.Runtime.InteropServices.OptionalAttribute()] string planFamily, [System.Runtime.InteropServices.OptionalAttribute()] string uniqueId) {
            return _client.GetFromJsonAsync<_services_consumption.Element[]>(string.Format("/services/{serviceId}/consumption/history/{id}/element?{queryParameters}", id, serviceId, queryParameters));
        }
        
        // Path: /services/{serviceId}/detach
        public Task<_order_cart.GenericProductDefinition[]> GetServicesServiceIdDetachAsync(long serviceId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/services/{serviceId}/detach", serviceId));
        }
        
        // Path: /services/{serviceId}/detach/{planCode}
        public Task<_order_cart.GenericProductDefinition> GetServicesServiceIdDetachPlanCodeAsync(string planCode, long serviceId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition>(string.Format("/services/{serviceId}/detach/{planCode}", planCode, serviceId));
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/execute
        public Task<_services_operation.Order> PostServicesServiceIdDetachPlanCodeExecuteAsync(_services_operation.DetachExecutionRequest body, string planCode, long serviceId) {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/options
        public Task<_services_operation.DetachOptionsDefinition[]> GetServicesServiceIdDetachPlanCodeOptionsAsync(string planCode, long serviceId) {
            return _client.GetFromJsonAsync<_services_operation.DetachOptionsDefinition[]>(string.Format("/services/{serviceId}/detach/{planCode}/options", planCode, serviceId));
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/simulate
        public Task<_services_operation.Order> PostServicesServiceIdDetachPlanCodeSimulateAsync(_services_operation.DetachExecutionRequest body, string planCode, long serviceId) {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/form
        public Task<_services_form.Description[]> GetServicesServiceIdFormAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_form.Description[]>(string.Format("/services/{serviceId}/form", serviceId));
        }
        
        // Path: /services/{serviceId}/form/{formName}
        public Task<_services_form.Description> GetServicesServiceIdFormFormNameAsync(string formName, long serviceId) {
            return _client.GetFromJsonAsync<_services_form.Description>(string.Format("/services/{serviceId}/form/{formName}", formName, serviceId));
        }
        
        // Path: /services/{serviceId}/form/{formName}/answer
        public Task<_services_form.Response> PostServicesServiceIdFormFormNameAnswerAsync(_services_form.Form body, string formName, long serviceId) {
            return default(Task<_services_form.Response>);
        }
        
        // Path: /services/{serviceId}/options
        public Task<_services_expanded.Service[]> GetServicesServiceIdOptionsAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_expanded.Service[]>(string.Format("/services/{serviceId}/options", serviceId));
        }
        
        // Path: /services/{serviceId}/renewPeriodCapacities
        public Task<System.TimeSpan[]> GetServicesServiceIdRenewPeriodCapacitiesAsync(long serviceId) {
            return _client.GetFromJsonAsync<System.TimeSpan[]>(string.Format("/services/{serviceId}/renewPeriodCapacities", serviceId));
        }
        
        // Path: /services/{serviceId}/technicalDetails
        public Task<_services_expanded.TechnicalDetails> GetServicesServiceIdTechnicalDetailsAsync(long serviceId) {
            return _client.GetFromJsonAsync<_services_expanded.TechnicalDetails>(string.Format("/services/{serviceId}/technicalDetails", serviceId));
        }
        
        // Path: /services/{serviceId}/terminate
        public Task<_services_terminate.TerminationAnswer> PostServicesServiceIdTerminateAsync(long serviceId) {
            return default(Task<_services_terminate.TerminationAnswer>);
        }
        
        // Path: /services/{serviceId}/terminate/confirm
        public Task<_services_terminate.TerminationAnswer> PostServicesServiceIdTerminateConfirmAsync(_services_terminate.ConfirmServiceTerminationRequest body, long serviceId) {
            return default(Task<_services_terminate.TerminationAnswer>);
        }
        
        // Path: /services/{serviceId}/upgrade
        public Task<_order_cart.GenericProductDefinition[]> GetServicesServiceIdUpgradeAsync(long serviceId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition[]>(string.Format("/services/{serviceId}/upgrade", serviceId));
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}
        public Task<_order_cart.GenericProductDefinition> GetServicesServiceIdUpgradePlanCodeAsync(string planCode, long serviceId) {
            return _client.GetFromJsonAsync<_order_cart.GenericProductDefinition>(string.Format("/services/{serviceId}/upgrade/{planCode}", planCode, serviceId));
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}/execute
        public Task<_services_operation.Order> PostServicesServiceIdUpgradePlanCodeExecuteAsync(_services_operation.ExecutionRequest body, string planCode, long serviceId) {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}/simulate
        public Task<_services_operation.Order> PostServicesServiceIdUpgradePlanCodeSimulateAsync(_services_operation.ExecutionRequest body, string planCode, long serviceId) {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /sms
        public Task<System.String[]> GetSmsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms?{queryParameters}", queryParameters));
        }
        
        // Path: /sms/estimate
        public Task<_sms.JobEstimate> PostSmsEstimateAsync(string message, bool noStopClause, _sms.TypeSenderEnum senderType) {
            return default(Task<_sms.JobEstimate>);
        }
        
        // Path: /sms/ptts
        public Task<_sms.PttDetails> GetSmsPttsAsync(long ptt) {
            return _client.GetFromJsonAsync<_sms.PttDetails>(string.Format("/sms/ptts?{queryParameters}", queryParameters));
        }
        
        // Path: /sms/rates/destinations
        public Task<_sms.DestinationRates> GetSmsRatesDestinationsAsync(_sms.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] _sms.BillingCountryEnum billingCountry) {
            return _client.GetFromJsonAsync<_sms.DestinationRates>(string.Format("/sms/rates/destinations?{queryParameters}", queryParameters));
        }
        
        // Path: /sms/rates/packs
        public Task<_sms.PackDetails[]> GetSmsRatesPacksAsync(_sms.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] _sms.BillingCountryEnum billingCountry) {
            return _client.GetFromJsonAsync<_sms.PackDetails[]>(string.Format("/sms/rates/packs?{queryParameters}", queryParameters));
        }
        
        // Path: /sms/virtualNumbers
        public Task<System.String[]> GetSmsVirtualNumbersAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/virtualNumbers?{queryParameters}", queryParameters));
        }
        
        // Path: /sms/virtualNumbers/{number}
        public Task<_sms.VirtualNumberGenericServiceWithIAM> GetSmsVirtualNumbersNumberAsync(string number) {
            return _client.GetFromJsonAsync<_sms.VirtualNumberGenericServiceWithIAM>(string.Format("/sms/virtualNumbers/{number}", number));
        }
        
        // Path: /sms/virtualNumbers/{number}/serviceInfos
        public Task<_services.Service> GetSmsVirtualNumbersNumberServiceInfosAsync(string number) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/sms/virtualNumbers/{number}/serviceInfos", number));
        }
        
        // Path: /sms/virtualNumbers/{number}/serviceInfos
        public System.Threading.Tasks.Task PutSmsVirtualNumbersNumberServiceInfosAsync(_services.Service body, string number) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}
        public Task<_sms.AccountWithIAM> GetSmsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_sms.AccountWithIAM>(string.Format("/sms/{serviceName}", serviceName));
        }
        
        // Path: /sms/{serviceName}
        public System.Threading.Tasks.Task PutSmsServiceNameAsync(_sms.Account body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/batches
        public Task<_sms.Batch[]> GetSmsServiceNameBatchesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_sms.Batch[]>(string.Format("/sms/{serviceName}/batches", serviceName));
        }
        
        // Path: /sms/{serviceName}/batches
        public Task<_sms.Batch> PostSmsServiceNameBatchesAsync(string serviceName, _sms.BatchParams body) {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameBatchesIdAsync(string serviceName, System.Guid id) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        public Task<_sms.Batch> GetSmsServiceNameBatchesIdAsync(string serviceName, System.Guid id) {
            return _client.GetFromJsonAsync<_sms.Batch>(string.Format("/sms/{serviceName}/batches/{id}", serviceName, id));
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        public Task<_sms.Batch> PutSmsServiceNameBatchesIdAsync(string serviceName, _sms.BatchUpdateParams body, System.Guid id) {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}/cancel
        public Task<_sms.Batch> PostSmsServiceNameBatchesIdCancelAsync(string serviceName, System.Guid id) {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}/statistics
        public Task<_sms.BatchStatistics> GetSmsServiceNameBatchesIdStatisticsAsync(string serviceName, System.Guid id) {
            return _client.GetFromJsonAsync<_sms.BatchStatistics>(string.Format("/sms/{serviceName}/batches/{id}/statistics", serviceName, id));
        }
        
        // Path: /sms/{serviceName}/blacklists
        public Task<System.String[]> GetSmsServiceNameBlacklistsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid batchID, [System.Runtime.InteropServices.OptionalAttribute()] long smsOutgoingID) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/blacklists?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/blacklists/{number}
        public System.Threading.Tasks.Task DeleteSmsServiceNameBlacklistsNumberAsync(string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/blacklists/{number}
        public Task<_sms.Blacklist> GetSmsServiceNameBlacklistsNumberAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Blacklist>(string.Format("/sms/{serviceName}/blacklists/{number}", number, serviceName));
        }
        
        // Path: /sms/{serviceName}/document
        public Task<System.String> GetSmsServiceNameDocumentAsync(string serviceName, _sms.DocumentWayTypeEnum wayType, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid batchID, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<string>(string.Format("/sms/{serviceName}/document?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/exceptions
        public Task<_sms.Exception[]> GetSmsServiceNameExceptionsAsync(string receiver, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Exception[]>(string.Format("/sms/{serviceName}/exceptions?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/hlr
        public Task<System.Int64[]> GetSmsServiceNameHlrAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/hlr", serviceName));
        }
        
        // Path: /sms/{serviceName}/hlr
        public Task<_sms.SmsSendingReport> PostSmsServiceNameHlrAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string[] receivers, [System.Runtime.InteropServices.OptionalAttribute()] string receiversDocumentUrl) {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/hlr/{id}
        public Task<_sms.HlrLookupNumber> GetSmsServiceNameHlrIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.HlrLookupNumber>(string.Format("/sms/{serviceName}/hlr/{id}", id, serviceName));
        }
        
        // Path: /sms/{serviceName}/hlr/{id}/operator
        public Task<_sms.Hlr> GetSmsServiceNameHlrIdOperatorAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Hlr>(string.Format("/sms/{serviceName}/hlr/{id}/operator", id, serviceName));
        }
        
        // Path: /sms/{serviceName}/incoming
        public Task<System.Int64[]> GetSmsServiceNameIncomingAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/incoming?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/incoming/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameIncomingIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/incoming/{id}
        public Task<_sms.Incoming> GetSmsServiceNameIncomingIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Incoming>(string.Format("/sms/{serviceName}/incoming/{id}", id, serviceName));
        }
        
        // Path: /sms/{serviceName}/jobs
        public Task<System.Int64[]> GetSmsServiceNameJobsAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/jobs", serviceName));
        }
        
        // Path: /sms/{serviceName}/jobs
        public Task<_sms.SmsSendingReport> PostSmsServiceNameJobsAsync(string message, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum charset, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum @class, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum coding, [System.Runtime.InteropServices.OptionalAttribute()] long differedPeriod, [System.Runtime.InteropServices.OptionalAttribute()] bool noStopClause, [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum priority, [System.Runtime.InteropServices.OptionalAttribute()] string[] receivers, [System.Runtime.InteropServices.OptionalAttribute()] string receiversDocumentUrl, [System.Runtime.InteropServices.OptionalAttribute()] string receiversSlotId, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] bool senderForResponse, [System.Runtime.InteropServices.OptionalAttribute()] string tag, [System.Runtime.InteropServices.OptionalAttribute()] long validityPeriod) {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/jobs/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameJobsIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/jobs/{id}
        public Task<_sms.Job> GetSmsServiceNameJobsIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Job>(string.Format("/sms/{serviceName}/jobs/{id}", id, serviceName));
        }
        
        // Path: /sms/{serviceName}/outgoing
        public Task<System.Int64[]> GetSmsServiceNameOutgoingAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid batchID, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] long deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] long differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] System.Guid messageID, [System.Runtime.InteropServices.OptionalAttribute()] long ptt, [System.Runtime.InteropServices.OptionalAttribute()] string receiver, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/outgoing?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameOutgoingIdAsync(string serviceName, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}
        public Task<_sms.Outgoing> GetSmsServiceNameOutgoingIdAsync(string serviceName, long id) {
            return _client.GetFromJsonAsync<_sms.Outgoing>(string.Format("/sms/{serviceName}/outgoing/{id}", serviceName, id));
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetSmsServiceNameOutgoingIdHlrAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Hlr>(string.Format("/sms/{serviceName}/outgoing/{id}/hlr", id, serviceName));
        }
        
        // Path: /sms/{serviceName}/phonebooks
        public Task<System.String[]> GetSmsServiceNamePhonebooksAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/phonebooks", serviceName));
        }
        
        // Path: /sms/{serviceName}/phonebooks
        public Task<System.String> PostSmsServiceNamePhonebooksAsync(string name, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        public System.Threading.Tasks.Task DeleteSmsServiceNamePhonebooksBookKeyAsync(string bookKey, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        public Task<_sms.Phonebook> GetSmsServiceNamePhonebooksBookKeyAsync(string bookKey, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Phonebook>(string.Format("/sms/{serviceName}/phonebooks/{bookKey}", bookKey, serviceName));
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        public System.Threading.Tasks.Task PutSmsServiceNamePhonebooksBookKeyAsync(_sms.Phonebook body, string bookKey, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/export
        public Task<_telephony.PcsFile> GetSmsServiceNamePhonebooksBookKeyExportAsync(string bookKey, _telephony.ContactsExportFormatsEnum format, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/sms/{serviceName}/phonebooks/{bookKey}/export?{queryParameters}", bookKey, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/import
        public Task<_telephony.Task> PostSmsServiceNamePhonebooksBookKeyImportAsync(string bookKey, string documentId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetSmsServiceNamePhonebooksBookKeyPhonebookContactAsync(string bookKey, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact", bookKey, serviceName));
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        public Task<System.Int64> PostSmsServiceNamePhonebooksBookKeyPhonebookContactAsync(string bookKey, string group, string name, string serviceName, string surname, [System.Runtime.InteropServices.OptionalAttribute()] string homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] string homePhone, [System.Runtime.InteropServices.OptionalAttribute()] string workMobile, [System.Runtime.InteropServices.OptionalAttribute()] string workPhone) {
            return default(Task<System.Int64>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(string bookKey, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public Task<_sms.PhonebookContact> GetSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(string bookKey, long id, string serviceName) {
            return _client.GetFromJsonAsync<_sms.PhonebookContact>(string.Format("/sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}", bookKey, id, serviceName));
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task PutSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync(_sms.PhonebookContact body, string bookKey, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/receivers
        public Task<System.Int64[]> GetSmsServiceNameReceiversAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/receivers", serviceName));
        }
        
        // Path: /sms/{serviceName}/receivers
        public Task<_sms.Receiver> PostSmsServiceNameReceiversAsync(bool autoUpdate, string description, string serviceName, long slotId, [System.Runtime.InteropServices.OptionalAttribute()] string csvUrl, [System.Runtime.InteropServices.OptionalAttribute()] string documentId) {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        public System.Threading.Tasks.Task DeleteSmsServiceNameReceiversSlotIdAsync(string serviceName, long slotId) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        public Task<_sms.Receiver> GetSmsServiceNameReceiversSlotIdAsync(string serviceName, long slotId) {
            return _client.GetFromJsonAsync<_sms.Receiver>(string.Format("/sms/{serviceName}/receivers/{slotId}", serviceName, slotId));
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        public System.Threading.Tasks.Task PutSmsServiceNameReceiversSlotIdAsync(_sms.Receiver body, string serviceName, long slotId) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}/clean
        public Task<_sms.ReceiversAsynchronousCleanReport> PostSmsServiceNameReceiversSlotIdCleanAsync(bool freemium, bool priceOnly, string serviceName, long slotId) {
            return default(Task<_sms.ReceiversAsynchronousCleanReport>);
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}/csv
        public Task<System.String> GetSmsServiceNameReceiversSlotIdCsvAsync(string serviceName, long slotId) {
            return _client.GetFromJsonAsync<string>(string.Format("/sms/{serviceName}/receivers/{slotId}/csv", serviceName, slotId));
        }
        
        // Path: /sms/{serviceName}/seeOffers
        public Task<_sms.PackOffer[]> GetSmsServiceNameSeeOffersAsync(_reference.CountryEnum countryCurrencyPrice, _sms.CountryEnum countryDestination, _sms.PackQuantityEnum quantity, string serviceName) {
            return _client.GetFromJsonAsync<_sms.PackOffer[]>(string.Format("/sms/{serviceName}/seeOffers?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/senders
        public Task<System.String[]> GetSmsServiceNameSendersAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/senders", serviceName));
        }
        
        // Path: /sms/{serviceName}/senders
        public Task<System.String> PostSmsServiceNameSendersAsync(string sender, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string reason) {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        public System.Threading.Tasks.Task DeleteSmsServiceNameSendersSenderAsync(string sender, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        public Task<_sms.Sender> GetSmsServiceNameSendersSenderAsync(string sender, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Sender>(string.Format("/sms/{serviceName}/senders/{sender}", sender, serviceName));
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        public System.Threading.Tasks.Task PutSmsServiceNameSendersSenderAsync(_sms.Sender body, string sender, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents
        public Task<System.Guid[]> GetSmsServiceNameSendersSenderDocumentsAsync(string sender, string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/sms/{serviceName}/senders/{sender}/documents", sender, serviceName));
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents
        public Task<_sms.SenderDocument> PostSmsServiceNameSendersSenderDocumentsAsync(string name, string sender, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_sms.SenderDocument>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents/{documentID}
        public Task<_sms.SenderDocument> GetSmsServiceNameSendersSenderDocumentsDocumentIDAsync(System.Guid documentID, string sender, string serviceName) {
            return _client.GetFromJsonAsync<_sms.SenderDocument>(string.Format("/sms/{serviceName}/senders/{sender}/documents/{documentID}", documentID, sender, serviceName));
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents/{documentID}
        public System.Threading.Tasks.Task PutSmsServiceNameSendersSenderDocumentsDocumentIDAsync(_sms.SenderDocument body, System.Guid documentID, string sender, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/validate
        public System.Threading.Tasks.Task PostSmsServiceNameSendersSenderValidateAsync(string code, string sender, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/sendersAvailableForValidation
        public Task<_sms.SenderAvailable[]> GetSmsServiceNameSendersAvailableForValidationAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.SenderRefererEnum referer) {
            return _client.GetFromJsonAsync<_sms.SenderAvailable[]>(string.Format("/sms/{serviceName}/sendersAvailableForValidation?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/serviceInfos
        public Task<_services.Service> GetSmsServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/sms/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /sms/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutSmsServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/smpp/allowedIPs
        public Task<System.String[]> GetSmsServiceNameSmppAllowedIPsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/smpp/allowedIPs", serviceName));
        }
        
        // Path: /sms/{serviceName}/smpp/allowedIPs
        public Task<System.String[]> PutSmsServiceNameSmppAllowedIPsAsync(string serviceName, _sms.AllowedIPs body) {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/smpp/password
        public System.Threading.Tasks.Task PostSmsServiceNameSmppPasswordAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/smpp/settings
        public Task<_sms.Settings> GetSmsServiceNameSmppSettingsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_sms.Settings>(string.Format("/sms/{serviceName}/smpp/settings", serviceName));
        }
        
        // Path: /sms/{serviceName}/task
        public Task<System.Int64[]> GetSmsServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/task/{taskId}
        public Task<_sms.Task> GetSmsServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_sms.Task>(string.Format("/sms/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /sms/{serviceName}/templatesControl
        public Task<System.String[]> GetSmsServiceNameTemplatesControlAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/templatesControl", serviceName));
        }
        
        // Path: /sms/{serviceName}/templatesControl
        public System.Threading.Tasks.Task PostSmsServiceNameTemplatesControlAsync(_sms.TypeTemplateEnum activity, string message, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string reason) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        public System.Threading.Tasks.Task DeleteSmsServiceNameTemplatesControlNameAsync(string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        public Task<_sms.TemplateControl> GetSmsServiceNameTemplatesControlNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_sms.TemplateControl>(string.Format("/sms/{serviceName}/templatesControl/{name}", name, serviceName));
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        public System.Threading.Tasks.Task PutSmsServiceNameTemplatesControlNameAsync(_sms.TemplateControl body, string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}/relaunchValidation
        public System.Threading.Tasks.Task PostSmsServiceNameTemplatesControlNameRelaunchValidationAsync(string description, string message, string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/transferCredits
        public System.Threading.Tasks.Task PostSmsServiceNameTransferCreditsAsync(double credits, string serviceName, string smsAccountTarget) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users
        public Task<System.String[]> GetSmsServiceNameUsersAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/users", serviceName));
        }
        
        // Path: /sms/{serviceName}/users
        public System.Threading.Tasks.Task PostSmsServiceNameUsersAsync(string login, string password, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}
        public System.Threading.Tasks.Task DeleteSmsServiceNameUsersLoginAsync(string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}
        public Task<_sms.User> GetSmsServiceNameUsersLoginAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<_sms.User>(string.Format("/sms/{serviceName}/users/{login}", login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}
        public System.Threading.Tasks.Task PutSmsServiceNameUsersLoginAsync(_sms.User body, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/document
        public Task<System.String> GetSmsServiceNameUsersLoginDocumentAsync(string login, string serviceName, _sms.DocumentWayTypeEnum wayType, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<string>(string.Format("/sms/{serviceName}/users/{login}/document?{queryParameters}", login, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming
        public Task<System.Int64[]> GetSmsServiceNameUsersLoginIncomingAsync(string login, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/users/{login}/incoming?{queryParameters}", login, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameUsersLoginIncomingIdAsync(long id, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming/{id}
        public Task<_sms.Incoming> GetSmsServiceNameUsersLoginIncomingIdAsync(long id, string login, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Incoming>(string.Format("/sms/{serviceName}/users/{login}/incoming/{id}", id, login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs
        public Task<System.Int64[]> GetSmsServiceNameUsersLoginJobsAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/users/{login}/jobs", login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs
        public Task<_sms.SmsSendingReport> PostSmsServiceNameUsersLoginJobsAsync(
                    string login, 
                    string message, 
                    string serviceName, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum charset, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum @class, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum coding, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long differedPeriod, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool noStopClause, 
                    [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum priority, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string[] receivers, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string receiversDocumentUrl, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string receiversSlotId, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string sender, 
                    [System.Runtime.InteropServices.OptionalAttribute()] bool senderForResponse, 
                    [System.Runtime.InteropServices.OptionalAttribute()] string tag, 
                    [System.Runtime.InteropServices.OptionalAttribute()] long validityPeriod) {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameUsersLoginJobsIdAsync(long id, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs/{id}
        public Task<_sms.Job> GetSmsServiceNameUsersLoginJobsIdAsync(long id, string login, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Job>(string.Format("/sms/{serviceName}/users/{login}/jobs/{id}", id, login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing
        public Task<System.Int64[]> GetSmsServiceNameUsersLoginOutgoingAsync(string login, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] long differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] long ptt, [System.Runtime.InteropServices.OptionalAttribute()] string receiver, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/users/{login}/outgoing?{queryParameters}", login, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameUsersLoginOutgoingIdAsync(long id, string login, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}
        public Task<_sms.Outgoing> GetSmsServiceNameUsersLoginOutgoingIdAsync(long id, string login, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Outgoing>(string.Format("/sms/{serviceName}/users/{login}/outgoing/{id}", id, login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetSmsServiceNameUsersLoginOutgoingIdHlrAsync(long id, string login, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Hlr>(string.Format("/sms/{serviceName}/users/{login}/outgoing/{id}/hlr", id, login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers
        public Task<System.Int64[]> GetSmsServiceNameUsersLoginReceiversAsync(string login, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/users/{login}/receivers", login, serviceName));
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers
        public Task<_sms.Receiver> PostSmsServiceNameUsersLoginReceiversAsync(bool autoUpdate, string description, string login, string serviceName, long slotId, [System.Runtime.InteropServices.OptionalAttribute()] string csvUrl, [System.Runtime.InteropServices.OptionalAttribute()] string documentId) {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        public System.Threading.Tasks.Task DeleteSmsServiceNameUsersLoginReceiversSlotIdAsync(string login, string serviceName, long slotId) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        public Task<_sms.Receiver> GetSmsServiceNameUsersLoginReceiversSlotIdAsync(string login, string serviceName, long slotId) {
            return _client.GetFromJsonAsync<_sms.Receiver>(string.Format("/sms/{serviceName}/users/{login}/receivers/{slotId}", login, serviceName, slotId));
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        public System.Threading.Tasks.Task PutSmsServiceNameUsersLoginReceiversSlotIdAsync(_sms.Receiver body, string login, string serviceName, long slotId) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}/clean
        public Task<_sms.ReceiversAsynchronousCleanReport> PostSmsServiceNameUsersLoginReceiversSlotIdCleanAsync(bool freemium, string login, bool priceOnly, string serviceName, long slotId) {
            return default(Task<_sms.ReceiversAsynchronousCleanReport>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}/csv
        public Task<System.String> GetSmsServiceNameUsersLoginReceiversSlotIdCsvAsync(string login, string serviceName, long slotId) {
            return _client.GetFromJsonAsync<string>(string.Format("/sms/{serviceName}/users/{login}/receivers/{slotId}/csv", login, serviceName, slotId));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers
        public Task<System.String[]> GetSmsServiceNameVirtualNumbersAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sms/{serviceName}/virtualNumbers", serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}
        public Task<_sms.VirtualNumber> GetSmsServiceNameVirtualNumbersNumberAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.VirtualNumber>(string.Format("/sms/{serviceName}/virtualNumbers/{number}", number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public System.Threading.Tasks.Task DeleteSmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public Task<_sms.ChatAccess> GetSmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.ChatAccess>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/chatAccess", number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        public Task<_sms.ChatAccess> PostSmsServiceNameVirtualNumbersNumberChatAccessAsync(string number, string serviceName) {
            return default(Task<_sms.ChatAccess>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming
        public Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberIncomingAsync(string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/incoming?{queryParameters}", number, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameVirtualNumbersNumberIncomingIdAsync(long id, string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        public Task<_sms.Incoming> GetSmsServiceNameVirtualNumbersNumberIncomingIdAsync(long id, string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Incoming>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/incoming/{id}", id, number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs
        public Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberJobsAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/jobs", number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs
        public Task<_sms.SmsSendingReport> PostSmsServiceNameVirtualNumbersNumberJobsAsync(string message, string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CharsetEnum charset, [System.Runtime.InteropServices.OptionalAttribute()] _sms.ClassEnum @class, [System.Runtime.InteropServices.OptionalAttribute()] _sms.CodingEnum coding, [System.Runtime.InteropServices.OptionalAttribute()] long differedPeriod, [System.Runtime.InteropServices.OptionalAttribute()] _sms.PriorityEnum priority, [System.Runtime.InteropServices.OptionalAttribute()] string[] receivers, [System.Runtime.InteropServices.OptionalAttribute()] string receiversDocumentUrl, [System.Runtime.InteropServices.OptionalAttribute()] string receiversSlotId, [System.Runtime.InteropServices.OptionalAttribute()] string tag, [System.Runtime.InteropServices.OptionalAttribute()] long validityPeriod) {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameVirtualNumbersNumberJobsIdAsync(long id, string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        public Task<_sms.VirtualNumberJob> GetSmsServiceNameVirtualNumbersNumberJobsIdAsync(long id, string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.VirtualNumberJob>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/jobs/{id}", id, number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing
        public Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberOutgoingAsync(string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] long deliveryReceipt, [System.Runtime.InteropServices.OptionalAttribute()] long differedDelivery, [System.Runtime.InteropServices.OptionalAttribute()] long ptt, [System.Runtime.InteropServices.OptionalAttribute()] string receiver, [System.Runtime.InteropServices.OptionalAttribute()] string sender, [System.Runtime.InteropServices.OptionalAttribute()] string tag) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/outgoing?{queryParameters}", number, serviceName, queryParameters));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        public System.Threading.Tasks.Task DeleteSmsServiceNameVirtualNumbersNumberOutgoingIdAsync(long id, string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        public Task<_sms.Outgoing> GetSmsServiceNameVirtualNumbersNumberOutgoingIdAsync(long id, string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Outgoing>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}", id, number, serviceName));
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}/hlr
        public Task<_sms.Hlr> GetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrAsync(long id, string number, string serviceName) {
            return _client.GetFromJsonAsync<_sms.Hlr>(string.Format("/sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}/hlr", id, number, serviceName));
        }
        
        // Path: /ssl
        public Task<System.String[]> GetSslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/ssl?{queryParameters}", queryParameters));
        }
        
        // Path: /ssl/{serviceName}
        public Task<_ssl.CertificateWithIAM> GetSslServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_ssl.CertificateWithIAM>(string.Format("/ssl/{serviceName}", serviceName));
        }
        
        // Path: /ssl/{serviceName}/serviceInfos
        public Task<_services.Service> GetSslServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/ssl/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /ssl/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutSslServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /ssl/{serviceName}/tasks
        public Task<System.Int64[]> GetSslServiceNameTasksAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/ssl/{serviceName}/tasks", serviceName));
        }
        
        // Path: /ssl/{serviceName}/tasks/{taskId}
        public Task<_ssl.Operation> GetSslServiceNameTasksTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_ssl.Operation>(string.Format("/ssl/{serviceName}/tasks/{taskId}", serviceName, taskId));
        }
        
        // Path: /sslGateway
        public Task<System.String[]> GetSslGatewayAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/sslGateway?{queryParameters}", queryParameters));
        }
        
        // Path: /sslGateway/availableZones
        public Task<System.String[]> GetSslGatewayAvailableZonesAsync() {
            return _client.GetFromJsonAsync<string[]>("/sslGateway/availableZones");
        }
        
        // Path: /sslGateway/eligibility
        public Task<_sslGateway.EligibilityStatus> GetSslGatewayEligibilityAsync(string domain) {
            return _client.GetFromJsonAsync<_sslGateway.EligibilityStatus>(string.Format("/sslGateway/eligibility?{queryParameters}", queryParameters));
        }
        
        // Path: /sslGateway/{serviceName}
        public Task<_sslGateway.SslGatewayWithIAM> GetSslGatewayServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_sslGateway.SslGatewayWithIAM>(string.Format("/sslGateway/{serviceName}", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}
        public System.Threading.Tasks.Task PutSslGatewayServiceNameAsync(_sslGateway.SslGateway body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sslGateway/{serviceName}/changeContact
        public Task<System.Int64[]> PostSslGatewayServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sslGateway/{serviceName}/confirmTermination
        public Task<System.String> PostSslGatewayServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /sslGateway/{serviceName}/domain
        public Task<System.Int64[]> GetSslGatewayServiceNameDomainAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sslGateway/{serviceName}/domain", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/domain
        public Task<_sslGateway.Domain> PostSslGatewayServiceNameDomainAsync(string domain, string serviceName) {
            return default(Task<_sslGateway.Domain>);
        }
        
        // Path: /sslGateway/{serviceName}/domain/{id}
        public System.Threading.Tasks.Task DeleteSslGatewayServiceNameDomainIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sslGateway/{serviceName}/domain/{id}
        public Task<_sslGateway.Domain> GetSslGatewayServiceNameDomainIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sslGateway.Domain>(string.Format("/sslGateway/{serviceName}/domain/{id}", id, serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/natIp
        public Task<_sslGateway.NatIps[]> GetSslGatewayServiceNameNatIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_sslGateway.NatIps[]>(string.Format("/sslGateway/{serviceName}/natIp", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/renewCertificate
        public Task<System.String[]> PostSslGatewayServiceNameRenewCertificateAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string domain) {
            return default(Task<System.String[]>);
        }
        
        // Path: /sslGateway/{serviceName}/server
        public Task<System.Int64[]> GetSslGatewayServiceNameServerAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sslGateway/{serviceName}/server", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/server
        public Task<_sslGateway.Server> PostSslGatewayServiceNameServerAsync(string address, long port, string serviceName) {
            return default(Task<_sslGateway.Server>);
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        public System.Threading.Tasks.Task DeleteSslGatewayServiceNameServerIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        public Task<_sslGateway.Server> GetSslGatewayServiceNameServerIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sslGateway.Server>(string.Format("/sslGateway/{serviceName}/server/{id}", id, serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        public System.Threading.Tasks.Task PutSslGatewayServiceNameServerIdAsync(_sslGateway.Server body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sslGateway/{serviceName}/serviceInfos
        public Task<_services.Service> GetSslGatewayServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/sslGateway/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutSslGatewayServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /sslGateway/{serviceName}/task
        public Task<System.Int64[]> GetSslGatewayServiceNameTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/sslGateway/{serviceName}/task", serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/task/{id}
        public Task<_sslGateway.Task> GetSslGatewayServiceNameTaskIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_sslGateway.Task>(string.Format("/sslGateway/{serviceName}/task/{id}", id, serviceName));
        }
        
        // Path: /sslGateway/{serviceName}/terminate
        public Task<System.String> PostSslGatewayServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /stack/mis
        public Task<System.String[]> GetStackMisAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/stack/mis?{queryParameters}", queryParameters));
        }
        
        // Path: /stack/mis/{serviceName}
        public Task<_stack_mis.productWithIAM> GetStackMisServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_stack_mis.productWithIAM>(string.Format("/stack/mis/{serviceName}", serviceName));
        }
        
        // Path: /stack/mis/{serviceName}/serviceInfos
        public Task<_services.Service> GetStackMisServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/stack/mis/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /stack/mis/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutStackMisServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /startup
        public Task<_startup.startup> GetStartupAsync() {
            return _client.GetFromJsonAsync<_startup.startup>("/startup");
        }
        
        // Path: /startup
        public System.Threading.Tasks.Task PostStartupAsync(_startup.startup body) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp
        public Task<_storage.NetAppServiceWithIAM[]> GetStorageNetappAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<_storage.NetAppServiceWithIAM[]>(string.Format("/storage/netapp?{queryParameters}", queryParameters));
        }
        
        // Path: /storage/netapp/{serviceName}
        public Task<_storage.NetAppServiceWithIAM> GetStorageNetappServiceNameAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_storage.NetAppServiceWithIAM>(string.Format("/storage/netapp/{serviceName}", serviceName));
        }
        
        // Path: /storage/netapp/{serviceName}
        public Task<_storage.NetAppService> PutStorageNetappServiceNameAsync(_storage.NetAppServiceUpdate body, System.Guid serviceName) {
            return default(Task<_storage.NetAppService>);
        }
        
        // Path: /storage/netapp/{serviceName}/changeContact
        public Task<System.Int64[]> PostStorageNetappServiceNameChangeContactAsync(_services.changeContact body, System.Guid serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/confirmTermination
        public Task<System.String> PostStorageNetappServiceNameConfirmTerminationAsync(_services.confirmTermination body, System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /storage/netapp/{serviceName}/network
        public Task<_storage.NetAppNetwork[]> GetStorageNetappServiceNameNetworkAsync(System.Guid serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool detail) {
            return _client.GetFromJsonAsync<_storage.NetAppNetwork[]>(string.Format("/storage/netapp/{serviceName}/network?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /storage/netapp/{serviceName}/network/{networkId}
        public Task<_storage.NetAppNetwork> GetStorageNetappServiceNameNetworkNetworkIdAsync(System.Guid networkId, System.Guid serviceName) {
            return _client.GetFromJsonAsync<_storage.NetAppNetwork>(string.Format("/storage/netapp/{serviceName}/network/{networkId}", networkId, serviceName));
        }
        
        // Path: /storage/netapp/{serviceName}/serviceInfos
        public Task<_services.Service> GetStorageNetappServiceNameServiceInfosAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/storage/netapp/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /storage/netapp/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutStorageNetappServiceNameServiceInfosAsync(_services.Service body, System.Guid serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share
        public Task<_storage.NetAppShare[]> GetStorageNetappServiceNameShareAsync(System.Guid serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool detail) {
            return _client.GetFromJsonAsync<_storage.NetAppShare[]>(string.Format("/storage/netapp/{serviceName}/share?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /storage/netapp/{serviceName}/share
        public Task<_storage.NetAppShare> PostStorageNetappServiceNameShareAsync(_storage.NetAppShare body, System.Guid serviceName) {
            return default(Task<_storage.NetAppShare>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        public System.Threading.Tasks.Task DeleteStorageNetappServiceNameShareShareIdAsync(System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        public Task<_storage.NetAppShare> GetStorageNetappServiceNameShareShareIdAsync(System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShare>(string.Format("/storage/netapp/{serviceName}/share/{shareId}", serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        public Task<_storage.NetAppShare> PutStorageNetappServiceNameShareShareIdAsync(_storage.NetAppShareUpdate body, System.Guid serviceName, System.Guid shareId) {
            return default(Task<_storage.NetAppShare>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/accessPath
        public Task<_storage.NetAppShareAccessPath[]> GetStorageNetappServiceNameShareShareIdAccessPathAsync(System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareAccessPath[]>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/accessPath", serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/accessPath/{accessPathId}
        public Task<_storage.NetAppShareAccessPath> GetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdAsync(System.Guid accessPathId, System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareAccessPath>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/accessPath/{accessPathId}", accessPathId, serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl
        public Task<_storage.NetAppShareACLRule[]> GetStorageNetappServiceNameShareShareIdAclAsync(System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareACLRule[]>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/acl", serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl
        public Task<_storage.NetAppShareACLRule> PostStorageNetappServiceNameShareShareIdAclAsync(_storage.NetAppShareACLRule body, System.Guid serviceName, System.Guid shareId) {
            return default(Task<_storage.NetAppShareACLRule>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        public System.Threading.Tasks.Task DeleteStorageNetappServiceNameShareShareIdAclAclRuleIdAsync(System.Guid aclRuleId, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        public Task<_storage.NetAppShareACLRule> GetStorageNetappServiceNameShareShareIdAclAclRuleIdAsync(System.Guid aclRuleId, System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareACLRule>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}", aclRuleId, serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/extend
        public System.Threading.Tasks.Task PostStorageNetappServiceNameShareShareIdExtendAsync(_storage.NetAppShareExtendOrShrink body, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/revert
        public System.Threading.Tasks.Task PostStorageNetappServiceNameShareShareIdRevertAsync(_storage.NetAppShareRevertToSnapshot body, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/shrink
        public System.Threading.Tasks.Task PostStorageNetappServiceNameShareShareIdShrinkAsync(_storage.NetAppShareExtendOrShrink body, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot
        public Task<_storage.NetAppShareSnapshot[]> GetStorageNetappServiceNameShareShareIdSnapshotAsync(System.Guid serviceName, System.Guid shareId, [System.Runtime.InteropServices.OptionalAttribute()] bool detail) {
            return _client.GetFromJsonAsync<_storage.NetAppShareSnapshot[]>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/snapshot?{queryParameters}", serviceName, shareId, queryParameters));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot
        public Task<_storage.NetAppShareSnapshot> PostStorageNetappServiceNameShareShareIdSnapshotAsync(_storage.NetAppShareSnapshot body, System.Guid serviceName, System.Guid shareId) {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public System.Threading.Tasks.Task DeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public Task<_storage.NetAppShareSnapshot> GetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareSnapshot>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}", serviceName, shareId, snapshotId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        public Task<_storage.NetAppShareSnapshot> PutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync(_storage.NetAppShareSnapshotUpdate body, System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}/hold
        public Task<_storage.NetAppShareSnapshot> PostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldAsync(System.Guid serviceName, System.Guid shareId, System.Guid snapshotId) {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        public Task<_storage.NetAppShareSnapshotPolicy> GetStorageNetappServiceNameShareShareIdSnapshotPolicyAsync(System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareSnapshotPolicy>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy", serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        public System.Threading.Tasks.Task PutStorageNetappServiceNameShareShareIdSnapshotPolicyAsync(_storage.NetAppShareSnapshotPolicyUpdate body, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        public Task<_storage.NetAppShareSnapshotReserve> GetStorageNetappServiceNameShareShareIdSnapshotReserveAsync(System.Guid serviceName, System.Guid shareId) {
            return _client.GetFromJsonAsync<_storage.NetAppShareSnapshotReserve>(string.Format("/storage/netapp/{serviceName}/share/{shareId}/snapshotReserve", serviceName, shareId));
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        public System.Threading.Tasks.Task PutStorageNetappServiceNameShareShareIdSnapshotReserveAsync(_storage.NetAppShareSnapshotReserveUpdate body, System.Guid serviceName, System.Guid shareId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy
        public Task<_storage.NetAppSnapshotPolicy[]> GetStorageNetappServiceNameSnapshotPolicyAsync(System.Guid serviceName) {
            return _client.GetFromJsonAsync<_storage.NetAppSnapshotPolicy[]>(string.Format("/storage/netapp/{serviceName}/snapshotPolicy", serviceName));
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy
        public Task<_storage.NetAppSnapshotPolicy> PostStorageNetappServiceNameSnapshotPolicyAsync(_storage.NetAppSnapshotPolicy body, System.Guid serviceName) {
            return default(Task<_storage.NetAppSnapshotPolicy>);
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public System.Threading.Tasks.Task DeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(System.Guid serviceName, System.Guid snapshotPolicyId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public Task<_storage.NetAppSnapshotPolicy> GetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(System.Guid serviceName, System.Guid snapshotPolicyId) {
            return _client.GetFromJsonAsync<_storage.NetAppSnapshotPolicy>(string.Format("/storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}", serviceName, snapshotPolicyId));
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        public System.Threading.Tasks.Task PutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync(_storage.NetAppSnapshotPolicyUpdate body, System.Guid serviceName, System.Guid snapshotPolicyId) {
            return Task.CompletedTask;
        }
        
        // Path: /storage/netapp/{serviceName}/terminate
        public Task<System.String> PostStorageNetappServiceNameTerminateAsync(System.Guid serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /supply/mondialRelay
        public Task<_supply.MondialRelayReturn> PostSupplyMondialRelayAsync(_coreTypes.CountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] string address, [System.Runtime.InteropServices.OptionalAttribute()] string city, [System.Runtime.InteropServices.OptionalAttribute()] string zipcode) {
            return default(Task<_supply.MondialRelayReturn>);
        }
        
        // Path: /support/tickets
        public Task<System.Int64[]> GetSupportTicketsAsync([System.Runtime.InteropServices.OptionalAttribute()] bool archived, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketCategoryEnum category, [System.Runtime.InteropServices.OptionalAttribute()] bool customerReplyNeeded, [System.Runtime.InteropServices.OptionalAttribute()] bool excludeAutogenerated, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime maxCreationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime minCreationDate, [System.Runtime.InteropServices.OptionalAttribute()] long page, [System.Runtime.InteropServices.OptionalAttribute()] long pageSize, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketProductEnum product, [System.Runtime.InteropServices.OptionalAttribute()] string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] string subject, [System.Runtime.InteropServices.OptionalAttribute()] string ticketNumber) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/support/tickets?{queryParameters}", queryParameters));
        }
        
        // Path: /support/tickets/create
        public Task<_support.NewMessageInfo> PostSupportTicketsCreateAsync(string body, string subject, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketCategoryEnum category, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketImpactUrgencyEnum impact, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketProductEnum product, [System.Runtime.InteropServices.OptionalAttribute()] string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketSubCategoryEnum subcategory, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] _support.TicketImpactUrgencyEnum urgency, [System.Runtime.InteropServices.OptionalAttribute()] string[] watchers) {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /support/tickets/{ticketId}
        public Task<_support.Ticket> GetSupportTicketsTicketIdAsync(long ticketId) {
            return _client.GetFromJsonAsync<_support.Ticket>(string.Format("/support/tickets/{ticketId}", ticketId));
        }
        
        // Path: /support/tickets/{ticketId}/canBeScored
        public Task<System.Boolean> GetSupportTicketsTicketIdCanBeScoredAsync(long ticketId) {
            return _client.GetFromJsonAsync<bool>(string.Format("/support/tickets/{ticketId}/canBeScored", ticketId));
        }
        
        // Path: /support/tickets/{ticketId}/close
        public System.Threading.Tasks.Task PostSupportTicketsTicketIdCloseAsync(long ticketId) {
            return Task.CompletedTask;
        }
        
        // Path: /support/tickets/{ticketId}/messages
        public Task<_support.Message[]> GetSupportTicketsTicketIdMessagesAsync(long ticketId) {
            return _client.GetFromJsonAsync<_support.Message[]>(string.Format("/support/tickets/{ticketId}/messages", ticketId));
        }
        
        // Path: /support/tickets/{ticketId}/reopen
        public System.Threading.Tasks.Task PostSupportTicketsTicketIdReopenAsync(string body, long ticketId) {
            return Task.CompletedTask;
        }
        
        // Path: /support/tickets/{ticketId}/reply
        public System.Threading.Tasks.Task PostSupportTicketsTicketIdReplyAsync(string body, long ticketId) {
            return Task.CompletedTask;
        }
        
        // Path: /support/tickets/{ticketId}/score
        public System.Threading.Tasks.Task PostSupportTicketsTicketIdScoreAsync(string score, long ticketId, [System.Runtime.InteropServices.OptionalAttribute()] string scoreComment) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony
        public Task<System.String[]> GetTelephonyAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/accessories
        public Task<_telephony.AccessoryOffer[]> GetTelephonyAccessoriesAsync(_telephony.ServiceNumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] string brand) {
            return _client.GetFromJsonAsync<_telephony.AccessoryOffer[]>(string.Format("/telephony/accessories?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/aliases
        public Task<System.String[]> GetTelephonyAliasesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/aliases?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/aliases/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyAliasesServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TelephonyGenericServiceWithIAM>(string.Format("/telephony/aliases/{serviceName}", serviceName));
        }
        
        // Path: /telephony/aliases/{serviceName}/changeContact
        public Task<System.Int64[]> PostTelephonyAliasesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/aliases/{serviceName}/serviceInfos
        public Task<_services.Service> GetTelephonyAliasesServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/telephony/aliases/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /telephony/aliases/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutTelephonyAliasesServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/availableDefaultSipDomains
        public Task<_telephony.DefaultSipDomains[]> GetTelephonyAvailableDefaultSipDomainsAsync(_telephony.SipDomainProductTypeEnum type) {
            return _client.GetFromJsonAsync<_telephony.DefaultSipDomains[]>(string.Format("/telephony/availableDefaultSipDomains?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/currentOrderIds
        public Task<System.Int64[]> GetTelephonyCurrentOrderIdsAsync() {
            return _client.GetFromJsonAsync<long[]>("/telephony/currentOrderIds");
        }
        
        // Path: /telephony/directories/availableZipCodes
        public Task<System.String[]> GetTelephonyDirectoriesAvailableZipCodesAsync(_telephony.ServiceNumberCountryEnum country, string number) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/directories/availableZipCodes?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/directories/cities
        public Task<_telephony.City[]> GetTelephonyDirectoriesCitiesAsync(_telephony.ServiceNumberCountryEnum country, string zipCode) {
            return _client.GetFromJsonAsync<_telephony.City[]>(string.Format("/telephony/directories/cities?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/fax/offers
        public Task<_telephony.LineOffer[]> GetTelephonyFaxOffersAsync(_telephony.NumberCountryEnum country) {
            return _client.GetFromJsonAsync<_telephony.LineOffer[]>(string.Format("/telephony/fax/offers?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/line/offer/phones
        public Task<_telephony.LinePhone[]> GetTelephonyLineOfferPhonesAsync(_telephony.ServiceNumberCountryEnum country, string offer) {
            return _client.GetFromJsonAsync<_telephony.LinePhone[]>(string.Format("/telephony/line/offer/phones?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/line/offers
        public Task<_telephony.LineOffer[]> GetTelephonyLineOffersAsync(_telephony.NumberCountryEnum country) {
            return _client.GetFromJsonAsync<_telephony.LineOffer[]>(string.Format("/telephony/line/offers?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/lines
        public Task<System.String[]> GetTelephonyLinesAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/lines?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/lines/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyLinesServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TelephonyGenericServiceWithIAM>(string.Format("/telephony/lines/{serviceName}", serviceName));
        }
        
        // Path: /telephony/lines/{serviceName}/changeContact
        public Task<System.Int64[]> PostTelephonyLinesServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/lines/{serviceName}/serviceInfos
        public Task<_services.Service> GetTelephonyLinesServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/telephony/lines/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /telephony/lines/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutTelephonyLinesServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/number/detailedZones
        public Task<_telephony.NumberDetailedZone[]> GetTelephonyNumberDetailedZonesAsync(_telephony.NumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] string axiom) {
            return _client.GetFromJsonAsync<_telephony.NumberDetailedZone[]>(string.Format("/telephony/number/detailedZones?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/number/ranges
        public Task<System.String[]> GetTelephonyNumberRangesAsync(_telephony.NumberCountryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/number/ranges?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/number/specificNumbers
        public Task<_telephony.SpecificNumber[]> GetTelephonyNumberSpecificNumbersAsync(_telephony.NumberCountryEnum country, _telephony.NumberTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string range, [System.Runtime.InteropServices.OptionalAttribute()] string zone) {
            return _client.GetFromJsonAsync<_telephony.SpecificNumber[]>(string.Format("/telephony/number/specificNumbers?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/number/zones
        public Task<System.String[]> GetTelephonyNumberZonesAsync(_telephony.NumberCountryEnum country, [System.Runtime.InteropServices.OptionalAttribute()] string axiom) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/number/zones?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/procedure
        public Task<System.Int64[]> GetTelephonyProcedureAsync() {
            return _client.GetFromJsonAsync<long[]>("/telephony/procedure");
        }
        
        // Path: /telephony/procedure
        public Task<_telephony.Procedure> PostTelephonyProcedureAsync([System.Runtime.InteropServices.OptionalAttribute()] string bic, [System.Runtime.InteropServices.OptionalAttribute()] string iban, [System.Runtime.InteropServices.OptionalAttribute()] string ownerAddress, [System.Runtime.InteropServices.OptionalAttribute()] string ownerName, [System.Runtime.InteropServices.OptionalAttribute()] long paymentMeanID) {
            return default(Task<_telephony.Procedure>);
        }
        
        // Path: /telephony/procedure/required
        public Task<System.Boolean> GetTelephonyProcedureRequiredAsync() {
            return _client.GetFromJsonAsync<bool>("/telephony/procedure/required");
        }
        
        // Path: /telephony/procedure/{id}
        public Task<_telephony.Procedure> GetTelephonyProcedureIdAsync(long id) {
            return _client.GetFromJsonAsync<_telephony.Procedure>(string.Format("/telephony/procedure/{id}", id));
        }
        
        // Path: /telephony/procedure/{id}/cancel
        public System.Threading.Tasks.Task PostTelephonyProcedureIdCancelAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/resellerPanel/generatePassword
        public System.Threading.Tasks.Task PostTelephonyResellerPanelGeneratePasswordAsync() {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/resellerPanel/status
        public Task<_telephony.ResellerPanelStatus> GetTelephonyResellerPanelStatusAsync() {
            return _client.GetFromJsonAsync<_telephony.ResellerPanelStatus>("/telephony/resellerPanel/status");
        }
        
        // Path: /telephony/searchServices
        public Task<_telephony.TelephonySearchService[]> GetTelephonySearchServicesAsync(string axiom) {
            return _client.GetFromJsonAsync<_telephony.TelephonySearchService[]>(string.Format("/telephony/searchServices?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/setDefaultSipDomain
        public System.Threading.Tasks.Task PostTelephonySetDefaultSipDomainAsync(_telephony.ServiceNumberCountryEnum country, string domain, _telephony.SipDomainProductTypeEnum type) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/softphoneBetaEligibility
        public Task<_telephony.SoftphoneBetaEligibility> GetTelephonySoftphoneBetaEligibilityAsync() {
            return _client.GetFromJsonAsync<_telephony.SoftphoneBetaEligibility>("/telephony/softphoneBetaEligibility");
        }
        
        // Path: /telephony/sounds
        public Task<System.Int64[]> GetTelephonySoundsAsync() {
            return _client.GetFromJsonAsync<long[]>("/telephony/sounds");
        }
        
        // Path: /telephony/sounds
        public Task<_telephony.Sound> PostTelephonySoundsAsync(string filename, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.Sound>);
        }
        
        // Path: /telephony/sounds/{id}
        public System.Threading.Tasks.Task DeleteTelephonySoundsIdAsync(long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/sounds/{id}
        public Task<_telephony.Sound> GetTelephonySoundsIdAsync(long id) {
            return _client.GetFromJsonAsync<_telephony.Sound>(string.Format("/telephony/sounds/{id}", id));
        }
        
        // Path: /telephony/sounds/{id}
        public System.Threading.Tasks.Task PutTelephonySoundsIdAsync(_telephony.Sound body, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/spare
        public Task<System.String[]> GetTelephonySpareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/spare?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/spare/brands
        public Task<System.String[]> GetTelephonySpareBrandsAsync() {
            return _client.GetFromJsonAsync<string[]>("/telephony/spare/brands");
        }
        
        // Path: /telephony/spare/{spare}
        public System.Threading.Tasks.Task DeleteTelephonySpareSpareAsync(string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/spare/{spare}
        public Task<_spare_telephony.TelephonySpareWithIAM> GetTelephonySpareSpareAsync(string spare) {
            return _client.GetFromJsonAsync<_spare_telephony.TelephonySpareWithIAM>(string.Format("/telephony/spare/{spare}", spare));
        }
        
        // Path: /telephony/spare/{spare}/compatibleReplacement
        public Task<System.String[]> GetTelephonySpareSpareCompatibleReplacementAsync(string spare) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/spare/{spare}/compatibleReplacement", spare));
        }
        
        // Path: /telephony/spare/{spare}/replace
        public System.Threading.Tasks.Task PostTelephonySpareSpareReplaceAsync(string domain, string ip, string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/spare/{spare}/serviceInfos
        public Task<_services.Service> GetTelephonySpareSpareServiceInfosAsync(string spare) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/telephony/spare/{spare}/serviceInfos", spare));
        }
        
        // Path: /telephony/spare/{spare}/serviceInfos
        public System.Threading.Tasks.Task PutTelephonySpareSpareServiceInfosAsync(_services.Service body, string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/trunks
        public Task<System.String[]> GetTelephonyTrunksAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/trunks?{queryParameters}", queryParameters));
        }
        
        // Path: /telephony/trunks/{serviceName}
        public Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyTrunksServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TelephonyGenericServiceWithIAM>(string.Format("/telephony/trunks/{serviceName}", serviceName));
        }
        
        // Path: /telephony/trunks/{serviceName}/changeContact
        public Task<System.Int64[]> PostTelephonyTrunksServiceNameChangeContactAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/trunks/{serviceName}/serviceInfos
        public Task<_services.Service> GetTelephonyTrunksServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/telephony/trunks/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /telephony/trunks/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutTelephonyTrunksServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountAsync(string billingAccount, _telephony.TerminationReasonEnum reason, [System.Runtime.InteropServices.OptionalAttribute()] string details) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}
        public Task<_telephony.BillingAccountWithIAM> GetTelephonyBillingAccountAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_telephony.BillingAccountWithIAM>(string.Format("/telephony/{billingAccount}", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountAsync(_telephony.BillingAccount body, string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber
        public Task<System.Int64[]> GetTelephonyBillingAccountAbbreviatedNumberAsync(string billingAccount) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/abbreviatedNumber", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber
        public Task<_telephony.AbbreviatedNumberGroup> PostTelephonyBillingAccountAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string destinationNumber, string name, string surname) {
            return default(Task<_telephony.AbbreviatedNumberGroup>);
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public Task<_telephony.AbbreviatedNumberGroup> GetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount) {
            return _client.GetFromJsonAsync<_telephony.AbbreviatedNumberGroup>(string.Format("/telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}", abbreviatedNumber, billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync(_telephony.AbbreviatedNumberGroup body, long abbreviatedNumber, string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/allowedCreditThreshold
        public Task<_order.Price[]> GetTelephonyBillingAccountAllowedCreditThresholdAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_order.Price[]>(string.Format("/telephony/{billingAccount}/allowedCreditThreshold", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/amountSecurityDeposit
        public Task<_order.Price[]> GetTelephonyBillingAccountAmountSecurityDepositAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_order.Price[]>(string.Format("/telephony/{billingAccount}/amountSecurityDeposit", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/billingAccountSite
        public Task<System.String> GetTelephonyBillingAccountBillingAccountSiteAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string>(string.Format("/telephony/{billingAccount}/billingAccountSite", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/billingAccountSite
        public System.Threading.Tasks.Task PostTelephonyBillingAccountBillingAccountSiteAsync(string billingAccount, string billingAccountSite) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/canTransferSecurityDeposit
        public Task<System.Boolean> PostTelephonyBillingAccountCanTransferSecurityDepositAsync(string billingAccount, string billingAccountDestination) {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/cancelTermination
        public System.Threading.Tasks.Task PostTelephonyBillingAccountCancelTerminationAsync(string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/carrierSip
        public Task<System.String[]> GetTelephonyBillingAccountCarrierSipAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/carrierSip", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}
        public Task<_telephony.CarrierSip> GetTelephonyBillingAccountCarrierSipServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSip>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/cdrs
        public Task<_telephony.Document> GetTelephonyBillingAccountCarrierSipServiceNameCdrsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string month) {
            return _client.GetFromJsonAsync<_telephony.Document>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/cdrs?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/clusterDetails
        public Task<_telephony.CarrierSipClusterInfo> GetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSipClusterInfo>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/clusterDetails", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/endpoints
        public Task<System.Int64[]> GetTelephonyBillingAccountCarrierSipServiceNameEndpointsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/endpoints/{id}
        public Task<_telephony.CarrierSipCustomerEndpoint> GetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSipCustomerEndpoint>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/endpoints/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/settings
        public Task<_telephony.CarrierSipDetails> GetTelephonyBillingAccountCarrierSipServiceNameSettingsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSipDetails>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/settings", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/settings
        public System.Threading.Tasks.Task PutTelephonyBillingAccountCarrierSipServiceNameSettingsAsync(_telephony.CarrierSipDetails body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno
        public Task<System.String[]> GetTelephonyBillingAccountCarrierSipServiceNameVnoAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/vno", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}
        public Task<_telephony.CarrierSipVnoMandate> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceAsync(string billingAccount, string contractReference, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSipVnoMandate>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}", billingAccount, contractReference, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges
        public Task<System.String[]> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesAsync(string billingAccount, string contractReference, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/rang" +
                        "es", billingAccount, contractReference, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        public Task<_telephony.CarrierSipVnoRange> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync(string billingAccount, string contractReference, string prefix, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CarrierSipVnoRange>(string.Format("/telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/rang" +
                        "es/{prefix}", billingAccount, contractReference, prefix, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync(_telephony.CarrierSipVnoRange body, string billingAccount, string contractReference, string prefix, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/changeContact
        public Task<System.Int64[]> PostTelephonyBillingAccountChangeContactAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] string contactAdmin, [System.Runtime.InteropServices.OptionalAttribute()] string contactBilling, [System.Runtime.InteropServices.OptionalAttribute()] string contactTech) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference
        public Task<System.String[]> GetTelephonyBillingAccountConferenceAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/conference", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}
        public Task<_telephony.Conference> GetTelephonyBillingAccountConferenceServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Conference>(string.Format("/telephony/{billingAccount}/conference/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/announceUpload
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadAsync(string billingAccount, string documentId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/histories
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameHistoriesAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateBeginFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateBeginTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/histories?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/histories/{id}
        public Task<_telephony.ConferenceHistory> GetTelephonyBillingAccountConferenceServiceNameHistoriesIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceHistory>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/histories/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/informations
        public Task<_telephony.ConferenceInformations> GetTelephonyBillingAccountConferenceServiceNameInformationsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceInformations>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/informations", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/lock
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameLockAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameParticipantsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/participants", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}
        public Task<_telephony.ConferenceParticipants> GetTelephonyBillingAccountConferenceServiceNameParticipantsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceParticipants>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/participants/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/deaf
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/energy
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyAsync(string billingAccount, long id, string serviceName, long value) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/kick
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/mute
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/undeaf
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/unmute
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms
        public Task<_telephony.ConferenceRoom> PostTelephonyBillingAccountConferenceServiceNameRoomsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long roomNumber) {
            return default(Task<_telephony.ConferenceRoom>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        public Task<_telephony.ConferenceRoom> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync(string billingAccount, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceRoom>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}", billingAccount, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync(_telephony.ConferenceRoom body, string billingAccount, long roomNumber, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesAsync(string billingAccount, long roomNumber, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateBeginFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateBeginTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories" +
                        "?{queryParameters}", billingAccount, roomNumber, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories/{id}
        public Task<_telephony.ConferenceHistory> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceHistory>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories" +
                        "/{id}", billingAccount, id, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/lock
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockAsync(string billingAccount, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsAsync(string billingAccount, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participa" +
                        "nts", billingAccount, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}
        public Task<_telephony.ConferenceParticipants> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceParticipants>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participa" +
                        "nts/{id}", billingAccount, id, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/deaf
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/energy
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyAsync(string billingAccount, long id, long roomNumber, string serviceName, long value) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/kick
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/mute
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/undeaf
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/unmute
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/unlock
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockAsync(string billingAccount, long roomNumber, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync(string billingAccount, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess" +
                        "", billingAccount, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        public Task<_telephony.ConferenceWebAccess> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync(string billingAccount, long roomNumber, string serviceName, _telephony.ConferenceWebAccessTypeEnum type) {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        public Task<_telephony.ConferenceWebAccess> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync(string billingAccount, long id, long roomNumber, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceWebAccess>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess" +
                        "/{id}", billingAccount, id, roomNumber, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/roomsStats
        public Task<_telephony.ConferenceRoomsStatistics> GetTelephonyBillingAccountConferenceServiceNameRoomsStatsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceRoomsStatistics>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/roomsStats", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/settings
        public Task<_telephony.ConferenceProperties> GetTelephonyBillingAccountConferenceServiceNameSettingsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceProperties>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/settings", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/settings
        public System.Threading.Tasks.Task PutTelephonyBillingAccountConferenceServiceNameSettingsAsync(_telephony.ConferenceProperties body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/unlock
        public Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameUnlockAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess
        public Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameWebAccessAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/webAccess", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess
        public Task<_telephony.ConferenceWebAccess> PostTelephonyBillingAccountConferenceServiceNameWebAccessAsync(string billingAccount, string serviceName, _telephony.ConferenceWebAccessTypeEnum type) {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        public Task<_telephony.ConferenceWebAccess> GetTelephonyBillingAccountConferenceServiceNameWebAccessIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ConferenceWebAccess>(string.Format("/telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ddi
        public Task<System.String[]> GetTelephonyBillingAccountDdiAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/ddi", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}
        public Task<_telephony.Ddi> GetTelephonyBillingAccountDdiServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Ddi>(string.Format("/telephony/{billingAccount}/ddi/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountDdiServiceNameAsync(_telephony.Ddi body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}/changeDestination
        public Task<_telephony.Task> PostTelephonyBillingAccountDdiServiceNameChangeDestinationAsync(string billingAccount, string destination, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting
        public Task<System.String[]> GetTelephonyBillingAccountEasyHuntingAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/easyHunting", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}
        public Task<_telephony.EasyHunting> GetTelephonyBillingAccountEasyHuntingServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EasyHunting>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameAsync(_telephony.EasyHunting body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        public Task<_telephony.OvhPabxHunting> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHunting>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAsync(_telephony.OvhPabxHunting body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        public Task<_telephony.OvhPabxHuntingAgent> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync(string billingAccount, string number, string serviceName, long simultaneousLines, _telephony.OvhPabxHuntingAgentStatusEnum status, long timeout, long wrapUpTime, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgent> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgent>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync(_telephony.OvhPabxHuntingAgent body, long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.BannerAccess>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/ban" +
                        "nerAccess", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/cal" +
                        "ls", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdAsync(long agentId, string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveCalls>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/cal" +
                        "ls/{id}", agentId, billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupAsync(long agentId, string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldAsync(long agentId, string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperAsync(long agentId, string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eve" +
                        "ntToken", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<System.String> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/liv" +
                        "eStatus", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/que" +
                        "ue", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, long position, long queueId, string serviceName) {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentQueue>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/que" +
                        "ue/{queueId}", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync(_telephony.OvhPabxHuntingAgentQueue body, long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/que" +
                        "ue/{queueId}/liveStatus", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        public Task<_telephony.OvhPabxCustomStatus> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string color, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        public Task<_telephony.OvhPabxCustomStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxCustomStatus>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        public Task<System.String> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        public Task<_telephony.OvhPabxHuntingQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync(string billingAccount, string serviceName, _telephony.OvhPabxHuntingQueueStrategyEnum strategy, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum actionOnClosure, [System.Runtime.InteropServices.OptionalAttribute()] string actionOnClosureParam, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum actionOnOverflow, [System.Runtime.InteropServices.OptionalAttribute()] string actionOnOverflowParam, [System.Runtime.InteropServices.OptionalAttribute()] bool askForRecordDisabling, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] long maxMember, [System.Runtime.InteropServices.OptionalAttribute()] long maxWaitTime, [System.Runtime.InteropServices.OptionalAttribute()] bool record, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingDigitEnum recordDisablingDigit, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingLanguageEnum recordDisablingLanguage, [System.Runtime.InteropServices.OptionalAttribute()] long soundOnHold) {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueue>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync(_telephony.OvhPabxHuntingQueue body, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/age" +
                        "nt", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long position, long queueId, string serviceName) {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentQueue>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/age" +
                        "nt/{agentId}", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync(_telephony.OvhPabxHuntingAgentQueue body, long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/age" +
                        "nt/{agentId}/liveStatus", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liv" +
                        "eCalls", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdAsync(string billingAccount, long id, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveCalls>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liv" +
                        "eCalls/{id}", billingAccount, id, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync(string billingAccount, long id, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync(string billingAccount, long id, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync(string billingAccount, long id, string number, long queueId, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveStatistics
        public Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveStatistics>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liv" +
                        "eStatistics", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameRecordsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/records", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxRecord>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        public Task<_telephony.EasyHuntingScreenListsConditionsSettings> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EasyHuntingScreenListsConditionsSettings>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync(_telephony.EasyHuntingScreenListsConditionsSettings body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum screenListType) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/condit" +
                        "ions?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        public Task<_telephony.EasyHuntingScreenListsConditions> PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync(string billingAccount, _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum screenListType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string callerIdNumber, [System.Runtime.InteropServices.OptionalAttribute()] string destinationNumber) {
            return default(Task<_telephony.EasyHuntingScreenListsConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public Task<_telephony.EasyHuntingScreenListsConditions> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EasyHuntingScreenListsConditions>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/condit" +
                        "ions/{conditionId}", billingAccount, conditionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync(_telephony.EasyHuntingScreenListsConditions body, string billingAccount, long conditionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameSoundAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/sound", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        public Task<_telephony.OvhPabxSound> GetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxSound>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}", billingAccount, serviceName, soundId));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/soundUpload
        public Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string documentId, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] string url) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        public Task<_telephony.EasyHuntingTimeConditionsSettings> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EasyHuntingTimeConditionsSettings>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync(_telephony.EasyHuntingTimeConditionsSettings body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        public Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TimeConditionsPolicyEnum policy) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions?{" +
                        "queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        public Task<_telephony.EasyHuntingTimeConditions> PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync(string billingAccount, _telephony.TimeConditionsPolicyEnum policy, string serviceName, System.TimeOnly timeFrom, System.TimeOnly timeTo, _telephony.OvhPabxDialplanExtensionConditionTimeWeekDayEnum weekDay) {
            return default(Task<_telephony.EasyHuntingTimeConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public Task<_telephony.EasyHuntingTimeConditions> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(string billingAccount, long conditionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EasyHuntingTimeConditions>(string.Format("/telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{" +
                        "conditionId}", billingAccount, conditionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync(_telephony.EasyHuntingTimeConditions body, string billingAccount, long conditionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountEventTokenAsync(string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountEventTokenAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/eventToken", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        public Task<System.String> PostTelephonyBillingAccountEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/fax
        public Task<System.String[]> GetTelephonyBillingAccountFaxAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/fax", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}
        public Task<_telephony.Fax> GetTelephonyBillingAccountFaxServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Fax>(string.Format("/telephony/{billingAccount}/fax/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountFaxServiceNameAsync(_telephony.Fax body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns
        public Task<System.Int64[]> GetTelephonyBillingAccountFaxServiceNameCampaignsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/fax/{serviceName}/campaigns", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns
        public Task<_telephony.FaxCampaign> PostTelephonyBillingAccountFaxServiceNameCampaignsAsync(string billingAccount, string documentId, string name, _telephony.FaxCampaignRecipientsTypeEnum recipientsType, _telephony.FaxCampaignSendTypeEnum sendType, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxQualityEnum faxQuality, [System.Runtime.InteropServices.OptionalAttribute()] string recipientsDocId, [System.Runtime.InteropServices.OptionalAttribute()] string[] recipientsList, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime sendDate) {
            return default(Task<_telephony.FaxCampaign>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountFaxServiceNameCampaignsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        public Task<_telephony.FaxCampaign> GetTelephonyBillingAccountFaxServiceNameCampaignsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FaxCampaign>(string.Format("/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/detail
        public Task<_telephony.FaxCampaignDetail> GetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FaxCampaignDetail>(string.Format("/telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/detail", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/start
        public System.Threading.Tasks.Task PostTelephonyBillingAccountFaxServiceNameCampaignsIdStartAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/stop
        public System.Threading.Tasks.Task PostTelephonyBillingAccountFaxServiceNameCampaignsIdStopAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task<_telephony.FaxScreen> GetTelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FaxScreen>(string.Format("/telephony/{billingAccount}/fax/{serviceName}/screenLists", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        public Task<_telephony.FaxScreen> PostTelephonyBillingAccountFaxServiceNameScreenListsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string[] blacklistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] string[] blacklistedTSI, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxScreenListTypeEnum filteringList, [System.Runtime.InteropServices.OptionalAttribute()] string[] whitelistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] string[] whitelistedTSI) {
            return default(Task<_telephony.FaxScreen>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        public System.Threading.Tasks.Task PutTelephonyBillingAccountFaxServiceNameScreenListsAsync(_telephony.FaxScreen body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists/reset
        public System.Threading.Tasks.Task PostTelephonyBillingAccountFaxServiceNameScreenListsResetAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool blacklistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] bool blacklistedTSI, [System.Runtime.InteropServices.OptionalAttribute()] bool whitelistedNumbers, [System.Runtime.InteropServices.OptionalAttribute()] bool whitelistedTSI) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings
        public Task<_telephony.FaxProperties> GetTelephonyBillingAccountFaxServiceNameSettingsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FaxProperties>(string.Format("/telephony/{billingAccount}/fax/{serviceName}/settings", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings
        public System.Threading.Tasks.Task PutTelephonyBillingAccountFaxServiceNameSettingsAsync(_telephony.FaxProperties body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings/changePassword
        public Task<System.String> PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings/sendFax
        public Task<_telephony.Task> PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxAsync(string billingAccount, string pdfUrl, string[] recipients, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateSchedule) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/hasSpecialNumbers
        public Task<System.Boolean> GetTelephonyBillingAccountHasSpecialNumbersAsync(string billingAccount) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/hasSpecialNumbers", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption
        public Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryConsumptionAsync(string billingAccount) {
            return _client.GetFromJsonAsync<System.DateOnly[]>(string.Format("/telephony/{billingAccount}/historyConsumption", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption/{date}
        public Task<_telephony.HistoryConsumption> GetTelephonyBillingAccountHistoryConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            return _client.GetFromJsonAsync<_telephony.HistoryConsumption>(string.Format("/telephony/{billingAccount}/historyConsumption/{date}", billingAccount, date));
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption/{date}/file
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryConsumptionDateFileAsync(string billingAccount, System.DateOnly date, _telephony.BillDocument extension) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/historyConsumption/{date}/file?{queryParameters}", billingAccount, date, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption
        public Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryRepaymentConsumptionAsync(string billingAccount) {
            return _client.GetFromJsonAsync<System.DateOnly[]>(string.Format("/telephony/{billingAccount}/historyRepaymentConsumption", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption
        public Task<_telephony.HistoryRepaymentConsumption> PostTelephonyBillingAccountHistoryRepaymentConsumptionAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] string billingNumber) {
            return default(Task<_telephony.HistoryRepaymentConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption/{date}
        public Task<_telephony.HistoryRepaymentConsumption> GetTelephonyBillingAccountHistoryRepaymentConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            return _client.GetFromJsonAsync<_telephony.HistoryRepaymentConsumption>(string.Format("/telephony/{billingAccount}/historyRepaymentConsumption/{date}", billingAccount, date));
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption/{date}/document
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentAsync(string billingAccount, System.DateOnly date) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/historyRepaymentConsumption/{date}/document", billingAccount, date));
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption
        public Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryTollfreeConsumptionAsync(string billingAccount) {
            return _client.GetFromJsonAsync<System.DateOnly[]>(string.Format("/telephony/{billingAccount}/historyTollfreeConsumption", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption/{date}
        public Task<_telephony.HistoryTollfreeConsumption> GetTelephonyBillingAccountHistoryTollfreeConsumptionDateAsync(string billingAccount, System.DateOnly date) {
            return _client.GetFromJsonAsync<_telephony.HistoryTollfreeConsumption>(string.Format("/telephony/{billingAccount}/historyTollfreeConsumption/{date}", billingAccount, date));
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption/{date}/document
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentAsync(string billingAccount, System.DateOnly date) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/historyTollfreeConsumption/{date}/document", billingAccount, date));
        }
        
        // Path: /telephony/{billingAccount}/line
        public Task<System.String[]> GetTelephonyBillingAccountLineAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}
        public Task<_telephony.Line> GetTelephonyBillingAccountLineServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Line>(string.Format("/telephony/{billingAccount}/line/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNameAsync(_telephony.Line body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        public Task<_telephony.AbbreviatedNumber> PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string destinationNumber, string name, string serviceName, string surname) {
            return default(Task<_telephony.AbbreviatedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public Task<_telephony.AbbreviatedNumber> GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(long abbreviatedNumber, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.AbbreviatedNumber>(string.Format("/telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumb" +
                        "er}", abbreviatedNumber, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync(_telephony.AbbreviatedNumber body, long abbreviatedNumber, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        public System.Threading.Tasks.Task GetTelephonyBillingAccountLineServiceNameActivateNewPhoneAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<void>(string.Format("/telephony/{billingAccount}/line/{serviceName}/activateNewPhone", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameActivateNewPhoneAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/antihack
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAntihackAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/antihack", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/antihack
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameAntihackAsync(_telephony.AntihackActionEnum action, string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string restricted) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/associateDevice
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameAssociateDeviceAsync(string billingAccount, string macAddress, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress, [System.Runtime.InteropServices.OptionalAttribute()] long slot) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAutomaticCallAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/automaticCall", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall
        public Task<System.String> PostTelephonyBillingAccountLineServiceNameAutomaticCallAsync(string billingAccount, string calledNumber, _telephony.CallsGeneratorDialplanEnum dialplan, bool isAnonymous, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string bridgeNumberDialplan, [System.Runtime.InteropServices.OptionalAttribute()] string callingNumber, [System.Runtime.InteropServices.OptionalAttribute()] string playbackAudioFileDialplan, [System.Runtime.InteropServices.OptionalAttribute()] long timeout, [System.Runtime.InteropServices.OptionalAttribute()] string ttsTextDialplan) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall/{identifier}
        public Task<_telephony.CallsGenerated> GetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierAsync(string billingAccount, string identifier, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.CallsGenerated>(string.Format("/telephony/{billingAccount}/line/{serviceName}/automaticCall/{identifier}", billingAccount, identifier, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/availableSipDomains
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAvailableSipDomainsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/availableSipDomains", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/block
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameBlockAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.LineBlockingMode mode) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameCallsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/calls", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountLineServiceNameCallsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveCalls>(string.Format("/telephony/{billingAccount}/line/{serviceName}/calls/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdEavesdropAsync(string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/hangup
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdHangupAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/hold
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdHoldAsync(string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/intercept
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdInterceptAsync(string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/transfer
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdTransferAsync(string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/whisper
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdWhisperAsync(string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/canChangePassword
        public Task<System.Boolean> GetTelephonyBillingAccountLineServiceNameCanChangePasswordAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/line/{serviceName}/canChangePassword", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/cancelConvertToNumber
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameCancelConvertToNumberAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/changePassword
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameChangePasswordAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string password) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2Call
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameClick2CallAsync(string billingAccount, string calledNumber, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string callingNumber, [System.Runtime.InteropServices.OptionalAttribute()] bool intercom) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameClick2CallUserAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/click2CallUser", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser
        public Task<System.Int64> PostTelephonyBillingAccountLineServiceNameClick2CallUserAsync(string billingAccount, string login, string password, string serviceName) {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        public Task<_telephony.Click2CallUser> GetTelephonyBillingAccountLineServiceNameClick2CallUserIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Click2CallUser>(string.Format("/telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/changePassword
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordAsync(string billingAccount, long id, string password, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/click2Call
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallAsync(string billingAccount, string calledNumber, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string callingNumber) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/convertToNumber
        public Task<_telephony.OfferTask> PostTelephonyBillingAccountLineServiceNameConvertToNumberAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/dissociateDevice
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameDissociateDeviceAsync(string billingAccount, string macAddress, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string ipAddress) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/ips
        public Task<_telephony.DatetimeAndIpvalue[]> GetTelephonyBillingAccountLineServiceNameIpsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DatetimeAndIpvalue[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/ips", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/lastRegistrations
        public Task<_telephony.RegistrationInformations[]> GetTelephonyBillingAccountLineServiceNameLastRegistrationsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.RegistrationInformations[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/lastRegistrations", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/listAssociablePhones
        public Task<_telephony.LinePhoneAssociable[]> GetTelephonyBillingAccountLineServiceNameListAssociablePhonesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LinePhoneAssociable[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/listAssociablePhones", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/maximumAvailableSimultaneousLines
        public Task<System.Int64> GetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long>(string.Format("/telephony/{billingAccount}/line/{serviceName}/maximumAvailableSimultaneousLines", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/offer
        public Task<_telephony.LineOffer> GetTelephonyBillingAccountLineServiceNameOfferAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LineOffer>(string.Format("/telephony/{billingAccount}/line/{serviceName}/offer", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options
        public Task<_telephony.LineOptions> GetTelephonyBillingAccountLineServiceNameOptionsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LineOptions>(string.Format("/telephony/{billingAccount}/line/{serviceName}/options", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNameOptionsAsync(_telephony.LineOptions body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options/availableCodecs
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/options/availableCodecs", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options/defaultCodecs
        public Task<System.String> GetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/telephony/{billingAccount}/line/{serviceName}/options/defaultCodecs", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone
        public Task<_telephony.Phone> GetTelephonyBillingAccountLineServiceNamePhoneAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Phone>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNamePhoneAsync(_telephony.Phone body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/adminCredentials
        public Task<_telephony.PhoneCredentials> GetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.PhoneCredentials>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/adminCredentials", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/changePhoneConfiguration
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoReboot, [System.Runtime.InteropServices.OptionalAttribute()] _complexType.SafeKeyValue<string> newConfigurations) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/functionKey", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        public Task<_telephony.FunctionKey> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync(string billingAccount, long keyNum, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FunctionKey>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}", billingAccount, keyNum, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync(_telephony.FunctionKey body, string billingAccount, long keyNum, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}/availableFunction
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionAsync(string billingAccount, long keyNum, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}/availab" +
                        "leFunction", billingAccount, keyNum, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/merchandiseAvailable
        public Task<_telephony.HardwareOffer[]> GetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.HardwareOffer[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/merchandiseAvailable", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhonePhonebookAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/phonebook", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        public Task<System.String> PostTelephonyBillingAccountLineServiceNamePhonePhonebookAsync(string billingAccount, string name, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(string billingAccount, string bookKey, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public Task<_telephony.Phonebook> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(string billingAccount, string bookKey, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Phonebook>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}", billingAccount, bookKey, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync(_telephony.Phonebook body, string billingAccount, string bookKey, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/export
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportAsync(string billingAccount, string bookKey, _telephony.ContactsExportFormatsEnum format, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/export?{" +
                        "queryParameters}", billingAccount, bookKey, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/import
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportAsync(string billingAccount, string bookKey, string documentId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phoneboo" +
                        "kContact", billingAccount, bookKey, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64> PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string group, string name, string serviceName, string surname, [System.Runtime.InteropServices.OptionalAttribute()] string homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] string homePhone, [System.Runtime.InteropServices.OptionalAttribute()] string workMobile, [System.Runtime.InteropServices.OptionalAttribute()] string workPhone) {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public Task<_telephony.PhonebookContact> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.PhonebookContact>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phoneboo" +
                        "kContact/{id}", billingAccount, bookKey, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync(_telephony.PhonebookContact body, string billingAccount, string bookKey, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/reboot
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhoneRebootAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/refreshScreen
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/resetConfig
        public Task<_telephony.ResetPhoneInfo> PostTelephonyBillingAccountLineServiceNamePhoneResetConfigAsync(string billingAccount, string ip, string serviceName) {
            return default(Task<_telephony.ResetPhoneInfo>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma
        public Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhoneRmaAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/rma", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma
        public Task<_telephony.RmaReturn> PostTelephonyBillingAccountLineServiceNamePhoneRmaAsync(string billingAccount, string serviceName, _telephony.RmaPublicTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string mondialRelayId, [System.Runtime.InteropServices.OptionalAttribute()] string newMerchandise, [System.Runtime.InteropServices.OptionalAttribute()] long shippingContactId) {
            return default(Task<_telephony.RmaReturn>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(string billingAccount, string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public Task<_telephony.Rma> GetTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(string billingAccount, string id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Rma>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync(_telephony.Rma body, string billingAccount, string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}/changeType
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeAsync(string billingAccount, string id, string serviceName, _telephony.RmaChangeTypeEnum type) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/supportsPhonebook
        public Task<System.Boolean> GetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phone/supportsPhonebook", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phoneCanBeAssociable
        public Task<_telephony.LinePhone[]> GetTelephonyBillingAccountLineServiceNamePhoneCanBeAssociableAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LinePhone[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/phoneCanBeAssociable", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameRecordsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/records", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountLineServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxRecord>(string.Format("/telephony/{billingAccount}/line/{serviceName}/records/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/removeSimultaneousLines
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesAsync(string billingAccount, long quantityRemove, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/simultaneousChannelsDetails
        public Task<_telephony.SimultaneousChannelsDetails> GetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.SimultaneousChannelsDetails>(string.Format("/telephony/{billingAccount}/line/{serviceName}/simultaneousChannelsDetails", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta
        public Task<_telephony.SoftphoneBetaStatus> GetTelephonyBillingAccountLineServiceNameSoftphoneBetaAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.SoftphoneBetaStatus>(string.Format("/telephony/{billingAccount}/line/{serviceName}/softphone/beta", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta
        public Task<_telephony.SoftphoneBetaStatus> PutTelephonyBillingAccountLineServiceNameSoftphoneBetaAsync(string billingAccount, string serviceName, _telephony.SoftphoneBetaStatus body) {
            return default(Task<_telephony.SoftphoneBetaStatus>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta/regenerateToken
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/statistics
        public Task<_complexType.UnitAndValues<_telephony.TimestampAndValue>> GetTelephonyBillingAccountLineServiceNameStatisticsAsync(string billingAccount, string serviceName, _telephony.StatisticsTimeframeEnum timeframe, _telephony.LineStatisticsTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.UnitAndValues<_telephony.TimestampAndValue>>(string.Format("/telephony/{billingAccount}/line/{serviceName}/statistics?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones
        public Task<_telephony.Tones> GetTelephonyBillingAccountLineServiceNameTonesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Tones>(string.Format("/telephony/{billingAccount}/line/{serviceName}/tones", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones
        public System.Threading.Tasks.Task PutTelephonyBillingAccountLineServiceNameTonesAsync(_telephony.Tones body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones/toneUpload
        public Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameTonesToneUploadAsync(string billingAccount, string serviceName, _telephony.TonesTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string documentId, [System.Runtime.InteropServices.OptionalAttribute()] string url) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        public Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameTrafficExtractsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/line/{serviceName}/trafficExtracts", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        public Task<_telephony.trafficExtract> PostTelephonyBillingAccountLineServiceNameTrafficExtractsAsync(string billingAccount, System.DateTime dateEnd, System.DateTime dateStart, string serviceName) {
            return default(Task<_telephony.trafficExtract>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        public Task<_telephony.trafficExtract> GetTelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.trafficExtract>(string.Format("/telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/unblock
        public System.Threading.Tasks.Task PostTelephonyBillingAccountLineServiceNameUnblockAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/number
        public Task<System.String[]> GetTelephonyBillingAccountNumberAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/number", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}
        public Task<_telephony.Number> GetTelephonyBillingAccountNumberServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Number>(string.Format("/telephony/{billingAccount}/number/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountNumberServiceNameAsync(_telephony.Number body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/cancelConvertToLine
        public System.Threading.Tasks.Task PostTelephonyBillingAccountNumberServiceNameCancelConvertToLineAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/changeFeatureType
        public Task<_telephony.Task> PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeAsync(string billingAccount, _telephony.TypeEnum featureType, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/convertToLine
        public Task<_telephony.OfferTask> PostTelephonyBillingAccountNumberServiceNameConvertToLineAsync(string billingAccount, string offer, string serviceName) {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/convertToLineAvailableOffers
        public Task<_telephony.LineOffersAndContracts> GetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LineOffersAndContracts>(string.Format("/telephony/{billingAccount}/number/{serviceName}/convertToLineAvailableOffers", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/offerTask
        public Task<System.Int64[]> GetTelephonyBillingAccountOfferTaskAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskActionEnum action, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskTypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/offerTask?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/offerTask/{taskId}
        public Task<_telephony.OfferTask> GetTelephonyBillingAccountOfferTaskTaskIdAsync(string billingAccount, long taskId) {
            return _client.GetFromJsonAsync<_telephony.OfferTask>(string.Format("/telephony/{billingAccount}/offerTask/{taskId}", billingAccount, taskId));
        }
        
        // Path: /telephony/{billingAccount}/offerTask/{taskId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOfferTaskTaskIdAsync(_telephony.OfferTask body, string billingAccount, long taskId) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/oldPhone
        public Task<_telephony.OldPhone[]> GetTelephonyBillingAccountOldPhoneAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_telephony.OldPhone[]>(string.Format("/telephony/{billingAccount}/oldPhone", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification
        public Task<System.Int64[]> GetTelephonyBillingAccountOutplanNotificationAsync(string billingAccount) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/outplanNotification", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification
        public Task<_telephony.ConsumptionThreshold> PostTelephonyBillingAccountOutplanNotificationAsync(string billingAccount, _telephony.OutplanNotificationBlockEnum block, double percentage, [System.Runtime.InteropServices.OptionalAttribute()] string notifyEmail) {
            return default(Task<_telephony.ConsumptionThreshold>);
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOutplanNotificationIdAsync(string billingAccount, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification/{id}
        public Task<_telephony.ConsumptionThreshold> GetTelephonyBillingAccountOutplanNotificationIdAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<_telephony.ConsumptionThreshold>(string.Format("/telephony/{billingAccount}/outplanNotification/{id}", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx
        public Task<System.String[]> GetTelephonyBillingAccountOvhPabxAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/ovhPabx", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}
        public Task<_telephony.OvhPabx> GetTelephonyBillingAccountOvhPabxServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabx>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameAsync(_telephony.OvhPabx body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        public Task<_telephony.OvhPabxDialplan> PostTelephonyBillingAccountOvhPabxServiceNameDialplanAsync(bool anonymousRejection, string billingAccount, string name, string serviceName, _telephony.OvhPabxDialplanNumberPresentationEnum showCallerNumber, long transferTimeout) {
            return default(Task<_telephony.OvhPabxDialplan>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(string billingAccount, long dialplanId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public Task<_telephony.OvhPabxDialplan> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(string billingAccount, long dialplanId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxDialplan>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}", billingAccount, dialplanId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync(_telephony.OvhPabxDialplan body, string billingAccount, long dialplanId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync(string billingAccount, long dialplanId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "", billingAccount, dialplanId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        public Task<_telephony.OvhPabxDialplanExtension> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync(string billingAccount, long dialplanId, bool enable, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.SchedulerCategoryEnum schedulerCategory, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum screenListType) {
            return default(Task<_telephony.OvhPabxDialplanExtension>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public Task<_telephony.OvhPabxDialplanExtension> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxDialplanExtension>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}", billingAccount, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync(_telephony.OvhPabxDialplanExtension body, string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/conditionScreenList", billingAccount, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        public Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync(string billingAccount, long dialplanId, long extensionId, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string callerIdNumber, [System.Runtime.InteropServices.OptionalAttribute()] string destinationNumber, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxDialplanExtensionConditionScreenListTypeEnum screenListType) {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionScreenList>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        public Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxDialplanExtensionConditionScreenList>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/conditionScreenList/{conditionId}", billingAccount, conditionId, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/conditionTime", billingAccount, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        public Task<_telephony.OvhPabxDialplanExtensionConditionTime> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync(string billingAccount, long dialplanId, long extensionId, string serviceName, System.TimeOnly timeFrom, System.TimeOnly timeTo, _telephony.OvhPabxDialplanExtensionConditionTimeWeekDayEnum weekDay) {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionTime>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public Task<_telephony.OvhPabxDialplanExtensionConditionTime> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxDialplanExtensionConditionTime>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/conditionTime/{conditionId}", billingAccount, conditionId, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync(_telephony.OvhPabxDialplanExtensionConditionTime body, string billingAccount, long conditionId, long dialplanId, long extensionId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync(string billingAccount, long dialplanId, long extensionId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/rule", billingAccount, dialplanId, extensionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        public Task<_telephony.OvhPabxDialplanExtensionRule> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync(_telephony.OvhPabxDialplanExtensionRuleActionEnum action, string billingAccount, long dialplanId, long extensionId, bool negativeAction, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string actionParam) {
            return default(Task<_telephony.OvhPabxDialplanExtensionRule>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public Task<_telephony.OvhPabxDialplanExtensionRule> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxDialplanExtensionRule>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension" +
                        "/{extensionId}/rule/{ruleId}", billingAccount, dialplanId, extensionId, ruleId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync(_telephony.OvhPabxDialplanExtensionRule body, string billingAccount, long dialplanId, long extensionId, long ruleId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        public Task<_telephony.OvhPabxHunting> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHunting>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameHuntingAsync(_telephony.OvhPabxHunting body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        public Task<_telephony.OvhPabxHuntingAgent> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync(string billingAccount, string number, string serviceName, long simultaneousLines, _telephony.OvhPabxHuntingAgentStatusEnum status, long timeout, long wrapUpTime, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgent> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgent>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync(_telephony.OvhPabxHuntingAgent body, long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.BannerAccess>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerA" +
                        "ccess", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        public Task<_telephony.BannerAccess> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync(long agentId, string billingAccount, string serviceName) {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdAsync(long agentId, string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveCalls>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{" +
                        "id}", agentId, billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupAsync(long agentId, string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldAsync(long agentId, string billingAccount, long id, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferAsync(long agentId, string billingAccount, long id, string number, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperAsync(long agentId, string billingAccount, long id, string number, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventTo" +
                        "ken", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        public Task<System.String> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync(long agentId, string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/liveSta" +
                        "tus", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue", agentId, billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync(long agentId, string billingAccount, long position, long queueId, string serviceName) {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentQueue>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{" +
                        "queueId}", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync(_telephony.OvhPabxHuntingAgentQueue body, long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{" +
                        "queueId}/liveStatus", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        public Task<_telephony.OvhPabxCustomStatus> PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string color, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        public Task<_telephony.OvhPabxCustomStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxCustomStatus>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        public Task<System.String> PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        public Task<_telephony.OvhPabxHuntingQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync(string billingAccount, string serviceName, _telephony.OvhPabxHuntingQueueStrategyEnum strategy, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum actionOnClosure, [System.Runtime.InteropServices.OptionalAttribute()] string actionOnClosureParam, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxQueueActionEnum actionOnOverflow, [System.Runtime.InteropServices.OptionalAttribute()] string actionOnOverflowParam, [System.Runtime.InteropServices.OptionalAttribute()] bool askForRecordDisabling, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] long maxMember, [System.Runtime.InteropServices.OptionalAttribute()] long maxWaitTime, [System.Runtime.InteropServices.OptionalAttribute()] bool record, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingDigitEnum recordDisablingDigit, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxHuntingQueueRecordDisablingLanguageEnum recordDisablingLanguage, [System.Runtime.InteropServices.OptionalAttribute()] long soundOnHold) {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public Task<_telephony.OvhPabxHuntingQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueue>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync(_telephony.OvhPabxHuntingQueue body, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        public Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync(string billingAccount, long position, long queueId, string serviceName) {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentQueue>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{" +
                        "agentId}", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync(_telephony.OvhPabxHuntingAgentQueue body, long agentId, string billingAccount, long queueId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        public Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync(long agentId, string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingAgentLiveStatus>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{" +
                        "agentId}/liveStatus", agentId, billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCal" +
                        "ls", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        public Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdAsync(string billingAccount, long id, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveCalls>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCal" +
                        "ls/{id}", billingAccount, id, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync(string billingAccount, long id, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync(string billingAccount, long id, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync(string billingAccount, long id, string number, long queueId, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync(string billingAccount, long id, string number, long queueId, string serviceName, _telephony.OvhPabxWhisperingModeEnum whisperingMode) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveStatistics
        public Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsAsync(string billingAccount, long queueId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxHuntingQueueLiveStatistics>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveSta" +
                        "tistics", billingAccount, queueId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameMenuAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/menu", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        public Task<_telephony.OvhPabxMenu> PostTelephonyBillingAccountOvhPabxServiceNameMenuAsync(string billingAccount, string name, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] long greetSound, [System.Runtime.InteropServices.OptionalAttribute()] long greetSoundTts, [System.Runtime.InteropServices.OptionalAttribute()] long interDigitTimeout, [System.Runtime.InteropServices.OptionalAttribute()] long invalidSound, [System.Runtime.InteropServices.OptionalAttribute()] long invalidSoundTts, [System.Runtime.InteropServices.OptionalAttribute()] long timeout) {
            return default(Task<_telephony.OvhPabxMenu>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(string billingAccount, long menuId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public Task<_telephony.OvhPabxMenu> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(string billingAccount, long menuId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxMenu>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}", billingAccount, menuId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync(_telephony.OvhPabxMenu body, string billingAccount, long menuId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync(string billingAccount, long menuId, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry", billingAccount, menuId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        public Task<_telephony.OvhPabxMenuEntry> PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync(_telephony.OvhPabxIvrMenuEntryActionEnum action, string billingAccount, string dtmf, long menuId, long position, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string actionParam) {
            return default(Task<_telephony.OvhPabxMenuEntry>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(string billingAccount, long entryId, long menuId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public Task<_telephony.OvhPabxMenuEntry> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(string billingAccount, long entryId, long menuId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxMenuEntry>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}", billingAccount, entryId, menuId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync(_telephony.OvhPabxMenuEntry body, string billingAccount, long entryId, long menuId, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameRecordsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/records", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        public Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxRecord>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameSoundAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/sound", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        public Task<_telephony.OvhPabxSound> GetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync(string billingAccount, string serviceName, long soundId) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxSound>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}", billingAccount, serviceName, soundId));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/soundUpload
        public Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string documentId, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] string url) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        public Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameTtsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/tts", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        public System.Threading.Tasks.Task PostTelephonyBillingAccountOvhPabxServiceNameTtsAsync(string billingAccount, string serviceName, string text, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OvhPabxTtsVoiceEnum voice) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public Task<_telephony.OvhPabxTts> GetTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OvhPabxTts>(string.Format("/telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync(_telephony.OvhPabxTts body, string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/phonebook
        public Task<System.String[]> GetTelephonyBillingAccountPhonebookAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/phonebook", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/phonebook
        public Task<System.String> PostTelephonyBillingAccountPhonebookAsync(string billingAccount, string name) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountPhonebookBookKeyAsync(string billingAccount, string bookKey) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        public Task<_telephony.PhonebookMaster> GetTelephonyBillingAccountPhonebookBookKeyAsync(string billingAccount, string bookKey) {
            return _client.GetFromJsonAsync<_telephony.PhonebookMaster>(string.Format("/telephony/{billingAccount}/phonebook/{bookKey}", billingAccount, bookKey));
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountPhonebookBookKeyAsync(_telephony.PhonebookMaster body, string billingAccount, string bookKey) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/export
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountPhonebookBookKeyExportAsync(string billingAccount, string bookKey, _telephony.ContactsExportFormatsEnum format) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/phonebook/{bookKey}/export?{queryParameters}", billingAccount, bookKey, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/import
        public Task<_telephony.Task> PostTelephonyBillingAccountPhonebookBookKeyImportAsync(string billingAccount, string bookKey, string documentId) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64[]> GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact", billingAccount, bookKey));
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        public Task<System.Int64> PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync(string billingAccount, string bookKey, string group, string name, string surname, [System.Runtime.InteropServices.OptionalAttribute()] string homeMobile, [System.Runtime.InteropServices.OptionalAttribute()] string homePhone, [System.Runtime.InteropServices.OptionalAttribute()] string workMobile, [System.Runtime.InteropServices.OptionalAttribute()] string workPhone) {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public Task<_telephony.PhonebookContact> GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(string billingAccount, string bookKey, long id) {
            return _client.GetFromJsonAsync<_telephony.PhonebookContact>(string.Format("/telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}", billingAccount, bookKey, id));
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync(_telephony.PhonebookContact body, string billingAccount, string bookKey, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability
        public Task<System.Int64[]> GetTelephonyBillingAccountPortabilityAsync(string billingAccount) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/portability", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}
        public Task<_telephony.Portability> GetTelephonyBillingAccountPortabilityIdAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<_telephony.Portability>(string.Format("/telephony/{billingAccount}/portability/{id}", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/canBeCancelled
        public Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdCanBeCancelledAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/portability/{id}/canBeCancelled", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/canBeExecuted
        public Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdCanBeExecutedAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/portability/{id}/canBeExecuted", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/cancel
        public System.Threading.Tasks.Task PostTelephonyBillingAccountPortabilityIdCancelAsync(string billingAccount, long id, [System.Runtime.InteropServices.OptionalAttribute()] string reason) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/changeDate
        public System.Threading.Tasks.Task PostTelephonyBillingAccountPortabilityIdChangeDateAsync(string billingAccount, System.DateTime date, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/dateCanBeChanged
        public Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdDateCanBeChangedAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<bool>(string.Format("/telephony/{billingAccount}/portability/{id}/dateCanBeChanged", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document
        public Task<System.Int64[]> GetTelephonyBillingAccountPortabilityIdDocumentAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/portability/{id}/document", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document
        public Task<_telephony.PortabilityDocument> PostTelephonyBillingAccountPortabilityIdDocumentAsync(string billingAccount, long id, string name, [System.Runtime.InteropServices.OptionalAttribute()] string description) {
            return default(Task<_telephony.PortabilityDocument>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(string billingAccount, long documentId, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        public Task<_telephony.PortabilityDocument> GetTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(string billingAccount, long documentId, long id) {
            return _client.GetFromJsonAsync<_telephony.PortabilityDocument>(string.Format("/telephony/{billingAccount}/portability/{id}/document/{documentId}", billingAccount, documentId, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync(_telephony.PortabilityDocument body, string billingAccount, long documentId, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/execute
        public System.Threading.Tasks.Task PostTelephonyBillingAccountPortabilityIdExecuteAsync(string billingAccount, long id) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/relaunch
        public Task<_telephony.PortabilityFixErrorPossibleParameters> GetTelephonyBillingAccountPortabilityIdRelaunchAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<_telephony.PortabilityFixErrorPossibleParameters>(string.Format("/telephony/{billingAccount}/portability/{id}/relaunch", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/relaunch
        public System.Threading.Tasks.Task PostTelephonyBillingAccountPortabilityIdRelaunchAsync(string billingAccount, long id, _complexType.SafeKeyValue<string> parameters) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/status
        public Task<_telephony.PortabilityStep[]> GetTelephonyBillingAccountPortabilityIdStatusAsync(string billingAccount, long id) {
            return _client.GetFromJsonAsync<_telephony.PortabilityStep[]>(string.Format("/telephony/{billingAccount}/portability/{id}/status", billingAccount, id));
        }
        
        // Path: /telephony/{billingAccount}/redirect
        public Task<System.String[]> GetTelephonyBillingAccountRedirectAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/redirect", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}
        public Task<_telephony.Redirect> GetTelephonyBillingAccountRedirectServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Redirect>(string.Format("/telephony/{billingAccount}/redirect/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountRedirectServiceNameAsync(_telephony.Redirect body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}/changeDestination
        public Task<_telephony.Task> PostTelephonyBillingAccountRedirectServiceNameChangeDestinationAsync(string billingAccount, string destination, string serviceName) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/rsva
        public Task<System.String[]> GetTelephonyBillingAccountRsvaAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/rsva", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}
        public Task<_telephony.Rsva> GetTelephonyBillingAccountRsvaServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Rsva>(string.Format("/telephony/{billingAccount}/rsva/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountRsvaServiceNameAsync(_telephony.Rsva body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/allowedRateCodes
        public Task<_telephony.RateCodeInformation[]> GetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.RateCodeInformation[]>(string.Format("/telephony/{billingAccount}/rsva/{serviceName}/allowedRateCodes", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/cancelScheduledRateCode
        public System.Threading.Tasks.Task PostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/currentRateCode
        public Task<_telephony.DetailedRateCodeInformation> GetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DetailedRateCodeInformation>(string.Format("/telephony/{billingAccount}/rsva/{serviceName}/currentRateCode", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/scheduleRateCode
        public Task<_telephony.DetailedRateCodeInformation> PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeAsync(string billingAccount, string rateCode, string serviceName) {
            return default(Task<_telephony.DetailedRateCodeInformation>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/scheduledRateCode
        public Task<_telephony.DetailedRateCodeInformation> GetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DetailedRateCodeInformation>(string.Format("/telephony/{billingAccount}/rsva/{serviceName}/scheduledRateCode", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/scheduler
        public Task<System.String[]> GetTelephonyBillingAccountSchedulerAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/scheduler", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}
        public Task<_telephony.Scheduler> GetTelephonyBillingAccountSchedulerServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Scheduler>(string.Format("/telephony/{billingAccount}/scheduler/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountSchedulerServiceNameAsync(_telephony.Scheduler body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events
        public Task<System.String[]> GetTelephonyBillingAccountSchedulerServiceNameEventsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.SchedulerCategoryEnum categories, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateEndFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateEndTo, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateStartFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime dateStartTo) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/scheduler/{serviceName}/events?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events
        public System.Threading.Tasks.Task PostTelephonyBillingAccountSchedulerServiceNameEventsAsync(string billingAccount, _telephony.SchedulerCategoryEnum category, System.DateTime dateEnd, System.DateTime dateStart, string serviceName, string title, [System.Runtime.InteropServices.OptionalAttribute()] string description, [System.Runtime.InteropServices.OptionalAttribute()] string uid) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountSchedulerServiceNameEventsUidAsync(string billingAccount, string serviceName, string uid) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public Task<_telephony.SchedulerEvent> GetTelephonyBillingAccountSchedulerServiceNameEventsUidAsync(string billingAccount, string serviceName, string uid) {
            return _client.GetFromJsonAsync<_telephony.SchedulerEvent>(string.Format("/telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}", billingAccount, serviceName, uid));
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountSchedulerServiceNameEventsUidAsync(_telephony.SchedulerEvent body, string billingAccount, string serviceName, string uid) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/importIcsCalendar
        public Task<_telephony.Task> PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarAsync(string billingAccount, string serviceName, string url) {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/screen
        public Task<System.String[]> GetTelephonyBillingAccountScreenAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/screen", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}
        public Task<_telephony.Screen> GetTelephonyBillingAccountScreenServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Screen>(string.Format("/telephony/{billingAccount}/screen/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountScreenServiceNameAsync(_telephony.Screen body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists
        public Task<System.Int64[]> GetTelephonyBillingAccountScreenServiceNameScreenListsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/screen/{serviceName}/screenLists", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists
        public System.Threading.Tasks.Task PostTelephonyBillingAccountScreenServiceNameScreenListsAsync(string billingAccount, _telephony.ScreenListNatureEnum nature, string serviceName, _telephony.ScreenListTypeEnum type, [System.Runtime.InteropServices.OptionalAttribute()] string callNumber) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountScreenServiceNameScreenListsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        public Task<_telephony.ScreenList> GetTelephonyBillingAccountScreenServiceNameScreenListsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.ScreenList>(string.Format("/telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service
        public Task<System.String[]> GetTelephonyBillingAccountServiceAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/service", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountServiceServiceNameAsync(string billingAccount, _telephony.TerminationReasonEnum reason, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string details) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        public Task<_telephony.TelephonyService> GetTelephonyBillingAccountServiceServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TelephonyService>(string.Format("/telephony/{billingAccount}/service/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountServiceServiceNameAsync(_telephony.TelephonyService body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/cancelTermination
        public System.Threading.Tasks.Task PostTelephonyBillingAccountServiceServiceNameCancelTerminationAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/changeOfBillingAccount
        public System.Threading.Tasks.Task PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountAsync(string billingAccount, string billingAccountDestination, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/diagnosticReports
        public Task<_telephony.DiagnosticReport[]> GetTelephonyBillingAccountServiceServiceNameDiagnosticReportsAsync(string billingAccount, _telephony.DiagnosticReportIndexEnum dayInterval, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DiagnosticReport[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/diagnosticReports?{queryParamet" +
                        "ers}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory
        public Task<_telephony.DirectoryInfo> GetTelephonyBillingAccountServiceServiceNameDirectoryAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryInfo>(string.Format("/telephony/{billingAccount}/service/{serviceName}/directory", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory
        public System.Threading.Tasks.Task PutTelephonyBillingAccountServiceServiceNameDirectoryAsync(_telephony.DirectoryInfo body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/fetchEntrepriseInformations
        public Task<_telephony.EntrepriseNumberInformationsTask> PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsAsync(string billingAccount, string entrepriseNumber, string serviceName) {
            return default(Task<_telephony.EntrepriseNumberInformationsTask>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/getDirectoryServiceCode
        public Task<_telephony.DirectoryHeadingPJ[]> GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeAsync(string apeCode, string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryHeadingPJ[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/directory/getDirectoryServiceCo" +
                        "de?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/getWayTypes
        public Task<_telephony.DirectoryWayType[]> GetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.DirectoryWayType[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/directory/getWayTypes", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        public Task<_telephony.EventToken> GetTelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.EventToken>(string.Format("/telephony/{billingAccount}/service/{serviceName}/eventToken", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        public Task<System.String> PostTelephonyBillingAccountServiceServiceNameEventTokenAsync(string billingAccount, _telephony.TokenExpirationEnum expiration, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/faxConsumption
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameFaxConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.FaxConsumptionWayTypeEnum wayType) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/faxConsumption?{queryParameters" +
                        "}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/faxConsumption/{consumptionId}
        public Task<_telephony.FaxConsumption> GetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.FaxConsumption>(string.Format("/telephony/{billingAccount}/service/{serviceName}/faxConsumption/{consumptionId}", billingAccount, consumptionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        public Task<_telephony.OfferChange> GetTelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.OfferChange>(string.Format("/telephony/{billingAccount}/service/{serviceName}/offerChange", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        public System.Threading.Tasks.Task PostTelephonyBillingAccountServiceServiceNameOfferChangeAsync(string billingAccount, string offer, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChanges
        public Task<_telephony.LineOffer[]> GetTelephonyBillingAccountServiceServiceNameOfferChangesAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.LineOffer[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/offerChanges", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameOfferTaskAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskActionEnum action, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum status, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.OfferTaskTypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/offerTask?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        public Task<_telephony.OfferTask> GetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync(string billingAccount, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_telephony.OfferTask>(string.Format("/telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}", billingAccount, serviceName, taskId));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync(_telephony.OfferTask body, string billingAccount, string serviceName, long taskId) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionDestinationTypeEnum destinationType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionPlanTypeEnum planType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionWayTypeEnum wayType) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption?{query" +
                        "Parameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption/{consumptionId}
        public Task<_telephony.PreviousVoiceConsumption> GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.PreviousVoiceConsumption>(string.Format("/telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption/{consu" +
                        "mptionId}", billingAccount, consumptionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/repaymentConsumption
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption?{queryPara" +
                        "meters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/repaymentConsumption/{consumptionId}
        public Task<_telephony.RepaymentConsumption> GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.RepaymentConsumption>(string.Format("/telephony/{billingAccount}/service/{serviceName}/repaymentConsumption/{consumpti" +
                        "onId}", billingAccount, consumptionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/task
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameTaskAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string action, [System.Runtime.InteropServices.OptionalAttribute()] string serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/task?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/task/{taskId}
        public Task<_telephony.Task> GetTelephonyBillingAccountServiceServiceNameTaskTaskIdAsync(string billingAccount, string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_telephony.Task>(string.Format("/telephony/{billingAccount}/service/{serviceName}/task/{taskId}", billingAccount, serviceName, taskId));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/voiceConsumption
        public Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeFrom, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDatetimeTo, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionDestinationTypeEnum destinationType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionPlanTypeEnum planType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoiceConsumptionWayTypeEnum wayType) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/service/{serviceName}/voiceConsumption?{queryParamete" +
                        "rs}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/voiceConsumption/{consumptionId}
        public Task<_telephony.VoiceConsumption> GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdAsync(string billingAccount, long consumptionId, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoiceConsumption>(string.Format("/telephony/{billingAccount}/service/{serviceName}/voiceConsumption/{consumptionId" +
                        "}", billingAccount, consumptionId, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/serviceInfos
        public Task<_services.Service> GetTelephonyBillingAccountServiceInfosAsync(string billingAccount) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/telephony/{billingAccount}/serviceInfos", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/serviceInfos
        public System.Threading.Tasks.Task PutTelephonyBillingAccountServiceInfosAsync(_services.Service body, string billingAccount) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/task
        public Task<System.Int64[]> GetTelephonyBillingAccountTaskAsync(string billingAccount, [System.Runtime.InteropServices.OptionalAttribute()] string action, [System.Runtime.InteropServices.OptionalAttribute()] string serviceType, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/task?{queryParameters}", billingAccount, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/task/{taskId}
        public Task<_telephony.Task> GetTelephonyBillingAccountTaskTaskIdAsync(string billingAccount, long taskId) {
            return _client.GetFromJsonAsync<_telephony.Task>(string.Format("/telephony/{billingAccount}/task/{taskId}", billingAccount, taskId));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition
        public Task<System.String[]> GetTelephonyBillingAccountTimeConditionAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/timeCondition", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}
        public Task<_telephony.GenericScreen> GetTelephonyBillingAccountTimeConditionServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.GenericScreen>(string.Format("/telephony/{billingAccount}/timeCondition/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition
        public Task<System.Int64[]> GetTelephonyBillingAccountTimeConditionServiceNameConditionAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/timeCondition/{serviceName}/condition", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition
        public Task<_telephony.TimeCondition> PostTelephonyBillingAccountTimeConditionServiceNameConditionAsync(string billingAccount, _telephony.TimeConditionsDayEnum day, string hourBegin, string hourEnd, _telephony.TimeConditionsPolicyEnum policy, string serviceName) {
            return default(Task<_telephony.TimeCondition>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public Task<_telephony.TimeCondition> GetTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TimeCondition>(string.Format("/telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync(_telephony.TimeCondition body, string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/options
        public Task<_telephony.TimeConditionOptions> GetTelephonyBillingAccountTimeConditionServiceNameOptionsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TimeConditionOptions>(string.Format("/telephony/{billingAccount}/timeCondition/{serviceName}/options", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/options
        public System.Threading.Tasks.Task PutTelephonyBillingAccountTimeConditionServiceNameOptionsAsync(_telephony.TimeConditionOptions body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/transferSecurityDeposit
        public System.Threading.Tasks.Task PostTelephonyBillingAccountTransferSecurityDepositAsync(long amount, string billingAccount, string billingAccountDestination) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/trunk
        public Task<System.String[]> GetTelephonyBillingAccountTrunkAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/trunk", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}
        public Task<_telephony.Trunk> GetTelephonyBillingAccountTrunkServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Trunk>(string.Format("/telephony/{billingAccount}/trunk/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/channelsPacksRepartition
        public Task<_telephony.TrunkSimultaneousPacksRepartition> GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionAsync(string billingAccount, long quantity, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TrunkSimultaneousPacksRepartition>(string.Format("/telephony/{billingAccount}/trunk/{serviceName}/channelsPacksRepartition?{queryPa" +
                        "rameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        public Task<System.String[]> GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        public Task<_telephony.TrunkExternalDisplayedNumber> PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync(string billingAccount, string number, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool autoValidation) {
            return default(Task<_telephony.TrunkExternalDisplayedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync(string billingAccount, string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        public Task<_telephony.TrunkExternalDisplayedNumber> GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync(string billingAccount, string number, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.TrunkExternalDisplayedNumber>(string.Format("/telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}", billingAccount, number, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}/validate
        public Task<_telephony.TrunkExternalDisplayedNumberValidation> PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateAsync(string billingAccount, string number, string serviceName) {
            return default(Task<_telephony.TrunkExternalDisplayedNumberValidation>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail
        public Task<System.String[]> GetTelephonyBillingAccountVoicemailAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/voicemail", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}
        public Task<_telephony.Voicemail> GetTelephonyBillingAccountVoicemailServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Voicemail>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}
        public System.Threading.Tasks.Task PutTelephonyBillingAccountVoicemailServiceNameAsync(_telephony.Voicemail body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories
        public Task<System.Int64[]> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoicemailMessageFolderDirectoryEnum dir) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/directories?{queryParameters}" +
                        "", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        public Task<_telephony.VoicemailMessages> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailMessages>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/download
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadAsync(string billingAccount, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.ServiceVoicemailAudioFormatEnum format) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/download?{qu" +
                        "eryParameters}", billingAccount, id, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/move
        public System.Threading.Tasks.Task PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveAsync(string billingAccount, _telephony.VoicemailMessageFolderDirectoryEnum dir, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings
        public Task<System.Int64[]> GetTelephonyBillingAccountVoicemailServiceNameGreetingsAsync(string billingAccount, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.VoicemailMessageFolderGreetingEnum dir) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/greetings?{queryParameters}", billingAccount, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings
        public Task<System.Int64> PostTelephonyBillingAccountVoicemailServiceNameGreetingsAsync(string billingAccount, _telephony.VoicemailMessageFolderGreetingEnum dir, string documentId, string serviceName) {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        public System.Threading.Tasks.Task DeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync(string billingAccount, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        public Task<_telephony.VoicemailGreetings> GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync(string billingAccount, long id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailGreetings>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}", billingAccount, id, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/download
        public Task<_telephony.PcsFile> GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadAsync(string billingAccount, long id, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _telephony.ServiceVoicemailAudioFormatEnum format) {
            return _client.GetFromJsonAsync<_telephony.PcsFile>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/download?{quer" +
                        "yParameters}", billingAccount, id, serviceName, queryParameters));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/move
        public System.Threading.Tasks.Task PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveAsync(string billingAccount, _telephony.VoicemailMessageFolderGreetingEnum dir, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/migrateOnNewVersion
        public System.Threading.Tasks.Task PostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionAsync(string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings
        public Task<_telephony.VoicemailProperties> GetTelephonyBillingAccountVoicemailServiceNameSettingsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailProperties>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/settings", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings
        public System.Threading.Tasks.Task PutTelephonyBillingAccountVoicemailServiceNameSettingsAsync(_telephony.VoicemailProperties body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/changePassword
        public System.Threading.Tasks.Task PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordAsync(string billingAccount, string password, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/changeRouting
        public System.Threading.Tasks.Task PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingAsync(string billingAccount, _telephony.VoicefaxRoutingEnum routing, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/routing
        public Task<_telephony.VoicefaxRoutingEnum> GetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicefaxRoutingEnum>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/settings/routing", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/voicemailNumbers
        public Task<_telephony.VoicemailNumbers> GetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VoicemailNumbers>(string.Format("/telephony/{billingAccount}/voicemail/{serviceName}/settings/voicemailNumbers", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/vxml
        public Task<System.String[]> GetTelephonyBillingAccountVxmlAsync(string billingAccount) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/telephony/{billingAccount}/vxml", billingAccount));
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}
        public Task<_telephony.Vxml> GetTelephonyBillingAccountVxmlServiceNameAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Vxml>(string.Format("/telephony/{billingAccount}/vxml/{serviceName}", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings
        public Task<_telephony.VxmlProperties> GetTelephonyBillingAccountVxmlServiceNameSettingsAsync(string billingAccount, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.VxmlProperties>(string.Format("/telephony/{billingAccount}/vxml/{serviceName}/settings", billingAccount, serviceName));
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings
        public System.Threading.Tasks.Task PutTelephonyBillingAccountVxmlServiceNameSettingsAsync(_telephony.VxmlProperties body, string billingAccount, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings/logs
        public Task<_telephony.TemporaryLogsLink> PostTelephonyBillingAccountVxmlServiceNameSettingsLogsAsync(string billingAccount, string serviceName) {
            return default(Task<_telephony.TemporaryLogsLink>);
        }
        
        // Path: /veeam/veeamEnterprise
        public Task<System.String[]> GetVeeamVeeamEnterpriseAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/veeam/veeamEnterprise?{queryParameters}", queryParameters));
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}
        public Task<_veeam_veeamEnterprise.AccountWithIAM> GetVeeamVeeamEnterpriseServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_veeam_veeamEnterprise.AccountWithIAM>(string.Format("/veeam/veeamEnterprise/{serviceName}", serviceName));
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/confirmTermination
        public Task<System.String> PostVeeamVeeamEnterpriseServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/register
        public Task<_veeam_veeamEnterprise.Task[]> PostVeeamVeeamEnterpriseServiceNameRegisterAsync(string ip, string password, string serviceName, string username) {
            return default(Task<_veeam_veeamEnterprise.Task[]>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/serviceInfos
        public Task<_services.Service> GetVeeamVeeamEnterpriseServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/veeam/veeamEnterprise/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutVeeamVeeamEnterpriseServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/task
        public Task<System.Int64[]> GetVeeamVeeamEnterpriseServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _veeamEnterprise.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/veeam/veeamEnterprise/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/task/{taskId}
        public Task<_veeam_veeamEnterprise.Task> GetVeeamVeeamEnterpriseServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_veeam_veeamEnterprise.Task>(string.Format("/veeam/veeamEnterprise/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/terminate
        public Task<System.String> PostVeeamVeeamEnterpriseServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/update
        public Task<_veeam_veeamEnterprise.Task[]> PostVeeamVeeamEnterpriseServiceNameUpdateAsync(string ip, string password, string serviceName, string username) {
            return default(Task<_veeam_veeamEnterprise.Task[]>);
        }
        
        // Path: /veeamCloudConnect
        public Task<System.String[]> GetVeeamCloudConnectAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/veeamCloudConnect?{queryParameters}", queryParameters));
        }
        
        // Path: /veeamCloudConnect/{serviceName}
        public Task<_veeamCloudConnect.AccountWithIAM> GetVeeamCloudConnectServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_veeamCloudConnect.AccountWithIAM>(string.Format("/veeamCloudConnect/{serviceName}", serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository
        public Task<System.String[]> GetVeeamCloudConnectServiceNameBackupRepositoryAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/veeamCloudConnect/{serviceName}/backupRepository", serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository
        public Task<_veeamCloudConnect.Task[]> PostVeeamCloudConnectServiceNameBackupRepositoryAsync(string serviceName) {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        public Task<_veeamCloudConnect.Task[]> DeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync(string inventoryName, string serviceName) {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        public Task<_veeamCloudConnect.BackupRepository> GetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync(string inventoryName, string serviceName) {
            return _client.GetFromJsonAsync<_veeamCloudConnect.BackupRepository>(string.Format("/veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}", inventoryName, serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}/upgradeQuota
        public Task<_veeamCloudConnect.Task[]> PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaAsync(string inventoryName, long newQuota, string serviceName) {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/capabilities
        public Task<_veeamCloudConnect.offerCapabilities> GetVeeamCloudConnectServiceNameCapabilitiesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_veeamCloudConnect.offerCapabilities>(string.Format("/veeamCloudConnect/{serviceName}/capabilities", serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/orderableUpgrade
        public Task<_veeamCloudConnect.Offer[]> GetVeeamCloudConnectServiceNameOrderableUpgradeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_veeamCloudConnect.Offer[]>(string.Format("/veeamCloudConnect/{serviceName}/orderableUpgrade", serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/resetPassword
        public Task<_veeamCloudConnect.Task> PostVeeamCloudConnectServiceNameResetPasswordAsync(string serviceName) {
            return default(Task<_veeamCloudConnect.Task>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/serviceInfos
        public Task<_services.Service> GetVeeamCloudConnectServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/veeamCloudConnect/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutVeeamCloudConnectServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /veeamCloudConnect/{serviceName}/task
        public Task<System.Int64[]> GetVeeamCloudConnectServiceNameTaskAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string name, [System.Runtime.InteropServices.OptionalAttribute()] _veeamCloudConnect.TaskStateEnum state) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/veeamCloudConnect/{serviceName}/task?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /veeamCloudConnect/{serviceName}/task/{taskId}
        public Task<_veeamCloudConnect.Task> GetVeeamCloudConnectServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_veeamCloudConnect.Task>(string.Format("/veeamCloudConnect/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /vip
        public Task<System.String[]> GetVipAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vip?{queryParameters}", queryParameters));
        }
        
        // Path: /vip/{serviceName}
        public Task<_vip.SupportVipWithIAM> GetVipServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vip.SupportVipWithIAM>(string.Format("/vip/{serviceName}", serviceName));
        }
        
        // Path: /vip/{serviceName}/serviceInfos
        public Task<_services.Service> GetVipServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/vip/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /vip/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutVipServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps
        public Task<System.String[]> GetVpsAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps?{queryParameters}", queryParameters));
        }
        
        // Path: /vps/{serviceName}
        public Task<_vps.VPSWithIAM> GetVpsServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.VPSWithIAM>(string.Format("/vps/{serviceName}", serviceName));
        }
        
        // Path: /vps/{serviceName}
        public System.Threading.Tasks.Task PutVpsServiceNameAsync(_vps.VPS body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/abortSnapshot
        public System.Threading.Tasks.Task PostVpsServiceNameAbortSnapshotAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/activeOptions
        public Task<_vps.VpsOptionEnum[]> GetVpsServiceNameActiveOptionsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.VpsOptionEnum[]>(string.Format("/vps/{serviceName}/activeOptions", serviceName));
        }
        
        // Path: /vps/{serviceName}/automatedBackup
        public Task<_vps.AutomatedBackup> GetVpsServiceNameAutomatedBackupAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.AutomatedBackup>(string.Format("/vps/{serviceName}/automatedBackup", serviceName));
        }
        
        // Path: /vps/{serviceName}/automatedBackup/attachedBackup
        public Task<_vps_automatedBackup.Attached[]> GetVpsServiceNameAutomatedBackupAttachedBackupAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps_automatedBackup.Attached[]>(string.Format("/vps/{serviceName}/automatedBackup/attachedBackup", serviceName));
        }
        
        // Path: /vps/{serviceName}/automatedBackup/detachBackup
        public Task<_vps.Task> PostVpsServiceNameAutomatedBackupDetachBackupAsync(_vps_automatedBackup_detachBackup.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/reschedule
        public Task<_vps.Task> PostVpsServiceNameAutomatedBackupRescheduleAsync(_vps_automatedBackup_reschedule.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/restore
        public Task<_vps.Task> PostVpsServiceNameAutomatedBackupRestoreAsync(_vps_automatedBackup_restore.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/restorePoints
        public Task<System.DateTime[]> GetVpsServiceNameAutomatedBackupRestorePointsAsync(string serviceName, _vps.RestoreStateEnum state) {
            return _client.GetFromJsonAsync<System.DateTime[]>(string.Format("/vps/{serviceName}/automatedBackup/restorePoints?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/availableUpgrade
        public Task<_vps.Model[]> GetVpsServiceNameAvailableUpgradeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Model[]>(string.Format("/vps/{serviceName}/availableUpgrade", serviceName));
        }
        
        // Path: /vps/{serviceName}/backupftp
        public Task<_vps.BackupFtp> GetVpsServiceNameBackupftpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.BackupFtp>(string.Format("/vps/{serviceName}/backupftp", serviceName));
        }
        
        // Path: /vps/{serviceName}/backupftp/access
        public Task<System.String[]> GetVpsServiceNameBackupftpAccessAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/{serviceName}/backupftp/access", serviceName));
        }
        
        // Path: /vps/{serviceName}/backupftp/access
        public Task<_dedicated_server.Task> PostVpsServiceNameBackupftpAccessAsync(_vps_backupftp_access.post body, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        public Task<_dedicated_server.Task> DeleteVpsServiceNameBackupftpAccessIpBlockAsync(string ipBlock, string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        public Task<_dedicated_server.BackupFtpAcl> GetVpsServiceNameBackupftpAccessIpBlockAsync(string ipBlock, string serviceName) {
            return _client.GetFromJsonAsync<_dedicated_server.BackupFtpAcl>(string.Format("/vps/{serviceName}/backupftp/access/{ipBlock}", ipBlock, serviceName));
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        public System.Threading.Tasks.Task PutVpsServiceNameBackupftpAccessIpBlockAsync(_dedicated_server.BackupFtpAcl body, string ipBlock, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/backupftp/authorizableBlocks
        public Task<System.String[]> GetVpsServiceNameBackupftpAuthorizableBlocksAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/{serviceName}/backupftp/authorizableBlocks", serviceName));
        }
        
        // Path: /vps/{serviceName}/backupftp/password
        public Task<_dedicated_server.Task> PostVpsServiceNameBackupftpPasswordAsync(string serviceName) {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/changeContact
        public Task<System.Int64[]> PostVpsServiceNameChangeContactAsync(_services.changeContact body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/confirmTermination
        public Task<System.String> PostVpsServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/createSnapshot
        public Task<_vps.Task> PostVpsServiceNameCreateSnapshotAsync(_vps_createSnapshot.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/datacenter
        public Task<_vps.Datacenter> GetVpsServiceNameDatacenterAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Datacenter>(string.Format("/vps/{serviceName}/datacenter", serviceName));
        }
        
        // Path: /vps/datacenter
        public Task<System.String[]> GetVpsDatacenterAsync([System.Runtime.InteropServices.OptionalAttribute()] _nichandle.CountryEnum country) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/datacenter?{queryParameters}", queryParameters));
        }
        
        // Path: /vps/{serviceName}/disks
        public Task<System.Int64[]> GetVpsServiceNameDisksAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/disks", serviceName));
        }
        
        // Path: /vps/{serviceName}/disks/{id}
        public Task<_vps.Disk> GetVpsServiceNameDisksIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Disk>(string.Format("/vps/{serviceName}/disks/{id}", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/disks/{id}
        public System.Threading.Tasks.Task PutVpsServiceNameDisksIdAsync(_vps.Disk body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/disks/{id}/monitoring
        public Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetVpsServiceNameDisksIdMonitoringAsync(long id, _vps.VpsMonitoringPeriodEnum period, string serviceName, _vps_disk.StatisticTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType_UnitAndValues_vps.VpsTimestampValue>(string.Format("/vps/{serviceName}/disks/{id}/monitoring?{queryParameters}", id, serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/disks/{id}/use
        public Task<_complexType.UnitAndValue_double> GetVpsServiceNameDisksIdUseAsync(long id, string serviceName, _vps_disk.StatisticTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.UnitAndValue_double>(string.Format("/vps/{serviceName}/disks/{id}/use?{queryParameters}", id, serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/distribution
        public Task<_vps.Template> GetVpsServiceNameDistributionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Template>(string.Format("/vps/{serviceName}/distribution", serviceName));
        }
        
        // Path: /vps/{serviceName}/distribution/software
        public Task<System.Int64[]> GetVpsServiceNameDistributionSoftwareAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/distribution/software", serviceName));
        }
        
        // Path: /vps/{serviceName}/distribution/software/{softwareId}
        public Task<_vps.Software> GetVpsServiceNameDistributionSoftwareSoftwareIdAsync(string serviceName, long softwareId) {
            return _client.GetFromJsonAsync<_vps.Software>(string.Format("/vps/{serviceName}/distribution/software/{softwareId}", serviceName, softwareId));
        }
        
        // Path: /vps/{serviceName}/getConsoleUrl
        public Task<System.String> PostVpsServiceNameGetConsoleUrlAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/images/available
        public Task<System.String[]> GetVpsServiceNameImagesAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/{serviceName}/images/available", serviceName));
        }
        
        // Path: /vps/{serviceName}/images/available/{id}
        public Task<_vps.Image> GetVpsServiceNameImagesAvailableIdAsync(string id, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Image>(string.Format("/vps/{serviceName}/images/available/{id}", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/images/current
        public Task<_vps.Image> GetVpsServiceNameImagesCurrentAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Image>(string.Format("/vps/{serviceName}/images/current", serviceName));
        }
        
        // Path: /vps/{serviceName}/ipCountryAvailable
        public Task<_vps_ip.GeolocationEnum[]> GetVpsServiceNameIpCountryAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps_ip.GeolocationEnum[]>(string.Format("/vps/{serviceName}/ipCountryAvailable", serviceName));
        }
        
        // Path: /vps/{serviceName}/ips
        public Task<System.String[]> GetVpsServiceNameIpsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/{serviceName}/ips", serviceName));
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        public System.Threading.Tasks.Task DeleteVpsServiceNameIpsIpAddressAsync(string ipAddress, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        public Task<_vps.Ip> GetVpsServiceNameIpsIpAddressAsync(string ipAddress, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Ip>(string.Format("/vps/{serviceName}/ips/{ipAddress}", ipAddress, serviceName));
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        public System.Threading.Tasks.Task PutVpsServiceNameIpsIpAddressAsync(_vps.Ip body, string ipAddress, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/migration2016
        public Task<_vps_migration.VPS2016to2020> GetVpsServiceNameMigration2016Async(string serviceName) {
            return _client.GetFromJsonAsync<_vps_migration.VPS2016to2020>(string.Format("/vps/{serviceName}/migration2016", serviceName));
        }
        
        // Path: /vps/{serviceName}/migration2016
        public Task<_vps.Task> PostVpsServiceNameMigration2016Async(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/migration2018
        public Task<_vps_migration.VPS2018to2020> GetVpsServiceNameMigration2018Async(string serviceName) {
            return _client.GetFromJsonAsync<_vps_migration.VPS2018to2020>(string.Format("/vps/{serviceName}/migration2018", serviceName));
        }
        
        // Path: /vps/{serviceName}/migration2018
        public Task<_vps.Task> PostVpsServiceNameMigration2018Async(_vps_migration2018.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/models
        public Task<_vps.Model[]> GetVpsServiceNameModelsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Model[]>(string.Format("/vps/{serviceName}/models", serviceName));
        }
        
        // Path: /vps/{serviceName}/monitoring
        public Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetVpsServiceNameMonitoringAsync(_vps.VpsMonitoringPeriodEnum period, string serviceName, _vps.VpsStatisticTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType_UnitAndValues_vps.VpsTimestampValue>(string.Format("/vps/{serviceName}/monitoring?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/openConsoleAccess
        public Task<_vps.Vnc> PostVpsServiceNameOpenConsoleAccessAsync(_vps_openConsoleAccess.post body, string serviceName) {
            return default(Task<_vps.Vnc>);
        }
        
        // Path: /vps/{serviceName}/option
        public Task<_vps.VpsOptionEnum[]> GetVpsServiceNameOptionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.VpsOptionEnum[]>(string.Format("/vps/{serviceName}/option", serviceName));
        }
        
        // Path: /vps/{serviceName}/option/{option}
        public System.Threading.Tasks.Task DeleteVpsServiceNameOptionOptionAsync(_vps.VpsOptionEnum option, string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] bool deleteNow) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/option/{option}
        public Task<_vps.Option> GetVpsServiceNameOptionOptionAsync(_vps.VpsOptionEnum option, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Option>(string.Format("/vps/{serviceName}/option/{option}", option, serviceName));
        }
        
        // Path: /vps/order/rule/datacenter
        public Task<_vps_order_rule.Datacenters> GetVpsOrderRuleDatacenterAsync(_nichandle.OvhSubsidiaryEnum ovhSubsidiary, string planCode, [System.Runtime.InteropServices.OptionalAttribute()] string os) {
            return _client.GetFromJsonAsync<_vps_order_rule.Datacenters>(string.Format("/vps/order/rule/datacenter?{queryParameters}", queryParameters));
        }
        
        // Path: /vps/order/rule/osChoices
        public Task<_vps_order_rule.OSChoices> GetVpsOrderRuleOsChoicesAsync(string datacenter, string os) {
            return _client.GetFromJsonAsync<_vps_order_rule.OSChoices>(string.Format("/vps/order/rule/osChoices?{queryParameters}", queryParameters));
        }
        
        // Path: /vps/{serviceName}/reboot
        public Task<_vps.Task> PostVpsServiceNameRebootAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/rebuild
        public Task<_vps.Task> PostVpsServiceNameRebuildAsync(_vps_rebuild.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/reinstall
        public Task<_vps.Task> PostVpsServiceNameReinstallAsync(_vps_reinstall.post body, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains
        public Task<System.String[]> GetVpsServiceNameSecondaryDnsDomainsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vps/{serviceName}/secondaryDnsDomains", serviceName));
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains
        public System.Threading.Tasks.Task PostVpsServiceNameSecondaryDnsDomainsAsync(_vps_secondaryDnsDomains.post body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        public System.Threading.Tasks.Task DeleteVpsServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        public Task<_secondaryDns.SecondaryDNS> GetVpsServiceNameSecondaryDnsDomainsDomainAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNS>(string.Format("/vps/{serviceName}/secondaryDnsDomains/{domain}", domain, serviceName));
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        public System.Threading.Tasks.Task PutVpsServiceNameSecondaryDnsDomainsDomainAsync(_secondaryDns.SecondaryDNS body, string domain, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        public Task<_secondaryDns.SecondaryDNSNameServer> GetVpsServiceNameSecondaryDnsDomainsDomainDnsServerAsync(string domain, string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNSNameServer>(string.Format("/vps/{serviceName}/secondaryDnsDomains/{domain}/dnsServer", domain, serviceName));
        }
        
        // Path: /vps/{serviceName}/secondaryDnsNameServerAvailable
        public Task<_secondaryDns.SecondaryDNSNameServer> GetVpsServiceNameSecondaryDnsNameServerAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<_secondaryDns.SecondaryDNSNameServer>(string.Format("/vps/{serviceName}/secondaryDnsNameServerAvailable", serviceName));
        }
        
        // Path: /vps/{serviceName}/serviceInfos
        public Task<_services.Service> GetVpsServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/vps/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /vps/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutVpsServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/setPassword
        public Task<_vps.Task> PostVpsServiceNameSetPasswordAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/snapshot
        public Task<_vps.Task> DeleteVpsServiceNameSnapshotAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/snapshot
        public Task<_vps.Snapshot> GetVpsServiceNameSnapshotAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Snapshot>(string.Format("/vps/{serviceName}/snapshot", serviceName));
        }
        
        // Path: /vps/{serviceName}/snapshot
        public System.Threading.Tasks.Task PutVpsServiceNameSnapshotAsync(_vps.Snapshot body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vps/{serviceName}/snapshot/download
        public Task<_vps.DownloadSnapshotURL> GetVpsServiceNameSnapshotDownloadAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.DownloadSnapshotURL>(string.Format("/vps/{serviceName}/snapshot/download", serviceName));
        }
        
        // Path: /vps/{serviceName}/snapshot/revert
        public Task<_vps.Task> PostVpsServiceNameSnapshotRevertAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/start
        public Task<_vps.Task> PostVpsServiceNameStartAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/statistics
        public Task<_vps.VpsMonitoringStatistics> GetVpsServiceNameStatisticsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.VpsMonitoringStatistics>(string.Format("/vps/{serviceName}/statistics", serviceName));
        }
        
        // Path: /vps/{serviceName}/status
        public Task<_vps_ip.ServiceStatus> GetVpsServiceNameStatusAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps_ip.ServiceStatus>(string.Format("/vps/{serviceName}/status", serviceName));
        }
        
        // Path: /vps/{serviceName}/stop
        public Task<_vps.Task> PostVpsServiceNameStopAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/tasks
        public Task<System.Int64[]> GetVpsServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _vps.TaskStateEnum state, [System.Runtime.InteropServices.OptionalAttribute()] _vps.TaskTypeEnum type) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/tasks/{id}
        public Task<_vps.Task> GetVpsServiceNameTasksIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Task>(string.Format("/vps/{serviceName}/tasks/{id}", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/templates
        public Task<System.Int64[]> GetVpsServiceNameTemplatesAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/templates", serviceName));
        }
        
        // Path: /vps/{serviceName}/templates/{id}
        public Task<_vps.Template> GetVpsServiceNameTemplatesIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_vps.Template>(string.Format("/vps/{serviceName}/templates/{id}", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/templates/{id}/software
        public Task<System.Int64[]> GetVpsServiceNameTemplatesIdSoftwareAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/templates/{id}/software", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/templates/{id}/software/{softwareId}
        public Task<_vps.Software> GetVpsServiceNameTemplatesIdSoftwareSoftwareIdAsync(long id, string serviceName, long softwareId) {
            return _client.GetFromJsonAsync<_vps.Software>(string.Format("/vps/{serviceName}/templates/{id}/software/{softwareId}", id, serviceName, softwareId));
        }
        
        // Path: /vps/{serviceName}/terminate
        public Task<System.String> PostVpsServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/use
        public Task<_complexType.UnitAndValue_double> GetVpsServiceNameUseAsync(string serviceName, _vps.VpsStatisticTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType.UnitAndValue_double>(string.Format("/vps/{serviceName}/use?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/veeam
        public Task<_vps.Veeam> GetVpsServiceNameVeeamAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps.Veeam>(string.Format("/vps/{serviceName}/veeam", serviceName));
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints
        public Task<System.Int64[]> GetVpsServiceNameVeeamRestorePointsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationTime) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vps/{serviceName}/veeam/restorePoints?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints/{id}
        public Task<_vps_veeam.RestorePoint> GetVpsServiceNameVeeamRestorePointsIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_vps_veeam.RestorePoint>(string.Format("/vps/{serviceName}/veeam/restorePoints/{id}", id, serviceName));
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints/{id}/restore
        public Task<_vps.Task> PostVpsServiceNameVeeamRestorePointsIdRestoreAsync(_vps_veeam_restorePoints_restore.post body, long id, string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/veeam/restoredBackup
        public Task<_vps.Task> DeleteVpsServiceNameVeeamRestoredBackupAsync(string serviceName) {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/veeam/restoredBackup
        public Task<_vps_veeam.RestoredBackup> GetVpsServiceNameVeeamRestoredBackupAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vps_veeam.RestoredBackup>(string.Format("/vps/{serviceName}/veeam/restoredBackup", serviceName));
        }
        
        // Path: /vrack
        public Task<System.String[]> GetVrackAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack?{queryParameters}", queryParameters));
        }
        
        // Path: /vrack/{serviceName}
        public Task<_vrack.vrackWithIAM> GetVrackServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vrack.vrackWithIAM>(string.Format("/vrack/{serviceName}", serviceName));
        }
        
        // Path: /vrack/{serviceName}
        public System.Threading.Tasks.Task PutVrackServiceNameAsync(_vrack.vrack body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vrack/{serviceName}/allowedServices
        public Task<_vrack.AllowedServices> GetVrackServiceNameAllowedServicesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _vrack.AllowedServiceEnum serviceFamily) {
            return _client.GetFromJsonAsync<_vrack.AllowedServices>(string.Format("/vrack/{serviceName}/allowedServices?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /vrack/{serviceName}/cloudProject
        public Task<System.String[]> GetVrackServiceNameCloudProjectAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/cloudProject", serviceName));
        }
        
        // Path: /vrack/{serviceName}/cloudProject
        public Task<_vrack.Task> PostVrackServiceNameCloudProjectAsync(string project, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject/{project}
        public Task<_vrack.Task> DeleteVrackServiceNameCloudProjectProjectAsync(string project, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject/{project}
        public Task<_vrack.cloudProject> GetVrackServiceNameCloudProjectProjectAsync(string project, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.cloudProject>(string.Format("/vrack/{serviceName}/cloudProject/{project}", project, serviceName));
        }
        
        // Path: /vrack/{serviceName}/confirmTermination
        public Task<System.String> PostVrackServiceNameConfirmTerminationAsync(string serviceName, string token, [System.Runtime.InteropServices.OptionalAttribute()] string commentary, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationFutureUseEnum futureUse, [System.Runtime.InteropServices.OptionalAttribute()] _service.TerminationReasonEnum reason) {
            return default(Task<System.String>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud
        public Task<System.String[]> GetVrackServiceNameDedicatedCloudAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedCloud", serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud
        public Task<_vrack.Task> PostVrackServiceNameDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        public Task<_vrack.Task> DeleteVrackServiceNameDedicatedCloudDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        public Task<_vrack.dedicatedCloud> GetVrackServiceNameDedicatedCloudDedicatedCloudAsync(string dedicatedCloud, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.dedicatedCloud>(string.Format("/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}", dedicatedCloud, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter
        public Task<System.String[]> GetVrackServiceNameDedicatedCloudDatacenterAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedCloudDatacenter", serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}
        public Task<_vrack.pccDatacenter> GetVrackServiceNameDedicatedCloudDatacenterDatacenterAsync(string datacenter, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.pccDatacenter>(string.Format("/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}", datacenter, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack
        public Task<System.String[]> GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackAsync(string datacenter, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack", datacenter, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/move
        public Task<_vrack.Task> PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveAsync(string datacenter, string serviceName, string targetServiceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect
        public Task<System.String[]> GetVrackServiceNameDedicatedConnectAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedConnect", serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect/{name}
        public Task<_vrack.dedicatedConnect> GetVrackServiceNameDedicatedConnectNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.dedicatedConnect>(string.Format("/vrack/{serviceName}/dedicatedConnect/{name}", name, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect/{name}
        public System.Threading.Tasks.Task PutVrackServiceNameDedicatedConnectNameAsync(_vrack.dedicatedConnect body, string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer
        public Task<System.String[]> GetVrackServiceNameDedicatedServerAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedServer", serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer
        public Task<_vrack.Task> PostVrackServiceNameDedicatedServerAsync(string dedicatedServer, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        public Task<_vrack.Task> DeleteVrackServiceNameDedicatedServerDedicatedServerAsync(string dedicatedServer, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        public Task<_vrack.dedicatedServer> GetVrackServiceNameDedicatedServerDedicatedServerAsync(string dedicatedServer, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.dedicatedServer>(string.Format("/vrack/{serviceName}/dedicatedServer/{dedicatedServer}", dedicatedServer, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg
        public Task<_dedicated_server.MrtgTimestampValue[]> GetVrackServiceNameDedicatedServerDedicatedServerMrtgAsync(string dedicatedServer, _dedicated_server.MrtgPeriodEnum period, string serviceName, _dedicated_server.MrtgTypeEnum type) {
            return _client.GetFromJsonAsync<_dedicated_server.MrtgTimestampValue[]>(string.Format("/vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg?{queryParameters}", dedicatedServer, serviceName, queryParameters));
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface
        public Task<System.String[]> GetVrackServiceNameDedicatedServerInterfaceAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/dedicatedServerInterface", serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface
        public Task<_vrack.Task> PostVrackServiceNameDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        public Task<_vrack.Task> DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        public Task<_vrack.dedicatedServerInterface> GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync(string dedicatedServerInterface, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.dedicatedServerInterface>(string.Format("/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}", dedicatedServerInterface, serviceName));
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterfaceDetails
        public Task<_vrack.AllowedDedicatedServerInterfaces[]> GetVrackServiceNameDedicatedServerInterfaceDetailsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vrack.AllowedDedicatedServerInterfaces[]>(string.Format("/vrack/{serviceName}/dedicatedServerInterfaceDetails", serviceName));
        }
        
        // Path: /vrack/{serviceName}/eligibleServices
        public Task<_vrack.EligibleServicesResponse> GetVrackServiceNameEligibleServicesAsync(string serviceName) {
            return _client.GetFromJsonAsync<_vrack.EligibleServicesResponse>(string.Format("/vrack/{serviceName}/eligibleServices", serviceName));
        }
        
        // Path: /vrack/{serviceName}/ip
        public Task<System.String[]> GetVrackServiceNameIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/ip", serviceName));
        }
        
        // Path: /vrack/{serviceName}/ip
        public Task<_vrack.Task> PostVrackServiceNameIpAsync(string block, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}
        public Task<_vrack.Task> DeleteVrackServiceNameIpIpAsync(string ip, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}
        public Task<_vrack.ip> GetVrackServiceNameIpIpAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.ip>(string.Format("/vrack/{serviceName}/ip/{ip}", ip, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}/announceInZone
        public Task<_vrack.Task> PostVrackServiceNameIpIpAnnounceInZoneAsync(string ip, string serviceName, _vrack.VrackZoneEnum zone) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}/availableZone
        public Task<_vrack.VrackZoneEnum[]> GetVrackServiceNameIpIpAvailableZoneAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.VrackZoneEnum[]>(string.Format("/vrack/{serviceName}/ip/{ip}/availableZone", ip, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing
        public Task<System.String[]> GetVrackServiceNameIpLoadbalancingAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/ipLoadbalancing", serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing
        public Task<_vrack.Task> PostVrackServiceNameIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        public Task<_vrack.Task> DeleteVrackServiceNameIpLoadbalancingIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        public Task<_vrack.iplb> GetVrackServiceNameIpLoadbalancingIpLoadbalancingAsync(string ipLoadbalancing, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.iplb>(string.Format("/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}", ipLoadbalancing, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6
        public Task<System.String[]> GetVrackServiceNameIpv6Async(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/ipv6", serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6
        public Task<_vrack.Task> PostVrackServiceNameIpv6Async(string block, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}
        public Task<_vrack.Task> DeleteVrackServiceNameIpv6Ipv6Async(string ipv6, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}
        public Task<_vrack.ipv6> GetVrackServiceNameIpv6Ipv6Async(string ipv6, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.ipv6>(string.Format("/vrack/{serviceName}/ipv6/{ipv6}", ipv6, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange
        public Task<System.String[]> GetVrackServiceNameIpv6Ipv6BridgedSubrangeAsync(string ipv6, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange", ipv6, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        public Task<_vrack.bridgedSubrange> GetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync(string bridgedSubrange, string ipv6, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.bridgedSubrange>(string.Format("/vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}", bridgedSubrange, ipv6, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        public Task<_vrack.Task> PutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync(_vrack.bridgedSubrange body, string bridgedSubrange, string ipv6, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        public Task<System.String[]> GetVrackServiceNameIpv6Ipv6RoutedSubrangeAsync(string ipv6, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange", ipv6, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        public Task<_vrack.Task> PostVrackServiceNameIpv6Ipv6RoutedSubrangeAsync(string ipv6, string nexthop, string routedSubrange, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        public Task<_vrack.Task> DeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync(string ipv6, string routedSubrange, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        public Task<_vrack.routedSubrange> GetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync(string ipv6, string routedSubrange, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.routedSubrange>(string.Format("/vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}", ipv6, routedSubrange, serviceName));
        }
        
        // Path: /vrack/{serviceName}/legacyVrack
        public Task<System.String[]> GetVrackServiceNameLegacyVrackAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/legacyVrack", serviceName));
        }
        
        // Path: /vrack/{serviceName}/legacyVrack
        public Task<_vrack.Task> PostVrackServiceNameLegacyVrackAsync(string legacyVrack, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack/{legacyVrack}
        public Task<_vrack.Task> DeleteVrackServiceNameLegacyVrackLegacyVrackAsync(string legacyVrack, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack/{legacyVrack}
        public Task<_vrack.legacyVrack> GetVrackServiceNameLegacyVrackLegacyVrackAsync(string legacyVrack, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.legacyVrack>(string.Format("/vrack/{serviceName}/legacyVrack/{legacyVrack}", legacyVrack, serviceName));
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect
        public Task<System.Guid[]> GetVrackServiceNameOvhCloudConnectAsync(string serviceName) {
            return _client.GetFromJsonAsync<System.Guid[]>(string.Format("/vrack/{serviceName}/ovhCloudConnect", serviceName));
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect
        public Task<_vrack.Task> PostVrackServiceNameOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        public Task<_vrack.Task> DeleteVrackServiceNameOvhCloudConnectOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        public Task<_vrack.ovhCloudConnect> GetVrackServiceNameOvhCloudConnectOvhCloudConnectAsync(System.Guid ovhCloudConnect, string serviceName) {
            return _client.GetFromJsonAsync<_vrack.ovhCloudConnect>(string.Format("/vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}", ovhCloudConnect, serviceName));
        }
        
        // Path: /vrack/{serviceName}/serviceInfos
        public Task<_services.NonExpiringService> GetVrackServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.NonExpiringService>(string.Format("/vrack/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /vrack/{serviceName}/task
        public Task<System.Int64[]> GetVrackServiceNameTaskAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/vrack/{serviceName}/task", serviceName));
        }
        
        // Path: /vrack/{serviceName}/task/{taskId}
        public Task<_vrack.Task> GetVrackServiceNameTaskTaskIdAsync(string serviceName, long taskId) {
            return _client.GetFromJsonAsync<_vrack.Task>(string.Format("/vrack/{serviceName}/task/{taskId}", serviceName, taskId));
        }
        
        // Path: /vrack/{serviceName}/terminate
        public Task<System.String> PostVrackServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices
        public Task<System.String[]> GetVrackServiceNameVrackServicesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/vrack/{serviceName}/vrackServices", serviceName));
        }
        
        // Path: /vrack/{serviceName}/vrackServices
        public Task<_vrack.Task> PostVrackServiceNameVrackServicesAsync(string serviceName, string vrackServices) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices/{vrackServices}
        public Task<_vrack.Task> DeleteVrackServiceNameVrackServicesVrackServicesAsync(string serviceName, string vrackServices) {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices/{vrackServices}
        public Task<_vrack.vrackServices> GetVrackServiceNameVrackServicesVrackServicesAsync(string serviceName, string vrackServices) {
            return _client.GetFromJsonAsync<_vrack.vrackServices>(string.Format("/vrack/{serviceName}/vrackServices/{vrackServices}", serviceName, vrackServices));
        }
        
        // Path: /webPaaS/capabilities
        public Task<_webPaaS.Capabilities> GetWebPaaSCapabilitiesAsync(_webPaaS.OfferEnum planCode) {
            return _client.GetFromJsonAsync<_webPaaS.Capabilities>(string.Format("/webPaaS/capabilities?{queryParameters}", queryParameters));
        }
        
        // Path: /webPaaS/subscription
        public Task<System.String[]> GetWebPaaSSubscriptionAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/webPaaS/subscription?{queryParameters}", queryParameters));
        }
        
        // Path: /webPaaS/subscription/{serviceName}
        public Task<_webPaaS.SubscriptionWithIAM> GetWebPaaSSubscriptionServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_webPaaS.SubscriptionWithIAM>(string.Format("/webPaaS/subscription/{serviceName}", serviceName));
        }
        
        // Path: /webPaaS/subscription/{serviceName}/confirmTermination
        public Task<System.String> PostWebPaaSSubscriptionServiceNameConfirmTerminationAsync(_services.confirmTermination body, string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer
        public Task<_webPaaS_subscription.Customer[]> GetWebPaaSSubscriptionServiceNameCustomerAsync(string serviceName) {
            return _client.GetFromJsonAsync<_webPaaS_subscription.Customer[]>(string.Format("/webPaaS/subscription/{serviceName}/customer", serviceName));
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer
        public Task<_webPaaS_subscription.Customer> PostWebPaaSSubscriptionServiceNameCustomerAsync(_webPaaS_subscription_project.AddCustomer body, string serviceName) {
            return default(Task<_webPaaS_subscription.Customer>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer/{customerId}
        public Task<_webPaaS_subscription.Customer> DeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdAsync(System.Guid customerId, string serviceName) {
            return default(Task<_webPaaS_subscription.Customer>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer/{customerId}
        public Task<_webPaaS_subscription.Customer> GetWebPaaSSubscriptionServiceNameCustomerCustomerIdAsync(System.Guid customerId, string serviceName) {
            return _client.GetFromJsonAsync<_webPaaS_subscription.Customer>(string.Format("/webPaaS/subscription/{serviceName}/customer/{customerId}", customerId, serviceName));
        }
        
        // Path: /webPaaS/subscription/{serviceName}/serviceInfos
        public Task<_services.Service> GetWebPaaSSubscriptionServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/webPaaS/subscription/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /webPaaS/subscription/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutWebPaaSSubscriptionServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /webPaaS/subscription/{serviceName}/terminate
        public Task<System.String> PostWebPaaSSubscriptionServiceNameTerminateAsync(string serviceName) {
            return default(Task<System.String>);
        }
        
        // Path: /xdsl
        public Task<System.String[]> GetXdslAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl?{queryParameters}", queryParameters));
        }
        
        // Path: /xdsl/{serviceName}
        public Task<_xdsl.AccessWithIAM> GetXdslServiceNameAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.AccessWithIAM>(string.Format("/xdsl/{serviceName}", serviceName));
        }
        
        // Path: /xdsl/{serviceName}
        public System.Threading.Tasks.Task PutXdslServiceNameAsync(_xdsl.Access body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/addressMove/extraIpRange
        public Task<_xdsl.ExtraIpRangeMove> GetXdslServiceNameAddressMoveExtraIpRangeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ExtraIpRangeMove>(string.Format("/xdsl/{serviceName}/addressMove/extraIpRange", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/addressMove/extraIpRangeMove
        public Task<_xdsl.Task> PostXdslServiceNameAddressMoveExtraIpRangeMoveAsync(string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/antiSpams
        public Task<System.String[]> GetXdslServiceNameAntiSpamsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/antiSpams", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/antiSpams/{ip}
        public Task<_xdsl.AntiSpam> GetXdslServiceNameAntiSpamsIpAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.AntiSpam>(string.Format("/xdsl/{serviceName}/antiSpams/{ip}", ip, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/antiSpams/{ip}/evidences
        public Task<_xdsl_antiSpam.EvidencesInfo> GetXdslServiceNameAntiSpamsIpEvidencesAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl_antiSpam.EvidencesInfo>(string.Format("/xdsl/{serviceName}/antiSpams/{ip}/evidences", ip, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/applyTemplateToModem
        public Task<_xdsl.Task> PostXdslServiceNameApplyTemplateToModemAsync(_xdsl_applyTemplateToModem.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/canCancelResiliation
        public Task<System.Boolean> GetXdslServiceNameCanCancelResiliationAsync(string serviceName) {
            return _client.GetFromJsonAsync<bool>(string.Format("/xdsl/{serviceName}/canCancelResiliation", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/cancelResiliation
        public System.Threading.Tasks.Task PostXdslServiceNameCancelResiliationAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/changeContact
        public Task<System.Int64[]> PostXdslServiceNameChangeContactAsync(_xdsl_changeContact.post body, string serviceName) {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/diagnostic
        public Task<_xdsl.AccessDiagnostic> GetXdslServiceNameDiagnosticAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.AccessDiagnostic>(string.Format("/xdsl/{serviceName}/diagnostic", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/diagnostic
        public Task<_xdsl.Task> PostXdslServiceNameDiagnosticAsync(string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/email/pro
        public Task<System.String[]> GetXdslEmailProAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/email/pro?{queryParameters}", queryParameters));
        }
        
        // Path: /xdsl/email/pro/{email}
        public System.Threading.Tasks.Task DeleteXdslEmailProEmailAsync(string email) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/email/pro/{email}
        public Task<_xdsl.xdslEmailProWithIAM> GetXdslEmailProEmailAsync(string email) {
            return _client.GetFromJsonAsync<_xdsl.xdslEmailProWithIAM>(string.Format("/xdsl/email/pro/{email}", email));
        }
        
        // Path: /xdsl/email/pro/{email}
        public System.Threading.Tasks.Task PutXdslEmailProEmailAsync(_xdsl.xdslEmailPro body, string email) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/email/pro/{email}/changePassword
        public Task<_xdsl_email_pro.Task> PostXdslEmailProEmailChangePasswordAsync(_xdsl_email_pro_changePassword.post body, string email) {
            return default(Task<_xdsl_email_pro.Task>);
        }
        
        // Path: /xdsl/{serviceName}/fiberEligibilities
        public Task<System.Int64[]> GetXdslServiceNameFiberEligibilitiesAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] _xdsl.FiberEligibilityStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/xdsl/{serviceName}/fiberEligibilities?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/fiberEligibilities/{id}
        public Task<_xdsl.FiberEligibility> GetXdslServiceNameFiberEligibilitiesIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.FiberEligibility>(string.Format("/xdsl/{serviceName}/fiberEligibilities/{id}", id, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/incident
        public Task<_xdsl.Incident> GetXdslServiceNameIncidentAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.Incident>(string.Format("/xdsl/{serviceName}/incident", serviceName));
        }
        
        // Path: /xdsl/incidents
        public Task<System.Int64[]> GetXdslIncidentsAsync([System.Runtime.InteropServices.OptionalAttribute()] System.DateTime creationDate, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime endDate) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/xdsl/incidents?{queryParameters}", queryParameters));
        }
        
        // Path: /xdsl/incidents/{id}
        public Task<_xdsl.Incident> GetXdslIncidentsIdAsync(long id) {
            return _client.GetFromJsonAsync<_xdsl.Incident>(string.Format("/xdsl/incidents/{id}", id));
        }
        
        // Path: /xdsl/{serviceName}/ips
        public Task<System.String[]> GetXdslServiceNameIpsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/ips", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/ips
        public Task<_xdsl.Task> PostXdslServiceNameIpsAsync(string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/ips/{ip}
        public System.Threading.Tasks.Task DeleteXdslServiceNameIpsIpAsync(string ip, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/ips/{ip}
        public Task<_xdsl.IP> GetXdslServiceNameIpsIpAsync(string ip, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.IP>(string.Format("/xdsl/{serviceName}/ips/{ip}", ip, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/ipv6
        public Task<_xdsl.Task> PostXdslServiceNameIpv6Async(_xdsl_ipv6.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines
        public Task<System.String[]> GetXdslServiceNameLinesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/lines", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}
        public Task<_xdsl.Line> GetXdslServiceNameLinesNumberAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.Line>(string.Format("/xdsl/{serviceName}/lines/{number}", number, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/diagnostic/cancel
        public System.Threading.Tasks.Task PostXdslServiceNameLinesNumberDiagnosticCancelAsync(string number, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/diagnostic/run
        public Task<_xdsl_lineDiagnostic.Diagnostic> PostXdslServiceNameLinesNumberDiagnosticRunAsync(_xdsl_lines_diagnostic_run.post body, string number, string serviceName) {
            return default(Task<_xdsl_lineDiagnostic.Diagnostic>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort
        public Task<_xdsl.DslamPort> GetXdslServiceNameLinesNumberDslamPortAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DslamPort>(string.Format("/xdsl/{serviceName}/lines/{number}/dslamPort", number, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/availableProfiles
        public Task<_xdsl.DslamLineProfile[]> GetXdslServiceNameLinesNumberDslamPortAvailableProfilesAsync(string number, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DslamLineProfile[]>(string.Format("/xdsl/{serviceName}/lines/{number}/dslamPort/availableProfiles", number, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/changeProfile
        public Task<_xdsl.Task> PostXdslServiceNameLinesNumberDslamPortChangeProfileAsync(_xdsl_lines_dslamPort_changeProfile.post body, string number, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/logs
        public Task<_xdsl.DslamPortLog[]> GetXdslServiceNameLinesNumberDslamPortLogsAsync(long limit, string number, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DslamPortLog[]>(string.Format("/xdsl/{serviceName}/lines/{number}/dslamPort/logs?{queryParameters}", number, serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/reset
        public Task<_xdsl.Task> PostXdslServiceNameLinesNumberDslamPortResetAsync(string number, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/statistics
        public Task<_complexType_UnitAndValues_xdsl.TimestampAndValue> GetXdslServiceNameLinesNumberStatisticsAsync(string number, _xdsl.StatisticsPeriodEnum period, string serviceName, _xdsl.LineStatisticsTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType_UnitAndValues_xdsl.TimestampAndValue>(string.Format("/xdsl/{serviceName}/lines/{number}/statistics?{queryParameters}", number, serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/modem
        public Task<_xdsl.Modem> GetXdslServiceNameModemAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.Modem>(string.Format("/xdsl/{serviceName}/modem", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem
        public System.Threading.Tasks.Task PutXdslServiceNameModemAsync(_xdsl.Modem body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/availableACSBackend
        public Task<System.String[]> GetXdslServiceNameModemAvailableACSBackendAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/availableACSBackend", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/availableWLANChannel
        public Task<System.Int64[]> GetXdslServiceNameModemAvailableWLANChannelAsync(_xdsl.WLANFrequencyEnum frequency, string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/xdsl/{serviceName}/modem/availableWLANChannel?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/modem/blocIp
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemBlocIpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/blocIp", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/blocIp
        public Task<_xdsl.Task> PostXdslServiceNameModemBlocIpAsync(_xdsl_modem_blocIp.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/callWaiting
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemCallWaitingAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/callWaiting", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/callWaiting
        public Task<_xdsl.Task> PostXdslServiceNameModemCallWaitingAsync(_xdsl_modem_callWaiting.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/comfortExchange
        public Task<_xdsl.ModemExchangeInfo> GetXdslServiceNameModemComfortExchangeAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ModemExchangeInfo>(string.Format("/xdsl/{serviceName}/modem/comfortExchange", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/comfortExchange
        public Task<_order.Order> PostXdslServiceNameModemComfortExchangeAsync(_xdsl_modem_comfortExchange.post body, string serviceName) {
            return default(Task<_order.Order>);
        }
        
        // Path: /xdsl/{serviceName}/modem/connectedDevices
        public Task<System.String[]> GetXdslServiceNameModemConnectedDevicesAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/connectedDevices", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/connectedDevices/{macAddress}
        public Task<_xdsl.connectedDevice> GetXdslServiceNameModemConnectedDevicesMacAddressAsync(string macAddress, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.connectedDevice>(string.Format("/xdsl/{serviceName}/modem/connectedDevices/{macAddress}", macAddress, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/contentSharing
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemContentSharingAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/contentSharing", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/contentSharing
        public Task<_xdsl.Task> PostXdslServiceNameModemContentSharingAsync(_xdsl_modem_contentSharing.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/firmware
        public Task<System.String> GetXdslServiceNameModemFirmwareAsync(string serviceName) {
            return _client.GetFromJsonAsync<string>(string.Format("/xdsl/{serviceName}/modem/firmware", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/firmware
        public Task<_xdsl.Task> PostXdslServiceNameModemFirmwareAsync(_xdsl_modem_firmware.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/firmwareAvailable
        public Task<System.String[]> GetXdslServiceNameModemFirmwareAvailableAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/firmwareAvailable", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/ftp
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemFtpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/ftp", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/ftp
        public Task<_xdsl.Task> PostXdslServiceNameModemFtpAsync(_xdsl_modem_ftp.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/ipsecAlg
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemIpsecAlgAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/ipsecAlg", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/ipsecAlg
        public Task<_xdsl.Task> PostXdslServiceNameModemIpsecAlgAsync(_xdsl_modem_ipsecAlg.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan
        public Task<System.String[]> GetXdslServiceNameModemLanAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/lan", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}
        public Task<_xdsl.LAN> GetXdslServiceNameModemLanLanNameAsync(string lanName, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.LAN>(string.Format("/xdsl/{serviceName}/modem/lan/{lanName}", lanName, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}
        public System.Threading.Tasks.Task PutXdslServiceNameModemLanLanNameAsync(_xdsl.LAN body, string lanName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp
        public Task<System.String[]> GetXdslServiceNameModemLanLanNameDhcpAsync(string lanName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/lan/{lanName}/dhcp", lanName, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        public Task<_xdsl.DHCP> GetXdslServiceNameModemLanLanNameDhcpDhcpNameAsync(string dhcpName, string lanName, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DHCP>(string.Format("/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}", dhcpName, lanName, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        public System.Threading.Tasks.Task PutXdslServiceNameModemLanLanNameDhcpDhcpNameAsync(_xdsl.DHCP body, string dhcpName, string lanName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        public Task<System.String[]> GetXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync(string dhcpName, string lanName, string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses", dhcpName, lanName, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        public Task<_xdsl.DHCPStaticAddress> PostXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync(_xdsl_modem_lan_dhcp_DHCPStaticAddresses.post body, string dhcpName, string lanName, string serviceName) {
            return default(Task<_xdsl.DHCPStaticAddress>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public Task<_xdsl.Task> DeleteXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(string MACAddress, string dhcpName, string lanName, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public Task<_xdsl.DHCPStaticAddress> GetXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(string MACAddress, string dhcpName, string lanName, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DHCPStaticAddress>(string.Format("/xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACA" +
                        "ddress}", MACAddress, dhcpName, lanName, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        public System.Threading.Tasks.Task PutXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync(_xdsl.DHCPStaticAddress body, string MACAddress, string dhcpName, string lanName, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings
        public Task<System.String[]> GetXdslServiceNameModemPortMappingsAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/portMappings", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings
        public Task<_xdsl.PortMapping> PostXdslServiceNameModemPortMappingsAsync(_xdsl_modem_portMappings.post body, string serviceName) {
            return default(Task<_xdsl.PortMapping>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        public Task<_xdsl.Task> DeleteXdslServiceNameModemPortMappingsNameAsync(string name, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        public Task<_xdsl.PortMapping> GetXdslServiceNameModemPortMappingsNameAsync(string name, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.PortMapping>(string.Format("/xdsl/{serviceName}/modem/portMappings/{name}", name, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        public System.Threading.Tasks.Task PutXdslServiceNameModemPortMappingsNameAsync(_xdsl.PortMapping body, string name, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/reboot
        public Task<_xdsl.Task> PostXdslServiceNameModemRebootAsync(_xdsl_modem_reboot.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/reconfigureVoip
        public System.Threading.Tasks.Task PostXdslServiceNameModemReconfigureVoipAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/refreshConnectedDevices
        public Task<_xdsl.Task> PostXdslServiceNameModemRefreshConnectedDevicesAsync(string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/reset
        public Task<_xdsl.Task> PostXdslServiceNameModemResetAsync(_xdsl_modem_reset.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/resetPortMappingConfig
        public System.Threading.Tasks.Task PostXdslServiceNameModemResetPortMappingConfigAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/retrieveInfo
        public Task<_xdsl_AsyncTask_xdsl.ModemInfo> PostXdslServiceNameModemRetrieveInfoAsync(string serviceName) {
            return default(Task<_xdsl_AsyncTask_xdsl.ModemInfo>);
        }
        
        // Path: /xdsl/{serviceName}/modem/sipAlg
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemSipAlgAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/sipAlg", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/sipAlg
        public Task<_xdsl.Task> PostXdslServiceNameModemSipAlgAsync(_xdsl_modem_sipAlg.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/upnp
        public Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemUpnpAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ServiceStatusEnum>(string.Format("/xdsl/{serviceName}/modem/upnp", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/upnp
        public Task<_xdsl.Task> PostXdslServiceNameModemUpnpAsync(_xdsl_modem_upnp.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi
        public Task<System.String[]> GetXdslServiceNameModemWifiAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/modem/wifi", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}
        public Task<_xdsl.WLAN> GetXdslServiceNameModemWifiWifiNameAsync(string serviceName, string wifiName) {
            return _client.GetFromJsonAsync<_xdsl.WLAN>(string.Format("/xdsl/{serviceName}/modem/wifi/{wifiName}", serviceName, wifiName));
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}
        public System.Threading.Tasks.Task PutXdslServiceNameModemWifiWifiNameAsync(_xdsl.WLAN body, string serviceName, string wifiName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}/qrCode
        public Task<System.String> GetXdslServiceNameModemWifiWifiNameQrCodeAsync(string serviceName, string wifiName) {
            return _client.GetFromJsonAsync<string>(string.Format("/xdsl/{serviceName}/modem/wifi/{wifiName}/qrCode", serviceName, wifiName));
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications
        public Task<System.Int64[]> GetXdslServiceNameMonitoringNotificationsAsync(string serviceName) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/xdsl/{serviceName}/monitoringNotifications", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications
        public Task<_xdsl.MonitoringNotification> PostXdslServiceNameMonitoringNotificationsAsync(_xdsl_monitoringNotifications.post body, string serviceName) {
            return default(Task<_xdsl.MonitoringNotification>);
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        public System.Threading.Tasks.Task DeleteXdslServiceNameMonitoringNotificationsIdAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        public Task<_xdsl.MonitoringNotification> GetXdslServiceNameMonitoringNotificationsIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.MonitoringNotification>(string.Format("/xdsl/{serviceName}/monitoringNotifications/{id}", id, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        public System.Threading.Tasks.Task PutXdslServiceNameMonitoringNotificationsIdAsync(_xdsl.MonitoringNotification body, long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/ont
        public Task<_xdsl.Ont> GetXdslServiceNameOntAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.Ont>(string.Format("/xdsl/{serviceName}/ont", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/orderFollowup
        public Task<_xdsl_orderFollowup.Step[]> GetXdslServiceNameOrderFollowupAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl_orderFollowup.Step[]>(string.Format("/xdsl/{serviceName}/orderFollowup", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/orderMeeting
        public System.Threading.Tasks.Task PostXdslServiceNameOrderMeetingAsync(_xdsl_orderMeeting.post body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/pendingAction
        public Task<_xdsl.PendingAction> GetXdslServiceNamePendingActionAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.PendingAction>(string.Format("/xdsl/{serviceName}/pendingAction", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/radiusConnectionLogs
        public Task<_xdsl.RadiusConnectionLog[]> GetXdslServiceNameRadiusConnectionLogsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.RadiusConnectionLog[]>(string.Format("/xdsl/{serviceName}/radiusConnectionLogs", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/requestPPPLoginMail
        public System.Threading.Tasks.Task PostXdslServiceNameRequestPPPLoginMailAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/requestTotalDeconsolidation
        public Task<_xdsl.Task> PostXdslServiceNameRequestTotalDeconsolidationAsync(_xdsl_requestTotalDeconsolidation.post body, string serviceName) {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/resiliate
        public Task<_xdsl.ResiliationFollowUpDetail> PostXdslServiceNameResiliateAsync(_xdsl_resiliate.post body, string serviceName) {
            return default(Task<_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /xdsl/{serviceName}/resiliationFollowup
        public Task<_xdsl.ResiliationFollowUpDetail> GetXdslServiceNameResiliationFollowupAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.ResiliationFollowUpDetail>(string.Format("/xdsl/{serviceName}/resiliationFollowup", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/resiliationTerms
        public Task<_xdsl.ResiliationTerms> GetXdslServiceNameResiliationTermsAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] System.DateTime resiliationDate) {
            return _client.GetFromJsonAsync<_xdsl.ResiliationTerms>(string.Format("/xdsl/{serviceName}/resiliationTerms?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/rma
        public Task<System.String[]> GetXdslServiceNameRmaAsync(string serviceName) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/{serviceName}/rma", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        public System.Threading.Tasks.Task DeleteXdslServiceNameRmaIdAsync(string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        public Task<_telephony.Rma> GetXdslServiceNameRmaIdAsync(string id, string serviceName) {
            return _client.GetFromJsonAsync<_telephony.Rma>(string.Format("/xdsl/{serviceName}/rma/{id}", id, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        public System.Threading.Tasks.Task PutXdslServiceNameRmaIdAsync(_telephony.Rma body, string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}/changeType
        public System.Threading.Tasks.Task PostXdslServiceNameRmaIdChangeTypeAsync(_xdsl_rma_changeType.post body, string id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/searchOrderMeetings
        public Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostXdslServiceNameSearchOrderMeetingsAsync(string serviceName) {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings>);
        }
        
        // Path: /xdsl/{serviceName}/sendOrderToProvider
        public System.Threading.Tasks.Task PostXdslServiceNameSendOrderToProviderAsync(string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/serviceInfos
        public Task<_services.Service> GetXdslServiceNameServiceInfosAsync(string serviceName) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/xdsl/{serviceName}/serviceInfos", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/serviceInfos
        public System.Threading.Tasks.Task PutXdslServiceNameServiceInfosAsync(_services.Service body, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/spare
        public Task<System.String[]> GetXdslSpareAsync([System.Runtime.InteropServices.OptionalAttribute()] Dictionary<string, _iam_resource.TagFilter[]> iamTags) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/spare?{queryParameters}", queryParameters));
        }
        
        // Path: /xdsl/spare/{spare}
        public System.Threading.Tasks.Task DeleteXdslSpareSpareAsync(string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/spare/{spare}
        public Task<_spare_xdsl.XdslSpareWithIAM> GetXdslSpareSpareAsync(string spare) {
            return _client.GetFromJsonAsync<_spare_xdsl.XdslSpareWithIAM>(string.Format("/xdsl/spare/{spare}", spare));
        }
        
        // Path: /xdsl/spare/brands
        public Task<System.String[]> GetXdslSpareBrandsAsync() {
            return _client.GetFromJsonAsync<string[]>("/xdsl/spare/brands");
        }
        
        // Path: /xdsl/spare/{spare}/compatibleReplacement
        public Task<System.String[]> GetXdslSpareSpareCompatibleReplacementAsync(string spare) {
            return _client.GetFromJsonAsync<string[]>(string.Format("/xdsl/spare/{spare}/compatibleReplacement", spare));
        }
        
        // Path: /xdsl/spare/{spare}/replace
        public System.Threading.Tasks.Task PostXdslSpareSpareReplaceAsync(_xdsl_spare_replace.post body, string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/spare/{spare}/returnMerchandise
        public System.Threading.Tasks.Task PostXdslSpareSpareReturnMerchandiseAsync(string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/spare/{spare}/serviceInfos
        public Task<_services.Service> GetXdslSpareSpareServiceInfosAsync(string spare) {
            return _client.GetFromJsonAsync<_services.Service>(string.Format("/xdsl/spare/{spare}/serviceInfos", spare));
        }
        
        // Path: /xdsl/spare/{spare}/serviceInfos
        public System.Threading.Tasks.Task PutXdslSpareSpareServiceInfosAsync(_services.Service body, string spare) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/statistics
        public Task<_complexType_UnitAndValues_xdsl.AccessLatency> GetXdslServiceNameStatisticsAsync(_xdsl.StatisticsPeriodEnum period, string serviceName, _xdsl.AccessStatisticsTypeEnum type) {
            return _client.GetFromJsonAsync<_complexType_UnitAndValues_xdsl.AccessLatency>(string.Format("/xdsl/{serviceName}/statistics?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/tasks
        public Task<System.Int64[]> GetXdslServiceNameTasksAsync(string serviceName, [System.Runtime.InteropServices.OptionalAttribute()] string function, [System.Runtime.InteropServices.OptionalAttribute()] _xdsl.TaskStatusEnum status) {
            return _client.GetFromJsonAsync<long[]>(string.Format("/xdsl/{serviceName}/tasks?{queryParameters}", serviceName, queryParameters));
        }
        
        // Path: /xdsl/{serviceName}/tasks/{id}
        public Task<_xdsl.Task> GetXdslServiceNameTasksIdAsync(long id, string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.Task>(string.Format("/xdsl/{serviceName}/tasks/{id}", id, serviceName));
        }
        
        // Path: /xdsl/{serviceName}/tasks/{id}/archive
        public System.Threading.Tasks.Task PostXdslServiceNameTasksIdArchiveAsync(long id, string serviceName) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/templateModem
        public Task<System.String[]> GetXdslTemplateModemAsync() {
            return _client.GetFromJsonAsync<string[]>("/xdsl/templateModem");
        }
        
        // Path: /xdsl/templateModem
        public Task<_xdsl.TemplateModem> PostXdslTemplateModemAsync(_xdsl_templateModem.post body) {
            return default(Task<_xdsl.TemplateModem>);
        }
        
        // Path: /xdsl/templateModem/{name}
        public System.Threading.Tasks.Task DeleteXdslTemplateModemNameAsync(string name) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/templateModem/{name}
        public Task<_xdsl.TemplateModem> GetXdslTemplateModemNameAsync(string name) {
            return _client.GetFromJsonAsync<_xdsl.TemplateModem>(string.Format("/xdsl/templateModem/{name}", name));
        }
        
        // Path: /xdsl/templateModem/{name}
        public System.Threading.Tasks.Task PutXdslTemplateModemNameAsync(_xdsl.TemplateModem body, string name) {
            return Task.CompletedTask;
        }
        
        // Path: /xdsl/{serviceName}/totalDeconsolidationTerms
        public Task<_xdsl.DeconsolidationTerms> GetXdslServiceNameTotalDeconsolidationTermsAsync(string serviceName) {
            return _client.GetFromJsonAsync<_xdsl.DeconsolidationTerms>(string.Format("/xdsl/{serviceName}/totalDeconsolidationTerms", serviceName));
        }
        
        // Path: /xdsl/{serviceName}/updateInvalidOrMissingRio
        public System.Threading.Tasks.Task PostXdslServiceNameUpdateInvalidOrMissingRioAsync(_xdsl_updateInvalidOrMissingRio.post body, string serviceName) {
            return Task.CompletedTask;
        }
    }
}
