//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ovh.Sdk.Net.Client {
    
    
    public class Client {
        
        // Path: /allDom
        private Task<System.String[]> GetAllDomAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /allDom/{serviceName}
        private Task<_allDom.AllDomWithIAM> GetAllDomServiceNameAsync() {
            return default(Task<_allDom.AllDomWithIAM>);
        }
        
        // Path: /allDom/{serviceName}/domain
        private Task<System.String[]> GetAllDomServiceNameDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /allDom/{serviceName}/domain/{domain}
        private Task<_allDom.AllDomDomain> GetAllDomServiceNameDomainDomainAsync() {
            return default(Task<_allDom.AllDomDomain>);
        }
        
        // Path: /allDom/{serviceName}/serviceInfos
        private Task<_services.Service> GetAllDomServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /allDom/{serviceName}/serviceInfos
        private void PutAllDomServiceNameServiceInfosAsync() {
        }
        
        // Path: /auth/credential
        private Task<_auth.ApiCredentialRequest> PostAuthCredentialAsync() {
            return default(Task<_auth.ApiCredentialRequest>);
        }
        
        // Path: /auth/currentCredential
        private Task<_auth.ApiCredential> GetAuthCurrentCredentialAsync() {
            return default(Task<_auth.ApiCredential>);
        }
        
        // Path: /auth/details
        private Task<_auth.Details> GetAuthDetailsAsync() {
            return default(Task<_auth.Details>);
        }
        
        // Path: /auth/logout
        private void PostAuthLogoutAsync() {
        }
        
        // Path: /auth/time
        private Task<System.Int64> GetAuthTimeAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /cdn/dedicated
        private Task<System.String[]> GetCdnDedicatedAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cdn/dedicated/pops
        private Task<System.String[]> GetCdnDedicatedPopsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cdn/dedicated/pops/{name}
        private Task<_cdnanycast.Pop> GetCdnDedicatedPopsNameAsync() {
            return default(Task<_cdnanycast.Pop>);
        }
        
        // Path: /cdn/dedicated/{serviceName}
        private Task<_cdnanycast.AnycastWithIAM> GetCdnDedicatedServiceNameAsync() {
            return default(Task<_cdnanycast.AnycastWithIAM>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/changeContact
        private Task<System.Int64[]> PostCdnDedicatedServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains
        private Task<System.String[]> GetCdnDedicatedServiceNameDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains
        private Task<_cdnanycast.Domain> PostCdnDedicatedServiceNameDomainsAsync() {
            return default(Task<_cdnanycast.Domain>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        private Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameDomainsDomainAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        private Task<_cdnanycast.Domain> GetCdnDedicatedServiceNameDomainsDomainAsync() {
            return default(Task<_cdnanycast.Domain>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}
        private void PutCdnDedicatedServiceNameDomainsDomainAsync() {
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends
        private Task<System.Net.IPAddress[]> GetCdnDedicatedServiceNameDomainsDomainBackendsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends
        private Task<_cdnanycast.Backend> PostCdnDedicatedServiceNameDomainsDomainBackendsAsync() {
            return default(Task<_cdnanycast.Backend>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        private Task<System.Net.IPAddress> DeleteCdnDedicatedServiceNameDomainsDomainBackendsIpAsync() {
            return default(Task<System.Net.IPAddress>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}
        private Task<_cdnanycast.Backend> GetCdnDedicatedServiceNameDomainsDomainBackendsIpAsync() {
            return default(Task<_cdnanycast.Backend>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        private Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainCacheRulesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules
        private Task<_cdnanycast.CacheRule> PostCdnDedicatedServiceNameDomainsDomainCacheRulesAsync() {
            return default(Task<_cdnanycast.CacheRule>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        private Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        private Task<_cdnanycast.CacheRule> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync() {
            return default(Task<_cdnanycast.CacheRule>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}
        private void PutCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdAsync() {
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/flush
        private Task<_cdnanycast.Task> PostCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdFlushAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks
        private Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{taskId}
        private Task<_cdnanycast.Task> GetCdnDedicatedServiceNameDomainsDomainCacheRulesCacheRuleIdTasksTaskIdAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/flush
        private Task<_cdnanycast.Task> PostCdnDedicatedServiceNameDomainsDomainFlushAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/logs
        private Task<_cdnanycast.LogsURL> PostCdnDedicatedServiceNameDomainsDomainLogsAsync() {
            return default(Task<_cdnanycast.LogsURL>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/statistics
        private Task<_cdnanycast.StatsDataType[]> GetCdnDedicatedServiceNameDomainsDomainStatisticsAsync() {
            return default(Task<_cdnanycast.StatsDataType[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/tasks
        private Task<System.Int64[]> GetCdnDedicatedServiceNameDomainsDomainTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}
        private Task<_cdnanycast.Task> GetCdnDedicatedServiceNameDomainsDomainTasksTaskIdAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/logs
        private Task<_cdnanycast.LogsURL> PostCdnDedicatedServiceNameLogsAsync() {
            return default(Task<_cdnanycast.LogsURL>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/quota
        private Task<_cdnanycast.StatsDataType[]> GetCdnDedicatedServiceNameQuotaAsync() {
            return default(Task<_cdnanycast.StatsDataType[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/serviceInfos
        private Task<_services.Service> GetCdnDedicatedServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/serviceInfos
        private void PutCdnDedicatedServiceNameServiceInfosAsync() {
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        private Task<_cdnanycast.Task> DeleteCdnDedicatedServiceNameSslAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        private Task<_cdnanycast.Ssl> GetCdnDedicatedServiceNameSslAsync() {
            return default(Task<_cdnanycast.Ssl>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl
        private Task<_cdnanycast.Ssl> PostCdnDedicatedServiceNameSslAsync() {
            return default(Task<_cdnanycast.Ssl>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/tasks
        private Task<System.Int64[]> GetCdnDedicatedServiceNameSslTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/tasks/{taskId}
        private Task<_cdnanycast.Task> GetCdnDedicatedServiceNameSslTasksTaskIdAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cdn/dedicated/{serviceName}/ssl/update
        private Task<_cdnanycast.Task> PostCdnDedicatedServiceNameSslUpdateAsync() {
            return default(Task<_cdnanycast.Task>);
        }
        
        // Path: /cloud/agreements
        private Task<_cloud_project.ProductAgreements> GetCloudAgreementsAsync() {
            return default(Task<_cloud_project.ProductAgreements>);
        }
        
        // Path: /cloud/eligibility
        private Task<_cloud_project.EligibilityInfo> GetCloudEligibilityAsync() {
            return default(Task<_cloud_project.EligibilityInfo>);
        }
        
        // Path: /cloud/order
        private Task<_cloud_order.Order[]> GetCloudOrderAsync() {
            return default(Task<_cloud_order.Order[]>);
        }
        
        // Path: /cloud/order/rule/availability
        private Task<_cloud_order_rule.Availability> GetCloudOrderRuleAvailabilityAsync() {
            return default(Task<_cloud_order_rule.Availability>);
        }
        
        // Path: /cloud/order/rule/instanceCategory
        private Task<_cloud_order_rule.InstanceCategories> GetCloudOrderRuleInstanceCategoryAsync() {
            return default(Task<_cloud_order_rule.InstanceCategories>);
        }
        
        // Path: /cloud/project
        private Task<System.String[]> GetCloudProjectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}
        private Task<_cloud.ProjectWithIAM> GetCloudProjectServiceNameAsync() {
            return default(Task<_cloud.ProjectWithIAM>);
        }
        
        // Path: /cloud/project/{serviceName}
        private void PutCloudProjectServiceNameAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/acl
        private Task<System.String[]> GetCloudProjectServiceNameAclAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/acl
        private Task<_cloud.Acl> PostCloudProjectServiceNameAclAsync() {
            return default(Task<_cloud.Acl>);
        }
        
        // Path: /cloud/project/{serviceName}/acl/{accountId}
        private void DeleteCloudProjectServiceNameAclAccountIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/acl/{accountId}
        private Task<_cloud.Acl> GetCloudProjectServiceNameAclAccountIdAsync() {
            return default(Task<_cloud.Acl>);
        }
        
        // Path: /cloud/project/{serviceName}/activateMonthlyBilling
        private Task<_cloud_instance.InstanceDetail[]> PostCloudProjectServiceNameActivateMonthlyBillingAsync() {
            return default(Task<_cloud_instance.InstanceDetail[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app
        private Task<_cloud_project_ai_app.App[]> GetCloudProjectServiceNameAiAppAsync() {
            return default(Task<_cloud_project_ai_app.App[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app
        private Task<_cloud_project_ai_app.App> PostCloudProjectServiceNameAiAppAsync() {
            return default(Task<_cloud_project_ai_app.App>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/command
        private Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiAppCommandAsync() {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        private void DeleteCloudProjectServiceNameAiAppAppIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        private Task<_cloud_project_ai_app.App> GetCloudProjectServiceNameAiAppAppIdAsync() {
            return default(Task<_cloud_project_ai_app.App>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}
        private Task<_cloud_project_ai_app.App> PutCloudProjectServiceNameAiAppAppIdAsync() {
            return default(Task<_cloud_project_ai_app.App>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/datasync
        private Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiAppAppIdDatasyncAsync() {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/image
        private Task<_cloud_project_ai.GenericResponse> PutCloudProjectServiceNameAiAppAppIdImageAsync() {
            return default(Task<_cloud_project_ai.GenericResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/label
        private void PutCloudProjectServiceNameAiAppAppIdLabelAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/log
        private Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiAppAppIdLogAsync() {
            return default(Task<_cloud_project_ai.Logs>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/scalingstrategy
        private void PutCloudProjectServiceNameAiAppAppIdScalingstrategyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/start
        private void PutCloudProjectServiceNameAiAppAppIdStartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/app/{appId}/stop
        private void PutCloudProjectServiceNameAiAppAppIdStopAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/authorization
        private Task<_cloud_project_ai.AuthorizationStatus> GetCloudProjectServiceNameAiAuthorizationAsync() {
            return default(Task<_cloud_project_ai.AuthorizationStatus>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/authorization
        private void PostCloudProjectServiceNameAiAuthorizationAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/feature
        private Task<_cloud_project_ai_capabilities.Features> GetCloudProjectServiceNameAiCapabilitiesFeatureAsync() {
            return default(Task<_cloud_project_ai_capabilities.Features>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/quota
        private Task<_cloud_project_ai_capabilities.ProjectQuotas> GetCloudProjectServiceNameAiCapabilitiesQuotaAsync() {
            return default(Task<_cloud_project_ai_capabilities.ProjectQuotas>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region
        private Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiCapabilitiesRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}
        private Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiCapabilitiesRegionRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/app/image
        private Task<_cloud_project_ai_capabilities_app.Image[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionAppImageAsync() {
            return default(Task<_cloud_project_ai_capabilities_app.Image[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/data/region
        private Task<System.String[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionDataRegionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor
        private Task<_cloud_project_ai_capabilities.Flavor[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionFlavorAsync() {
            return default(Task<_cloud_project_ai_capabilities.Flavor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/flavor/{flavorId}
        private Task<_cloud_project_ai_capabilities.Flavor> GetCloudProjectServiceNameAiCapabilitiesRegionRegionFlavorFlavorIdAsync() {
            return default(Task<_cloud_project_ai_capabilities.Flavor>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/preset
        private Task<_cloud_project_ai_capabilities.Preset[]> GetCloudProjectServiceNameAiCapabilitiesRegionRegionPresetAsync() {
            return default(Task<_cloud_project_ai_capabilities.Preset[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/capabilities/region/{region}/preset/{presetId}
        private Task<_cloud_project_ai_capabilities.Preset> GetCloudProjectServiceNameAiCapabilitiesRegionRegionPresetPresetIdAsync() {
            return default(Task<_cloud_project_ai_capabilities.Preset>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region
        private Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiDataRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}
        private Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiDataRegionRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias
        private Task<_cloud_project_ai.DataStore[]> GetCloudProjectServiceNameAiDataRegionRegionAliasAsync() {
            return default(Task<_cloud_project_ai.DataStore[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias
        private Task<_cloud_project_ai.DataStore> PostCloudProjectServiceNameAiDataRegionRegionAliasAsync() {
            return default(Task<_cloud_project_ai.DataStore>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        private void DeleteCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        private Task<_cloud_project_ai.DataStore> GetCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync() {
            return default(Task<_cloud_project_ai.DataStore>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}
        private void PutCloudProjectServiceNameAiDataRegionRegionAliasAliasAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/data/region/{region}/alias/{alias}/auth
        private Task<_cloud_project_ai.DataStoreAuth> GetCloudProjectServiceNameAiDataRegionRegionAliasAliasAuthAsync() {
            return default(Task<_cloud_project_ai.DataStoreAuth>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job
        private Task<_cloud_project_ai_job.Job[]> GetCloudProjectServiceNameAiJobAsync() {
            return default(Task<_cloud_project_ai_job.Job[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job
        private Task<_cloud_project_ai_job.Job> PostCloudProjectServiceNameAiJobAsync() {
            return default(Task<_cloud_project_ai_job.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/capabilities/presetImage
        private Task<_cloud_project_ai_job.PresetImage[]> GetCloudProjectServiceNameAiJobCapabilitiesPresetImageAsync() {
            return default(Task<_cloud_project_ai_job.PresetImage[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/command
        private Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiJobCommandAsync() {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}
        private void DeleteCloudProjectServiceNameAiJobJobIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}
        private Task<_cloud_project_ai_job.Job> GetCloudProjectServiceNameAiJobJobIdAsync() {
            return default(Task<_cloud_project_ai_job.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/datasync
        private Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiJobJobIdDatasyncAsync() {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/kill
        private void PutCloudProjectServiceNameAiJobJobIdKillAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/label
        private void PutCloudProjectServiceNameAiJobJobIdLabelAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/job/{jobId}/log
        private Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiJobJobIdLogAsync() {
            return default(Task<_cloud_project_ai.Logs>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook
        private Task<_cloud_project_ai_notebook.Notebook[]> GetCloudProjectServiceNameAiNotebookAsync() {
            return default(Task<_cloud_project_ai_notebook.Notebook[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook
        private Task<_cloud_project_ai_notebook.Notebook> PostCloudProjectServiceNameAiNotebookAsync() {
            return default(Task<_cloud_project_ai_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/capabilities/editor
        private Task<_cloud_project_ai_notebook.Editor[]> GetCloudProjectServiceNameAiNotebookCapabilitiesEditorAsync() {
            return default(Task<_cloud_project_ai_notebook.Editor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/capabilities/framework
        private Task<_cloud_project_ai_notebook.Framework[]> GetCloudProjectServiceNameAiNotebookCapabilitiesFrameworkAsync() {
            return default(Task<_cloud_project_ai_notebook.Framework[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/command
        private Task<_cloud_project_ai.Command> PostCloudProjectServiceNameAiNotebookCommandAsync() {
            return default(Task<_cloud_project_ai.Command>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        private void DeleteCloudProjectServiceNameAiNotebookNotebookIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        private Task<_cloud_project_ai_notebook.Notebook> GetCloudProjectServiceNameAiNotebookNotebookIdAsync() {
            return default(Task<_cloud_project_ai_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}
        private void PutCloudProjectServiceNameAiNotebookNotebookIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup
        private Task<_cloud_project_ai_notebook.Backup[]> GetCloudProjectServiceNameAiNotebookNotebookIdBackupAsync() {
            return default(Task<_cloud_project_ai_notebook.Backup[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}
        private Task<_cloud_project_ai_notebook.Backup> GetCloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_ai_notebook.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/backup/{backupId}/fork
        private Task<_cloud_project_ai_notebook.Notebook> PostCloudProjectServiceNameAiNotebookNotebookIdBackupBackupIdForkAsync() {
            return default(Task<_cloud_project_ai_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/datasync
        private Task<_cloud_project_ai_volume.DataSync> PostCloudProjectServiceNameAiNotebookNotebookIdDatasyncAsync() {
            return default(Task<_cloud_project_ai_volume.DataSync>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/label
        private void PutCloudProjectServiceNameAiNotebookNotebookIdLabelAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/log
        private Task<_cloud_project_ai.Logs> GetCloudProjectServiceNameAiNotebookNotebookIdLogAsync() {
            return default(Task<_cloud_project_ai.Logs>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/restart
        private void PutCloudProjectServiceNameAiNotebookNotebookIdRestartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/start
        private void PutCloudProjectServiceNameAiNotebookNotebookIdStartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/notebook/{notebookId}/stop
        private void PutCloudProjectServiceNameAiNotebookNotebookIdStopAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region
        private Task<_cloud_project_ai_capabilities.Region[]> GetCloudProjectServiceNameAiPartnersRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}
        private Task<_cloud_project_ai_capabilities.Region> GetCloudProjectServiceNameAiPartnersRegionRegionAsync() {
            return default(Task<_cloud_project_ai_capabilities.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}/partner
        private Task<_cloud_project_ai_partner.Partner[]> GetCloudProjectServiceNameAiPartnersRegionRegionPartnerAsync() {
            return default(Task<_cloud_project_ai_partner.Partner[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/partners/region/{region}/partner/{partnerId}
        private Task<_cloud_project_ai_partner.Partner> GetCloudProjectServiceNameAiPartnersRegionRegionPartnerPartnerIdAsync() {
            return default(Task<_cloud_project_ai_partner.Partner>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry
        private Task<_cloud_project_ai_registry.Registry[]> GetCloudProjectServiceNameAiRegistryAsync() {
            return default(Task<_cloud_project_ai_registry.Registry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry
        private Task<_cloud_project_ai_registry.Registry> PostCloudProjectServiceNameAiRegistryAsync() {
            return default(Task<_cloud_project_ai_registry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        private void DeleteCloudProjectServiceNameAiRegistryRegistryIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        private Task<_cloud_project_ai_registry.Registry> GetCloudProjectServiceNameAiRegistryRegistryIdAsync() {
            return default(Task<_cloud_project_ai_registry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/registry/{registryId}
        private void PutCloudProjectServiceNameAiRegistryRegistryIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/token
        private Task<_cloud_project_ai_token.Token[]> GetCloudProjectServiceNameAiTokenAsync() {
            return default(Task<_cloud_project_ai_token.Token[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/token
        private Task<_cloud_project_ai_token.Token> PostCloudProjectServiceNameAiTokenAsync() {
            return default(Task<_cloud_project_ai_token.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}
        private void DeleteCloudProjectServiceNameAiTokenIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}
        private Task<_cloud_project_ai_token.Token> GetCloudProjectServiceNameAiTokenIdAsync() {
            return default(Task<_cloud_project_ai_token.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/ai/token/{id}/renew
        private Task<_cloud_project_ai_token.Token> PostCloudProjectServiceNameAiTokenIdRenewAsync() {
            return default(Task<_cloud_project_ai_token.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting
        private Task<System.String[]> GetCloudProjectServiceNameAlertingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting
        private Task<_cloud.Alerting> PostCloudProjectServiceNameAlertingAsync() {
            return default(Task<_cloud.Alerting>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        private void DeleteCloudProjectServiceNameAlertingIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        private Task<_cloud.Alerting> GetCloudProjectServiceNameAlertingIdAsync() {
            return default(Task<_cloud.Alerting>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}
        private void PutCloudProjectServiceNameAlertingIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}/alert
        private Task<System.Int64[]> GetCloudProjectServiceNameAlertingIdAlertAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/alerting/{id}/alert/{alertId}
        private Task<_cloud.AlertingAlert> GetCloudProjectServiceNameAlertingIdAlertAlertIdAsync() {
            return default(Task<_cloud.AlertingAlert>);
        }
        
        // Path: /cloud/project/{serviceName}/bill
        private Task<_cloud_project.Bill[]> GetCloudProjectServiceNameBillAsync() {
            return default(Task<_cloud_project.Bill[]>);
        }
        
        // Path: /cloud/project/{serviceName}/cancel
        private void PostCloudProjectServiceNameCancelAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/containerRegistry
        private Task<_cloud_containerRegistry.Capability[]> GetCloudProjectServiceNameCapabilitiesContainerRegistryAsync() {
            return default(Task<_cloud_containerRegistry.Capability[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/admissionplugins
        private Task<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]> GetCloudProjectServiceNameCapabilitiesKubeAdmissionpluginsAsync() {
            return default(Task<_cloud.ProjectKubeCustomizationAPIServerAdmissionPluginsEnum[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/flavors
        private Task<_cloud_kube.Flavor[]> GetCloudProjectServiceNameCapabilitiesKubeFlavorsAsync() {
            return default(Task<_cloud_kube.Flavor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/log/kind
        private Task<System.String[]> GetCloudProjectServiceNameCapabilitiesKubeLogKindAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/log/kind/{name}
        private Task<_dbaas_logs.LogKind> GetCloudProjectServiceNameCapabilitiesKubeLogKindNameAsync() {
            return default(Task<_dbaas_logs.LogKind>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/kube/regions
        private Task<System.String[]> GetCloudProjectServiceNameCapabilitiesKubeRegionsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/loadbalancer/region
        private Task<System.String[]> GetCloudProjectServiceNameCapabilitiesLoadbalancerRegionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/loadbalancer/region/{regionName}
        private Task<_cloud_project_loadbalancer.Region> GetCloudProjectServiceNameCapabilitiesLoadbalancerRegionRegionNameAsync() {
            return default(Task<_cloud_project_loadbalancer.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/capabilities/productAvailability
        private Task<_cloud_capabilities.Availability> GetCloudProjectServiceNameCapabilitiesProductAvailabilityAsync() {
            return default(Task<_cloud_capabilities.Availability>);
        }
        
        // Path: /cloud/project/{serviceName}/changeContact
        private Task<System.Int64[]> PostCloudProjectServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/confirmTermination
        private Task<System.String> PostCloudProjectServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /cloud/project/{serviceName}/consumption
        private Task<_cloud_project.ProjectUsage> GetCloudProjectServiceNameConsumptionAsync() {
            return default(Task<_cloud_project.ProjectUsage>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry
        private Task<_cloud_containerRegistry.Registry[]> GetCloudProjectServiceNameContainerRegistryAsync() {
            return default(Task<_cloud_containerRegistry.Registry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry
        private Task<_cloud_containerRegistry.Registry> PostCloudProjectServiceNameContainerRegistryAsync() {
            return default(Task<_cloud_containerRegistry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        private void DeleteCloudProjectServiceNameContainerRegistryRegistryIDAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        private Task<_cloud_containerRegistry.Registry> GetCloudProjectServiceNameContainerRegistryRegistryIDAsync() {
            return default(Task<_cloud_containerRegistry.Registry>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}
        private void PutCloudProjectServiceNameContainerRegistryRegistryIDAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/capabilities/plan
        private Task<_cloud_containerRegistry.Plan[]> GetCloudProjectServiceNameContainerRegistryRegistryIDCapabilitiesPlanAsync() {
            return default(Task<_cloud_containerRegistry.Plan[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        private Task<_cloud_containerRegistry.IPRestrictions[]> GetCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync() {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/management
        private Task<_cloud_containerRegistry.IPRestrictions[]> PutCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsManagementAsync() {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        private Task<_cloud_containerRegistry.IPRestrictions[]> GetCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync() {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/ipRestrictions/registry
        private Task<_cloud_containerRegistry.IPRestrictions[]> PutCloudProjectServiceNameContainerRegistryRegistryIDIpRestrictionsRegistryAsync() {
            return default(Task<_cloud_containerRegistry.IPRestrictions[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        private void DeleteCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        private Task<_cloud_containerRegistry.OIDCConfiguration> GetCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync() {
            return default(Task<_cloud_containerRegistry.OIDCConfiguration>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        private void PostCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/openIdConnect
        private void PutCloudProjectServiceNameContainerRegistryRegistryIDOpenIdConnectAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        private Task<_cloud_containerRegistry.Plan> GetCloudProjectServiceNameContainerRegistryRegistryIDPlanAsync() {
            return default(Task<_cloud_containerRegistry.Plan>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/plan
        private void PutCloudProjectServiceNameContainerRegistryRegistryIDPlanAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users
        private Task<_cloud_containerRegistry.User[]> GetCloudProjectServiceNameContainerRegistryRegistryIDUsersAsync() {
            return default(Task<_cloud_containerRegistry.User[]>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users
        private Task<_cloud_containerRegistry.User> PostCloudProjectServiceNameContainerRegistryRegistryIDUsersAsync() {
            return default(Task<_cloud_containerRegistry.User>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        private void DeleteCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}
        private Task<_cloud_containerRegistry.User> GetCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDAsync() {
            return default(Task<_cloud_containerRegistry.User>);
        }
        
        // Path: /cloud/project/{serviceName}/containerRegistry/{registryID}/users/{userID}/setAsAdmin
        private void PutCloudProjectServiceNameContainerRegistryRegistryIDUsersUserIDSetAsAdminAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/credit
        private Task<System.Int64[]> GetCloudProjectServiceNameCreditAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/credit
        private void PostCloudProjectServiceNameCreditAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/credit/{id}
        private Task<_cloud.Credit> GetCloudProjectServiceNameCreditIdAsync() {
            return default(Task<_cloud.Credit>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/authorization
        private Task<_cloud_project_dataProcessing.AuthorizationStatus> GetCloudProjectServiceNameDataProcessingAuthorizationAsync() {
            return default(Task<_cloud_project_dataProcessing.AuthorizationStatus>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/authorization
        private void PostCloudProjectServiceNameDataProcessingAuthorizationAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/capabilities
        private Task<_cloud_project_dataProcessing.Capability[]> GetCloudProjectServiceNameDataProcessingCapabilitiesAsync() {
            return default(Task<_cloud_project_dataProcessing.Capability[]>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs
        private Task<System.Guid[]> GetCloudProjectServiceNameDataProcessingJobsAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs
        private Task<_cloud_project_dataProcessing.Job> PostCloudProjectServiceNameDataProcessingJobsAsync() {
            return default(Task<_cloud_project_dataProcessing.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        private void DeleteCloudProjectServiceNameDataProcessingJobsJobIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}
        private Task<_cloud_project_dataProcessing.Job> GetCloudProjectServiceNameDataProcessingJobsJobIdAsync() {
            return default(Task<_cloud_project_dataProcessing.Job>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/jobs/{jobId}/logs
        private Task<_cloud_project_dataProcessing.JobLogs> GetCloudProjectServiceNameDataProcessingJobsJobIdLogsAsync() {
            return default(Task<_cloud_project_dataProcessing.JobLogs>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks
        private Task<System.Guid[]> GetCloudProjectServiceNameDataProcessingNotebooksAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks
        private Task<_cloud_project_dataProcessing_notebook.Notebook> PostCloudProjectServiceNameDataProcessingNotebooksAsync() {
            return default(Task<_cloud_project_dataProcessing_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/capabilities
        private Task<_cloud_project_dataProcessing_notebook.Capability[]> GetCloudProjectServiceNameDataProcessingNotebooksCapabilitiesAsync() {
            return default(Task<_cloud_project_dataProcessing_notebook.Capability[]>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        private void DeleteCloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}
        private Task<_cloud_project_dataProcessing_notebook.Notebook> GetCloudProjectServiceNameDataProcessingNotebooksNotebookIdAsync() {
            return default(Task<_cloud_project_dataProcessing_notebook.Notebook>);
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/start
        private void PutCloudProjectServiceNameDataProcessingNotebooksNotebookIdStartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/dataProcessing/notebooks/{notebookId}/stop
        private void PutCloudProjectServiceNameDataProcessingNotebooksNotebookIdStopAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/availability
        private Task<_cloud_project_database.Availability[]> GetCloudProjectServiceNameDatabaseAvailabilityAsync() {
            return default(Task<_cloud_project_database.Availability[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/capabilities
        private Task<_cloud_project_database.Capabilities> GetCloudProjectServiceNameDatabaseCapabilitiesAsync() {
            return default(Task<_cloud_project_database.Capabilities>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseCassandraAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseCassandraClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseCassandraClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseCassandraClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseCassandraClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseCassandraClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/certificates
        private Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseCassandraClusterIdCertificatesAsync() {
            return default(Task<_cloud_project_database_service.Certificates>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseCassandraClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseCassandraClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseCassandraClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseCassandraClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseCassandraClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseCassandraClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseCassandraClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/cassandra/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseCassandraClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseGrafanaAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseGrafanaClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseGrafanaClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseGrafanaClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseGrafanaClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseGrafanaClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseGrafanaClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseGrafanaClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseGrafanaClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseGrafanaClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/grafana/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseGrafanaClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        private Task<_cloud_project_database_kafka.Service> GetCloudProjectServiceNameDatabaseKafkaClusterIdAsync() {
            return default(Task<_cloud_project_database_kafka.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}
        private Task<_cloud_project_database_kafka.Service> PutCloudProjectServiceNameDatabaseKafkaClusterIdAsync() {
            return default(Task<_cloud_project_database_kafka.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdAclAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl
        private Task<_cloud_project_database_kafka.TopicAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdAclAsync() {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/acl/{aclId}
        private Task<_cloud_project_database_kafka.TopicAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdAclAclIdAsync() {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseKafkaClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/certificates
        private Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseKafkaClusterIdCertificatesAsync() {
            return default(Task<_cloud_project_database_service.Certificates>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseKafkaClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/permissions
        private Task<_cloud_project_database_kafka.Permissions> GetCloudProjectServiceNameDatabaseKafkaClusterIdPermissionsAsync() {
            return default(Task<_cloud_project_database_kafka.Permissions>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl
        private Task<_cloud_project_database_kafka.SchemaRegistryAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAsync() {
            return default(Task<_cloud_project_database_kafka.SchemaRegistryAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/schemaRegistryAcl/{aclId}
        private Task<_cloud_project_database_kafka.SchemaRegistryAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdSchemaRegistryAclAclIdAsync() {
            return default(Task<_cloud_project_database_kafka.SchemaRegistryAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic
        private Task<_cloud_project_database_kafka.Topic> PostCloudProjectServiceNameDatabaseKafkaClusterIdTopicAsync() {
            return default(Task<_cloud_project_database_kafka.Topic>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        private Task<_cloud_project_database_kafka.Topic> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync() {
            return default(Task<_cloud_project_database_kafka.Topic>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topic/{topicId}
        private Task<_cloud_project_database_kafka.Topic> PutCloudProjectServiceNameDatabaseKafkaClusterIdTopicTopicIdAsync() {
            return default(Task<_cloud_project_database_kafka.Topic>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl
        private Task<_cloud_project_database_kafka.TopicAcl> PostCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAsync() {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/topicAcl/{aclId}
        private Task<_cloud_project_database_kafka.TopicAcl> GetCloudProjectServiceNameDatabaseKafkaClusterIdTopicAclAclIdAsync() {
            return default(Task<_cloud_project_database_kafka.TopicAcl>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/access
        private Task<_cloud_project_database_kafka_user.Access> GetCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdAccessAsync() {
            return default(Task<_cloud_project_database_kafka_user.Access>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafka/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaConnectAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}
        private Task<_cloud_project_database_kafkaConnect_capabilities.Connector> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdAsync() {
            return default(Task<_cloud_project_database_kafkaConnect_capabilities.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/configuration
        private Task<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdConfigurationAsync() {
            return default(Task<_cloud_project_database_kafkaConnect_capabilities_connector_configuration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/connector/{connectorId}/transforms
        private Task<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesConnectorConnectorIdTransformsAsync() {
            return default(Task<_cloud_project_database_kafkaConnect_capabilities_connector.Transform[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector
        private Task<_cloud_project_database_kafkaConnect.Connector> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorAsync() {
            return default(Task<_cloud_project_database_kafkaConnect.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        private Task<_cloud_project_database_kafkaConnect.Connector> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync() {
            return default(Task<_cloud_project_database_kafkaConnect.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}
        private Task<_cloud_project_database_kafkaConnect.Connector> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdAsync() {
            return default(Task<_cloud_project_database_kafkaConnect.Connector>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/pause
        private void PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdPauseAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/restart
        private void PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdRestartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/resume
        private void PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdResumeAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task
        private Task<System.Int64[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}
        private Task<_cloud_project_database_kafkaConnect_connector.Task> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdAsync() {
            return default(Task<_cloud_project_database_kafkaConnect_connector.Task>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/connector/{connectorId}/task/{taskId}/restart
        private void PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdConnectorConnectorIdTaskTaskIdRestartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseKafkaConnectClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaConnect/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseKafkaConnectClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication
        private Task<_cloud_project_database_service.Replication> PostCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationAsync() {
            return default(Task<_cloud_project_database_service.Replication>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        private void DeleteCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        private Task<_cloud_project_database_service.Replication> GetCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync() {
            return default(Task<_cloud_project_database_service.Replication>);
        }
        
        // Path: /cloud/project/{serviceName}/database/kafkaMirrorMaker/{clusterId}/replication/{replicationId}
        private Task<_cloud_project_database_service.Replication> PutCloudProjectServiceNameDatabaseKafkaMirrorMakerClusterIdReplicationReplicationIdAsync() {
            return default(Task<_cloud_project_database_service.Replication>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseM3aggregatorAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseM3aggregatorClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseM3aggregatorClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3aggregator/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseM3aggregatorClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseM3dbAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseM3dbClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseM3dbClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseM3dbClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseM3dbClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseM3dbClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseM3dbClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseM3dbClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseM3dbClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseM3dbClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace
        private Task<_cloud_project_database_m3db.Namespace> PostCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceAsync() {
            return default(Task<_cloud_project_database_m3db.Namespace>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        private void DeleteCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        private Task<_cloud_project_database_m3db.Namespace> GetCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync() {
            return default(Task<_cloud_project_database_m3db.Namespace>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/namespace/{namespaceId}
        private Task<_cloud_project_database_m3db.Namespace> PutCloudProjectServiceNameDatabaseM3dbClusterIdNamespaceNamespaceIdAsync() {
            return default(Task<_cloud_project_database_m3db.Namespace>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseM3dbClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseM3dbClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user
        private Task<_cloud_project_database_m3db.UserWithPassword> PostCloudProjectServiceNameDatabaseM3dbClusterIdUserAsync() {
            return default(Task<_cloud_project_database_m3db.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        private Task<_cloud_project_database_m3db.User> GetCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_m3db.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}
        private Task<_cloud_project_database_m3db.User> PutCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_m3db.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/m3db/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_m3db.UserWithPassword> PostCloudProjectServiceNameDatabaseM3dbClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_m3db.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseMongodbAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseMongodbClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseMongodbClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseMongodbClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/backup/{backupId}/restore
        private Task<_cloud_project_database.Backup> PostCloudProjectServiceNameDatabaseMongodbClusterIdBackupBackupIdRestoreAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseMongodbClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseMongodbClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseMongodbClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node
        private Task<_cloud_project_database_service.Node> PostCloudProjectServiceNameDatabaseMongodbClusterIdNodeAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        private void DeleteCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> PutCloudProjectServiceNameDatabaseMongodbClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/restore
        private void PostCloudProjectServiceNameDatabaseMongodbClusterIdRestoreAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/roles
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdRolesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMongodbClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabaseMongodbClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.UserWithRoles> GetCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.UserWithRoles> PutCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mongodb/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabaseMongodbClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseMysqlAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseMysqlClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseMysqlClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseMysqlClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseMysqlClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseMysqlClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/certificates
        private Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabaseMysqlClusterIdCertificatesAsync() {
            return default(Task<_cloud_project_database_service.Certificates>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries
        private Task<_cloud_project_database_service.CurrentQueries> GetCloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesAsync() {
            return default(Task<_cloud_project_database_service.CurrentQueries>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/currentQueries/cancel
        private Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostCloudProjectServiceNameDatabaseMysqlClusterIdCurrentQueriesCancelAsync() {
            return default(Task<_cloud_project_database_service_currentqueries_query.CancelResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database
        private Task<_cloud_project_database_service.Database> PostCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseAsync() {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        private void DeleteCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/database/{databaseId}
        private Task<_cloud_project_database_service.Database> GetCloudProjectServiceNameDatabaseMysqlClusterIdDatabaseDatabaseIdAsync() {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/enableWrites
        private Task<_cloud_project_database.TemporaryWriteDeadline> PostCloudProjectServiceNameDatabaseMysqlClusterIdEnableWritesAsync() {
            return default(Task<_cloud_project_database.TemporaryWriteDeadline>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseMysqlClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseMysqlClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseMysqlClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseMysqlClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseMysqlClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics
        private Task<_cloud_project_database_mysql.QueryStatistics> GetCloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsAsync() {
            return default(Task<_cloud_project_database_mysql.QueryStatistics>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/queryStatistics/reset
        private void PostCloudProjectServiceNameDatabaseMysqlClusterIdQueryStatisticsResetAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseMysqlClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseMysqlClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.User> GetCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/mysql/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPassword> PostCloudProjectServiceNameDatabaseMysqlClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseOpensearchAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        private Task<_cloud_project_database_opensearch.Service> GetCloudProjectServiceNameDatabaseOpensearchClusterIdAsync() {
            return default(Task<_cloud_project_database_opensearch.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}
        private Task<_cloud_project_database_opensearch.Service> PutCloudProjectServiceNameDatabaseOpensearchClusterIdAsync() {
            return default(Task<_cloud_project_database_opensearch.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseOpensearchClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseOpensearchClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIndexAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/index/{indexId}
        private Task<_cloud_project_database_opensearch.Index> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIndexIndexIdAsync() {
            return default(Task<_cloud_project_database_opensearch.Index>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseOpensearchClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseOpensearchClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseOpensearchClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseOpensearchClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern
        private Task<_cloud_project_database_opensearch.Pattern> PostCloudProjectServiceNameDatabaseOpensearchClusterIdPatternAsync() {
            return default(Task<_cloud_project_database_opensearch.Pattern>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/pattern/{patternId}
        private Task<_cloud_project_database_opensearch.Pattern> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPatternPatternIdAsync() {
            return default(Task<_cloud_project_database_opensearch.Pattern>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/permissions
        private Task<_cloud_project_database_opensearch.Permissions> GetCloudProjectServiceNameDatabaseOpensearchClusterIdPermissionsAsync() {
            return default(Task<_cloud_project_database_opensearch.Permissions>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user
        private Task<_cloud_project_database_opensearch.UserWithPassword> PostCloudProjectServiceNameDatabaseOpensearchClusterIdUserAsync() {
            return default(Task<_cloud_project_database_opensearch.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        private Task<_cloud_project_database_opensearch.User> GetCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_opensearch.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}
        private Task<_cloud_project_database_opensearch.User> PutCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_opensearch.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/opensearch/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_opensearch.UserWithPassword> PostCloudProjectServiceNameDatabaseOpensearchClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_opensearch.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabasePostgresqlAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabasePostgresqlClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabasePostgresqlClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabasePostgresqlClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabasePostgresqlClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/certificates
        private Task<_cloud_project_database_service.Certificates> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCertificatesAsync() {
            return default(Task<_cloud_project_database_service.Certificates>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool
        private Task<_cloud_project_database_postgresql.ConnectionPool> PostCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolAsync() {
            return default(Task<_cloud_project_database_postgresql.ConnectionPool>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        private Task<_cloud_project_database_postgresql.ConnectionPool> GetCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync() {
            return default(Task<_cloud_project_database_postgresql.ConnectionPool>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/connectionPool/{connectionPoolId}
        private Task<_cloud_project_database_postgresql.ConnectionPool> PutCloudProjectServiceNameDatabasePostgresqlClusterIdConnectionPoolConnectionPoolIdAsync() {
            return default(Task<_cloud_project_database_postgresql.ConnectionPool>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries
        private Task<_cloud_project_database_service.CurrentQueries> GetCloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesAsync() {
            return default(Task<_cloud_project_database_service.CurrentQueries>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/currentQueries/cancel
        private Task<_cloud_project_database_service_currentqueries_query.CancelResponse> PostCloudProjectServiceNameDatabasePostgresqlClusterIdCurrentQueriesCancelAsync() {
            return default(Task<_cloud_project_database_service_currentqueries_query.CancelResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database
        private Task<_cloud_project_database_service.Database> PostCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseAsync() {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/database/{databaseId}
        private Task<_cloud_project_database_service.Database> GetCloudProjectServiceNameDatabasePostgresqlClusterIdDatabaseDatabaseIdAsync() {
            return default(Task<_cloud_project_database_service.Database>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/enableWrites
        private Task<_cloud_project_database.TemporaryWriteDeadline> PostCloudProjectServiceNameDatabasePostgresqlClusterIdEnableWritesAsync() {
            return default(Task<_cloud_project_database.TemporaryWriteDeadline>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabasePostgresqlClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabasePostgresqlClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabasePostgresqlClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabasePostgresqlClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics
        private Task<_cloud_project_database_postgresql.QueryStatistics> GetCloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsAsync() {
            return default(Task<_cloud_project_database_postgresql.QueryStatistics>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/queryStatistics/reset
        private void PostCloudProjectServiceNameDatabasePostgresqlClusterIdQueryStatisticsResetAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/roles
        private Task<System.String[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdRolesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user
        private Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabasePostgresqlClusterIdUserAsync() {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.UserWithRoles> GetCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}
        private Task<_cloud_project_database_service.UserWithRoles> PutCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_service.UserWithRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/postgresql/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_service.UserWithPasswordAndRoles> PostCloudProjectServiceNameDatabasePostgresqlClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_service.UserWithPasswordAndRoles>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis
        private Task<_cloud_project_database.Service> PostCloudProjectServiceNameDatabaseRedisAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        private void DeleteCloudProjectServiceNameDatabaseRedisClusterIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseRedisClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}
        private Task<_cloud_project_database.Service> PutCloudProjectServiceNameDatabaseRedisClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> GetCloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/advancedConfiguration
        private Task<Dictionary<string, string>> PutCloudProjectServiceNameDatabaseRedisClusterIdAdvancedConfigurationAsync() {
            return default(Task<Dictionary<string, string>>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/backup
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdBackupAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/backup/{backupId}
        private Task<_cloud_project_database.Backup> GetCloudProjectServiceNameDatabaseRedisClusterIdBackupBackupIdAsync() {
            return default(Task<_cloud_project_database.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/advancedConfiguration
        private Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesAdvancedConfigurationAsync() {
            return default(Task<_cloud_project_database_capabilities_advancedConfiguration.Property[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/categories
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCategoriesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/commands
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesCommandsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/capabilities/integration
        private Task<_cloud_project_database_capabilities.Integration[]> GetCloudProjectServiceNameDatabaseRedisClusterIdCapabilitiesIntegrationAsync() {
            return default(Task<_cloud_project_database_capabilities.Integration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration
        private Task<_cloud_project_database_service.Integration> PostCloudProjectServiceNameDatabaseRedisClusterIdIntegrationAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        private void DeleteCloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/integration/{integrationId}
        private Task<_cloud_project_database_service.Integration> GetCloudProjectServiceNameDatabaseRedisClusterIdIntegrationIntegrationIdAsync() {
            return default(Task<_cloud_project_database_service.Integration>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction
        private Task<_cloud_project_database.IpRestriction> PostCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        private void DeleteCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> GetCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/ipRestriction/{ipBlock}
        private Task<_cloud_project_database.IpRestriction> PutCloudProjectServiceNameDatabaseRedisClusterIdIpRestrictionIpBlockAsync() {
            return default(Task<_cloud_project_database.IpRestriction>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameDatabaseRedisClusterIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/logs
        private Task<_cloud_project_database_service.LogEntry[]> GetCloudProjectServiceNameDatabaseRedisClusterIdLogsAsync() {
            return default(Task<_cloud_project_database_service.LogEntry[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}
        private Task<_cloud_project_database_service.Maintenance> GetCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/maintenance/{maintenanceId}/apply
        private Task<_cloud_project_database_service.Maintenance> PostCloudProjectServiceNameDatabaseRedisClusterIdMaintenanceMaintenanceIdApplyAsync() {
            return default(Task<_cloud_project_database_service.Maintenance>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/metric
        private Task<System.String[]> GetCloudProjectServiceNameDatabaseRedisClusterIdMetricAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/metric/{metricName}
        private Task<_cloud_project_database_service.Metric> GetCloudProjectServiceNameDatabaseRedisClusterIdMetricMetricNameAsync() {
            return default(Task<_cloud_project_database_service.Metric>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/node
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdNodeAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/node/{nodeId}
        private Task<_cloud_project_database_service.Node> GetCloudProjectServiceNameDatabaseRedisClusterIdNodeNodeIdAsync() {
            return default(Task<_cloud_project_database_service.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseRedisClusterIdUserAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user
        private Task<_cloud_project_database_redis.UserWithPassword> PostCloudProjectServiceNameDatabaseRedisClusterIdUserAsync() {
            return default(Task<_cloud_project_database_redis.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        private void DeleteCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        private Task<_cloud_project_database_redis.User> GetCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_redis.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}
        private Task<_cloud_project_database_redis.User> PutCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdAsync() {
            return default(Task<_cloud_project_database_redis.User>);
        }
        
        // Path: /cloud/project/{serviceName}/database/redis/{clusterId}/user/{userId}/credentials/reset
        private Task<_cloud_project_database_redis.UserWithPassword> PostCloudProjectServiceNameDatabaseRedisClusterIdUserUserIdCredentialsResetAsync() {
            return default(Task<_cloud_project_database_redis.UserWithPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/database/service
        private Task<System.Guid[]> GetCloudProjectServiceNameDatabaseServiceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/database/service/{clusterId}
        private Task<_cloud_project_database.Service> GetCloudProjectServiceNameDatabaseServiceClusterIdAsync() {
            return default(Task<_cloud_project_database.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/flavor
        private Task<_cloud_flavor.Flavor[]> GetCloudProjectServiceNameFlavorAsync() {
            return default(Task<_cloud_flavor.Flavor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/flavor/{flavorId}
        private Task<_cloud_flavor.Flavor> GetCloudProjectServiceNameFlavorFlavorIdAsync() {
            return default(Task<_cloud_flavor.Flavor>);
        }
        
        // Path: /cloud/project/{serviceName}/image
        private Task<_cloud_image.Image[]> GetCloudProjectServiceNameImageAsync() {
            return default(Task<_cloud_image.Image[]>);
        }
        
        // Path: /cloud/project/{serviceName}/image/{imageId}
        private Task<_cloud_image.Image> GetCloudProjectServiceNameImageImageIdAsync() {
            return default(Task<_cloud_image.Image>);
        }
        
        // Path: /cloud/project/{serviceName}/instance
        private Task<_cloud_instance.Instance[]> GetCloudProjectServiceNameInstanceAsync() {
            return default(Task<_cloud_instance.Instance[]>);
        }
        
        // Path: /cloud/project/{serviceName}/instance
        private Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceAsync() {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/bulk
        private Task<_cloud_instance.Instance[]> PostCloudProjectServiceNameInstanceBulkAsync() {
            return default(Task<_cloud_instance.Instance[]>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/group
        private Task<_cloud_instancegroup.InstanceGroup[]> GetCloudProjectServiceNameInstanceGroupAsync() {
            return default(Task<_cloud_instancegroup.InstanceGroup[]>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/group
        private Task<_cloud_instancegroup.InstanceGroup> PostCloudProjectServiceNameInstanceGroupAsync() {
            return default(Task<_cloud_instancegroup.InstanceGroup>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/group/{groupId}
        private void DeleteCloudProjectServiceNameInstanceGroupGroupIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/group/{groupId}
        private Task<_cloud_instancegroup.InstanceGroup> GetCloudProjectServiceNameInstanceGroupGroupIdAsync() {
            return default(Task<_cloud_instancegroup.InstanceGroup>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        private void DeleteCloudProjectServiceNameInstanceInstanceIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        private Task<_cloud_instance.InstanceDetail> GetCloudProjectServiceNameInstanceInstanceIdAsync() {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}
        private void PutCloudProjectServiceNameInstanceInstanceIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling
        private Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdActiveMonthlyBillingAsync() {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/applicationAccess
        private Task<_cloud_instance.ApplicationAccess> PostCloudProjectServiceNameInstanceInstanceIdApplicationAccessAsync() {
            return default(Task<_cloud_instance.ApplicationAccess>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface
        private Task<_cloud_instanceInterface.Interface[]> GetCloudProjectServiceNameInstanceInstanceIdInterfaceAsync() {
            return default(Task<_cloud_instanceInterface.Interface[]>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface
        private Task<_cloud_instanceInterface.Interface> PostCloudProjectServiceNameInstanceInstanceIdInterfaceAsync() {
            return default(Task<_cloud_instanceInterface.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        private void DeleteCloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}
        private Task<_cloud_instanceInterface.Interface> GetCloudProjectServiceNameInstanceInstanceIdInterfaceInterfaceIdAsync() {
            return default(Task<_cloud_instanceInterface.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/monitoring
        private Task<_cloud_instance.InstanceMetrics> GetCloudProjectServiceNameInstanceInstanceIdMonitoringAsync() {
            return default(Task<_cloud_instance.InstanceMetrics>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/reboot
        private void PostCloudProjectServiceNameInstanceInstanceIdRebootAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/reinstall
        private Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdReinstallAsync() {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/rescueMode
        private Task<_cloud_instance.RescueAdminPassword> PostCloudProjectServiceNameInstanceInstanceIdRescueModeAsync() {
            return default(Task<_cloud_instance.RescueAdminPassword>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/resize
        private Task<_cloud_instance.InstanceDetail> PostCloudProjectServiceNameInstanceInstanceIdResizeAsync() {
            return default(Task<_cloud_instance.InstanceDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/resume
        private void PostCloudProjectServiceNameInstanceInstanceIdResumeAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/shelve
        private void PostCloudProjectServiceNameInstanceInstanceIdShelveAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/snapshot
        private void PostCloudProjectServiceNameInstanceInstanceIdSnapshotAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/start
        private void PostCloudProjectServiceNameInstanceInstanceIdStartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/stop
        private void PostCloudProjectServiceNameInstanceInstanceIdStopAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/unshelve
        private void PostCloudProjectServiceNameInstanceInstanceIdUnshelveAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/instance/{instanceId}/vnc
        private Task<_cloud_instance.InstanceVnc> PostCloudProjectServiceNameInstanceInstanceIdVncAsync() {
            return default(Task<_cloud_instance.InstanceVnc>);
        }
        
        // Path: /cloud/project/{serviceName}/io/capabilities/stream/region
        private Task<System.String[]> GetCloudProjectServiceNameIoCapabilitiesStreamRegionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/io/capabilities/stream/region/{regionName}
        private Task<_cloud_project_io_stream.Region> GetCloudProjectServiceNameIoCapabilitiesStreamRegionRegionNameAsync() {
            return default(Task<_cloud_project_io_stream.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream
        private Task<System.Guid[]> GetCloudProjectServiceNameIoStreamAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream
        private Task<_cloud_project_io.Stream> PostCloudProjectServiceNameIoStreamAsync() {
            return default(Task<_cloud_project_io.Stream>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        private void DeleteCloudProjectServiceNameIoStreamStreamIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        private Task<_cloud_project_io.Stream> GetCloudProjectServiceNameIoStreamStreamIdAsync() {
            return default(Task<_cloud_project_io.Stream>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}
        private Task<_cloud_project_io.Stream> PutCloudProjectServiceNameIoStreamStreamIdAsync() {
            return default(Task<_cloud_project_io.Stream>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/stats
        private Task<_cloud_project_io.StreamStats> GetCloudProjectServiceNameIoStreamStreamIdStatsAsync() {
            return default(Task<_cloud_project_io.StreamStats>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription
        private Task<_cloud_project_io_stream.Subscription> PostCloudProjectServiceNameIoStreamStreamIdSubscriptionAsync() {
            return default(Task<_cloud_project_io_stream.Subscription>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        private void DeleteCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}
        private Task<_cloud_project_io_stream.Subscription> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdAsync() {
            return default(Task<_cloud_project_io_stream.Subscription>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/resetCursor
        private void PostCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdResetCursorAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/subscription/{subscriptionId}/stats
        private Task<_cloud_project_io_stream.SubscriptionStats> GetCloudProjectServiceNameIoStreamStreamIdSubscriptionSubscriptionIdStatsAsync() {
            return default(Task<_cloud_project_io_stream.SubscriptionStats>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token
        private Task<System.Guid[]> GetCloudProjectServiceNameIoStreamStreamIdTokenAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token
        private Task<_cloud_project_io_stream.Token> PostCloudProjectServiceNameIoStreamStreamIdTokenAsync() {
            return default(Task<_cloud_project_io_stream.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        private void DeleteCloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/io/stream/{streamId}/token/{tokenId}
        private Task<_cloud_project_io_stream.Token> GetCloudProjectServiceNameIoStreamStreamIdTokenTokenIdAsync() {
            return default(Task<_cloud_project_io_stream.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/ip
        private Task<_cloud_ip.CloudIp[]> GetCloudProjectServiceNameIpAsync() {
            return default(Task<_cloud_ip.CloudIp[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover
        private Task<_cloud_ip.FailoverIp[]> GetCloudProjectServiceNameIpFailoverAsync() {
            return default(Task<_cloud_ip.FailoverIp[]>);
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover/{id}
        private Task<_cloud_ip.FailoverIp> GetCloudProjectServiceNameIpFailoverIdAsync() {
            return default(Task<_cloud_ip.FailoverIp>);
        }
        
        // Path: /cloud/project/{serviceName}/ip/failover/{id}/attach
        private Task<_cloud_ip.FailoverIp> PostCloudProjectServiceNameIpFailoverIdAttachAsync() {
            return default(Task<_cloud_ip.FailoverIp>);
        }
        
        // Path: /cloud/project/{serviceName}/kube
        private Task<System.String[]> GetCloudProjectServiceNameKubeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube
        private Task<_cloud_kube.Cluster> PostCloudProjectServiceNameKubeAsync() {
            return default(Task<_cloud_kube.Cluster>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/regions
        private Task<System.String[]> GetCloudProjectServiceNameKubeRegionsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        private void DeleteCloudProjectServiceNameKubeKubeIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        private Task<_cloud_kube.Cluster> GetCloudProjectServiceNameKubeKubeIdAsync() {
            return default(Task<_cloud_kube.Cluster>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}
        private void PutCloudProjectServiceNameKubeKubeIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/auditLogs
        private Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameKubeKubeIdAuditLogsAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/auditLogs/forward
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameKubeKubeIdAuditLogsForwardAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/customization
        private Task<_cloud.ProjectKubeCustomization> GetCloudProjectServiceNameKubeKubeIdCustomizationAsync() {
            return default(Task<_cloud.ProjectKubeCustomization>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/customization
        private Task<_cloud_kube.ResponseMessage> PutCloudProjectServiceNameKubeKubeIdCustomizationAsync() {
            return default(Task<_cloud_kube.ResponseMessage>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/flavors
        private Task<_cloud_kube.Flavor[]> GetCloudProjectServiceNameKubeKubeIdFlavorsAsync() {
            return default(Task<_cloud_kube.Flavor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        private Task<System.Net.IPNetwork[]> GetCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        private Task<System.Net.IPNetwork[]> PostCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions
        private Task<System.Net.IPNetwork[]> PutCloudProjectServiceNameKubeKubeIdIpRestrictionsAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/ipRestrictions/{ip}
        private void DeleteCloudProjectServiceNameKubeKubeIdIpRestrictionsIpAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/kubeconfig
        private Task<_cloud_kube.Kubeconfig> PostCloudProjectServiceNameKubeKubeIdKubeconfigAsync() {
            return default(Task<_cloud_kube.Kubeconfig>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/kubeconfig/reset
        private void PostCloudProjectServiceNameKubeKubeIdKubeconfigResetAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameKubeKubeIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameKubeKubeIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameKubeKubeIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/log/url
        private Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameKubeKubeIdLogUrlAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/metrics/etcdUsage
        private Task<_cloud_kube.EtcdUsage> GetCloudProjectServiceNameKubeKubeIdMetricsEtcdUsageAsync() {
            return default(Task<_cloud_kube.EtcdUsage>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node
        private Task<_cloud_kube.Node[]> GetCloudProjectServiceNameKubeKubeIdNodeAsync() {
            return default(Task<_cloud_kube.Node[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        private void DeleteCloudProjectServiceNameKubeKubeIdNodeNodeIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/node/{nodeId}
        private Task<_cloud_kube.Node> GetCloudProjectServiceNameKubeKubeIdNodeNodeIdAsync() {
            return default(Task<_cloud_kube.Node>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool
        private Task<_cloud_kube.NodePool[]> GetCloudProjectServiceNameKubeKubeIdNodepoolAsync() {
            return default(Task<_cloud_kube.NodePool[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool
        private Task<_cloud_kube.NodePool> PostCloudProjectServiceNameKubeKubeIdNodepoolAsync() {
            return default(Task<_cloud_kube.NodePool>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        private void DeleteCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        private Task<_cloud_kube.NodePool> GetCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync() {
            return default(Task<_cloud_kube.NodePool>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}
        private void PutCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/nodepool/{nodePoolId}/nodes
        private Task<_cloud_kube.Node[]> GetCloudProjectServiceNameKubeKubeIdNodepoolNodePoolIdNodesAsync() {
            return default(Task<_cloud_kube.Node[]>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        private void DeleteCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        private Task<_cloud_kube.OpenIdConnect> GetCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync() {
            return default(Task<_cloud_kube.OpenIdConnect>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        private Task<_cloud_kube.OpenIdConnect> PostCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync() {
            return default(Task<_cloud_kube.OpenIdConnect>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/openIdConnect
        private void PutCloudProjectServiceNameKubeKubeIdOpenIdConnectAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        private Task<_cloud_kube.PrivateNetworkConfiguration> GetCloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync() {
            return default(Task<_cloud_kube.PrivateNetworkConfiguration>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/privateNetworkConfiguration
        private Task<_cloud_kube.ResponseMessage> PutCloudProjectServiceNameKubeKubeIdPrivateNetworkConfigurationAsync() {
            return default(Task<_cloud_kube.ResponseMessage>);
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/reset
        private void PostCloudProjectServiceNameKubeKubeIdResetAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/restart
        private void PostCloudProjectServiceNameKubeKubeIdRestartAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/update
        private void PostCloudProjectServiceNameKubeKubeIdUpdateAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/updateLoadBalancersSubnetId
        private void PutCloudProjectServiceNameKubeKubeIdUpdateLoadBalancersSubnetIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/kube/{kubeId}/updatePolicy
        private void PutCloudProjectServiceNameKubeKubeIdUpdatePolicyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/lab
        private Task<_cloud.Lab[]> GetCloudProjectServiceNameLabAsync() {
            return default(Task<_cloud.Lab[]>);
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}
        private Task<_cloud.Lab> GetCloudProjectServiceNameLabLabIdAsync() {
            return default(Task<_cloud.Lab>);
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}
        private Task<_cloud.Operation> PostCloudProjectServiceNameLabLabIdAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/lab/{labId}/agreement
        private Task<_cloud.LabAgreements> GetCloudProjectServiceNameLabLabIdAgreementAsync() {
            return default(Task<_cloud.LabAgreements>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer
        private Task<System.Guid[]> GetCloudProjectServiceNameLoadbalancerAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer
        private Task<_cloud_project.LoadBalancer> PostCloudProjectServiceNameLoadbalancerAsync() {
            return default(Task<_cloud_project.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        private void DeleteCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        private Task<_cloud_project.LoadBalancer> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync() {
            return default(Task<_cloud_project.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}
        private Task<_cloud_project.LoadBalancer> PutCloudProjectServiceNameLoadbalancerLoadBalancerIdAsync() {
            return default(Task<_cloud_project.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        private Task<System.Int64[]> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration
        private Task<_cloud_project_loadbalancer.Configuration> PostCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationAsync() {
            return default(Task<_cloud_project_loadbalancer.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        private void DeleteCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}
        private Task<_cloud_project_loadbalancer.Configuration> GetCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionAsync() {
            return default(Task<_cloud_project_loadbalancer.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/loadbalancer/{loadBalancerId}/configuration/{version}/apply
        private Task<_cloud_project_loadbalancer.Configuration> PostCloudProjectServiceNameLoadbalancerLoadBalancerIdConfigurationVersionApplyAsync() {
            return default(Task<_cloud_project_loadbalancer.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/migration
        private Task<_cloud_migration.Migration[]> GetCloudProjectServiceNameMigrationAsync() {
            return default(Task<_cloud_migration.Migration[]>);
        }
        
        // Path: /cloud/project/{serviceName}/migration/{migrationId}
        private Task<_cloud_migration.Migration> GetCloudProjectServiceNameMigrationMigrationIdAsync() {
            return default(Task<_cloud_migration.Migration>);
        }
        
        // Path: /cloud/project/{serviceName}/migration/{migrationId}
        private Task<_cloud_migration.Migration> PutCloudProjectServiceNameMigrationMigrationIdAsync() {
            return default(Task<_cloud_migration.Migration>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private
        private Task<_cloud_network.Network[]> GetCloudProjectServiceNameNetworkPrivateAsync() {
            return default(Task<_cloud_network.Network[]>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private
        private Task<_cloud_network.Network> PostCloudProjectServiceNameNetworkPrivateAsync() {
            return default(Task<_cloud_network.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        private void DeleteCloudProjectServiceNameNetworkPrivateNetworkIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        private Task<_cloud_network.Network> GetCloudProjectServiceNameNetworkPrivateNetworkIdAsync() {
            return default(Task<_cloud_network.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}
        private void PutCloudProjectServiceNameNetworkPrivateNetworkIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/region
        private Task<_cloud_network.Network> PostCloudProjectServiceNameNetworkPrivateNetworkIdRegionAsync() {
            return default(Task<_cloud_network.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet
        private Task<_cloud_network.Subnet[]> GetCloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync() {
            return default(Task<_cloud_network.Subnet[]>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet
        private Task<_cloud_network.Subnet> PostCloudProjectServiceNameNetworkPrivateNetworkIdSubnetAsync() {
            return default(Task<_cloud_network.Subnet>);
        }
        
        // Path: /cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}
        private void DeleteCloudProjectServiceNameNetworkPrivateNetworkIdSubnetSubnetIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/network/public
        private Task<_cloud_network.Network[]> GetCloudProjectServiceNameNetworkPublicAsync() {
            return default(Task<_cloud_network.Network[]>);
        }
        
        // Path: /cloud/project/{serviceName}/operation
        private Task<_cloud.Operation[]> GetCloudProjectServiceNameOperationAsync() {
            return default(Task<_cloud.Operation[]>);
        }
        
        // Path: /cloud/project/{serviceName}/operation/{operationId}
        private Task<_cloud.Operation> GetCloudProjectServiceNameOperationOperationIdAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/quota
        private Task<_cloud_quota.Quotas[]> GetCloudProjectServiceNameQuotaAsync() {
            return default(Task<_cloud_quota.Quotas[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region
        private Task<System.String[]> GetCloudProjectServiceNameRegionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region
        private Task<_cloud.Region> PostCloudProjectServiceNameRegionAsync() {
            return default(Task<_cloud.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}
        private Task<_cloud.Region> GetCloudProjectServiceNameRegionRegionNameAsync() {
            return default(Task<_cloud.Region>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive
        private Task<_cloud.ColdArchiveContainer[]> GetCloudProjectServiceNameRegionRegionNameColdArchiveAsync() {
            return default(Task<_cloud.ColdArchiveContainer[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive
        private Task<_cloud.ColdArchiveContainer> PostCloudProjectServiceNameRegionRegionNameColdArchiveAsync() {
            return default(Task<_cloud.ColdArchiveContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        private void DeleteCloudProjectServiceNameRegionRegionNameColdArchiveNameAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}
        private Task<_cloud.ColdArchiveContainer> GetCloudProjectServiceNameRegionRegionNameColdArchiveNameAsync() {
            return default(Task<_cloud.ColdArchiveContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/archive
        private void PostCloudProjectServiceNameRegionRegionNameColdArchiveNameArchiveAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/destroy
        private void PostCloudProjectServiceNameRegionRegionNameColdArchiveNameDestroyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/object/{objectKey}
        private void DeleteCloudProjectServiceNameRegionRegionNameColdArchiveNameObjectObjectKeyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/policy/{userId}
        private void PostCloudProjectServiceNameRegionRegionNameColdArchiveNamePolicyUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/presign
        private Task<_cloud_storage.PresignedURL> PostCloudProjectServiceNameRegionRegionNameColdArchiveNamePresignAsync() {
            return default(Task<_cloud_storage.PresignedURL>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/coldArchive/{name}/restore
        private void PostCloudProjectServiceNameRegionRegionNameColdArchiveNameRestoreAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip
        private Task<_cloud_project.FloatingIp[]> GetCloudProjectServiceNameRegionRegionNameFloatingipAsync() {
            return default(Task<_cloud_project.FloatingIp[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        private void DeleteCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}
        private Task<_cloud_project.FloatingIp> GetCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdAsync() {
            return default(Task<_cloud_project.FloatingIp>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/floatingip/{floatingIpId}/detach
        private void PostCloudProjectServiceNameRegionRegionNameFloatingipFloatingIpIdDetachAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway
        private Task<_cloud_network.Gateway[]> GetCloudProjectServiceNameRegionRegionNameGatewayAsync() {
            return default(Task<_cloud_network.Gateway[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameGatewayAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        private Task<_cloud.Operation> DeleteCloudProjectServiceNameRegionRegionNameGatewayIdAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        private Task<_cloud_network.Gateway> GetCloudProjectServiceNameRegionRegionNameGatewayIdAsync() {
            return default(Task<_cloud_network.Gateway>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}
        private Task<_cloud_network.Gateway> PutCloudProjectServiceNameRegionRegionNameGatewayIdAsync() {
            return default(Task<_cloud_network.Gateway>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/expose
        private Task<_cloud_network.Gateway> PostCloudProjectServiceNameRegionRegionNameGatewayIdExposeAsync() {
            return default(Task<_cloud_network.Gateway>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        private Task<_cloud_network_gateway.Interface[]> GetCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync() {
            return default(Task<_cloud_network_gateway.Interface[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface
        private Task<_cloud_network_gateway.Interface> PostCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceAsync() {
            return default(Task<_cloud_network_gateway.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        private void DeleteCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/gateway/{id}/interface/{interfaceId}
        private Task<_cloud_network_gateway.Interface> GetCloudProjectServiceNameRegionRegionNameGatewayIdInterfaceInterfaceIdAsync() {
            return default(Task<_cloud_network_gateway.Interface>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance
        private Task<_cloud_instance.InstanceSummary[]> GetCloudProjectServiceNameRegionRegionNameInstanceAsync() {
            return default(Task<_cloud_instance.InstanceSummary[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}
        private Task<_cloud_instance.InstanceSummary> GetCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAsync() {
            return default(Task<_cloud_instance.InstanceSummary>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/abortSnapshot
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAbortSnapshotAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/associateFloatingIp
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdAssociateFloatingIpAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/instance/{instanceId}/floatingIp
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameInstanceInstanceIdFloatingIpAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        private Task<_cloud_keymanager.Certificate[]> GetCloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync() {
            return default(Task<_cloud_keymanager.Certificate[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate
        private Task<_cloud_keymanager.Certificate> PostCloudProjectServiceNameRegionRegionNameKeymanagerCertificateAsync() {
            return default(Task<_cloud_keymanager.Certificate>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        private void DeleteCloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/certificate/{certificateId}
        private Task<_cloud_keymanager.Certificate> GetCloudProjectServiceNameRegionRegionNameKeymanagerCertificateCertificateIdAsync() {
            return default(Task<_cloud_keymanager.Certificate>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret
        private Task<_cloud_keymanager.Secret[]> GetCloudProjectServiceNameRegionRegionNameKeymanagerSecretAsync() {
            return default(Task<_cloud_keymanager.Secret[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        private void DeleteCloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/keymanager/secret/{secretId}
        private Task<_cloud_keymanager.Secret> GetCloudProjectServiceNameRegionRegionNameKeymanagerSecretSecretIdAsync() {
            return default(Task<_cloud_keymanager.Secret>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor
        private Task<_cloud_loadbalancing.Flavor[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingFlavorAsync() {
            return default(Task<_cloud_loadbalancing.Flavor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/flavor/{flavorId}
        private Task<_cloud_loadbalancing.Flavor> GetCloudProjectServiceNameRegionRegionNameLoadbalancingFlavorFlavorIdAsync() {
            return default(Task<_cloud_loadbalancing.Flavor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        private Task<_cloud_loadbalancing.HealthMonitor[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync() {
            return default(Task<_cloud_loadbalancing.HealthMonitor[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor
        private Task<_cloud_loadbalancing.HealthMonitor> PostCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorAsync() {
            return default(Task<_cloud_loadbalancing.HealthMonitor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        private Task<_cloud_loadbalancing.HealthMonitor> GetCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync() {
            return default(Task<_cloud_loadbalancing.HealthMonitor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/healthMonitor/{healthMonitorId}
        private Task<_cloud_loadbalancing.HealthMonitor> PutCloudProjectServiceNameRegionRegionNameLoadbalancingHealthMonitorHealthMonitorIdAsync() {
            return default(Task<_cloud_loadbalancing.HealthMonitor>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        private Task<_cloud_loadbalancing.L7Policy[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync() {
            return default(Task<_cloud_loadbalancing.L7Policy[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy
        private Task<_cloud_loadbalancing.L7Policy> PostCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyAsync() {
            return default(Task<_cloud_loadbalancing.L7Policy>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        private Task<_cloud_loadbalancing.L7Policy> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync() {
            return default(Task<_cloud_loadbalancing.L7Policy>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}
        private Task<_cloud_loadbalancing.L7Policy> PutCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdAsync() {
            return default(Task<_cloud_loadbalancing.L7Policy>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        private Task<_cloud_loadbalancing.L7Rule[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync() {
            return default(Task<_cloud_loadbalancing.L7Rule[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule
        private Task<_cloud_loadbalancing.L7Rule> PostCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleAsync() {
            return default(Task<_cloud_loadbalancing.L7Rule>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        private Task<_cloud_loadbalancing.L7Rule> GetCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync() {
            return default(Task<_cloud_loadbalancing.L7Rule>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/l7Policy/{l7PolicyId}/l7Rule/{l7RuleId}
        private Task<_cloud_loadbalancing.L7Rule> PutCloudProjectServiceNameRegionRegionNameLoadbalancingL7PolicyL7PolicyIdL7RuleL7RuleIdAsync() {
            return default(Task<_cloud_loadbalancing.L7Rule>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        private Task<_cloud_loadbalancing.Listener[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync() {
            return default(Task<_cloud_loadbalancing.Listener[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener
        private Task<_cloud_loadbalancing.Listener> PostCloudProjectServiceNameRegionRegionNameLoadbalancingListenerAsync() {
            return default(Task<_cloud_loadbalancing.Listener>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        private Task<_cloud_loadbalancing.Listener> GetCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync() {
            return default(Task<_cloud_loadbalancing.Listener>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/listener/{listenerId}
        private Task<_cloud_loadbalancing.Listener> PutCloudProjectServiceNameRegionRegionNameLoadbalancingListenerListenerIdAsync() {
            return default(Task<_cloud_loadbalancing.Listener>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        private Task<_cloud_loadbalancing.LoadBalancer[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync() {
            return default(Task<_cloud_loadbalancing.LoadBalancer[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        private Task<_cloud_loadbalancing.LoadBalancer> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync() {
            return default(Task<_cloud_loadbalancing.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}
        private Task<_cloud_loadbalancing.LoadBalancer> PutCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAsync() {
            return default(Task<_cloud_loadbalancing.LoadBalancer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/associateFloatingIp
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdAssociateFloatingIpAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/floatingIp
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdFloatingIpAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        private Task<System.Guid[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/log/url
        private Task<_dbaas_logs.TemporaryLogsLink> PostCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdLogUrlAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/loadbalancer/{loadBalancerId}/stats
        private Task<_cloud_loadbalancing_loadbalancer.Stats> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLoadbalancerLoadBalancerIdStatsAsync() {
            return default(Task<_cloud_loadbalancing_loadbalancer.Stats>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind
        private Task<System.String[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLogKindAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/log/kind/{name}
        private Task<_dbaas_logs.LogKind> GetCloudProjectServiceNameRegionRegionNameLoadbalancingLogKindNameAsync() {
            return default(Task<_dbaas_logs.LogKind>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        private Task<_cloud_loadbalancing.Pool[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync() {
            return default(Task<_cloud_loadbalancing.Pool[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool
        private Task<_cloud_loadbalancing.Pool> PostCloudProjectServiceNameRegionRegionNameLoadbalancingPoolAsync() {
            return default(Task<_cloud_loadbalancing.Pool>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        private Task<_cloud_loadbalancing.Pool> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync() {
            return default(Task<_cloud_loadbalancing.Pool>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}
        private Task<_cloud_loadbalancing.Pool> PutCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdAsync() {
            return default(Task<_cloud_loadbalancing.Pool>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        private Task<_cloud_loadbalancing_pool.Member[]> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync() {
            return default(Task<_cloud_loadbalancing_pool.Member[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member
        private Task<_cloud_loadbalancing_pool.Member[]> PostCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberAsync() {
            return default(Task<_cloud_loadbalancing_pool.Member[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        private void DeleteCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        private Task<_cloud_loadbalancing_pool.Member> GetCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync() {
            return default(Task<_cloud_loadbalancing_pool.Member>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/loadbalancing/pool/{poolId}/member/{memberId}
        private Task<_cloud_loadbalancing_pool.Member> PutCloudProjectServiceNameRegionRegionNameLoadbalancingPoolPoolIdMemberMemberIdAsync() {
            return default(Task<_cloud_loadbalancing_pool.Member>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network
        private Task<_cloud_project.Network[]> GetCloudProjectServiceNameRegionRegionNameNetworkAsync() {
            return default(Task<_cloud_project.Network[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameNetworkAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        private void DeleteCloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}
        private Task<_cloud_project.Network> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdAsync() {
            return default(Task<_cloud_project.Network>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet
        private Task<_cloud_project.Subnet[]> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetAsync() {
            return default(Task<_cloud_project.Subnet[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        private void DeleteCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}
        private Task<_cloud_project.Subnet> GetCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdAsync() {
            return default(Task<_cloud_project.Subnet>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/network/{networkId}/subnet/{subnetId}/gateway
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameNetworkNetworkIdSubnetSubnetIdGatewayAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota
        private Task<_cloud_quota.Quotas> GetCloudProjectServiceNameRegionRegionNameQuotaAsync() {
            return default(Task<_cloud_quota.Quotas>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota
        private Task<_cloud.Operation> PostCloudProjectServiceNameRegionRegionNameQuotaAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/allowed
        private Task<_cloud_quota.AllowedQuota[]> GetCloudProjectServiceNameRegionRegionNameQuotaAllowedAsync() {
            return default(Task<_cloud_quota.AllowedQuota[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        private void DeleteCloudProjectServiceNameRegionRegionNameQuotaStorageAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        private Task<_cloud_quota_storage.Quota> GetCloudProjectServiceNameRegionRegionNameQuotaStorageAsync() {
            return default(Task<_cloud_quota_storage.Quota>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/quota/storage
        private void PutCloudProjectServiceNameRegionRegionNameQuotaStorageAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage
        private Task<_cloud.StorageContainer[]> GetCloudProjectServiceNameRegionRegionNameStorageAsync() {
            return default(Task<_cloud.StorageContainer[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage
        private Task<_cloud.StorageContainer> PostCloudProjectServiceNameRegionRegionNameStorageAsync() {
            return default(Task<_cloud.StorageContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        private void DeleteCloudProjectServiceNameRegionRegionNameStorageNameAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        private Task<_cloud.StorageContainer> GetCloudProjectServiceNameRegionRegionNameStorageNameAsync() {
            return default(Task<_cloud.StorageContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}
        private Task<_cloud.StorageContainer> PutCloudProjectServiceNameRegionRegionNameStorageNameAsync() {
            return default(Task<_cloud.StorageContainer>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object
        private Task<_cloud.StorageObject[]> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectAsync() {
            return default(Task<_cloud.StorageObject[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        private void DeleteCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}
        private Task<_cloud.StorageObject> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyAsync() {
            return default(Task<_cloud.StorageObject>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version
        private Task<_cloud.StorageObjectVersion[]> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionAsync() {
            return default(Task<_cloud.StorageObjectVersion[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        private void DeleteCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/object/{key}/version/{versionId}
        private Task<_cloud.StorageObjectVersion> GetCloudProjectServiceNameRegionRegionNameStorageNameObjectKeyVersionVersionIdAsync() {
            return default(Task<_cloud.StorageObjectVersion>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/policy/{userId}
        private void PostCloudProjectServiceNameRegionRegionNameStorageNamePolicyUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/storage/{name}/presign
        private Task<_cloud_storage.PresignedURL> PostCloudProjectServiceNameRegionRegionNameStorageNamePresignAsync() {
            return default(Task<_cloud_storage.PresignedURL>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup
        private Task<_cloud_volumeBackup.VolumeBackup[]> GetCloudProjectServiceNameRegionRegionNameVolumeBackupAsync() {
            return default(Task<_cloud_volumeBackup.VolumeBackup[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup
        private Task<_cloud_volumeBackup.VolumeBackup> PostCloudProjectServiceNameRegionRegionNameVolumeBackupAsync() {
            return default(Task<_cloud_volumeBackup.VolumeBackup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        private void DeleteCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}
        private Task<_cloud_volumeBackup.VolumeBackup> GetCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdAsync() {
            return default(Task<_cloud_volumeBackup.VolumeBackup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/restore
        private Task<_cloud_volumeBackup.VolumeBackup> PostCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdRestoreAsync() {
            return default(Task<_cloud_volumeBackup.VolumeBackup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/volumeBackup/{volumeBackupId}/volume
        private Task<_cloud_volume.Volume> PostCloudProjectServiceNameRegionRegionNameVolumeBackupVolumeBackupIdVolumeAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup
        private Task<_cloud.Backup[]> GetCloudProjectServiceNameRegionRegionNameWorkflowBackupAsync() {
            return default(Task<_cloud.Backup[]>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup
        private Task<_cloud.Backup> PostCloudProjectServiceNameRegionRegionNameWorkflowBackupAsync() {
            return default(Task<_cloud.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        private void DeleteCloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/region/{regionName}/workflow/backup/{backupWorkflowId}
        private Task<_cloud.Backup> GetCloudProjectServiceNameRegionRegionNameWorkflowBackupBackupWorkflowIdAsync() {
            return default(Task<_cloud.Backup>);
        }
        
        // Path: /cloud/project/{serviceName}/regionAvailable
        private Task<_cloud.AvailableRegion[]> GetCloudProjectServiceNameRegionAvailableAsync() {
            return default(Task<_cloud.AvailableRegion[]>);
        }
        
        // Path: /cloud/project/{serviceName}/retain
        private void PostCloudProjectServiceNameRetainAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/role
        private Task<_cloud_role.Roles> GetCloudProjectServiceNameRoleAsync() {
            return default(Task<_cloud_role.Roles>);
        }
        
        // Path: /cloud/project/{serviceName}/serviceInfos
        private Task<_services.Service> GetCloudProjectServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /cloud/project/{serviceName}/serviceInfos
        private void PutCloudProjectServiceNameServiceInfosAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/snapshot
        private Task<_cloud_image.Image[]> GetCloudProjectServiceNameSnapshotAsync() {
            return default(Task<_cloud_image.Image[]>);
        }
        
        // Path: /cloud/project/{serviceName}/snapshot/{imageId}
        private Task<_cloud_image.Image> DeleteCloudProjectServiceNameSnapshotImageIdAsync() {
            return default(Task<_cloud_image.Image>);
        }
        
        // Path: /cloud/project/{serviceName}/snapshot/{imageId}
        private Task<_cloud_image.Image> GetCloudProjectServiceNameSnapshotImageIdAsync() {
            return default(Task<_cloud_image.Image>);
        }
        
        // Path: /cloud/project/{serviceName}/sshkey
        private Task<_cloud_sshkey.SshKey[]> GetCloudProjectServiceNameSshkeyAsync() {
            return default(Task<_cloud_sshkey.SshKey[]>);
        }
        
        // Path: /cloud/project/{serviceName}/sshkey
        private Task<_cloud_sshkey.SshKeyDetail> PostCloudProjectServiceNameSshkeyAsync() {
            return default(Task<_cloud_sshkey.SshKeyDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/sshkey/{keyId}
        private void DeleteCloudProjectServiceNameSshkeyKeyIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/sshkey/{keyId}
        private Task<_cloud_sshkey.SshKeyDetail> GetCloudProjectServiceNameSshkeyKeyIdAsync() {
            return default(Task<_cloud_sshkey.SshKeyDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/stack
        private Task<_cloud_stack.Stack[]> GetCloudProjectServiceNameStackAsync() {
            return default(Task<_cloud_stack.Stack[]>);
        }
        
        // Path: /cloud/project/{serviceName}/stack/{stackId}
        private Task<_cloud_stack.Stack> GetCloudProjectServiceNameStackStackIdAsync() {
            return default(Task<_cloud_stack.Stack>);
        }
        
        // Path: /cloud/project/{serviceName}/storage
        private Task<_cloud_storage.Container[]> GetCloudProjectServiceNameStorageAsync() {
            return default(Task<_cloud_storage.Container[]>);
        }
        
        // Path: /cloud/project/{serviceName}/storage
        private Task<_cloud_storage.Container> PostCloudProjectServiceNameStorageAsync() {
            return default(Task<_cloud_storage.Container>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/access
        private Task<_cloud_storage.ContainerAccess> PostCloudProjectServiceNameStorageAccessAsync() {
            return default(Task<_cloud_storage.ContainerAccess>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/quota
        private Task<_cloud_storage.Quota> GetCloudProjectServiceNameStorageQuotaAsync() {
            return default(Task<_cloud_storage.Quota>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        private void DeleteCloudProjectServiceNameStorageContainerIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        private Task<_cloud_storage.ContainerDetail> GetCloudProjectServiceNameStorageContainerIdAsync() {
            return default(Task<_cloud_storage.ContainerDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}
        private void PutCloudProjectServiceNameStorageContainerIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/cors
        private void DeleteCloudProjectServiceNameStorageContainerIdCorsAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/cors
        private void PostCloudProjectServiceNameStorageContainerIdCorsAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/publicUrl
        private Task<_cloud_storage.ContainerObjectTempURL> PostCloudProjectServiceNameStorageContainerIdPublicUrlAsync() {
            return default(Task<_cloud_storage.ContainerObjectTempURL>);
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/static
        private void PostCloudProjectServiceNameStorageContainerIdStaticAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/storage/{containerId}/user
        private Task<_cloud_user.UserDetail> PostCloudProjectServiceNameStorageContainerIdUserAsync() {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/terminate
        private Task<System.String> PostCloudProjectServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /cloud/project/{serviceName}/unleash
        private void PostCloudProjectServiceNameUnleashAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/usage/current
        private Task<_cloud_usage.UsageCurrent> GetCloudProjectServiceNameUsageCurrentAsync() {
            return default(Task<_cloud_usage.UsageCurrent>);
        }
        
        // Path: /cloud/project/{serviceName}/usage/forecast
        private Task<_cloud_usage.UsageForecast> GetCloudProjectServiceNameUsageForecastAsync() {
            return default(Task<_cloud_usage.UsageForecast>);
        }
        
        // Path: /cloud/project/{serviceName}/usage/history
        private Task<_cloud_usage.UsageHistory[]> GetCloudProjectServiceNameUsageHistoryAsync() {
            return default(Task<_cloud_usage.UsageHistory[]>);
        }
        
        // Path: /cloud/project/{serviceName}/usage/history/{usageId}
        private Task<_cloud_usage.UsageHistoryDetail> GetCloudProjectServiceNameUsageHistoryUsageIdAsync() {
            return default(Task<_cloud_usage.UsageHistoryDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user
        private Task<_cloud_user.User[]> GetCloudProjectServiceNameUserAsync() {
            return default(Task<_cloud_user.User[]>);
        }
        
        // Path: /cloud/project/{serviceName}/user
        private Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserAsync() {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}
        private void DeleteCloudProjectServiceNameUserUserIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}
        private Task<_cloud_user.User> GetCloudProjectServiceNameUserUserIdAsync() {
            return default(Task<_cloud_user.User>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/configuration
        private Task<_cloud_user.Configuration> GetCloudProjectServiceNameUserUserIdConfigurationAsync() {
            return default(Task<_cloud_user.Configuration>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/openrc
        private Task<_cloud_user.Openrc> GetCloudProjectServiceNameUserUserIdOpenrcAsync() {
            return default(Task<_cloud_user.Openrc>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/policy
        private Task<_cloud_storage.PolicyRaw> GetCloudProjectServiceNameUserUserIdPolicyAsync() {
            return default(Task<_cloud_storage.PolicyRaw>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/policy
        private void PostCloudProjectServiceNameUserUserIdPolicyAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/rclone
        private Task<_cloud_user.Rclone> GetCloudProjectServiceNameUserUserIdRcloneAsync() {
            return default(Task<_cloud_user.Rclone>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/regeneratePassword
        private Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserUserIdRegeneratePasswordAsync() {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        private Task<_cloud_role.Role[]> GetCloudProjectServiceNameUserUserIdRoleAsync() {
            return default(Task<_cloud_role.Role[]>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        private Task<_cloud_user.UserDetail> PostCloudProjectServiceNameUserUserIdRoleAsync() {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role
        private Task<_cloud_user.UserDetail> PutCloudProjectServiceNameUserUserIdRoleAsync() {
            return default(Task<_cloud_user.UserDetail>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role/{roleId}
        private void DeleteCloudProjectServiceNameUserUserIdRoleRoleIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/role/{roleId}
        private Task<_cloud_role.Role> GetCloudProjectServiceNameUserUserIdRoleRoleIdAsync() {
            return default(Task<_cloud_role.Role>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials
        private Task<_cloud_user.S3Credentials[]> GetCloudProjectServiceNameUserUserIdS3CredentialsAsync() {
            return default(Task<_cloud_user.S3Credentials[]>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials
        private Task<_cloud_user.S3CredentialsWithSecret> PostCloudProjectServiceNameUserUserIdS3CredentialsAsync() {
            return default(Task<_cloud_user.S3CredentialsWithSecret>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        private void DeleteCloudProjectServiceNameUserUserIdS3CredentialsAccessAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}
        private Task<_cloud_user.S3Credentials> GetCloudProjectServiceNameUserUserIdS3CredentialsAccessAsync() {
            return default(Task<_cloud_user.S3Credentials>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/s3Credentials/{access}/secret
        private Task<_cloud_user.S3CredentialsSecretOnly> PostCloudProjectServiceNameUserUserIdS3CredentialsAccessSecretAsync() {
            return default(Task<_cloud_user.S3CredentialsSecretOnly>);
        }
        
        // Path: /cloud/project/{serviceName}/user/{userId}/token
        private Task<_cloud_authentication.Token> PostCloudProjectServiceNameUserUserIdTokenAsync() {
            return default(Task<_cloud_authentication.Token>);
        }
        
        // Path: /cloud/project/{serviceName}/volume
        private Task<_cloud_volume.Volume[]> GetCloudProjectServiceNameVolumeAsync() {
            return default(Task<_cloud_volume.Volume[]>);
        }
        
        // Path: /cloud/project/{serviceName}/volume
        private Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot
        private Task<_cloud_volume.Snapshot[]> GetCloudProjectServiceNameVolumeSnapshotAsync() {
            return default(Task<_cloud_volume.Snapshot[]>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        private void DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/volume/snapshot/{snapshotId}
        private Task<_cloud_volume.Snapshot> GetCloudProjectServiceNameVolumeSnapshotSnapshotIdAsync() {
            return default(Task<_cloud_volume.Snapshot>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        private void DeleteCloudProjectServiceNameVolumeVolumeIdAsync() {
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        private Task<_cloud_volume.Volume> GetCloudProjectServiceNameVolumeVolumeIdAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}
        private Task<_cloud_volume.Volume> PutCloudProjectServiceNameVolumeVolumeIdAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/attach
        private Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdAttachAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/detach
        private Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdDetachAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/snapshot
        private Task<_cloud_volume.Snapshot> PostCloudProjectServiceNameVolumeVolumeIdSnapshotAsync() {
            return default(Task<_cloud_volume.Snapshot>);
        }
        
        // Path: /cloud/project/{serviceName}/volume/{volumeId}/upsize
        private Task<_cloud_volume.Volume> PostCloudProjectServiceNameVolumeVolumeIdUpsizeAsync() {
            return default(Task<_cloud_volume.Volume>);
        }
        
        // Path: /cloud/project/{serviceName}/vrack
        private Task<_cloud.Vrack> GetCloudProjectServiceNameVrackAsync() {
            return default(Task<_cloud.Vrack>);
        }
        
        // Path: /cloud/project/{serviceName}/vrack
        private Task<_cloud.Operation> PostCloudProjectServiceNameVrackAsync() {
            return default(Task<_cloud.Operation>);
        }
        
        // Path: /cluster/hadoop
        private Task<System.String[]> GetClusterHadoopAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cluster/hadoop/orderInformations
        private Task<_cluster_hadoop.OrderInformations> GetClusterHadoopOrderInformationsAsync() {
            return default(Task<_cluster_hadoop.OrderInformations>);
        }
        
        // Path: /cluster/hadoop/orderableNodeProfiles
        private Task<_cluster_hadoop.NodeBillingProfile[]> GetClusterHadoopOrderableNodeProfilesAsync() {
            return default(Task<_cluster_hadoop.NodeBillingProfile[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}
        private Task<_cluster_hadoop.hadoopWithIAM> GetClusterHadoopServiceNameAsync() {
            return default(Task<_cluster_hadoop.hadoopWithIAM>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/consumptions
        private Task<_cluster_hadoop.ClusterConsumption> GetClusterHadoopServiceNameConsumptionsAsync() {
            return default(Task<_cluster_hadoop.ClusterConsumption>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl
        private Task<System.Net.IPNetwork[]> GetClusterHadoopServiceNameNetworkAclAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNetworkAclAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        private Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNetworkAclBlockAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        private Task<_cluster_hadoop.NetworkAcl> GetClusterHadoopServiceNameNetworkAclBlockAsync() {
            return default(Task<_cluster_hadoop.NetworkAcl>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/networkAcl/{block}
        private void PutClusterHadoopServiceNameNetworkAclBlockAsync() {
        }
        
        // Path: /cluster/hadoop/{serviceName}/node
        private Task<System.String[]> GetClusterHadoopServiceNameNodeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}
        private Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNodeHostnameAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}
        private Task<_cluster_hadoop.Node> GetClusterHadoopServiceNameNodeHostnameAsync() {
            return default(Task<_cluster_hadoop.Node>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/decommission
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameDecommissionAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/recommission
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRecommissionAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role
        private Task<_cluster_hadoop.RoleTypeEnum[]> GetClusterHadoopServiceNameNodeHostnameRoleAsync() {
            return default(Task<_cluster_hadoop.RoleTypeEnum[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        private Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameNodeHostnameRoleTypeAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}
        private Task<_cluster_hadoop.Role> GetClusterHadoopServiceNameNodeHostnameRoleTypeAsync() {
            return default(Task<_cluster_hadoop.Role>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/restart
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeRestartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/start
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeStartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/node/{hostname}/role/{type}/stop
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameNodeHostnameRoleTypeStopAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/nodeBillingProfiles
        private Task<_cluster_hadoop.NodeBillingProfile[]> GetClusterHadoopServiceNameNodeBillingProfilesAsync() {
            return default(Task<_cluster_hadoop.NodeBillingProfile[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/nodeConsumptions
        private Task<_cluster_hadoop.NodeConsumption[]> GetClusterHadoopServiceNameNodeConsumptionsAsync() {
            return default(Task<_cluster_hadoop.NodeConsumption[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/orderNewNodeHourly
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameOrderNewNodeHourlyAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/orderableNodeProfiles
        private Task<System.String[]> GetClusterHadoopServiceNameOrderableNodeProfilesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/restart
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameRestartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/restart
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceRestartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/start
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceStartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/service/stop
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameServiceStopAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/serviceInfos
        private Task<_services.Service> GetClusterHadoopServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/serviceInfos
        private void PutClusterHadoopServiceNameServiceInfosAsync() {
        }
        
        // Path: /cluster/hadoop/{serviceName}/start
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameStartAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/stop
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameStopAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/task
        private Task<System.Int64[]> GetClusterHadoopServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/task/{taskId}
        private Task<_cluster_hadoop.Task> GetClusterHadoopServiceNameTaskTaskIdAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/terminate
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameTerminateAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user
        private Task<System.String[]> GetClusterHadoopServiceNameUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameUserAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        private Task<_cluster_hadoop.Task> DeleteClusterHadoopServiceNameUserUsernameAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        private Task<_cluster_hadoop.User> GetClusterHadoopServiceNameUserUsernameAsync() {
            return default(Task<_cluster_hadoop.User>);
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}
        private void PutClusterHadoopServiceNameUserUsernameAsync() {
        }
        
        // Path: /cluster/hadoop/{serviceName}/user/{username}/resetPassword
        private Task<_cluster_hadoop.Task> PostClusterHadoopServiceNameUserUsernameResetPasswordAsync() {
            return default(Task<_cluster_hadoop.Task>);
        }
        
        // Path: /connectivity/eligibility/search/buildingDetails
        private Task<_xdsl_AsyncTask_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingDetailsAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/buildings
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingsAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/buildingsByLine
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building> PostConnectivityEligibilitySearchBuildingsByLineAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Building>);
        }
        
        // Path: /connectivity/eligibility/search/cities
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.City> PostConnectivityEligibilitySearchCitiesAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.City>);
        }
        
        // Path: /connectivity/eligibility/search/lines
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Line> PostConnectivityEligibilitySearchLinesAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Line>);
        }
        
        // Path: /connectivity/eligibility/search/meetings
        private Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostConnectivityEligibilitySearchMeetingsAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings>);
        }
        
        // Path: /connectivity/eligibility/search/streetNumbers
        private Task<_xdsl.AsyncTaskArray_string> PostConnectivityEligibilitySearchStreetNumbersAsync() {
            return default(Task<_xdsl.AsyncTaskArray_string>);
        }
        
        // Path: /connectivity/eligibility/search/streetNumbers/details
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails> PostConnectivityEligibilitySearchStreetNumbersDetailsAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.StreetNumberDetails>);
        }
        
        // Path: /connectivity/eligibility/search/streets
        private Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Street> PostConnectivityEligibilitySearchStreetsAsync() {
            return default(Task<_xdsl_AsyncTaskArray_connectivity_eligibility.Street>);
        }
        
        // Path: /connectivity/eligibility/test
        private Task<_connectivity_eligibility.EligibilityTest> GetConnectivityEligibilityTestAsync() {
            return default(Task<_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/address
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestAddressAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/address/partners
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestAddressPartnersAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/building
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestBuildingAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/line
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestLineAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/line/partners
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestLinePartnersAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/eligibility/test/otp
        private Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest> PostConnectivityEligibilityTestOtpAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.EligibilityTest>);
        }
        
        // Path: /connectivity/maintenance/workPlanned/partners
        private Task<_connectivity_maintenance.WorkPlanned[]> GetConnectivityMaintenanceWorkPlannedPartnersAsync() {
            return default(Task<_connectivity_maintenance.WorkPlanned[]>);
        }
        
        // Path: /connectivity/maintenance/workPlanned/public
        private Task<_connectivity_maintenance.WorkPlanned[]> GetConnectivityMaintenanceWorkPlannedPublicAsync() {
            return default(Task<_connectivity_maintenance.WorkPlanned[]>);
        }
        
        // Path: /connectivity/monitoring/genericIncident/partners
        private Task<_connectivity_monitoring.GenericIncident[]> GetConnectivityMonitoringGenericIncidentPartnersAsync() {
            return default(Task<_connectivity_monitoring.GenericIncident[]>);
        }
        
        // Path: /connectivity/monitoring/genericIncident/public
        private Task<_connectivity_monitoring.GenericIncident[]> GetConnectivityMonitoringGenericIncidentPublicAsync() {
            return default(Task<_connectivity_monitoring.GenericIncident[]>);
        }
        
        // Path: /contact/form
        private Task<_contact.FormCharacteristic[]> GetContactFormAsync() {
            return default(Task<_contact.FormCharacteristic[]>);
        }
        
        // Path: /contact/form/send
        private void PostContactFormSendAsync() {
        }
        
        // Path: /dbaas/logs
        private Task<System.String[]> GetDbaasLogsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}
        private Task<_dbaas_logs.ServiceWithIAM> GetDbaasLogsServiceNameAsync() {
            return default(Task<_dbaas_logs.ServiceWithIAM>);
        }
        
        // Path: /dbaas/logs/{serviceName}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/changeContact
        private Task<System.Int64[]> PostDbaasLogsServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster
        private Task<System.Guid[]> GetDbaasLogsServiceNameClusterAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}
        private Task<_dbaas_logs.Cluster> GetDbaasLogsServiceNameClusterClusterIdAsync() {
            return default(Task<_dbaas_logs.Cluster>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameClusterClusterIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}/retention
        private Task<System.Guid[]> GetDbaasLogsServiceNameClusterClusterIdRetentionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}
        private Task<_dbaas_logs.ClusterRetention> GetDbaasLogsServiceNameClusterClusterIdRetentionRetentionIdAsync() {
            return default(Task<_dbaas_logs.ClusterRetention>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey
        private Task<System.Guid[]> GetDbaasLogsServiceNameEncryptionKeyAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameEncryptionKeyAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}
        private Task<_dbaas_logs.EncryptionKey> GetDbaasLogsServiceNameEncryptionKeyEncryptionKeyIdAsync() {
            return default(Task<_dbaas_logs.EncryptionKey>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input
        private Task<System.Guid[]> GetDbaasLogsServiceNameInputAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine
        private Task<System.Guid[]> GetDbaasLogsServiceNameInputEngineAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}
        private Task<_dbaas_logs.Engine> GetDbaasLogsServiceNameInputEngineEngineIdAsync() {
            return default(Task<_dbaas_logs.Engine>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}/helper
        private Task<System.Guid[]> GetDbaasLogsServiceNameInputEngineEngineIdHelperAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}
        private Task<_dbaas_logs.Helper> GetDbaasLogsServiceNameInputEngineEngineIdHelperHelperIdAsync() {
            return default(Task<_dbaas_logs.Helper>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameInputInputIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        private Task<_dbaas_logs.Input> GetDbaasLogsServiceNameInputInputIdAsync() {
            return default(Task<_dbaas_logs.Input>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/action
        private Task<_dbaas_logs.InputAction[]> GetDbaasLogsServiceNameInputInputIdActionAsync() {
            return default(Task<_dbaas_logs.InputAction[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configtest
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdConfigtestAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configtest/result
        private Task<_dbaas_logs.TestResult> GetDbaasLogsServiceNameInputInputIdConfigtestResultAsync() {
            return default(Task<_dbaas_logs.TestResult>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        private Task<_dbaas_logs.FlowggerConfiguration> GetDbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync() {
            return default(Task<_dbaas_logs.FlowggerConfiguration>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdConfigurationFlowggerAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        private Task<_dbaas_logs.LogstashConfiguration> GetDbaasLogsServiceNameInputInputIdConfigurationLogstashAsync() {
            return default(Task<_dbaas_logs.LogstashConfiguration>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameInputInputIdConfigurationLogstashAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/end
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdEndAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/logs/url
        private Task<_dbaas_logs.TemporaryLogsLink> PostDbaasLogsServiceNameInputInputIdLogsUrlAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/restart
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdRestartAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/start
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameInputInputIdStartAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/input/{inputId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameInputInputIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/metrics
        private Task<_dbaas_logs.ServiceMetric> GetDbaasLogsServiceNameMetricsAsync() {
            return default(Task<_dbaas_logs.ServiceMetric>);
        }
        
        // Path: /dbaas/logs/{serviceName}/operation
        private Task<System.Guid[]> GetDbaasLogsServiceNameOperationAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/operation/{operationId}
        private Task<_dbaas_logs.Operation> GetDbaasLogsServiceNameOperationOperationIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogDashboardAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogDashboardAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        private Task<_dbaas_logs.Dashboard> GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync() {
            return default(Task<_dbaas_logs.Dashboard>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogDashboardDashboardIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/duplicate
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogDashboardDashboardIdDuplicateAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputGraylogDashboardDashboardIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        private Task<_dbaas_logs.Stream> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync() {
            return default(Task<_dbaas_logs.Stream>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        private Task<_dbaas_logs.StreamAlertCondition> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync() {
            return default(Task<_dbaas_logs.StreamAlertCondition>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputGraylogStreamStreamIdAlertAlertIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}
        private Task<_dbaas_logs.Archive> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdAsync() {
            return default(Task<_dbaas_logs.Archive>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/encryptionKey
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdEncryptionKeyAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/url
        private Task<_dbaas_logs.ArchiveUrl> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdArchiveArchiveIdUrlAsync() {
            return default(Task<_dbaas_logs.ArchiveUrl>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}
        private Task<_dbaas_logs.StreamRule> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdRuleRuleIdAsync() {
            return default(Task<_dbaas_logs.StreamRule>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputGraylogStreamStreamIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        private Task<_dbaas_logs.Alias> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync() {
            return default(Task<_dbaas_logs.Alias>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchAliasAliasIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index/{indexId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdIndexIndexIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream/{streamId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchAliasAliasIdStreamStreamIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchAliasAliasIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchIndexAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchIndexAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        private Task<_dbaas_logs.Index> GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync() {
            return default(Task<_dbaas_logs.Index>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchIndexIndexIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchIndexIndexIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd
        private Task<System.Guid[]> GetDbaasLogsServiceNameOutputOpensearchOsdAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameOutputOpensearchOsdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        private Task<_dbaas_logs.Osd> GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync() {
            return default(Task<_dbaas_logs.Osd>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameOutputOpensearchOsdOsdIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameOutputOpensearchOsdOsdIdUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role
        private Task<System.Guid[]> GetDbaasLogsServiceNameRoleAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        private Task<_dbaas_logs.Role> GetDbaasLogsServiceNameRoleRoleIdAsync() {
            return default(Task<_dbaas_logs.Role>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameRoleRoleIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member
        private Task<System.String[]> GetDbaasLogsServiceNameRoleRoleIdMemberAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdMemberAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        private Task<_dbaas_logs.Member> GetDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync() {
            return default(Task<_dbaas_logs.Member>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/member/{username}
        private Task<_dbaas_logs.Operation> PutDbaasLogsServiceNameRoleRoleIdMemberUsernameAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission
        private Task<System.Guid[]> GetDbaasLogsServiceNameRoleRoleIdPermissionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/alias
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionAliasAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/dashboard
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionDashboardAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/index
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionIndexAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/osd
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionOsdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/stream
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameRoleRoleIdPermissionStreamAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}
        private Task<_dbaas_logs.Permission> GetDbaasLogsServiceNameRoleRoleIdPermissionPermissionIdAsync() {
            return default(Task<_dbaas_logs.Permission>);
        }
        
        // Path: /dbaas/logs/{serviceName}/serviceInfos
        private Task<_services.Service> GetDbaasLogsServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dbaas/logs/{serviceName}/serviceInfos
        private void PutDbaasLogsServiceNameServiceInfosAsync() {
        }
        
        // Path: /dbaas/logs/{serviceName}/token
        private Task<System.Guid[]> GetDbaasLogsServiceNameTokenAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/token
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameTokenAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/token/{tokenId}
        private Task<_dbaas_logs.Operation> DeleteDbaasLogsServiceNameTokenTokenIdAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dbaas/logs/{serviceName}/token/{tokenId}
        private Task<_dbaas_logs.Token> GetDbaasLogsServiceNameTokenTokenIdAsync() {
            return default(Task<_dbaas_logs.Token>);
        }
        
        // Path: /dbaas/logs/{serviceName}/url
        private Task<_dbaas_logs.Url[]> GetDbaasLogsServiceNameUrlAsync() {
            return default(Task<_dbaas_logs.Url[]>);
        }
        
        // Path: /dbaas/logs/{serviceName}/user/changePassword
        private Task<_dbaas_logs.Operation> PostDbaasLogsServiceNameUserChangePasswordAsync() {
            return default(Task<_dbaas_logs.Operation>);
        }
        
        // Path: /dedicated/ceph
        private Task<System.String[]> GetDedicatedCephAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}
        private Task<_dedicated_ceph_clusterGet.responseWithIAM> GetDedicatedCephServiceNameAsync() {
            return default(Task<_dedicated_ceph_clusterGet.responseWithIAM>);
        }
        
        // Path: /dedicated/ceph/{serviceName}
        private Task<System.String> PutDedicatedCephServiceNameAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl
        private Task<_dedicated_ceph_aclGet.response[]> GetDedicatedCephServiceNameAclAsync() {
            return default(Task<_dedicated_ceph_aclGet.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl
        private Task<System.String> PostDedicatedCephServiceNameAclAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl/{aclId}
        private Task<System.String> DeleteDedicatedCephServiceNameAclAclIdAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/acl/{aclId}
        private Task<_dedicated_ceph_aclGet.response> GetDedicatedCephServiceNameAclAclIdAsync() {
            return default(Task<_dedicated_ceph_aclGet.response>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs
        private Task<_dedicated_ceph_cephfsGet.response[]> GetDedicatedCephServiceNameCephfsAsync() {
            return default(Task<_dedicated_ceph_cephfsGet.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}
        private Task<System.String> DeleteDedicatedCephServiceNameCephfsFsNameAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}
        private Task<_dedicated_ceph_cephfsGet.response> GetDedicatedCephServiceNameCephfsFsNameAsync() {
            return default(Task<_dedicated_ceph_cephfsGet.response>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}/disable
        private Task<System.String> PostDedicatedCephServiceNameCephfsFsNameDisableAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/cephfs/{fsName}/enable
        private Task<System.String> PostDedicatedCephServiceNameCephfsFsNameEnableAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/changeContact
        private Task<System.Int64[]> PostDedicatedCephServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/confirmTermination
        private Task<System.String> PostDedicatedCephServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/health
        private Task<_dedicated_ceph_clusterHealth.response> GetDedicatedCephServiceNameHealthAsync() {
            return default(Task<_dedicated_ceph_clusterHealth.response>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool
        private Task<_dedicated_ceph_poolGet.response[]> GetDedicatedCephServiceNamePoolAsync() {
            return default(Task<_dedicated_ceph_poolGet.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool
        private Task<System.String> PostDedicatedCephServiceNamePoolAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}
        private Task<System.String> DeleteDedicatedCephServiceNamePoolPoolNameAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}
        private Task<_dedicated_ceph_poolGet.response> GetDedicatedCephServiceNamePoolPoolNameAsync() {
            return default(Task<_dedicated_ceph_poolGet.response>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/pool/{poolName}/allowDeletion
        private Task<System.String> PutDedicatedCephServiceNamePoolPoolNameAllowDeletionAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedCephServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/serviceInfos
        private void PutDedicatedCephServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicated/ceph/{serviceName}/task
        private Task<_dedicated_ceph_taskList.response[]> GetDedicatedCephServiceNameTaskAsync() {
            return default(Task<_dedicated_ceph_taskList.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/task/{taskId}
        private Task<_dedicated_ceph_taskGet.response[]> GetDedicatedCephServiceNameTaskTaskIdAsync() {
            return default(Task<_dedicated_ceph_taskGet.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/terminate
        private Task<System.String> PostDedicatedCephServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user
        private Task<_dedicated_ceph_userGet.response[]> GetDedicatedCephServiceNameUserAsync() {
            return default(Task<_dedicated_ceph_userGet.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user
        private Task<System.String> PostDedicatedCephServiceNameUserAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}
        private Task<System.String> DeleteDedicatedCephServiceNameUserUserNameAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}
        private Task<_dedicated_ceph_userGet.response> GetDedicatedCephServiceNameUserUserNameAsync() {
            return default(Task<_dedicated_ceph_userGet.response>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        private Task<_dedicated_ceph_userPoolPermList.response[]> GetDedicatedCephServiceNameUserUserNamePoolAsync() {
            return default(Task<_dedicated_ceph_userPoolPermList.response[]>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        private Task<System.String> PostDedicatedCephServiceNameUserUserNamePoolAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool
        private Task<System.String> PutDedicatedCephServiceNameUserUserNamePoolAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/ceph/{serviceName}/user/{userName}/pool/{poolName}
        private Task<System.String> DeleteDedicatedCephServiceNameUserUserNamePoolPoolNameAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/cluster
        private Task<System.Guid[]> GetDedicatedClusterAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dedicated/cluster/availabilities
        private Task<_dedicated_cluster.availability[]> GetDedicatedClusterAvailabilitiesAsync() {
            return default(Task<_dedicated_cluster.availability[]>);
        }
        
        // Path: /dedicated/cluster/availabilities/raw
        private Task<_dedicated_cluster.AvailabilitiesRaw[]> GetDedicatedClusterAvailabilitiesRawAsync() {
            return default(Task<_dedicated_cluster.AvailabilitiesRaw[]>);
        }
        
        // Path: /dedicated/cluster/{serviceName}
        private Task<_dedicated_cluster.ClusterWithIAM> GetDedicatedClusterServiceNameAsync() {
            return default(Task<_dedicated_cluster.ClusterWithIAM>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/changeContact
        private Task<System.Int64[]> PostDedicatedClusterServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/confirmTermination
        private Task<System.String> PostDedicatedClusterServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedClusterServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicated/cluster/{serviceName}/serviceInfos
        private void PutDedicatedClusterServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicated/cluster/{serviceName}/terminate
        private Task<System.String> PostDedicatedClusterServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/housing
        private Task<System.String[]> GetDedicatedHousingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/housing/{serviceName}
        private Task<_dedicated_housing.HousingWithIAM> GetDedicatedHousingServiceNameAsync() {
            return default(Task<_dedicated_housing.HousingWithIAM>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        private Task<_dedicated_server.Task> DeleteDedicatedHousingServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        private Task<_dedicated_server.BackupFtp> GetDedicatedHousingServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.BackupFtp>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP
        private Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access
        private Task<System.Net.IPNetwork[]> GetDedicatedHousingServiceNameFeaturesBackupFTPAccessAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access
        private Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPAccessAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        private Task<_dedicated_server.Task> DeleteDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        private Task<_dedicated_server.BackupFtpAcl> GetDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
            return default(Task<_dedicated_server.BackupFtpAcl>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/access/{ipBlock}
        private void PutDedicatedHousingServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/authorizableBlocks
        private Task<System.Net.IPNetwork[]> GetDedicatedHousingServiceNameFeaturesBackupFTPAuthorizableBlocksAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/housing/{serviceName}/features/backupFTP/password
        private Task<_dedicated_server.Task> PostDedicatedHousingServiceNameFeaturesBackupFTPPasswordAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/orderable/APC
        private Task<_dedicated_housing.ApcOrderable> GetDedicatedHousingServiceNameOrderableAPCAsync() {
            return default(Task<_dedicated_housing.ApcOrderable>);
        }
        
        // Path: /dedicated/housing/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedHousingServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicated/housing/{serviceName}/serviceInfos
        private void PutDedicatedHousingServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicated/housing/{serviceName}/task
        private Task<System.Int64[]> GetDedicatedHousingServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/housing/{serviceName}/task/{taskId}
        private Task<_dedicated_housing.Task> GetDedicatedHousingServiceNameTaskTaskIdAsync() {
            return default(Task<_dedicated_housing.Task>);
        }
        
        // Path: /dedicated/housing/{serviceName}/task/{taskId}/cancel
        private void PostDedicatedHousingServiceNameTaskTaskIdCancelAsync() {
        }
        
        // Path: /dedicated/installationTemplate
        private Task<System.String[]> GetDedicatedInstallationTemplateAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/installationTemplate/templateInfos
        private Task<_dedicated.TemplateOsInfo[]> GetDedicatedInstallationTemplateTemplateInfosAsync() {
            return default(Task<_dedicated.TemplateOsInfo[]>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}
        private Task<_dedicated_installationTemplate.Templates> GetDedicatedInstallationTemplateTemplateNameAsync() {
            return default(Task<_dedicated_installationTemplate.Templates>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme
        private Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}
        private Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync() {
            return default(Task<_dedicated_installationTemplate.templatePartitioningSchemes>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        private Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        private Task<_dedicated_installationTemplate.hardwareRaid> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync() {
            return default(Task<_dedicated_installationTemplate.hardwareRaid>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        private Task<System.String[]> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        private Task<_dedicated_installationTemplate.templatePartitions> GetDedicatedInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync() {
            return default(Task<_dedicated_installationTemplate.templatePartitions>);
        }
        
        // Path: /dedicated/nasha
        private Task<System.String[]> GetDedicatedNashaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}
        private Task<_dedicated_nasha.StorageWithIAM> GetDedicatedNashaServiceNameAsync() {
            return default(Task<_dedicated_nasha.StorageWithIAM>);
        }
        
        // Path: /dedicated/nasha/{serviceName}
        private void PutDedicatedNashaServiceNameAsync() {
        }
        
        // Path: /dedicated/nasha/{serviceName}/changeContact
        private Task<System.Int64[]> PostDedicatedNashaServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/confirmTermination
        private Task<System.String> PostDedicatedNashaServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/metricsToken
        private Task<_dedicated_storage.MetricsTokenResult> GetDedicatedNashaServiceNameMetricsTokenAsync() {
            return default(Task<_dedicated_storage.MetricsTokenResult>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition
        private Task<System.String[]> GetDedicatedNashaServiceNamePartitionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        private Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        private Task<_dedicated_nasha.Partition> GetDedicatedNashaServiceNamePartitionPartitionNameAsync() {
            return default(Task<_dedicated_nasha.Partition>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}
        private void PutDedicatedNashaServiceNamePartitionPartitionNameAsync() {
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access
        private Task<System.Net.IPNetwork[]> GetDedicatedNashaServiceNamePartitionPartitionNameAccessAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameAccessAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        private Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/access/{ip}
        private Task<_dedicated_nasha.Access> GetDedicatedNashaServiceNamePartitionPartitionNameAccessIpAsync() {
            return default(Task<_dedicated_nasha.Access>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableBlocks
        private Task<System.Net.IPNetwork[]> GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableBlocksAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/authorizableIps
        private Task<System.Net.IPAddress[]> GetDedicatedNashaServiceNamePartitionPartitionNameAuthorizableIpsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        private Task<System.String[]> GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        private Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/customSnapshot/{name}
        private Task<_dedicated_nasha.customSnap> GetDedicatedNashaServiceNamePartitionPartitionNameCustomSnapshotNameAsync() {
            return default(Task<_dedicated_nasha.customSnap>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/options
        private Task<_dedicated_nasha.options> GetDedicatedNashaServiceNamePartitionPartitionNameOptionsAsync() {
            return default(Task<_dedicated_nasha.options>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/options
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameOptionsAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        private Task<System.Int64[]> GetDedicatedNashaServiceNamePartitionPartitionNameQuotaAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameQuotaAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        private Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/quota/{uid}
        private Task<_dedicated_nasha.Quota> GetDedicatedNashaServiceNamePartitionPartitionNameQuotaUidAsync() {
            return default(Task<_dedicated_nasha.Quota>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        private Task<_dedicated_storage.SnapshotEnum[]> GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync() {
            return default(Task<_dedicated_storage.SnapshotEnum[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot
        private Task<_dedicated_nasTask.Task> PostDedicatedNashaServiceNamePartitionPartitionNameSnapshotAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        private Task<_dedicated_nasTask.Task> DeleteDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/snapshot/{snapshotType}
        private Task<_dedicated_nasha.Snapshot> GetDedicatedNashaServiceNamePartitionPartitionNameSnapshotSnapshotTypeAsync() {
            return default(Task<_dedicated_nasha.Snapshot>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/partition/{partitionName}/use
        private Task<_complexType.UnitAndValue<double>> GetDedicatedNashaServiceNamePartitionPartitionNameUseAsync() {
            return default(Task<_complexType.UnitAndValue<double>>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedNashaServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/serviceInfos
        private void PutDedicatedNashaServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicated/nasha/{serviceName}/task
        private Task<System.Int64[]> GetDedicatedNashaServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/task/{taskId}
        private Task<_dedicated_nasTask.Task> GetDedicatedNashaServiceNameTaskTaskIdAsync() {
            return default(Task<_dedicated_nasTask.Task>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/terminate
        private Task<System.String> PostDedicatedNashaServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/nasha/{serviceName}/use
        private Task<_complexType.UnitAndValue<double>> GetDedicatedNashaServiceNameUseAsync() {
            return default(Task<_complexType.UnitAndValue<double>>);
        }
        
        // Path: /dedicated/server
        private Task<System.String[]> GetDedicatedServerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/availabilities
        private Task<_dedicated.Availabilities[]> GetDedicatedServerAvailabilitiesAsync() {
            return default(Task<_dedicated.Availabilities[]>);
        }
        
        // Path: /dedicated/server/availabilities/raw
        private Task<_dedicated.AvailabilitiesRaw[]> GetDedicatedServerAvailabilitiesRawAsync() {
            return default(Task<_dedicated.AvailabilitiesRaw[]>);
        }
        
        // Path: /dedicated/server/datacenter/availabilities
        private Task<_dedicated.DatacenterAvailability[]> GetDedicatedServerDatacenterAvailabilitiesAsync() {
            return default(Task<_dedicated.DatacenterAvailability[]>);
        }
        
        // Path: /dedicated/server/datacenter/availabilities/raw
        private Task<_dedicated.DatacenterRawAvailability[]> GetDedicatedServerDatacenterAvailabilitiesRawAsync() {
            return default(Task<_dedicated.DatacenterRawAvailability[]>);
        }
        
        // Path: /dedicated/server/log
        private Task<_dedicated.PublicLog> GetDedicatedServerLogAsync() {
            return default(Task<_dedicated.PublicLog>);
        }
        
        // Path: /dedicated/server/osAvailabilities
        private Task<System.String[]> GetDedicatedServerOsAvailabilitiesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/region/availabilities
        private Task<_dedicated_server.RegionAvailability[]> GetDedicatedServerRegionAvailabilitiesAsync() {
            return default(Task<_dedicated_server.RegionAvailability[]>);
        }
        
        // Path: /dedicated/server/virtualNetworkInterface/{uuid}
        private Task<_dedicated_server.VirtualNetworkInterface> GetDedicatedServerVirtualNetworkInterfaceUuidAsync() {
            return default(Task<_dedicated_server.VirtualNetworkInterface>);
        }
        
        // Path: /dedicated/server/{serviceName}
        private Task<_dedicated_server.DedicatedWithIAM> GetDedicatedServerServiceNameAsync() {
            return default(Task<_dedicated_server.DedicatedWithIAM>);
        }
        
        // Path: /dedicated/server/{serviceName}
        private void PutDedicatedServerServiceNameAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/authenticationSecret
        private Task<_dedicated_server.Access[]> PostDedicatedServerServiceNameAuthenticationSecretAsync() {
            return default(Task<_dedicated_server.Access[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/backupCloudOfferDetails
        private Task<_dedicated_server_backup.BackupOffer> GetDedicatedServerServiceNameBackupCloudOfferDetailsAsync() {
            return default(Task<_dedicated_server_backup.BackupOffer>);
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings
        private Task<_dedicated_biosSettings.BiosSettings> GetDedicatedServerServiceNameBiosSettingsAsync() {
            return default(Task<_dedicated_biosSettings.BiosSettings>);
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings/sgx
        private Task<_dedicated_biosSettingsSgx.BiosSettingsSgx> GetDedicatedServerServiceNameBiosSettingsSgxAsync() {
            return default(Task<_dedicated_biosSettingsSgx.BiosSettingsSgx>);
        }
        
        // Path: /dedicated/server/{serviceName}/biosSettings/sgx/configure
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameBiosSettingsSgxConfigureAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/boot
        private Task<System.Int64[]> GetDedicatedServerServiceNameBootAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}
        private Task<_dedicated_server.Netboot> GetDedicatedServerServiceNameBootBootIdAsync() {
            return default(Task<_dedicated_server.Netboot>);
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}/option
        private Task<_dedicated_server.BootOptionEnum[]> GetDedicatedServerServiceNameBootBootIdOptionAsync() {
            return default(Task<_dedicated_server.BootOptionEnum[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/boot/{bootId}/option/{option}
        private Task<_dedicated_server.netbootOption> GetDedicatedServerServiceNameBootBootIdOptionOptionAsync() {
            return default(Task<_dedicated_server.netbootOption>);
        }
        
        // Path: /dedicated/server/{serviceName}/burst
        private Task<_dedicated_server.ServerBurst> GetDedicatedServerServiceNameBurstAsync() {
            return default(Task<_dedicated_server.ServerBurst>);
        }
        
        // Path: /dedicated/server/{serviceName}/burst
        private void PutDedicatedServerServiceNameBurstAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/changeContact
        private Task<System.Int64[]> PostDedicatedServerServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/confirmTermination
        private Task<System.String> PostDedicatedServerServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        private void DeleteDedicatedServerServiceNameFeaturesBackupCloudAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        private Task<_dedicated_server.BackupCloud> GetDedicatedServerServiceNameFeaturesBackupCloudAsync() {
            return default(Task<_dedicated_server.BackupCloud>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud
        private Task<_dedicated_server.BackupCloud> PostDedicatedServerServiceNameFeaturesBackupCloudAsync() {
            return default(Task<_dedicated_server.BackupCloud>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupCloud/password
        private Task<_dedicated_server_backup.BackupPassword> PostDedicatedServerServiceNameFeaturesBackupCloudPasswordAsync() {
            return default(Task<_dedicated_server_backup.BackupPassword>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        private Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        private Task<_dedicated_server.BackupFtp> GetDedicatedServerServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.BackupFtp>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access
        private Task<System.Net.IPNetwork[]> GetDedicatedServerServiceNameFeaturesBackupFTPAccessAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPAccessAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        private Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        private Task<_dedicated_server.BackupFtpAcl> GetDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
            return default(Task<_dedicated_server.BackupFtpAcl>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/access/{ipBlock}
        private void PutDedicatedServerServiceNameFeaturesBackupFTPAccessIpBlockAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/authorizableBlocks
        private Task<System.Net.IPNetwork[]> GetDedicatedServerServiceNameFeaturesBackupFTPAuthorizableBlocksAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/backupFTP/password
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesBackupFTPPasswordAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/firewall
        private Task<_dedicated_server.Firewall> GetDedicatedServerServiceNameFeaturesFirewallAsync() {
            return default(Task<_dedicated_server.Firewall>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/firewall
        private void PutDedicatedServerServiceNameFeaturesFirewallAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi
        private Task<_dedicated_server.Ipmi> GetDedicatedServerServiceNameFeaturesIpmiAsync() {
            return default(Task<_dedicated_server.Ipmi>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/access
        private Task<_dedicated_server.IpmiAccessValue> GetDedicatedServerServiceNameFeaturesIpmiAccessAsync() {
            return default(Task<_dedicated_server.IpmiAccessValue>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/access
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiAccessAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/resetInterface
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiResetInterfaceAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/resetSessions
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiResetSessionsAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/test
        private Task<_dedicated_server.IpmiTestResult> GetDedicatedServerServiceNameFeaturesIpmiTestAsync() {
            return default(Task<_dedicated_server.IpmiTestResult>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/ipmi/test
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameFeaturesIpmiTestAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/features/kvm
        private Task<_dedicated_server.kvm> GetDedicatedServerServiceNameFeaturesKvmAsync() {
            return default(Task<_dedicated_server.kvm>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/compatibleTemplatePartitionSchemes
        private Task<System.String[]> GetDedicatedServerServiceNameInstallCompatibleTemplatePartitionSchemesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/compatibleTemplates
        private Task<_dedicated_server.InstallTemplate> GetDedicatedServerServiceNameInstallCompatibleTemplatesAsync() {
            return default(Task<_dedicated_server.InstallTemplate>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/hardwareRaidProfile
        private Task<_dedicated_server.HardwareRaidProfile> GetDedicatedServerServiceNameInstallHardwareRaidProfileAsync() {
            return default(Task<_dedicated_server.HardwareRaidProfile>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/hardwareRaidSize
        private Task<_dedicated_server.HardwareRaidSize> GetDedicatedServerServiceNameInstallHardwareRaidSizeAsync() {
            return default(Task<_dedicated_server.HardwareRaidSize>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/start
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameInstallStartAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/install/status
        private Task<_dedicated_server.InstallationProgressStatus> GetDedicatedServerServiceNameInstallStatusAsync() {
            return default(Task<_dedicated_server.InstallationProgressStatus>);
        }
        
        // Path: /dedicated/server/{serviceName}/intervention
        private Task<System.Int64[]> GetDedicatedServerServiceNameInterventionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/intervention/{interventionId}
        private Task<_dedicated_server.Intervention> GetDedicatedServerServiceNameInterventionInterventionIdAsync() {
            return default(Task<_dedicated_server.Intervention>);
        }
        
        // Path: /dedicated/server/{serviceName}/ipBlockMerge
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameIpBlockMergeAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ipCanBeMovedTo
        private void GetDedicatedServerServiceNameIpCanBeMovedToAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/ipCountryAvailable
        private Task<_dedicated_server.IpCountryEnum[]> GetDedicatedServerServiceNameIpCountryAvailableAsync() {
            return default(Task<_dedicated_server.IpCountryEnum[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/ipMove
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameIpMoveAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ips
        private Task<System.Net.IPNetwork[]> GetDedicatedServerServiceNameIpsAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/license/compliantWindows
        private Task<_license.WindowsOsVersionEnum[]> GetDedicatedServerServiceNameLicenseCompliantWindowsAsync() {
            return default(Task<_license.WindowsOsVersionEnum[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/license/compliantWindowsSqlServer
        private Task<_license.WindowsSqlVersionEnum[]> GetDedicatedServerServiceNameLicenseCompliantWindowsSqlServerAsync() {
            return default(Task<_license.WindowsSqlVersionEnum[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/license/windows
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameLicenseWindowsAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/mrtg
        private Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameMrtgAsync() {
            return default(Task<_dedicated_server.MrtgTimestampValue[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController
        private Task<System.Net.NetworkInformation.PhysicalAddress[]> GetDedicatedServerServiceNameNetworkInterfaceControllerAsync() {
            return default(Task<System.Net.NetworkInformation.PhysicalAddress[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController/{mac}
        private Task<_dedicated_networkInterfaceController.NetworkInterfaceController> GetDedicatedServerServiceNameNetworkInterfaceControllerMacAsync() {
            return default(Task<_dedicated_networkInterfaceController.NetworkInterfaceController>);
        }
        
        // Path: /dedicated/server/{serviceName}/networkInterfaceController/{mac}/mrtg
        private Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameNetworkInterfaceControllerMacMrtgAsync() {
            return default(Task<_dedicated_server.MrtgTimestampValue[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/aggregation
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaAggregationAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/group
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaGroupAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/reset
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameOlaResetAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/ola/ungroup
        private Task<_dedicated_server.Task[]> PostDedicatedServerServiceNameOlaUngroupAsync() {
            return default(Task<_dedicated_server.Task[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/ongoing
        private Task<_dedicated.ExposedTask[]> GetDedicatedServerServiceNameOngoingAsync() {
            return default(Task<_dedicated.ExposedTask[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/option
        private Task<_dedicated_server.OptionEnum[]> GetDedicatedServerServiceNameOptionAsync() {
            return default(Task<_dedicated_server.OptionEnum[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/option/{option}
        private void DeleteDedicatedServerServiceNameOptionOptionAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/option/{option}
        private Task<_dedicated_server.Option> GetDedicatedServerServiceNameOptionOptionAsync() {
            return default(Task<_dedicated_server.Option>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/backupStorage
        private Task<_dedicated_server.BackupStorageOrderable> GetDedicatedServerServiceNameOrderableBackupStorageAsync() {
            return default(Task<_dedicated_server.BackupStorageOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/bandwidth
        private Task<_dedicated_server.BandwidthOrderable> GetDedicatedServerServiceNameOrderableBandwidthAsync() {
            return default(Task<_dedicated_server.BandwidthOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/bandwidthvRack
        private Task<_dedicated_server.BandwidthvRackOrderable> GetDedicatedServerServiceNameOrderableBandwidthvRackAsync() {
            return default(Task<_dedicated_server.BandwidthvRackOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/feature
        private Task<System.Boolean> GetDedicatedServerServiceNameOrderableFeatureAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/ip
        private Task<_dedicated_server.IpOrderable> GetDedicatedServerServiceNameOrderableIpAsync() {
            return default(Task<_dedicated_server.IpOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/kvm
        private Task<System.Boolean> GetDedicatedServerServiceNameOrderableKvmAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/kvmExpress
        private Task<System.Boolean> GetDedicatedServerServiceNameOrderableKvmExpressAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/professionalUse
        private Task<System.Boolean> GetDedicatedServerServiceNameOrderableProfessionalUseAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/traffic
        private Task<_dedicated_server.TrafficOrderable> GetDedicatedServerServiceNameOrderableTrafficAsync() {
            return default(Task<_dedicated_server.TrafficOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/orderable/usbKey
        private Task<_dedicated_server.UsbKeyOrderableDetails> GetDedicatedServerServiceNameOrderableUsbKeyAsync() {
            return default(Task<_dedicated_server.UsbKeyOrderableDetails>);
        }
        
        // Path: /dedicated/server/{serviceName}/plannedIntervention
        private Task<System.Int64[]> GetDedicatedServerServiceNamePlannedInterventionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/plannedIntervention/{interventionId}
        private Task<_dedicated_server.PlannedIntervention> GetDedicatedServerServiceNamePlannedInterventionInterventionIdAsync() {
            return default(Task<_dedicated_server.PlannedIntervention>);
        }
        
        // Path: /dedicated/server/{serviceName}/reboot
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameRebootAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains
        private Task<System.String[]> GetDedicatedServerServiceNameSecondaryDnsDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains
        private void PostDedicatedServerServiceNameSecondaryDnsDomainsAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        private void DeleteDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        private Task<_secondaryDns.SecondaryDNS> GetDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync() {
            return default(Task<_secondaryDns.SecondaryDNS>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}
        private void PutDedicatedServerServiceNameSecondaryDnsDomainsDomainAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        private Task<_secondaryDns.SecondaryDNSNameServer> GetDedicatedServerServiceNameSecondaryDnsDomainsDomainDnsServerAsync() {
            return default(Task<_secondaryDns.SecondaryDNSNameServer>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsNameDomainToken
        private Task<_secondaryDns.SecondaryDNSCheckField> GetDedicatedServerServiceNameSecondaryDnsNameDomainTokenAsync() {
            return default(Task<_secondaryDns.SecondaryDNSCheckField>);
        }
        
        // Path: /dedicated/server/{serviceName}/secondaryDnsNameServerAvailable
        private Task<_secondaryDns.SecondaryDNSNameServer> GetDedicatedServerServiceNameSecondaryDnsNameServerAvailableAsync() {
            return default(Task<_secondaryDns.SecondaryDNSNameServer>);
        }
        
        // Path: /dedicated/server/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedServerServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicated/server/{serviceName}/serviceInfos
        private void PutDedicatedServerServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/hardware
        private Task<_dedicated_server.HardwareSpecifications> GetDedicatedServerServiceNameSpecificationsHardwareAsync() {
            return default(Task<_dedicated_server.HardwareSpecifications>);
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/ip
        private Task<_dedicated_server.IpOrderable> GetDedicatedServerServiceNameSpecificationsIpAsync() {
            return default(Task<_dedicated_server.IpOrderable>);
        }
        
        // Path: /dedicated/server/{serviceName}/specifications/network
        private Task<_dedicated_server.NetworkSpecifications> GetDedicatedServerServiceNameSpecificationsNetworkAsync() {
            return default(Task<_dedicated_server.NetworkSpecifications>);
        }
        
        // Path: /dedicated/server/{serviceName}/spla
        private Task<System.Int64[]> GetDedicatedServerServiceNameSplaAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/spla
        private Task<System.Int64> PostDedicatedServerServiceNameSplaAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}
        private Task<_dedicated_server.spla> GetDedicatedServerServiceNameSplaIdAsync() {
            return default(Task<_dedicated_server.spla>);
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}
        private void PutDedicatedServerServiceNameSplaIdAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/spla/{id}/revoke
        private void PostDedicatedServerServiceNameSplaIdRevokeAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/cooling
        private Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceCoolingAsync() {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/hardDiskDrive
        private Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceHardDiskDriveAsync() {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/support/replace/memory
        private Task<_support.NewMessageInfo> PostDedicatedServerServiceNameSupportReplaceMemoryAsync() {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /dedicated/server/{serviceName}/task
        private Task<System.Int64[]> GetDedicatedServerServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}
        private Task<_dedicated_server.Task> GetDedicatedServerServiceNameTaskTaskIdAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/availableTimeslots
        private Task<_dedicated.PlannedInterventionTimeSlot[]> GetDedicatedServerServiceNameTaskTaskIdAvailableTimeslotsAsync() {
            return default(Task<_dedicated.PlannedInterventionTimeSlot[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/cancel
        private void PostDedicatedServerServiceNameTaskTaskIdCancelAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/task/{taskId}/schedule
        private void PostDedicatedServerServiceNameTaskTaskIdScheduleAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/terminate
        private Task<System.String> PostDedicatedServerServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac
        private Task<System.String[]> GetDedicatedServerServiceNameVirtualMacAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualMacAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}
        private Task<_dedicated_server.VirtualMac> GetDedicatedServerServiceNameVirtualMacMacAddressAsync() {
            return default(Task<_dedicated_server.VirtualMac>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        private Task<System.Net.IPAddress[]> GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        private Task<_dedicated_server.Task> DeleteDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualMac/{macAddress}/virtualAddress/{ipAddress}
        private Task<_dedicated_server.VirtualMacManagement> GetDedicatedServerServiceNameVirtualMacMacAddressVirtualAddressIpAddressAsync() {
            return default(Task<_dedicated_server.VirtualMacManagement>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface
        private Task<System.Guid[]> GetDedicatedServerServiceNameVirtualNetworkInterfaceAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        private Task<_dedicated_virtualNetworkInterface.VirtualNetworkInterface> GetDedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync() {
            return default(Task<_dedicated_virtualNetworkInterface.VirtualNetworkInterface>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}
        private void PutDedicatedServerServiceNameVirtualNetworkInterfaceUuidAsync() {
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/disable
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualNetworkInterfaceUuidDisableAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/virtualNetworkInterface/{uuid}/enable
        private Task<_dedicated_server.Task> PostDedicatedServerServiceNameVirtualNetworkInterfaceUuidEnableAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack
        private Task<System.String[]> GetDedicatedServerServiceNameVrackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}
        private Task<_vrack.Task> DeleteDedicatedServerServiceNameVrackVrackAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}
        private Task<_vrack.dedicatedServer> GetDedicatedServerServiceNameVrackVrackAsync() {
            return default(Task<_vrack.dedicatedServer>);
        }
        
        // Path: /dedicated/server/{serviceName}/vrack/{vrack}/mrtg
        private Task<_dedicated_server.MrtgTimestampValue[]> GetDedicatedServerServiceNameVrackVrackMrtgAsync() {
            return default(Task<_dedicated_server.MrtgTimestampValue[]>);
        }
        
        // Path: /dedicatedCloud
        private Task<System.String[]> GetDedicatedCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/commercialRange
        private Task<System.String[]> GetDedicatedCloudCommercialRangeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/commercialRange/{commercialRangeName}
        private Task<_dedicatedCloud.CommercialRange> GetDedicatedCloudCommercialRangeCommercialRangeNameAsync() {
            return default(Task<_dedicatedCloud.CommercialRange>);
        }
        
        // Path: /dedicatedCloud/location
        private Task<System.String[]> GetDedicatedCloudLocationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}
        private Task<_dedicatedCloud.PccZone> GetDedicatedCloudLocationPccZoneAsync() {
            return default(Task<_dedicatedCloud.PccZone>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hostProfile
        private Task<System.Int64[]> GetDedicatedCloudLocationPccZoneHostProfileAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hostProfile/{id}
        private Task<_dedicatedCloud.HostProfile> GetDedicatedCloudLocationPccZoneHostProfileIdAsync() {
            return default(Task<_dedicatedCloud.HostProfile>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hypervisor
        private Task<System.String[]> GetDedicatedCloudLocationPccZoneHypervisorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/hypervisor/{shortName}
        private Task<_dedicatedCloud.Os> GetDedicatedCloudLocationPccZoneHypervisorShortNameAsync() {
            return default(Task<_dedicatedCloud.Os>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/host
        private Task<_dedicatedCloud.HostStockProfile[]> GetDedicatedCloudLocationPccZoneStockHostAsync() {
            return default(Task<_dedicatedCloud.HostStockProfile[]>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/pcc
        private Task<_dedicatedCloud.PccStockProfile[]> GetDedicatedCloudLocationPccZoneStockPccAsync() {
            return default(Task<_dedicatedCloud.PccStockProfile[]>);
        }
        
        // Path: /dedicatedCloud/location/{pccZone}/stock/zpool
        private Task<_dedicatedCloud.ZpoolStockProfile[]> GetDedicatedCloudLocationPccZoneStockZpoolAsync() {
            return default(Task<_dedicatedCloud.ZpoolStockProfile[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}
        private Task<_dedicatedCloud.dedicatedCloudWithIAM> GetDedicatedCloudServiceNameAsync() {
            return default(Task<_dedicatedCloud.dedicatedCloudWithIAM>);
        }
        
        // Path: /dedicatedCloud/{serviceName}
        private Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork
        private Task<System.Int64[]> GetDedicatedCloudServiceNameAllowedNetworkAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        private Task<_dedicatedCloud.AllowedNetwork> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync() {
            return default(Task<_dedicatedCloud.AllowedNetwork>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}
        private Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/allowedNetwork/{networkAccessId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameAllowedNetworkNetworkAccessIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/backupRepository
        private Task<System.Int64[]> GetDedicatedCloudServiceNameBackupRepositoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/backupRepository/{repositoryId}
        private Task<_dedicatedCloud.BackupRepository> GetDedicatedCloudServiceNameBackupRepositoryRepositoryIdAsync() {
            return default(Task<_dedicatedCloud.BackupRepository>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/canDeployNsxtEdgesOnGlobalDatastores
        private Task<System.Boolean> GetDedicatedCloudServiceNameCanDeployNsxtEdgesOnGlobalDatastoresAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/capabilities
        private Task<_dedicatedCloud.Capabilities> GetDedicatedCloudServiceNameCapabilitiesAsync() {
            return default(Task<_dedicatedCloud.Capabilities>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/changeContact
        private Task<System.Int64[]> PostDedicatedCloudServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/commercialRange/compliance
        private Task<_dedicatedCloud.compliantRanges[]> GetDedicatedCloudServiceNameCommercialRangeComplianceAsync() {
            return default(Task<_dedicatedCloud.compliantRanges[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/commercialRange/orderable
        private Task<System.String[]> GetDedicatedCloudServiceNameCommercialRangeOrderableAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/confirmTermination
        private Task<System.String> PostDedicatedCloudServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        private Task<_dedicatedCloud.Datacenter> GetDedicatedCloudServiceNameDatacenterDatacenterIdAsync() {
            return default(Task<_dedicatedCloud.Datacenter>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}
        private Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameDatacenterDatacenterIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup
        private Task<_dedicatedCloud.Backup> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupAsync() {
            return default(Task<_dedicatedCloud.Backup>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/batchRestore
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupBatchRestoreAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/canOptimizeProxies
        private Task<_dedicatedCloud_backup.OptimizeProxies> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupCanOptimizeProxiesAsync() {
            return default(Task<_dedicatedCloud_backup.OptimizeProxies>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/generateReport
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupGenerateReportAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/offerCapabilities
        private Task<_dedicatedCloud_backup.BackupCapabilities[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupOfferCapabilitiesAsync() {
            return default(Task<_dedicatedCloud_backup.BackupCapabilities[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backup/optimizeProxies
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdBackupOptimizeProxiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/backupRepository/{repositoryId}
        private Task<_dedicatedCloud.BackupRepository> GetDedicatedCloudServiceNameDatacenterDatacenterIdBackupRepositoryRepositoryIdAsync() {
            return default(Task<_dedicatedCloud.BackupRepository>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/checkBackupJobs
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdCheckBackupJobsAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}
        private Task<_dedicatedCloud.Cluster> GetDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdAsync() {
            return default(Task<_dedicatedCloud.Cluster>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/cluster/{clusterId}/nsxt
        private Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameDatacenterDatacenterIdClusterClusterIdNsxtAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endMigration
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndMigrationAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/endpointPublicIp
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoEndpointPublicIpAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        private Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync() {
            return default(Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/remoteSites
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoRemoteSitesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/startMigration
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStartMigrationAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/status
        private Task<_dedicatedCloud_disasterRecovery.Profile> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoStatusAsync() {
            return default(Task<_dedicatedCloud_disasterRecovery.Profile>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zerto/usageReport
        private Task<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoUsageReportAsync() {
            return default(Task<_dedicatedCloud_disasterRecovery.ZertoProtectedVm[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/configureVpn
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleConfigureVpnAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/defaultLocalVraNetwork
        private Task<System.Net.IPNetwork> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDefaultLocalVraNetworkAsync() {
            return default(Task<System.Net.IPNetwork>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/endpointPublicIp
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleEndpointPublicIpAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        private Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync() {
            return default(Task<_dedicatedCloud_disasterRecovery.ZertoRemoteVra[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/remoteSites
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRemoteSitesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/disasterRecovery/zertoSingle/requestPairingToken
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdDisasterRecoveryZertoSingleRequestPairingTokenAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}
        private Task<_dedicatedCloud.Filer> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdAsync() {
            return default(Task<_dedicatedCloud.Filer>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/checkGlobalCompatible
        private Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdCheckGlobalCompatibleAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/convertToGlobal
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdConvertToGlobalAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/hourlyConsumption
        private Task<_dedicatedCloud_filer.HourlyConsumption> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdHourlyConsumptionAsync() {
            return default(Task<_dedicatedCloud_filer.HourlyConsumption>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/location
        private Task<_dedicatedCloud_filer.Location> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdLocationAsync() {
            return default(Task<_dedicatedCloud_filer.Location>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/remove
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdRemoveAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/filer/{filerId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdFilerFilerIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}
        private Task<_dedicatedCloud.Host> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAsync() {
            return default(Task<_dedicatedCloud.Host>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/addHostSpare
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdAddHostSpareAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/hourlyConsumption
        private Task<_dedicatedCloud_host.HourlyConsumption> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdHourlyConsumptionAsync() {
            return default(Task<_dedicatedCloud_host.HourlyConsumption>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/location
        private Task<_dedicatedCloud_host.Location> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdLocationAsync() {
            return default(Task<_dedicatedCloud_host.Location>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/remove
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdRemoveAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience
        private Task<_dedicatedCloud.HostResilience> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceAsync() {
            return default(Task<_dedicatedCloud.HostResilience>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/canBeEnabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceCanBeEnabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/resilience/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdResilienceEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/host/{hostId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdHostHostIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}
        private Task<_dedicatedCloud.NsxtEdge> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdAsync() {
            return default(Task<_dedicatedCloud.NsxtEdge>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/relocateEdge
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdRelocateEdgeAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience
        private Task<_dedicatedCloud.NsxtEdgeResilience> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceAsync() {
            return default(Task<_dedicatedCloud.NsxtEdgeResilience>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/canBeEnabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceCanBeEnabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdge/{nsxtEdgeId}/resilience/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgeNsxtEdgeIdResilienceEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesResizingCapabilities
        private Task<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesResizingCapabilitiesAsync() {
            return default(Task<_dedicatedCloud_nsxt.NsxtEdgeSizingCapability>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/nsxtEdgesScalingCapabilities
        private Task<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability> GetDedicatedCloudServiceNameDatacenterDatacenterIdNsxtEdgesScalingCapabilitiesAsync() {
            return default(Task<_dedicatedCloud_nsxt.NsxtEdgeScalingCapability>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewFilerHourly
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewFilerHourlyAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderNewHostHourly
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdOrderNewHostHourlyAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableFilerProfiles
        private Task<_dedicatedCloud_filer.Profile[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableFilerProfilesAsync() {
            return default(Task<_dedicatedCloud_filer.Profile[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/orderableHostProfiles
        private Task<_dedicatedCloud_host.Profile[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdOrderableHostProfilesAsync() {
            return default(Task<_dedicatedCloud_host.Profile[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway
        private Task<_dedicatedCloud.PrivateGateway> GetDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayAsync() {
            return default(Task<_dedicatedCloud.PrivateGateway>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/privateGateway/reconfigure
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdPrivateGatewayReconfigureAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/resizeNsxtEdgeCluster
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdResizeNsxtEdgeClusterAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}
        private Task<_dedicatedCloud.Vm> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdAsync() {
            return default(Task<_dedicatedCloud.Vm>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        private Task<_dedicatedCloud.BackupJob> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync() {
            return default(Task<_dedicatedCloud.BackupJob>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints
        private Task<System.Int64[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}
        private Task<_dedicatedCloud.RestorePoint> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdAsync() {
            return default(Task<_dedicatedCloud.RestorePoint>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/backupJob/restorePoints/{restorePointId}/restore
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdBackupJobRestorePointsRestorePointIdRestoreAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableBackup
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableBackupAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/disableCarp
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdDisableCarpAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/editBackup
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEditBackupAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableBackup
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableBackupAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/enableCarp
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdEnableCarpAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/removeLicense
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRemoveLicenseAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/restoreBackup
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdRestoreBackupAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vm/{vmId}/setLicense
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameDatacenterDatacenterIdVmVmIdSetLicenseAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/datacenter/{datacenterId}/vmLicensed
        private Task<_dedicatedCloud.virtualMachineLicensingSummary[]> GetDedicatedCloudServiceNameDatacenterDatacenterIdVmLicensedAsync() {
            return default(Task<_dedicatedCloud.virtualMachineLicensingSummary[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation
        private Task<_dedicatedCloud.Federation> GetDedicatedCloudServiceNameFederationAsync() {
            return default(Task<_dedicatedCloud.Federation>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory
        private Task<System.Int64[]> GetDedicatedCloudServiceNameFederationActiveDirectoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}
        private Task<_dedicatedCloud.FederationAccessNetwork> GetDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdAsync() {
            return default(Task<_dedicatedCloud.FederationAccessNetwork>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryGroup
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryGroupAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/federation/activeDirectory/{activeDirectoryId}/grantActiveDirectoryUser
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFederationActiveDirectoryActiveDirectoryIdGrantActiveDirectoryUserAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer
        private Task<System.Int64[]> GetDedicatedCloudServiceNameFilerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}
        private Task<_dedicatedCloud.Filer> GetDedicatedCloudServiceNameFilerFilerIdAsync() {
            return default(Task<_dedicatedCloud.Filer>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/checkGlobalCompatible
        private Task<System.Boolean> GetDedicatedCloudServiceNameFilerFilerIdCheckGlobalCompatibleAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/convertToGlobal
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdConvertToGlobalAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/hourlyConsumption
        private Task<_dedicatedCloud_filer.HourlyConsumption> GetDedicatedCloudServiceNameFilerFilerIdHourlyConsumptionAsync() {
            return default(Task<_dedicatedCloud_filer.HourlyConsumption>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/location
        private Task<_dedicatedCloud_filer.Location> GetDedicatedCloudServiceNameFilerFilerIdLocationAsync() {
            return default(Task<_dedicatedCloud_filer.Location>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/remove
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdRemoveAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameFilerFilerIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameFilerFilerIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/filer/{filerId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameFilerFilerIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/generateNsxvInventory
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameGenerateNsxvInventoryAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/generateVxlanToVrackMapping
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameGenerateVxlanToVrackMappingAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/globalTasks
        private Task<System.Int64[]> GetDedicatedCloudServiceNameGlobalTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx
        private Task<_dedicatedCloud.Hcx> GetDedicatedCloudServiceNameHcxAsync() {
            return default(Task<_dedicatedCloud.Hcx>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/canBeDisabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameHcxCanBeDisabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/canBeEnabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameHcxCanBeEnabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHcxDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hcx/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHcxEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds
        private Task<_dedicatedCloud.Hds> GetDedicatedCloudServiceNameHdsAsync() {
            return default(Task<_dedicatedCloud.Hds>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/canBeDisabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHdsCanBeDisabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/canBeEnabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHdsCanBeEnabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHdsDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hds/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHdsEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa
        private Task<_dedicatedCloud.Hipaa> GetDedicatedCloudServiceNameHipaaAsync() {
            return default(Task<_dedicatedCloud.Hipaa>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/canBeDisabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHipaaCanBeDisabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/canBeEnabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameHipaaCanBeEnabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHipaaDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/hipaa/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameHipaaEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam
        private Task<_dedicatedCloud.Iam> GetDedicatedCloudServiceNameIamAsync() {
            return default(Task<_dedicatedCloud.Iam>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/addRole
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamAddRoleAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/canBeDisabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameIamCanBeDisabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/canBeEnabled
        private Task<System.Boolean> GetDedicatedCloudServiceNameIamCanBeEnabledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/iam/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIamEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip
        private Task<System.Net.IPNetwork[]> GetDedicatedCloudServiceNameIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}
        private Task<_dedicatedCloud.Ip> GetDedicatedCloudServiceNameIpNetworkAsync() {
            return default(Task<_dedicatedCloud.Ip>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/details
        private Task<_dedicatedCloud.IpDetails[]> GetDedicatedCloudServiceNameIpNetworkDetailsAsync() {
            return default(Task<_dedicatedCloud.IpDetails[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameIpNetworkTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameIpNetworkTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIpNetworkTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/ip/{network}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameIpNetworkTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location
        private Task<_dedicatedCloud.PccZone> GetDedicatedCloudServiceNameLocationAsync() {
            return default(Task<_dedicatedCloud.PccZone>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hostProfile
        private Task<System.Int64[]> GetDedicatedCloudServiceNameLocationHostProfileAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hostProfile/{id}
        private Task<_dedicatedCloud.HostProfile> GetDedicatedCloudServiceNameLocationHostProfileIdAsync() {
            return default(Task<_dedicatedCloud.HostProfile>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hypervisor
        private Task<System.String[]> GetDedicatedCloudServiceNameLocationHypervisorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/location/hypervisor/{shortName}
        private Task<_dedicatedCloud.Os> GetDedicatedCloudServiceNameLocationHypervisorShortNameAsync() {
            return default(Task<_dedicatedCloud.Os>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/kind
        private Task<System.String[]> GetDedicatedCloudServiceNameLogKindAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/kind/{name}
        private Task<_dedicatedCloud.ldpKind> GetDedicatedCloudServiceNameLogKindNameAsync() {
            return default(Task<_dedicatedCloud.ldpKind>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription
        private Task<System.Guid[]> GetDedicatedCloudServiceNameLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription
        private Task<_dedicatedCloud.LogSubscriptionResponse> PostDedicatedCloudServiceNameLogSubscriptionAsync() {
            return default(Task<_dedicatedCloud.LogSubscriptionResponse>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        private Task<_dedicatedCloud.LogSubscriptionResponse> DeleteDedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dedicatedCloud.LogSubscriptionResponse>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/log/subscription/{subscriptionId}
        private Task<_dedicatedCloud.ldpSubscription> GetDedicatedCloudServiceNameLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dedicatedCloud.ldpSubscription>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/newPrices
        private Task<_dedicatedCloud.resourceNewPrices> GetDedicatedCloudServiceNameNewPricesAsync() {
            return default(Task<_dedicatedCloud.resourceNewPrices>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx
        private Task<_dedicatedCloud.Nsx> GetDedicatedCloudServiceNameNsxAsync() {
            return default(Task<_dedicatedCloud.Nsx>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/canBeDisabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameNsxCanBeDisabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/canBeEnabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameNsxCanBeEnabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameNsxDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsx/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameNsxEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/nsxt
        private Task<_dedicatedCloud.Nsxt> GetDedicatedCloudServiceNameNsxtAsync() {
            return default(Task<_dedicatedCloud.Nsxt>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/orderNewFilerHourly
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameOrderNewFilerHourlyAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/orderableIpCountries
        private Task<_dedicatedCloud.IpCountriesEnum[]> GetDedicatedCloudServiceNameOrderableIpCountriesAsync() {
            return default(Task<_dedicatedCloud.IpCountriesEnum[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/passwordPolicy
        private Task<_dedicatedCloud.passwordPolicy> GetDedicatedCloudServiceNamePasswordPolicyAsync() {
            return default(Task<_dedicatedCloud.passwordPolicy>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss
        private Task<_dedicatedCloud.PciDss> GetDedicatedCloudServiceNamePcidssAsync() {
            return default(Task<_dedicatedCloud.PciDss>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/canBeDisabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNamePcidssCanBeDisabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/canBeEnabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNamePcidssCanBeEnabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNamePcidssDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/pcidss/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNamePcidssEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/resetTriggeredAlarm
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameResetTriggeredAlarmAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/robot
        private Task<System.String[]> GetDedicatedCloudServiceNameRobotAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/robot/{name}
        private Task<_dedicatedCloud.Robot> GetDedicatedCloudServiceNameRobotNameAsync() {
            return default(Task<_dedicatedCloud.Robot>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions
        private Task<_dedicatedCloud.SecurityOption> GetDedicatedCloudServiceNameSecurityOptionsAsync() {
            return default(Task<_dedicatedCloud.SecurityOption>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/compatibilityMatrix
        private Task<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]> GetDedicatedCloudServiceNameSecurityOptionsCompatibilityMatrixAsync() {
            return default(Task<_dedicatedCloud_securityOption.CompatibilityMatrixEntry[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/dependenciesTree
        private Task<_dedicatedCloud_securityOption.DependenciesTree> GetDedicatedCloudServiceNameSecurityOptionsDependenciesTreeAsync() {
            return default(Task<_dedicatedCloud_securityOption.DependenciesTree>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/pendingOptions
        private Task<_dedicatedCloud_securityOption.SecurityOptionEnum[]> GetDedicatedCloudServiceNameSecurityOptionsPendingOptionsAsync() {
            return default(Task<_dedicatedCloud_securityOption.SecurityOptionEnum[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/securityOptions/resumePendingEnabling
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameSecurityOptionsResumePendingEnablingAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/serviceInfos
        private Task<_services.Service> GetDedicatedCloudServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/serviceInfos
        private void PutDedicatedCloudServiceNameServiceInfosAsync() {
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePack
        private Task<_dedicatedCloud.servicePackStatus> GetDedicatedCloudServiceNameServicePackAsync() {
            return default(Task<_dedicatedCloud.servicePackStatus>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePacks
        private Task<System.String[]> GetDedicatedCloudServiceNameServicePacksAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/servicePacks/{name}
        private Task<_dedicatedCloud.ServicePack> GetDedicatedCloudServiceNameServicePacksNameAsync() {
            return default(Task<_dedicatedCloud.ServicePack>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/tag
        private Task<System.String[]> GetDedicatedCloudServiceNameTagAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/tag/{name}
        private Task<_dedicatedCloud.Tag> GetDedicatedCloudServiceNameTagNameAsync() {
            return default(Task<_dedicatedCloud.Tag>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/terminate
        private Task<System.String> PostDedicatedCloudServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist
        private Task<System.Int64[]> GetDedicatedCloudServiceNameTwoFAWhitelistAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTwoFAWhitelistAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameTwoFAWhitelistIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}
        private Task<_dedicatedCloud.twoFAWhitelist> GetDedicatedCloudServiceNameTwoFAWhitelistIdAsync() {
            return default(Task<_dedicatedCloud.twoFAWhitelist>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/twoFAWhitelist/{id}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameTwoFAWhitelistIdChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/upgradeHypervisor
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUpgradeHypervisorAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/upgradeVcenter
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUpgradeVcenterAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user
        private Task<System.Int64[]> GetDedicatedCloudServiceNameUserAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameUserUserIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}
        private Task<_dedicatedCloud.User> GetDedicatedCloudServiceNameUserUserIdAsync() {
            return default(Task<_dedicatedCloud.User>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/changePassword
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdChangePasswordAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/confirmPhoneNumber
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdConfirmPhoneNumberAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight
        private Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdObjectRightAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdObjectRightAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/objectRight/{objectRightId}
        private Task<_dedicatedCloud.ObjectRight> GetDedicatedCloudServiceNameUserUserIdObjectRightObjectRightIdAsync() {
            return default(Task<_dedicatedCloud.ObjectRight>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right
        private Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdRightAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        private Task<_dedicatedCloud.Right> GetDedicatedCloudServiceNameUserUserIdRightRightIdAsync() {
            return default(Task<_dedicatedCloud.Right>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/right/{rightId}
        private Task<_dedicatedCloud.Task> PutDedicatedCloudServiceNameUserUserIdRightRightIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task
        private Task<System.Int64[]> GetDedicatedCloudServiceNameUserUserIdTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}
        private Task<_dedicatedCloud.Task> GetDedicatedCloudServiceNameUserUserIdTaskTaskIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/changeMaintenanceExecutionDate
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdTaskTaskIdChangeMaintenanceExecutionDateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/user/{userId}/task/{taskId}/resetTaskState
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameUserUserIdTaskTaskIdResetTaskStateAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vcenterVersion
        private Task<_dedicatedCloud.vcenter> GetDedicatedCloudServiceNameVcenterVersionAsync() {
            return default(Task<_dedicatedCloud.vcenter>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor
        private Task<_dedicatedCloud.Vendor> GetDedicatedCloudServiceNameVendorAsync() {
            return default(Task<_dedicatedCloud.Vendor>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor/objectType
        private Task<System.String[]> PostDedicatedCloudServiceNameVendorObjectTypeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vendor/ovhId
        private Task<_dedicatedCloud_vendor.OvhId> PostDedicatedCloudServiceNameVendorOvhIdAsync() {
            return default(Task<_dedicatedCloud_vendor.OvhId>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vlan
        private Task<System.Int64[]> GetDedicatedCloudServiceNameVlanAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vlan/{vlanId}
        private Task<_dedicatedCloud.Vlan> GetDedicatedCloudServiceNameVlanVlanIdAsync() {
            return default(Task<_dedicatedCloud.Vlan>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption
        private Task<_dedicatedCloud.VMEncryption> GetDedicatedCloudServiceNameVmEncryptionAsync() {
            return default(Task<_dedicatedCloud.VMEncryption>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms
        private Task<System.Int64[]> GetDedicatedCloudServiceNameVmEncryptionKmsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVmEncryptionKmsAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}
        private Task<_dedicatedCloud.VMEncryptionAccessNetwork> GetDedicatedCloudServiceNameVmEncryptionKmsKmsIdAsync() {
            return default(Task<_dedicatedCloud.VMEncryptionAccessNetwork>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vmEncryption/kms/{kmsId}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVmEncryptionKmsKmsIdChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack
        private Task<System.String[]> GetDedicatedCloudServiceNameVrackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack/{vrack}
        private Task<_vrack.Task> DeleteDedicatedCloudServiceNameVrackVrackAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrack/{vrack}
        private Task<_vrack.dedicatedCloud> GetDedicatedCloudServiceNameVrackVrackAsync() {
            return default(Task<_vrack.dedicatedCloud>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops
        private Task<_dedicatedCloud.Vrops> GetDedicatedCloudServiceNameVropsAsync() {
            return default(Task<_dedicatedCloud.Vrops>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/canBeDisabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameVropsCanBeDisabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/canBeEnabled
        private Task<_dedicatedCloud.optionCompatibility> GetDedicatedCloudServiceNameVropsCanBeEnabledAsync() {
            return default(Task<_dedicatedCloud.optionCompatibility>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/disable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsDisableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/enable
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsEnableAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow
        private Task<System.Int64[]> GetDedicatedCloudServiceNameVropsOutgoingFlowAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsOutgoingFlowAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        private Task<_dedicatedCloud.Task> DeleteDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}
        private Task<_dedicatedCloud.VropsOutgoingFlow> GetDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdAsync() {
            return default(Task<_dedicatedCloud.VropsOutgoingFlow>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/outgoingFlow/{outgoingFlowId}/changeProperties
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsOutgoingFlowOutgoingFlowIdChangePropertiesAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /dedicatedCloud/{serviceName}/vrops/upgrade
        private Task<_dedicatedCloud.Task> PostDedicatedCloudServiceNameVropsUpgradeAsync() {
            return default(Task<_dedicatedCloud.Task>);
        }
        
        // Path: /domain
        private Task<System.String[]> GetDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/configurationRule
        private Task<_domain_configuration_rules.Rule> GetDomainConfigurationRuleAsync() {
            return default(Task<_domain_configuration_rules.Rule>);
        }
        
        // Path: /domain/configurationRule/check
        private void PostDomainConfigurationRuleCheckAsync() {
        }
        
        // Path: /domain/contact
        private Task<_domain.Contact[]> GetDomainContactAsync() {
            return default(Task<_domain.Contact[]>);
        }
        
        // Path: /domain/contact
        private Task<_domain.Contact> PostDomainContactAsync() {
            return default(Task<_domain.Contact>);
        }
        
        // Path: /domain/contact/{contactId}
        private Task<_domain.Contact> GetDomainContactContactIdAsync() {
            return default(Task<_domain.Contact>);
        }
        
        // Path: /domain/contact/{contactId}
        private Task<_domain.Contact> PutDomainContactContactIdAsync() {
            return default(Task<_domain.Contact>);
        }
        
        // Path: /domain/data/claimNotice
        private Task<_domain_data_claimNotice.ClaimNotice> GetDomainDataClaimNoticeAsync() {
            return default(Task<_domain_data_claimNotice.ClaimNotice>);
        }
        
        // Path: /domain/data/extension
        private Task<System.String[]> GetDomainDataExtensionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/data/smd
        private Task<_domain_data_smd.Smd[]> GetDomainDataSmdAsync() {
            return default(Task<_domain_data_smd.Smd[]>);
        }
        
        // Path: /domain/data/smd
        private Task<_domain_data_smd.Smd> PostDomainDataSmdAsync() {
            return default(Task<_domain_data_smd.Smd>);
        }
        
        // Path: /domain/data/smd/{smdId}
        private void DeleteDomainDataSmdSmdIdAsync() {
        }
        
        // Path: /domain/data/smd/{smdId}
        private Task<_domain_data_smd.Smd> GetDomainDataSmdSmdIdAsync() {
            return default(Task<_domain_data_smd.Smd>);
        }
        
        // Path: /domain/data/smd/{smdId}
        private Task<_domain_data_smd.Smd> PutDomainDataSmdSmdIdAsync() {
            return default(Task<_domain_data_smd.Smd>);
        }
        
        // Path: /domain/extensions
        private Task<System.String[]> GetDomainExtensionsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/extensions/byCategory
        private Task<_domain_extensions.ExtensionsByCategory> GetDomainExtensionsByCategoryAsync() {
            return default(Task<_domain_extensions.ExtensionsByCategory>);
        }
        
        // Path: /domain/extensions/highlighted
        private Task<System.String[]> GetDomainExtensionsHighlightedAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/extensions/pricingAttributes
        private Task<_domain_extensions.ExtensionsPricingAttributes[]> GetDomainExtensionsPricingAttributesAsync() {
            return default(Task<_domain_extensions.ExtensionsPricingAttributes[]>);
        }
        
        // Path: /domain/extensions/{name}
        private Task<_domain_extensions.Extension> GetDomainExtensionsNameAsync() {
            return default(Task<_domain_extensions.Extension>);
        }
        
        // Path: /domain/extensions/{name}/registryConfigurations
        private Task<_domain_extensions_registryConfigurations.RegistryConfigurations> GetDomainExtensionsNameRegistryConfigurationsAsync() {
            return default(Task<_domain_extensions_registryConfigurations.RegistryConfigurations>);
        }
        
        // Path: /domain/zone
        private Task<System.String[]> GetDomainZoneAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/zone/{zoneName}
        private Task<_domain.ZoneWithIAM> GetDomainZoneZoneNameAsync() {
            return default(Task<_domain.ZoneWithIAM>);
        }
        
        // Path: /domain/zone/{zoneName}/capabilities
        private Task<_domain_zone.Capabilities> GetDomainZoneZoneNameCapabilitiesAsync() {
            return default(Task<_domain_zone.Capabilities>);
        }
        
        // Path: /domain/zone/{zoneName}/changeContact
        private Task<System.Int64[]> PostDomainZoneZoneNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/confirmTermination
        private Task<System.String> PostDomainZoneZoneNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        private void DeleteDomainZoneZoneNameDnssecAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        private Task<_domain_zone.Dnssec> GetDomainZoneZoneNameDnssecAsync() {
            return default(Task<_domain_zone.Dnssec>);
        }
        
        // Path: /domain/zone/{zoneName}/dnssec
        private void PostDomainZoneZoneNameDnssecAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login
        private Task<System.String[]> GetDomainZoneZoneNameDynHostLoginAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login
        private Task<_domain_zone_dynHost.Login> PostDomainZoneZoneNameDynHostLoginAsync() {
            return default(Task<_domain_zone_dynHost.Login>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        private void DeleteDomainZoneZoneNameDynHostLoginLoginAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        private Task<_domain_zone_dynHost.Login> GetDomainZoneZoneNameDynHostLoginLoginAsync() {
            return default(Task<_domain_zone_dynHost.Login>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}
        private void PutDomainZoneZoneNameDynHostLoginLoginAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/login/{login}/changePassword
        private void PostDomainZoneZoneNameDynHostLoginLoginChangePasswordAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record
        private Task<System.Int64[]> GetDomainZoneZoneNameDynHostRecordAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record
        private Task<_domain_zone_dynHost.Record> PostDomainZoneZoneNameDynHostRecordAsync() {
            return default(Task<_domain_zone_dynHost.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        private void DeleteDomainZoneZoneNameDynHostRecordIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        private Task<_domain_zone_dynHost.Record> GetDomainZoneZoneNameDynHostRecordIdAsync() {
            return default(Task<_domain_zone_dynHost.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/dynHost/record/{id}
        private void PutDomainZoneZoneNameDynHostRecordIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/export
        private Task<System.String> GetDomainZoneZoneNameExportAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /domain/zone/{zoneName}/history
        private Task<System.DateTime[]> GetDomainZoneZoneNameHistoryAsync() {
            return default(Task<System.DateTime[]>);
        }
        
        // Path: /domain/zone/{zoneName}/history/{creationDate}
        private Task<_domain_zone.ZoneRestorePoint> GetDomainZoneZoneNameHistoryCreationDateAsync() {
            return default(Task<_domain_zone.ZoneRestorePoint>);
        }
        
        // Path: /domain/zone/{zoneName}/history/{creationDate}/restore
        private Task<_domain_zone.Task> PostDomainZoneZoneNameHistoryCreationDateRestoreAsync() {
            return default(Task<_domain_zone.Task>);
        }
        
        // Path: /domain/zone/{zoneName}/import
        private Task<_domain_zone.Task> PostDomainZoneZoneNameImportAsync() {
            return default(Task<_domain_zone.Task>);
        }
        
        // Path: /domain/zone/{zoneName}/option
        private Task<System.String[]> GetDomainZoneZoneNameOptionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}
        private Task<_domain_zone.Option> GetDomainZoneZoneNameOptionNameAsync() {
            return default(Task<_domain_zone.Option>);
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}/serviceInfos
        private Task<_services.Service> GetDomainZoneZoneNameOptionNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /domain/zone/{zoneName}/option/{name}/serviceInfos
        private void PutDomainZoneZoneNameOptionNameServiceInfosAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/record
        private Task<System.Int64[]> GetDomainZoneZoneNameRecordAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/record
        private Task<_domain_zone.Record> PostDomainZoneZoneNameRecordAsync() {
            return default(Task<_domain_zone.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        private void DeleteDomainZoneZoneNameRecordIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        private Task<_domain_zone.Record> GetDomainZoneZoneNameRecordIdAsync() {
            return default(Task<_domain_zone.Record>);
        }
        
        // Path: /domain/zone/{zoneName}/record/{id}
        private void PutDomainZoneZoneNameRecordIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/redirection
        private Task<System.Int64[]> GetDomainZoneZoneNameRedirectionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/redirection
        private Task<_domain_zone.Redirection> PostDomainZoneZoneNameRedirectionAsync() {
            return default(Task<_domain_zone.Redirection>);
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        private void DeleteDomainZoneZoneNameRedirectionIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        private Task<_domain_zone.Redirection> GetDomainZoneZoneNameRedirectionIdAsync() {
            return default(Task<_domain_zone.Redirection>);
        }
        
        // Path: /domain/zone/{zoneName}/redirection/{id}
        private void PutDomainZoneZoneNameRedirectionIdAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/refresh
        private void PostDomainZoneZoneNameRefreshAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/reset
        private void PostDomainZoneZoneNameResetAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/serviceInfos
        private Task<_services.Service> GetDomainZoneZoneNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /domain/zone/{zoneName}/serviceInfos
        private void PutDomainZoneZoneNameServiceInfosAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/soa
        private Task<_domain_zone.Soa> GetDomainZoneZoneNameSoaAsync() {
            return default(Task<_domain_zone.Soa>);
        }
        
        // Path: /domain/zone/{zoneName}/soa
        private void PutDomainZoneZoneNameSoaAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/status
        private Task<_domain_zone.Status> GetDomainZoneZoneNameStatusAsync() {
            return default(Task<_domain_zone.Status>);
        }
        
        // Path: /domain/zone/{zoneName}/task
        private Task<System.Int64[]> GetDomainZoneZoneNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}
        private Task<_domain_zone.Task> GetDomainZoneZoneNameTaskIdAsync() {
            return default(Task<_domain_zone.Task>);
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/accelerate
        private void PostDomainZoneZoneNameTaskIdAccelerateAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/cancel
        private void PostDomainZoneZoneNameTaskIdCancelAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/task/{id}/relaunch
        private void PostDomainZoneZoneNameTaskIdRelaunchAsync() {
        }
        
        // Path: /domain/zone/{zoneName}/terminate
        private Task<System.String> PostDomainZoneZoneNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /domain/{serviceName}
        private Task<_domain.DomainServiceWithIAM> GetDomainServiceNameAsync() {
            return default(Task<_domain.DomainServiceWithIAM>);
        }
        
        // Path: /domain/{serviceName}
        private Task<_domain.DomainService> PutDomainServiceNameAsync() {
            return default(Task<_domain.DomainService>);
        }
        
        // Path: /domain/{serviceName}/authInfo
        private Task<System.String> GetDomainServiceNameAuthInfoAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /domain/{serviceName}/changeContact
        private Task<System.Int64[]> PostDomainServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails
        private Task<_domain_configurations.ObfuscatedEmail[]> GetDomainServiceNameConfigurationsObfuscatedEmailsAsync() {
            return default(Task<_domain_configurations.ObfuscatedEmail[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails
        private Task<_domain_configurations.ObfuscatedEmail[]> PutDomainServiceNameConfigurationsObfuscatedEmailsAsync() {
            return default(Task<_domain_configurations.ObfuscatedEmail[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/obfuscatedEmails/refresh
        private void PostDomainServiceNameConfigurationsObfuscatedEmailsRefreshAsync() {
        }
        
        // Path: /domain/{serviceName}/configurations/optin
        private Task<_domain_configurations.Optin[]> GetDomainServiceNameConfigurationsOptinAsync() {
            return default(Task<_domain_configurations.Optin[]>);
        }
        
        // Path: /domain/{serviceName}/configurations/optin
        private Task<_domain_configurations.Optin[]> PutDomainServiceNameConfigurationsOptinAsync() {
            return default(Task<_domain_configurations.Optin[]>);
        }
        
        // Path: /domain/{serviceName}/dsRecord
        private Task<System.Int64[]> GetDomainServiceNameDsRecordAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/{serviceName}/dsRecord
        private Task<_domain.Task> PostDomainServiceNameDsRecordAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/dsRecord/{id}
        private Task<_dnssec.Key> GetDomainServiceNameDsRecordIdAsync() {
            return default(Task<_dnssec.Key>);
        }
        
        // Path: /domain/{serviceName}/glueRecord
        private Task<System.String[]> GetDomainServiceNameGlueRecordAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /domain/{serviceName}/glueRecord
        private Task<_domain.Task> PostDomainServiceNameGlueRecordAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}
        private Task<_domain.Task> DeleteDomainServiceNameGlueRecordHostAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}
        private Task<_domain_glueRecord.GlueRecord> GetDomainServiceNameGlueRecordHostAsync() {
            return default(Task<_domain_glueRecord.GlueRecord>);
        }
        
        // Path: /domain/{serviceName}/glueRecord/{host}/update
        private Task<_domain.Task> PostDomainServiceNameGlueRecordHostUpdateAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer
        private Task<System.Int64[]> GetDomainServiceNameNameServerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/{serviceName}/nameServer
        private Task<_domain.Task> PostDomainServiceNameNameServerAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}
        private Task<_domain.Task> DeleteDomainServiceNameNameServerIdAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}
        private Task<_domain_nameServer.FullNameServer> GetDomainServiceNameNameServerIdAsync() {
            return default(Task<_domain_nameServer.FullNameServer>);
        }
        
        // Path: /domain/{serviceName}/nameServer/{id}/status
        private Task<_domain_nameServer.NameServerStatus> GetDomainServiceNameNameServerIdStatusAsync() {
            return default(Task<_domain_nameServer.NameServerStatus>);
        }
        
        // Path: /domain/{serviceName}/nameServers/update
        private Task<_domain.Task> PostDomainServiceNameNameServersUpdateAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/option
        private Task<_domain.DomainOptionEnum[]> GetDomainServiceNameOptionAsync() {
            return default(Task<_domain.DomainOptionEnum[]>);
        }
        
        // Path: /domain/{serviceName}/option/{option}
        private void DeleteDomainServiceNameOptionOptionAsync() {
        }
        
        // Path: /domain/{serviceName}/option/{option}
        private Task<_domain.Option> GetDomainServiceNameOptionOptionAsync() {
            return default(Task<_domain.Option>);
        }
        
        // Path: /domain/{serviceName}/options
        private Task<_domain.ServiceOptions> GetDomainServiceNameOptionsAsync() {
            return default(Task<_domain.ServiceOptions>);
        }
        
        // Path: /domain/{serviceName}/outgoingTransfer/approve
        private void PostDomainServiceNameOutgoingTransferApproveAsync() {
        }
        
        // Path: /domain/{serviceName}/rules/emailsObfuscation
        private Task<_domain_configurations.ContactTypeEnum[]> GetDomainServiceNameRulesEmailsObfuscationAsync() {
            return default(Task<_domain_configurations.ContactTypeEnum[]>);
        }
        
        // Path: /domain/{serviceName}/rules/optin
        private Task<_domain_rules.Optin[]> GetDomainServiceNameRulesOptinAsync() {
            return default(Task<_domain_rules.Optin[]>);
        }
        
        // Path: /domain/{serviceName}/serviceInfos
        private Task<_services.Service> GetDomainServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /domain/{serviceName}/serviceInfos
        private void PutDomainServiceNameServiceInfosAsync() {
        }
        
        // Path: /domain/{serviceName}/task
        private Task<System.Int64[]> GetDomainServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /domain/{serviceName}/task/{id}
        private Task<_domain.Task> GetDomainServiceNameTaskIdAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/task/{id}/accelerate
        private void PostDomainServiceNameTaskIdAccelerateAsync() {
        }
        
        // Path: /domain/{serviceName}/task/{id}/cancel
        private void PostDomainServiceNameTaskIdCancelAsync() {
        }
        
        // Path: /domain/{serviceName}/task/{id}/relaunch
        private void PostDomainServiceNameTaskIdRelaunchAsync() {
        }
        
        // Path: /domain/{serviceName}/ukOutgoingTransfer
        private Task<_domain.Task> PostDomainServiceNameUkOutgoingTransferAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /domain/{serviceName}/ukRegistrars
        private Task<_domain.UkRegistrar[]> GetDomainServiceNameUkRegistrarsAsync() {
            return default(Task<_domain.UkRegistrar[]>);
        }
        
        // Path: /email/domain
        private Task<System.String[]> GetEmailDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/delegatedAccount
        private Task<System.String[]> GetEmailDomainDelegatedAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}
        private Task<_email_domain.AccountDelegated> GetEmailDomainDelegatedAccountEmailAsync() {
            return default(Task<_email_domain.AccountDelegated>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}
        private void PutEmailDomainDelegatedAccountEmailAsync() {
        }
        
        // Path: /email/domain/delegatedAccount/{email}/changePassword
        private Task<_email_domain.TaskPop> PostEmailDomainDelegatedAccountEmailChangePasswordAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter
        private Task<System.String[]> GetEmailDomainDelegatedAccountEmailFilterAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter
        private Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}
        private Task<_email_domain.TaskFilter[]> DeleteEmailDomainDelegatedAccountEmailFilterNameAsync() {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}
        private Task<_email_domain.Filter> GetEmailDomainDelegatedAccountEmailFilterNameAsync() {
            return default(Task<_email_domain.Filter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/changeActivity
        private Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameChangeActivityAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/changePriority
        private Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameChangePriorityAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule
        private Task<System.Int64[]> GetEmailDomainDelegatedAccountEmailFilterNameRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule
        private Task<_email_domain.TaskFilter> PostEmailDomainDelegatedAccountEmailFilterNameRuleAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        private Task<_email_domain.TaskFilter[]> DeleteEmailDomainDelegatedAccountEmailFilterNameRuleIdAsync() {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/filter/{name}/rule/{id}
        private Task<_email_domain.Rule> GetEmailDomainDelegatedAccountEmailFilterNameRuleIdAsync() {
            return default(Task<_email_domain.Rule>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        private Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDelegatedAccountEmailResponderAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        private Task<_email_domain.ResponderAccount> GetEmailDomainDelegatedAccountEmailResponderAsync() {
            return default(Task<_email_domain.ResponderAccount>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        private Task<_email_domain.TaskSpecialAccount> PostEmailDomainDelegatedAccountEmailResponderAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/delegatedAccount/{email}/responder
        private void PutEmailDomainDelegatedAccountEmailResponderAsync() {
        }
        
        // Path: /email/domain/delegatedAccount/{email}/updateUsage
        private void PostEmailDomainDelegatedAccountEmailUpdateUsageAsync() {
        }
        
        // Path: /email/domain/delegatedAccount/{email}/usage
        private Task<_domain.DomainUsageAccountStruct> PostEmailDomainDelegatedAccountEmailUsageAsync() {
            return default(Task<_domain.DomainUsageAccountStruct>);
        }
        
        // Path: /email/domain/mailingListLimits
        private Task<_domain.DomainMlLimits> GetEmailDomainMailingListLimitsAsync() {
            return default(Task<_domain.DomainMlLimits>);
        }
        
        // Path: /email/domain/{domain}
        private Task<_email_domain.DomainServiceWithIAM> GetEmailDomainDomainAsync() {
            return default(Task<_email_domain.DomainServiceWithIAM>);
        }
        
        // Path: /email/domain/{domain}/account
        private Task<System.String[]> GetEmailDomainDomainAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/account
        private Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        private Task<_email_domain.TaskPop> DeleteEmailDomainDomainAccountAccountNameAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        private Task<_email_domain.Account> GetEmailDomainDomainAccountAccountNameAsync() {
            return default(Task<_email_domain.Account>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}
        private void PutEmailDomainDomainAccountAccountNameAsync() {
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/changePassword
        private Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAccountNameChangePasswordAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation
        private Task<System.String[]> GetEmailDomainDomainAccountAccountNameDelegationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation
        private Task<System.String> PostEmailDomainDomainAccountAccountNameDelegationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation/{accountId}
        private Task<System.String> DeleteEmailDomainDomainAccountAccountNameDelegationAccountIdAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/delegation/{accountId}
        private Task<_email_domain.Delegation> GetEmailDomainDomainAccountAccountNameDelegationAccountIdAsync() {
            return default(Task<_email_domain.Delegation>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter
        private Task<System.String[]> GetEmailDomainDomainAccountAccountNameFilterAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter
        private Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}
        private Task<_email_domain.TaskFilter[]> DeleteEmailDomainDomainAccountAccountNameFilterNameAsync() {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}
        private Task<_email_domain.Filter> GetEmailDomainDomainAccountAccountNameFilterNameAsync() {
            return default(Task<_email_domain.Filter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/changeActivity
        private Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameChangeActivityAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/changePriority
        private Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameChangePriorityAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule
        private Task<System.Int64[]> GetEmailDomainDomainAccountAccountNameFilterNameRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule
        private Task<_email_domain.TaskFilter> PostEmailDomainDomainAccountAccountNameFilterNameRuleAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        private Task<_email_domain.TaskFilter[]> DeleteEmailDomainDomainAccountAccountNameFilterNameRuleIdAsync() {
            return default(Task<_email_domain.TaskFilter[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/filter/{name}/rule/{id}
        private Task<_email_domain.Rule> GetEmailDomainDomainAccountAccountNameFilterNameRuleIdAsync() {
            return default(Task<_email_domain.Rule>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate
        private Task<System.String[]> GetEmailDomainDomainAccountAccountNameMigrateAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}
        private Task<_email_domain.MigrationService> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameAsync() {
            return default(Task<_email_domain.MigrationService>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress
        private Task<System.String[]> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}
        private Task<_email_domain.MigrationAccount> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressAsync() {
            return default(Task<_email_domain.MigrationAccount>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/checkMigrate
        private Task<_email_domain.MigrationCheckStruct> GetEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressCheckMigrateAsync() {
            return default(Task<_email_domain.MigrationCheckStruct>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/migrate/{destinationServiceName}/destinationEmailAddress/{destinationEmailAddress}/migrate
        private Task<_email_domain.TaskPop> PostEmailDomainDomainAccountAccountNameMigrateDestinationServiceNameDestinationEmailAddressDestinationEmailAddressMigrateAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/updateUsage
        private void PostEmailDomainDomainAccountAccountNameUpdateUsageAsync() {
        }
        
        // Path: /email/domain/{domain}/account/{accountName}/usage
        private Task<_domain.DomainUsageAccountStruct> GetEmailDomainDomainAccountAccountNameUsageAsync() {
            return default(Task<_domain.DomainUsageAccountStruct>);
        }
        
        // Path: /email/domain/{domain}/acl
        private Task<System.String[]> GetEmailDomainDomainAclAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/acl
        private Task<_email_domain.Acl> PostEmailDomainDomainAclAsync() {
            return default(Task<_email_domain.Acl>);
        }
        
        // Path: /email/domain/{domain}/acl/{accountId}
        private void DeleteEmailDomainDomainAclAccountIdAsync() {
        }
        
        // Path: /email/domain/{domain}/acl/{accountId}
        private Task<_email_domain.Acl> GetEmailDomainDomainAclAccountIdAsync() {
            return default(Task<_email_domain.Acl>);
        }
        
        // Path: /email/domain/{domain}/changeContact
        private Task<System.Int64[]> PostEmailDomainDomainChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/changeDnsMXFilter
        private void PostEmailDomainDomainChangeDnsMXFilterAsync() {
        }
        
        // Path: /email/domain/{domain}/confirmTermination
        private Task<System.String> PostEmailDomainDomainConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/domain/{domain}/dkim
        private Task<_email_domain.dkim_simplified> GetEmailDomainDomainDkimAsync() {
            return default(Task<_email_domain.dkim_simplified>);
        }
        
        // Path: /email/domain/{domain}/dkim/disable
        private Task<_email_domain.task> PutEmailDomainDomainDkimDisableAsync() {
            return default(Task<_email_domain.task>);
        }
        
        // Path: /email/domain/{domain}/dkim/enable
        private Task<_email_domain.task> PutEmailDomainDomainDkimEnableAsync() {
            return default(Task<_email_domain.task>);
        }
        
        // Path: /email/domain/{domain}/dnsMXFilter
        private Task<_domain.DomainMXFilterEnum> GetEmailDomainDomainDnsMXFilterAsync() {
            return default(Task<_domain.DomainMXFilterEnum>);
        }
        
        // Path: /email/domain/{domain}/dnsMXRecords
        private Task<System.String[]> GetEmailDomainDomainDnsMXRecordsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/mailingList
        private Task<System.String[]> GetEmailDomainDomainMailingListAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/mailingList
        private Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        private Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        private Task<_email_domain.MailingList> GetEmailDomainDomainMailingListNameAsync() {
            return default(Task<_email_domain.MailingList>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}
        private void PutEmailDomainDomainMailingListNameAsync() {
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/changeOptions
        private Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameChangeOptionsAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator
        private Task<System.String[]> GetEmailDomainDomainMailingListNameModeratorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator
        private Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameModeratorAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator/{email}
        private Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameModeratorEmailAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/moderator/{email}
        private Task<_email_domain.Moderator> GetEmailDomainDomainMailingListNameModeratorEmailAsync() {
            return default(Task<_email_domain.Moderator>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/sendListByEmail
        private Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameSendListByEmailAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber
        private Task<System.String[]> GetEmailDomainDomainMailingListNameSubscriberAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber
        private Task<_email_domain.TaskMl> PostEmailDomainDomainMailingListNameSubscriberAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber/{email}
        private Task<_email_domain.TaskMl> DeleteEmailDomainDomainMailingListNameSubscriberEmailAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/mailingList/{name}/subscriber/{email}
        private Task<_email_domain.Subscriber> GetEmailDomainDomainMailingListNameSubscriberEmailAsync() {
            return default(Task<_email_domain.Subscriber>);
        }
        
        // Path: /email/domain/{domain}/migrateDelegationV3toV6
        private void PostEmailDomainDomainMigrateDelegationV3toV6Async() {
        }
        
        // Path: /email/domain/{domain}/quota
        private Task<_domain.DomainQuota> GetEmailDomainDomainQuotaAsync() {
            return default(Task<_domain.DomainQuota>);
        }
        
        // Path: /email/domain/{domain}/recommendedDNSRecords
        private Task<_domain_zone.Record[]> GetEmailDomainDomainRecommendedDNSRecordsAsync() {
            return default(Task<_domain_zone.Record[]>);
        }
        
        // Path: /email/domain/{domain}/redirection
        private Task<System.String[]> GetEmailDomainDomainRedirectionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/redirection
        private Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainRedirectionAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/redirection/{id}
        private Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDomainRedirectionIdAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/redirection/{id}
        private Task<_email_domain.RedirectionGlobal> GetEmailDomainDomainRedirectionIdAsync() {
            return default(Task<_email_domain.RedirectionGlobal>);
        }
        
        // Path: /email/domain/{domain}/redirection/{id}/changeRedirection
        private Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainRedirectionIdChangeRedirectionAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder
        private Task<System.String[]> GetEmailDomainDomainResponderAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/responder
        private Task<_email_domain.TaskSpecialAccount> PostEmailDomainDomainResponderAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        private Task<_email_domain.TaskSpecialAccount> DeleteEmailDomainDomainResponderAccountAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        private Task<_email_domain.Responder> GetEmailDomainDomainResponderAccountAsync() {
            return default(Task<_email_domain.Responder>);
        }
        
        // Path: /email/domain/{domain}/responder/{account}
        private void PutEmailDomainDomainResponderAccountAsync() {
        }
        
        // Path: /email/domain/{domain}/serviceInfos
        private Task<_services.Service> GetEmailDomainDomainServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /email/domain/{domain}/serviceInfos
        private void PutEmailDomainDomainServiceInfosAsync() {
        }
        
        // Path: /email/domain/{domain}/summary
        private Task<_domain.DomainSummary> GetEmailDomainDomainSummaryAsync() {
            return default(Task<_domain.DomainSummary>);
        }
        
        // Path: /email/domain/{domain}/task/account
        private Task<System.Int64[]> GetEmailDomainDomainTaskAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/task/account/{id}
        private Task<_email_domain.TaskPop> GetEmailDomainDomainTaskAccountIdAsync() {
            return default(Task<_email_domain.TaskPop>);
        }
        
        // Path: /email/domain/{domain}/task/all
        private Task<System.Int64[]> GetEmailDomainDomainTaskAllAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/task/all/{id}
        private Task<_email_domain.task> GetEmailDomainDomainTaskAllIdAsync() {
            return default(Task<_email_domain.task>);
        }
        
        // Path: /email/domain/{domain}/task/filter
        private Task<System.Int64[]> GetEmailDomainDomainTaskFilterAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/task/filter/{id}
        private Task<_email_domain.TaskFilter> GetEmailDomainDomainTaskFilterIdAsync() {
            return default(Task<_email_domain.TaskFilter>);
        }
        
        // Path: /email/domain/{domain}/task/mailinglist
        private Task<System.Int64[]> GetEmailDomainDomainTaskMailinglistAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/task/mailinglist/{id}
        private Task<_email_domain.TaskMl> GetEmailDomainDomainTaskMailinglistIdAsync() {
            return default(Task<_email_domain.TaskMl>);
        }
        
        // Path: /email/domain/{domain}/task/redirection
        private Task<System.String[]> GetEmailDomainDomainTaskRedirectionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/domain/{domain}/task/redirection/{id}
        private Task<_email_domain.TaskSpecialAccount> GetEmailDomainDomainTaskRedirectionIdAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/task/responder
        private Task<System.Int64[]> GetEmailDomainDomainTaskResponderAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/domain/{domain}/task/responder/{id}
        private Task<_email_domain.TaskSpecialAccount> GetEmailDomainDomainTaskResponderIdAsync() {
            return default(Task<_email_domain.TaskSpecialAccount>);
        }
        
        // Path: /email/domain/{domain}/terminate
        private Task<System.String> PostEmailDomainDomainTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/exchange
        private Task<System.String[]> GetEmailExchangeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}
        private Task<_email_exchange.ExchangeServiceWithIAM> GetEmailExchangeOrganizationNameServiceExchangeServiceAsync() {
            return default(Task<_email_exchange.ExchangeServiceWithIAM>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        private Task<_email_exchange.Account> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync() {
            return default(Task<_email_exchange.Account>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}
        private Task<_email_exchange.exchangeAccountAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressAliasAliasAsync() {
            return default(Task<_email_exchange.exchangeAccountAlias>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        private Task<_email_exchange.exchangeAccountArchive> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync() {
            return default(Task<_email_exchange.exchangeAccountArchive>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressArchiveAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/changePassword
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressChangePasswordAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        private Task<_email_exchange.exchangeAccountDiagnosis> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync() {
            return default(Task<_email_exchange.exchangeAccountDiagnosis>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressDiagnosticsAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        private Task<_email_exchange.Export> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync() {
            return default(Task<_email_exchange.Export>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        private Task<_email_exchange.ExportUrl> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync() {
            return default(Task<_email_exchange.ExportUrl>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressExportURLAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}
        private Task<_email_exchange.exchangeAccountFullAccess> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeAccountFullAccess>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        private Task<_email_exchange.OutlookUrl> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync() {
            return default(Task<_email_exchange.OutlookUrl>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressOutlookURLAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        private Task<_email_exchange.exchangeAccountProtocol> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync() {
            return default(Task<_email_exchange.exchangeAccountProtocol>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressProtocolAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.exchangeAccountSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeAccountSendAs>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.exchangeAccountSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeAccountSendOnBehalfTo>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks/{id}
        private Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTasksIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/terminate
        private Task<System.String> PostEmailExchangeOrganizationNameServiceExchangeServiceAccountPrimaryEmailAddressTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/activateSharepoint
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceActivateSharepointAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        private Task<System.Net.IPNetwork[]> GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        private Task<_email_exchange.exchangeServiceAuthorizedIp> GetEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync() {
            return default(Task<_email_exchange.exchangeServiceAuthorizedIp>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/authorizedIp/{ip}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceAuthorizedIpIpAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/changeHostname
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceChangeHostnameAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/customIsolation/{name}
        private Task<_email_exchange.exchangeCustomIsolation> GetEmailExchangeOrganizationNameServiceExchangeServiceCustomIsolationNameAsync() {
            return default(Task<_email_exchange.exchangeCustomIsolation>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/dcvEmails
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDcvEmailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        private Task<_email_exchange.exchangeServiceDevice> GetEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync() {
            return default(Task<_email_exchange.exchangeServiceDevice>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/device/{identity}/clearDevice
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDeviceIdentityClearDeviceAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        private Task<_email_exchange.Domain> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync() {
            return default(Task<_email_exchange.Domain>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/changeDefaultSBR
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameChangeDefaultSBRAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        private Task<_email_exchange.disclaimer> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_exchange.disclaimer>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimerAttribute
        private Task<_email_exchange.DisclaimerAttributeEnum[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDisclaimerAttributeAsync() {
            return default(Task<_email_exchange.DisclaimerAttributeEnum[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}
        private Task<_email_exchange.dkim> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameAsync() {
            return default(Task<_email_exchange.dkim>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/disable
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameDisableAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkim/{selectorName}/enable
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorNameEnableAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/dkimSelector
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceDomainDomainNameDkimSelectorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceExternalContactAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        private Task<_email_exchange.exchangeExternalContact> GetEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_exchange.exchangeExternalContact>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceExternalContactExternalEmailAddressAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        private Task<_email_exchange.exchangeAccountImpersonation> GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync() {
            return default(Task<_email_exchange.exchangeAccountImpersonation>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonatedUser/changePassword
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceImpersonatedUserChangePasswordAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/impersonationPasswordPolicy
        private Task<_email_exchange.passwordPolicy> GetEmailExchangeOrganizationNameServiceExchangeServiceImpersonationPasswordPolicyAsync() {
            return default(Task<_email_exchange.passwordPolicy>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/license
        private Task<_email_exchange.DailyLicense[]> GetEmailExchangeOrganizationNameServiceExchangeServiceLicenseAsync() {
            return default(Task<_email_exchange.DailyLicense[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        private Task<_email_exchange.mailingList> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync() {
            return default(Task<_email_exchange.mailingList>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}
        private Task<_email_exchange.exchangeMailingListAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressAliasAliasAsync() {
            return default(Task<_email_exchange.exchangeMailingListAlias>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}
        private Task<_email_exchange.exchangeDistributionGroupManager> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressManagerAccountManagerAccountIdAsync() {
            return default(Task<_email_exchange.exchangeDistributionGroupManager>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}
        private Task<_email_exchange.exchangeDistributionGroupMember> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberAccountMemberAccountIdAsync() {
            return default(Task<_email_exchange.exchangeDistributionGroupMember>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}
        private Task<_email_exchange.exchangeDistributionGroupMember> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressMemberContactMemberContactIdAsync() {
            return default(Task<_email_exchange.exchangeDistributionGroupMember>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.exchangeDistributionGroupSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeDistributionGroupSendAs>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.exchangeDistributionGroupSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceMailingListMailingListAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeDistributionGroupSendOnBehalfTo>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability
        private Task<_email_exchange.OutlookVersions[]> GetEmailExchangeOrganizationNameServiceExchangeServiceOutlookAvailabilityAsync() {
            return default(Task<_email_exchange.OutlookVersions[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol
        private Task<_email_exchange.exchangeServiceProtocol> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync() {
            return default(Task<_email_exchange.exchangeServiceProtocol>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceProtocolAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}
        private Task<_email_exchange.exchangeServiceActiveSyncNotification> GetEmailExchangeOrganizationNameServiceExchangeServiceProtocolActiveSyncMailNotificationNotifiedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeServiceActiveSyncNotification>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        private Task<_email_exchange.publicFolder> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync() {
            return default(Task<_email_exchange.publicFolder>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}
        private void PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        private Task<_email_exchange.exchangePublicFolderPermission> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangePublicFolderPermission>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}
        private void PutEmailExchangeOrganizationNameServiceExchangeServicePublicFolderPathPermissionAllowedAccountIdAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota
        private Task<_email_exchange.PublicFolderQuota> GetEmailExchangeOrganizationNameServiceExchangeServicePublicFolderQuotaAsync() {
            return default(Task<_email_exchange.PublicFolderQuota>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/renewSSL
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceRenewSSLAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        private Task<_email_exchange.resourceAccount> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync() {
            return default(Task<_email_exchange.resourceAccount>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}
        private Task<_email_exchange.exchangeResourceAccountDelegate> GetEmailExchangeOrganizationNameServiceExchangeServiceResourceAccountResourceEmailAddressDelegateAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeResourceAccountDelegate>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        private Task<_email_exchange.sendConnector> GetEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync() {
            return default(Task<_email_exchange.sendConnector>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sendConnector/{id}/changeAuthentication
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSendConnectorIdChangeAuthenticationAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/server
        private Task<_email_exchange.Server> GetEmailExchangeOrganizationNameServiceExchangeServiceServerAsync() {
            return default(Task<_email_exchange.Server>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/server
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceServerAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        private Task<_services.Service> GetEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/serviceInfos
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceServiceInfosAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        private Task<_email_exchange.sharedAccount> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync() {
            return default(Task<_email_exchange.sharedAccount>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}
        private void PutEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAsync() {
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        private Task<System.String[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/alias/{alias}
        private Task<_email_exchange.exchangeSharedAccountAlias> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressAliasAliasAsync() {
            return default(Task<_email_exchange.exchangeSharedAccountAlias>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}
        private Task<_email_exchange.exchangeSharedAccountFullAccess> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeSharedAccountFullAccess>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}
        private Task<_email_exchange.exchangeSharedAccountSendAs> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendAsAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeSharedAccountSendAs>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.Task> DeleteEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_exchange.exchangeSharedAccountSendOnBehalfTo> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_exchange.exchangeSharedAccountSendOnBehalfTo>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks/{id}
        private Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountSharedEmailAddressTasksIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota
        private Task<_email_exchange.SharedAccountQuota> GetEmailExchangeOrganizationNameServiceExchangeServiceSharedAccountQuotaAsync() {
            return default(Task<_email_exchange.SharedAccountQuota>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/task
        private Task<System.Int64[]> GetEmailExchangeOrganizationNameServiceExchangeServiceTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/task/{id}
        private Task<_email_exchange.Task> GetEmailExchangeOrganizationNameServiceExchangeServiceTaskIdAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/updateDeviceList
        private Task<_email_exchange.Task> PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateDeviceListAsync() {
            return default(Task<_email_exchange.Task>);
        }
        
        // Path: /email/exchange/{organizationName}/service/{exchangeService}/updateFlagsOnAllAccounts
        private void PostEmailExchangeOrganizationNameServiceExchangeServiceUpdateFlagsOnAllAccountsAsync() {
        }
        
        // Path: /email/mxplan
        private Task<System.String[]> GetEmailMxplanAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/mxplan/{service}
        private Task<_email_mxplan.ServiceWithIAM> GetEmailMxplanServiceAsync() {
            return default(Task<_email_mxplan.ServiceWithIAM>);
        }
        
        // Path: /email/mxplan/{service}
        private void PutEmailMxplanServiceAsync() {
        }
        
        // Path: /email/mxplan/{service}/account
        private Task<System.String[]> GetEmailMxplanServiceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        private Task<_email_mxplan.Account> GetEmailMxplanServiceAccountEmailAsync() {
            return default(Task<_email_mxplan.Account>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}
        private void PutEmailMxplanServiceAccountEmailAsync() {
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias
        private Task<System.String[]> GetEmailMxplanServiceAccountEmailAliasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailAliasAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias/{alias}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailAliasAliasAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/alias/{alias}
        private Task<_email_mxplan.AccountAlias> GetEmailMxplanServiceAccountEmailAliasAliasAsync() {
            return default(Task<_email_mxplan.AccountAlias>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/capabilities
        private Task<_email_mxplan.accountCapabilities> GetEmailMxplanServiceAccountEmailCapabilitiesAsync() {
            return default(Task<_email_mxplan.accountCapabilities>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/changePassword
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailChangePasswordAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/diagnostic
        private Task<_email_mxplan.AccountDiagnosis> GetEmailMxplanServiceAccountEmailDiagnosticAsync() {
            return default(Task<_email_mxplan.AccountDiagnosis>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/diagnostic
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailDiagnosticAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess
        private Task<System.Int64[]> GetEmailMxplanServiceAccountEmailFullAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailFullAccessAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}
        private Task<_email_mxplan.AccountFullAccess> GetEmailMxplanServiceAccountEmailFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_mxplan.AccountFullAccess>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs
        private Task<System.Int64[]> GetEmailMxplanServiceAccountEmailSendAsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailSendAsAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}
        private Task<_email_mxplan.AccountSendAs> GetEmailMxplanServiceAccountEmailSendAsAllowedAccountIdAsync() {
            return default(Task<_email_mxplan.AccountSendAs>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo
        private Task<System.Int64[]> GetEmailMxplanServiceAccountEmailSendOnBehalfToAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo
        private Task<_email_pro.Task> PostEmailMxplanServiceAccountEmailSendOnBehalfToAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_mxplan.AccountSendOnBehalfTo> GetEmailMxplanServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_mxplan.AccountSendOnBehalfTo>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/task
        private Task<System.Int64[]> GetEmailMxplanServiceAccountEmailTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/mxplan/{service}/account/{email}/task/{id}
        private Task<_email_pro.Task> GetEmailMxplanServiceAccountEmailTaskIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/domain
        private Task<System.String[]> GetEmailMxplanServiceDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}
        private Task<_email_mxplan.Domain> GetEmailMxplanServiceDomainDomainNameAsync() {
            return default(Task<_email_mxplan.Domain>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}
        private void PutEmailMxplanServiceDomainDomainNameAsync() {
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.Task> DeleteEmailMxplanServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.disclaimer> GetEmailMxplanServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.disclaimer>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.Task> PostEmailMxplanServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimer
        private void PutEmailMxplanServiceDomainDomainNameDisclaimerAsync() {
        }
        
        // Path: /email/mxplan/{service}/domain/{domainName}/disclaimerAttribute
        private Task<_email_pro.DisclaimerAttributeEnum[]> GetEmailMxplanServiceDomainDomainNameDisclaimerAttributeAsync() {
            return default(Task<_email_pro.DisclaimerAttributeEnum[]>);
        }
        
        // Path: /email/mxplan/{service}/externalContact
        private Task<System.String[]> GetEmailMxplanServiceExternalContactAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/mxplan/{service}/externalContact
        private Task<_email_pro.Task> PostEmailMxplanServiceExternalContactAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        private Task<_email_pro.Task> DeleteEmailMxplanServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        private Task<_email_mxplan.ExternalContact> GetEmailMxplanServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_mxplan.ExternalContact>);
        }
        
        // Path: /email/mxplan/{service}/externalContact/{externalEmailAddress}
        private void PutEmailMxplanServiceExternalContactExternalEmailAddressAsync() {
        }
        
        // Path: /email/mxplan/{service}/server
        private Task<_email_mxplan.Server> GetEmailMxplanServiceServerAsync() {
            return default(Task<_email_mxplan.Server>);
        }
        
        // Path: /email/mxplan/{service}/task
        private Task<System.Int64[]> GetEmailMxplanServiceTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/mxplan/{service}/task/{id}
        private Task<_email_pro.Task> GetEmailMxplanServiceTaskIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/mxplan/{service}/updateFlagsOnAllAccounts
        private void PostEmailMxplanServiceUpdateFlagsOnAllAccountsAsync() {
        }
        
        // Path: /email/pro
        private Task<System.String[]> GetEmailProAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}
        private Task<_email_pro.ServiceNativeWithIAM> GetEmailProServiceAsync() {
            return default(Task<_email_pro.ServiceNativeWithIAM>);
        }
        
        // Path: /email/pro/{service}
        private void PutEmailProServiceAsync() {
        }
        
        // Path: /email/pro/{service}/account
        private Task<System.String[]> GetEmailProServiceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}
        private Task<_email_pro.AccountNative> GetEmailProServiceAccountEmailAsync() {
            return default(Task<_email_pro.AccountNative>);
        }
        
        // Path: /email/pro/{service}/account/{email}
        private Task<_email_pro.Task> DeleteEmailProServiceAccountEmailAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}
        private void PutEmailProServiceAccountEmailAsync() {
        }
        
        // Path: /email/pro/{service}/account/{email}/alias
        private Task<System.String[]> GetEmailProServiceAccountEmailAliasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}/alias
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailAliasAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/alias/{alias}
        private Task<_email_pro.AccountAlias> GetEmailProServiceAccountEmailAliasAliasAsync() {
            return default(Task<_email_pro.AccountAlias>);
        }
        
        // Path: /email/pro/{service}/account/{email}/alias/{alias}
        private Task<_email_pro.Task> DeleteEmailProServiceAccountEmailAliasAliasAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/changePassword
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailChangePasswordAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/diagnostics
        private Task<_email_pro.AccountDiagnosis> GetEmailProServiceAccountEmailDiagnosticsAsync() {
            return default(Task<_email_pro.AccountDiagnosis>);
        }
        
        // Path: /email/pro/{service}/account/{email}/diagnostics
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailDiagnosticsAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess
        private Task<System.Int64[]> GetEmailProServiceAccountEmailFullAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailFullAccessAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        private Task<_email_pro.AccountFullAccess> GetEmailProServiceAccountEmailFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_pro.AccountFullAccess>);
        }
        
        // Path: /email/pro/{service}/account/{email}/fullAccess/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailProServiceAccountEmailFullAccessAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs
        private Task<System.Int64[]> GetEmailProServiceAccountEmailSendAsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailSendAsAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        private Task<_email_pro.AccountSendAs> GetEmailProServiceAccountEmailSendAsAllowedAccountIdAsync() {
            return default(Task<_email_pro.AccountSendAs>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendAs/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailProServiceAccountEmailSendAsAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo
        private Task<System.Int64[]> GetEmailProServiceAccountEmailSendOnBehalfToAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo
        private Task<_email_pro.Task> PostEmailProServiceAccountEmailSendOnBehalfToAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_pro.AccountSendOnBehalfTo> GetEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_pro.AccountSendOnBehalfTo>);
        }
        
        // Path: /email/pro/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}
        private Task<_email_pro.Task> DeleteEmailProServiceAccountEmailSendOnBehalfToAllowedAccountIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/tasks
        private Task<System.Int64[]> GetEmailProServiceAccountEmailTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/account/{email}/tasks/{id}
        private Task<_email_pro.Task> GetEmailProServiceAccountEmailTasksIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/account/{email}/terminate
        private Task<System.String> PostEmailProServiceAccountEmailTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/pro/{service}/billingMigrated
        private Task<System.Boolean> GetEmailProServiceBillingMigratedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /email/pro/{service}/billingPlan
        private Task<System.String> GetEmailProServiceBillingPlanAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /email/pro/{service}/changeContact
        private Task<System.Int64[]> PostEmailProServiceChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/domain
        private Task<System.String[]> GetEmailProServiceDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/domain
        private Task<_email_pro.Task> PostEmailProServiceDomainAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        private Task<_email_pro.DomainNative> GetEmailProServiceDomainDomainNameAsync() {
            return default(Task<_email_pro.DomainNative>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        private Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}
        private void PutEmailProServiceDomainDomainNameAsync() {
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.disclaimerNative> GetEmailProServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.disclaimerNative>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        private Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDisclaimerAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimer
        private void PutEmailProServiceDomainDomainNameDisclaimerAsync() {
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/disclaimerAttribute
        private Task<_email_pro.DisclaimerAttributeEnum[]> GetEmailProServiceDomainDomainNameDisclaimerAttributeAsync() {
            return default(Task<_email_pro.DisclaimerAttributeEnum[]>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim
        private Task<System.String[]> GetEmailProServiceDomainDomainNameDkimAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim
        private Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        private Task<_email_pro.Dkim> GetEmailProServiceDomainDomainNameDkimSelectorNameAsync() {
            return default(Task<_email_pro.Dkim>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}
        private Task<_email_pro.Task> DeleteEmailProServiceDomainDomainNameDkimSelectorNameAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}/disable
        private Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimSelectorNameDisableAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkim/{selectorName}/enable
        private Task<_email_pro.Task> PostEmailProServiceDomainDomainNameDkimSelectorNameEnableAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/domain/{domainName}/dkimSelector
        private Task<System.String[]> GetEmailProServiceDomainDomainNameDkimSelectorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/externalContact
        private Task<System.String[]> GetEmailProServiceExternalContactAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /email/pro/{service}/externalContact
        private Task<_email_pro.Task> PostEmailProServiceExternalContactAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        private Task<_email_pro.ExternalContactNative> GetEmailProServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_pro.ExternalContactNative>);
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        private Task<_email_pro.Task> DeleteEmailProServiceExternalContactExternalEmailAddressAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/externalContact/{externalEmailAddress}
        private void PutEmailProServiceExternalContactExternalEmailAddressAsync() {
        }
        
        // Path: /email/pro/{service}/server
        private Task<_email_pro.Server> GetEmailProServiceServerAsync() {
            return default(Task<_email_pro.Server>);
        }
        
        // Path: /email/pro/{service}/serviceInfos
        private Task<_services.Service> GetEmailProServiceServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /email/pro/{service}/serviceInfos
        private void PutEmailProServiceServiceInfosAsync() {
        }
        
        // Path: /email/pro/{service}/task
        private Task<System.Int64[]> GetEmailProServiceTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /email/pro/{service}/task/{id}
        private Task<_email_pro.Task> GetEmailProServiceTaskIdAsync() {
            return default(Task<_email_pro.Task>);
        }
        
        // Path: /email/pro/{service}/updateFlagsOnAllAccounts
        private void PostEmailProServiceUpdateFlagsOnAllAccountsAsync() {
        }
        
        // Path: /freefax
        private Task<System.String[]> GetFreefaxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /freefax/credits
        private Task<_freefax.BalanceInformations> GetFreefaxCreditsAsync() {
            return default(Task<_freefax.BalanceInformations>);
        }
        
        // Path: /freefax/{serviceName}
        private Task<_freefax.FreefaxPropertiesWithIAM> GetFreefaxServiceNameAsync() {
            return default(Task<_freefax.FreefaxPropertiesWithIAM>);
        }
        
        // Path: /freefax/{serviceName}
        private void PutFreefaxServiceNameAsync() {
        }
        
        // Path: /freefax/{serviceName}/changePassword
        private Task<System.String> PostFreefaxServiceNameChangePasswordAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /freefax/{serviceName}/directory
        private Task<_telephony.DirectoryInfo> GetFreefaxServiceNameDirectoryAsync() {
            return default(Task<_telephony.DirectoryInfo>);
        }
        
        // Path: /freefax/{serviceName}/directory
        private void PutFreefaxServiceNameDirectoryAsync() {
        }
        
        // Path: /freefax/{serviceName}/directory/fetchEntrepriseInformations
        private Task<_telephony.EntrepriseNumberInformationsTask> PostFreefaxServiceNameDirectoryFetchEntrepriseInformationsAsync() {
            return default(Task<_telephony.EntrepriseNumberInformationsTask>);
        }
        
        // Path: /freefax/{serviceName}/directory/getDirectoryServiceCode
        private Task<_telephony.DirectoryHeadingPJ[]> GetFreefaxServiceNameDirectoryGetDirectoryServiceCodeAsync() {
            return default(Task<_telephony.DirectoryHeadingPJ[]>);
        }
        
        // Path: /freefax/{serviceName}/directory/getWayTypes
        private Task<_telephony.DirectoryWayType[]> GetFreefaxServiceNameDirectoryGetWayTypesAsync() {
            return default(Task<_telephony.DirectoryWayType[]>);
        }
        
        // Path: /freefax/{serviceName}/mainService
        private Task<System.String> GetFreefaxServiceNameMainServiceAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /freefax/{serviceName}/serviceInfos
        private Task<_services.Service> GetFreefaxServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /freefax/{serviceName}/serviceInfos
        private void PutFreefaxServiceNameServiceInfosAsync() {
        }
        
        // Path: /freefax/{serviceName}/voicemail
        private Task<_telephony.VoicemailProperties> GetFreefaxServiceNameVoicemailAsync() {
            return default(Task<_telephony.VoicemailProperties>);
        }
        
        // Path: /freefax/{serviceName}/voicemail
        private void PutFreefaxServiceNameVoicemailAsync() {
        }
        
        // Path: /freefax/{serviceName}/voicemail/changePassword
        private void PostFreefaxServiceNameVoicemailChangePasswordAsync() {
        }
        
        // Path: /freefax/{serviceName}/voicemail/changeRouting
        private void PostFreefaxServiceNameVoicemailChangeRoutingAsync() {
        }
        
        // Path: /freefax/{serviceName}/voicemail/routing
        private Task<_telephony.VoicefaxRoutingEnum> GetFreefaxServiceNameVoicemailRoutingAsync() {
            return default(Task<_telephony.VoicefaxRoutingEnum>);
        }
        
        // Path: /freefax/{serviceName}/voicemail/voicemailNumbers
        private Task<_telephony.VoicemailNumbers> GetFreefaxServiceNameVoicemailVoicemailNumbersAsync() {
            return default(Task<_telephony.VoicemailNumbers>);
        }
        
        // Path: /horizonView
        private Task<System.String[]> GetHorizonViewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /horizonView/{serviceName}
        private Task<_horizonView.DatacenterWithIAM> GetHorizonViewServiceNameAsync() {
            return default(Task<_horizonView.DatacenterWithIAM>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint
        private Task<System.Int64[]> GetHorizonViewServiceNameAccessPointAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint
        private Task<_horizonView.Task[]> PostHorizonViewServiceNameAccessPointAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}
        private Task<_horizonView.Task[]> DeleteHorizonViewServiceNameAccessPointAccessPointIdAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}
        private Task<_horizonView.Pool> GetHorizonViewServiceNameAccessPointAccessPointIdAsync() {
            return default(Task<_horizonView.Pool>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/changeSessionTimeout
        private Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdChangeSessionTimeoutAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        private Task<System.Int64[]> GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork
        private Task<_horizonView.Task[]> PostHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        private Task<_horizonView.Task[]> DeleteHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/customerNetwork/{customerNetworkId}
        private Task<_horizonView.CustomerNetworkPool> GetHorizonViewServiceNameAccessPointAccessPointIdCustomerNetworkCustomerNetworkIdAsync() {
            return default(Task<_horizonView.CustomerNetworkPool>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/disableTwoFA
        private Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdDisableTwoFAAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/disableWindowsUsernameOption
        private Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdDisableWindowsUsernameOptionAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/enableTwoFA
        private Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdEnableTwoFAAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/accessPoint/{accessPointId}/enableWindowsUsernameOption
        private Task<_horizonView.Task> PostHorizonViewServiceNameAccessPointAccessPointIdEnableWindowsUsernameOptionAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/confirmTermination
        private Task<System.String> PostHorizonViewServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork
        private Task<System.Int64[]> GetHorizonViewServiceNameCustomerNetworkAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork
        private Task<_horizonView.Task[]> PostHorizonViewServiceNameCustomerNetworkAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        private Task<_horizonView.Task[]> DeleteHorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/customerNetwork/{customerNetworkId}
        private Task<_horizonView.CustomerNetwork> GetHorizonViewServiceNameCustomerNetworkCustomerNetworkIdAsync() {
            return default(Task<_horizonView.CustomerNetwork>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon
        private Task<_horizonView.DedicatedHorizon> GetHorizonViewServiceNameDedicatedHorizonAsync() {
            return default(Task<_horizonView.DedicatedHorizon>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser
        private Task<System.String[]> GetHorizonViewServiceNameDedicatedHorizonCustomerUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser
        private Task<_horizonView.Task[]> PostHorizonViewServiceNameDedicatedHorizonCustomerUserAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        private Task<_horizonView.Task[]> DeleteHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}
        private Task<_horizonView.CustomerUser> GetHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameAsync() {
            return default(Task<_horizonView.CustomerUser>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/customerUser/{username}/changePassword
        private Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonCustomerUserUsernameChangePasswordAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/disableStorageAccelerator
        private Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonDisableStorageAcceleratorAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/enableStorageAccelerator
        private Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonEnableStorageAcceleratorAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/task
        private Task<System.Int64[]> GetHorizonViewServiceNameDedicatedHorizonTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/task/{taskId}
        private Task<_horizonView.Task> GetHorizonViewServiceNameDedicatedHorizonTaskTaskIdAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user
        private Task<_horizonView.User> GetHorizonViewServiceNameDedicatedHorizonUserAsync() {
            return default(Task<_horizonView.User>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user/changePassword
        private Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonUserChangePasswordAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/dedicatedHorizon/user/changeProperties
        private Task<_horizonView.Task> PostHorizonViewServiceNameDedicatedHorizonUserChangePropertiesAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust
        private Task<System.Int64[]> GetHorizonViewServiceNameDomainTrustAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust
        private Task<_horizonView.Task[]> PostHorizonViewServiceNameDomainTrustAsync() {
            return default(Task<_horizonView.Task[]>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}
        private Task<_horizonView.DomainTrust> GetHorizonViewServiceNameDomainTrustDomainTrustIdAsync() {
            return default(Task<_horizonView.DomainTrust>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addChildDomain
        private Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddChildDomainAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainController
        private Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainControllerAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/addDomainUserOnComposer
        private Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdAddDomainUserOnComposerAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/domainTrust/{domainTrustId}/createTrust
        private Task<_horizonView.Task> PostHorizonViewServiceNameDomainTrustDomainTrustIdCreateTrustAsync() {
            return default(Task<_horizonView.Task>);
        }
        
        // Path: /horizonView/{serviceName}/serviceInfos
        private Task<_services.Service> GetHorizonViewServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /horizonView/{serviceName}/serviceInfos
        private void PutHorizonViewServiceNameServiceInfosAsync() {
        }
        
        // Path: /horizonView/{serviceName}/terminate
        private Task<System.String> PostHorizonViewServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase
        private Task<System.String[]> GetHostingPrivateDatabaseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/availableOrderCapacities
        private Task<_hosting_privateDatabase.availableOrderCapacities> GetHostingPrivateDatabaseAvailableOrderCapacitiesAsync() {
            return default(Task<_hosting_privateDatabase.availableOrderCapacities>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}
        private Task<_hosting_privateDatabase.ServiceWithIAM> GetHostingPrivateDatabaseServiceNameAsync() {
            return default(Task<_hosting_privateDatabase.ServiceWithIAM>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}
        private void PutHostingPrivateDatabaseServiceNameAsync() {
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/availableVersions
        private Task<_hosting_privateDatabase.AvailableVersionEnum[]> GetHostingPrivateDatabaseServiceNameAvailableVersionsAsync() {
            return default(Task<_hosting_privateDatabase.AvailableVersionEnum[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeContact
        private Task<System.Int64[]> PostHostingPrivateDatabaseServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeFtpPassword
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameChangeFtpPasswordAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/changeVersion
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameChangeVersionAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/config
        private Task<_hosting_privateDatabase.Configs> GetHostingPrivateDatabaseServiceNameConfigAsync() {
            return default(Task<_hosting_privateDatabase.Configs>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/config/update
        private Task<_hosting_privateDatabase.Configs> PostHostingPrivateDatabaseServiceNameConfigUpdateAsync() {
            return default(Task<_hosting_privateDatabase.Configs>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/confirmTermination
        private Task<System.String> PostHostingPrivateDatabaseServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/cpuThrottle
        private Task<_hosting_privateDatabase.CpuThrottle[]> GetHostingPrivateDatabaseServiceNameCpuThrottleAsync() {
            return default(Task<_hosting_privateDatabase.CpuThrottle[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameDatabaseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}
        private Task<_hosting_privateDatabase.Database> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameAsync() {
            return default(Task<_hosting_privateDatabase.Database>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        private Task<System.Guid[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy
        private Task<_hosting_privateDatabase_Database.Copy> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyAsync() {
            return default(Task<_hosting_privateDatabase_Database.Copy>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        private void DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync() {
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copy/{id}
        private Task<_hosting_privateDatabase_Database.Copy> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyIdAsync() {
            return default(Task<_hosting_privateDatabase_Database.Copy>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/copyRestore
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameCopyRestoreAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        private Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}
        private Task<_hosting_privateDatabase_Database.Dump> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdAsync() {
            return default(Task<_hosting_privateDatabase_Database.Dump>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/dump/{id}/restore
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameDumpIdRestoreAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}
        private Task<_hosting_privateDatabase.Extension> GetHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameAsync() {
            return default(Task<_hosting_privateDatabase.Extension>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/disable
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameDisableAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/extension/{extensionName}/enable
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameExtensionExtensionNameEnableAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/database/{databaseName}/import
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseDatabaseNameImportAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/databaseWizard
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDatabaseWizardAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump
        private Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameDumpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameDumpDumpIdAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}
        private Task<_hosting_privateDatabase.Dump> GetHostingPrivateDatabaseServiceNameDumpDumpIdAsync() {
            return default(Task<_hosting_privateDatabase.Dump>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/dump/{dumpId}/restore
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameDumpDumpIdRestoreAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/generateTemporaryLogsLink
        private Task<_hosting_privateDatabase.TemporaryUrlInformations> PostHostingPrivateDatabaseServiceNameGenerateTemporaryLogsLinkAsync() {
            return default(Task<_hosting_privateDatabase.TemporaryUrlInformations>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/kind
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameLogKindAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/kind/{name}
        private Task<_dbaas_logs.LogKind> GetHostingPrivateDatabaseServiceNameLogKindNameAsync() {
            return default(Task<_dbaas_logs.LogKind>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription
        private Task<System.Guid[]> GetHostingPrivateDatabaseServiceNameLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostHostingPrivateDatabaseServiceNameLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetHostingPrivateDatabaseServiceNameLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/log/url
        private Task<_dbaas_logs.TemporaryLogsLink> PostHostingPrivateDatabaseServiceNameLogUrlAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/metricsToken
        private Task<_hosting_privateDatabase.MetricsToken> GetHostingPrivateDatabaseServiceNameMetricsTokenAsync() {
            return default(Task<_hosting_privateDatabase.MetricsToken>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/oom
        private Task<_hosting_privateDatabase.Oom[]> GetHostingPrivateDatabaseServiceNameOomAsync() {
            return default(Task<_hosting_privateDatabase.Oom[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/quotaRefresh
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameQuotaRefreshAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/restart
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameRestartAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/serviceInfos
        private Task<_services.Service> GetHostingPrivateDatabaseServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/serviceInfos
        private void PutHostingPrivateDatabaseServiceNameServiceInfosAsync() {
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/tasks
        private Task<System.Int64[]> GetHostingPrivateDatabaseServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/tasks/{id}
        private Task<_hosting_privateDatabase.Task> GetHostingPrivateDatabaseServiceNameTasksIdAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/terminate
        private Task<System.String> PostHostingPrivateDatabaseServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameUserUserNameAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}
        private Task<_hosting_privateDatabase.User> GetHostingPrivateDatabaseServiceNameUserUserNameAsync() {
            return default(Task<_hosting_privateDatabase.User>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/changePassword
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameChangePasswordAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameUserUserNameGrantAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameGrantAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}
        private Task<_hosting_privateDatabase_User.Grant> GetHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameAsync() {
            return default(Task<_hosting_privateDatabase_User.Grant>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/user/{userName}/grant/{databaseName}/update
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameUserUserNameGrantDatabaseNameUpdateAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameWebhostingNetworkAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        private Task<_hosting_privateDatabase.webhostingNetwork> GetHostingPrivateDatabaseServiceNameWebhostingNetworkAsync() {
            return default(Task<_hosting_privateDatabase.webhostingNetwork>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webhostingNetwork
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameWebhostingNetworkAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/webs
        private Task<System.String[]> GetHostingPrivateDatabaseServiceNameWebsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist
        private Task<System.Net.IPNetwork[]> GetHostingPrivateDatabaseServiceNameWhitelistAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist
        private Task<_hosting_privateDatabase.Task> PostHostingPrivateDatabaseServiceNameWhitelistAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        private Task<_hosting_privateDatabase.Task> DeleteHostingPrivateDatabaseServiceNameWhitelistIpAsync() {
            return default(Task<_hosting_privateDatabase.Task>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        private Task<_hosting_privateDatabase.Whitelist> GetHostingPrivateDatabaseServiceNameWhitelistIpAsync() {
            return default(Task<_hosting_privateDatabase.Whitelist>);
        }
        
        // Path: /hosting/privateDatabase/{serviceName}/whitelist/{ip}
        private void PutHostingPrivateDatabaseServiceNameWhitelistIpAsync() {
        }
        
        // Path: /hosting/web
        private Task<System.String[]> GetHostingWebAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/attachedDomain
        private Task<System.String[]> GetHostingWebAttachedDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/availableOffer
        private Task<_hosting_web.OfferEnum[]> GetHostingWebAvailableOfferAsync() {
            return default(Task<_hosting_web.OfferEnum[]>);
        }
        
        // Path: /hosting/web/incident
        private Task<System.String[]> GetHostingWebIncidentAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/localSeo/directoriesList
        private Task<_hosting_web_localSeo.DirectoriesList> GetHostingWebLocalSeoDirectoriesListAsync() {
            return default(Task<_hosting_web_localSeo.DirectoriesList>);
        }
        
        // Path: /hosting/web/localSeo/emailAvailability
        private Task<_hosting_web_localSeo.EmailAvailability> GetHostingWebLocalSeoEmailAvailabilityAsync() {
            return default(Task<_hosting_web_localSeo.EmailAvailability>);
        }
        
        // Path: /hosting/web/localSeo/visibilityCheck
        private Task<_hosting_web_localSeo.VisibilityCheckResponse> PostHostingWebLocalSeoVisibilityCheckAsync() {
            return default(Task<_hosting_web_localSeo.VisibilityCheckResponse>);
        }
        
        // Path: /hosting/web/localSeo/visibilityCheckResult
        private Task<_hosting_web_localSeo.VisibilityCheckResultResponse[]> GetHostingWebLocalSeoVisibilityCheckResultAsync() {
            return default(Task<_hosting_web_localSeo.VisibilityCheckResultResponse[]>);
        }
        
        // Path: /hosting/web/moduleList
        private Task<System.Int64[]> GetHostingWebModuleListAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/moduleList/{id}
        private Task<_hosting_web.ModuleList> GetHostingWebModuleListIdAsync() {
            return default(Task<_hosting_web.ModuleList>);
        }
        
        // Path: /hosting/web/offerCapabilities
        private Task<_hosting_web.Capabilities> GetHostingWebOfferCapabilitiesAsync() {
            return default(Task<_hosting_web.Capabilities>);
        }
        
        // Path: /hosting/web/vcs/supported
        private Task<_hosting_web.SupportedVcsEnum[]> GetHostingWebVcsSupportedAsync() {
            return default(Task<_hosting_web.SupportedVcsEnum[]>);
        }
        
        // Path: /hosting/web/{serviceName}
        private Task<_hosting_web.ServiceWithIAM> GetHostingWebServiceNameAsync() {
            return default(Task<_hosting_web.ServiceWithIAM>);
        }
        
        // Path: /hosting/web/{serviceName}
        private void PutHostingWebServiceNameAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain
        private Task<System.String[]> GetHostingWebServiceNameAttachedDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameAttachedDomainAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        private Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameAttachedDomainDomainAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        private Task<_hosting_web_attachedDomain.PublicAttachedDomain> GetHostingWebServiceNameAttachedDomainDomainAsync() {
            return default(Task<_hosting_web_attachedDomain.PublicAttachedDomain>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}
        private void PutHostingWebServiceNameAttachedDomainDomainAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/digStatus
        private Task<_hosting_web_attachedDomain.DigStatus> GetHostingWebServiceNameAttachedDomainDomainDigStatusAsync() {
            return default(Task<_hosting_web_attachedDomain.DigStatus>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/purgeCache
        private Task<_hosting_web.task> PostHostingWebServiceNameAttachedDomainDomainPurgeCacheAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/attachedDomain/{domain}/restart
        private Task<_hosting_web.task> PostHostingWebServiceNameAttachedDomainDomainRestartAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/availableConfigurations
        private Task<_hosting_web_configuration.VersionEnum[]> GetHostingWebServiceNameAvailableConfigurationsAsync() {
            return default(Task<_hosting_web_configuration.VersionEnum[]>);
        }
        
        // Path: /hosting/web/{serviceName}/boostHistory
        private Task<System.DateTime[]> GetHostingWebServiceNameBoostHistoryAsync() {
            return default(Task<System.DateTime[]>);
        }
        
        // Path: /hosting/web/{serviceName}/boostHistory/{date}
        private Task<_hosting_web.BoostHistory> GetHostingWebServiceNameBoostHistoryDateAsync() {
            return default(Task<_hosting_web.BoostHistory>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn
        private Task<_hosting_web.CDN> GetHostingWebServiceNameCdnAsync() {
            return default(Task<_hosting_web.CDN>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/availableOptions
        private Task<_cdn.availableOptions[]> GetHostingWebServiceNameCdnAvailableOptionsAsync() {
            return default(Task<_cdn.availableOptions[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain
        private Task<_cdn.domain[]> GetHostingWebServiceNameCdnDomainAsync() {
            return default(Task<_cdn.domain[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}
        private Task<_cdn.domain> GetHostingWebServiceNameCdnDomainDomainNameAsync() {
            return default(Task<_cdn.domain>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/logs
        private Task<_cdn.logs> GetHostingWebServiceNameCdnDomainDomainNameLogsAsync() {
            return default(Task<_cdn.logs>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option
        private Task<_cdn_domain.option[]> GetHostingWebServiceNameCdnDomainDomainNameOptionAsync() {
            return default(Task<_cdn_domain.option[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option
        private Task<_cdn_domain.option> PostHostingWebServiceNameCdnDomainDomainNameOptionAsync() {
            return default(Task<_cdn_domain.option>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        private void DeleteHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        private Task<_cdn_domain.option> GetHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync() {
            return default(Task<_cdn_domain.option>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/option/{optionName}
        private Task<_cdn_domain.option> PutHostingWebServiceNameCdnDomainDomainNameOptionOptionNameAsync() {
            return default(Task<_cdn_domain.option>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/purge
        private Task<_cdn.operation> PostHostingWebServiceNameCdnDomainDomainNamePurgeAsync() {
            return default(Task<_cdn.operation>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/refresh
        private Task<_cdn.operation> PostHostingWebServiceNameCdnDomainDomainNameRefreshAsync() {
            return default(Task<_cdn.operation>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/domain/{domainName}/statistics
        private Task<_cdn_domain.statistics[]> GetHostingWebServiceNameCdnDomainDomainNameStatisticsAsync() {
            return default(Task<_cdn_domain.statistics[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/operation
        private Task<_cdn.operation[]> GetHostingWebServiceNameCdnOperationAsync() {
            return default(Task<_cdn.operation[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/operation/{id}
        private Task<_cdn.operation> GetHostingWebServiceNameCdnOperationIdAsync() {
            return default(Task<_cdn.operation>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/serviceInfos
        private Task<_services.Service> GetHostingWebServiceNameCdnServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/web/{serviceName}/cdn/serviceInfosUpdate
        private void PostHostingWebServiceNameCdnServiceInfosUpdateAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/cdn/terminate
        private Task<System.String> PostHostingWebServiceNameCdnTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/changeContact
        private Task<System.Int64[]> PostHostingWebServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/configuration
        private Task<_hosting_web.configuration> GetHostingWebServiceNameConfigurationAsync() {
            return default(Task<_hosting_web.configuration>);
        }
        
        // Path: /hosting/web/{serviceName}/configuration
        private void PutHostingWebServiceNameConfigurationAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/confirmTermination
        private Task<System.String> PostHostingWebServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/cron
        private Task<System.Int64[]> GetHostingWebServiceNameCronAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/cron
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameCronAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        private Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameCronIdAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        private Task<_hosting_web.Cron> GetHostingWebServiceNameCronIdAsync() {
            return default(Task<_hosting_web.Cron>);
        }
        
        // Path: /hosting/web/{serviceName}/cron/{id}
        private Task<System.String> PutHostingWebServiceNameCronIdAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/cronAvailableLanguage
        private Task<_hosting_web.LanguagesEnum[]> GetHostingWebServiceNameCronAvailableLanguageAsync() {
            return default(Task<_hosting_web.LanguagesEnum[]>);
        }
        
        // Path: /hosting/web/{serviceName}/database
        private Task<System.String[]> GetHostingWebServiceNameDatabaseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/database
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameDatabaseNameAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}
        private Task<_hosting_web.database> GetHostingWebServiceNameDatabaseNameAsync() {
            return default(Task<_hosting_web.database>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/capabilities
        private Task<_hosting_web_database.DatabaseCapabilities> GetHostingWebServiceNameDatabaseNameCapabilitiesAsync() {
            return default(Task<_hosting_web_database.DatabaseCapabilities>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/changePassword
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameChangePasswordAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy
        private Task<System.Guid[]> GetHostingWebServiceNameDatabaseNameCopyAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy
        private Task<_hosting_web.database_copy> PostHostingWebServiceNameDatabaseNameCopyAsync() {
            return default(Task<_hosting_web.database_copy>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy/{id}
        private void DeleteHostingWebServiceNameDatabaseNameCopyIdAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copy/{id}
        private Task<_hosting_web.database_copy> GetHostingWebServiceNameDatabaseNameCopyIdAsync() {
            return default(Task<_hosting_web.database_copy>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/copyRestore
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameCopyRestoreAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump
        private Task<System.Int64[]> GetHostingWebServiceNameDatabaseNameDumpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameDumpAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameDatabaseNameDumpIdAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}
        private Task<_hosting_web.database_dump> GetHostingWebServiceNameDatabaseNameDumpIdAsync() {
            return default(Task<_hosting_web.database_dump>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/dump/{id}/restore
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameDumpIdRestoreAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/import
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameImportAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/request
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameRequestAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/restore
        private Task<_hosting_web.task> PostHostingWebServiceNameDatabaseNameRestoreAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/database/{name}/statistics
        private Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetHostingWebServiceNameDatabaseNameStatisticsAsync() {
            return default(Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>>);
        }
        
        // Path: /hosting/web/{serviceName}/databaseAvailableType
        private Task<_hosting_web_database.DatabaseTypeEnum[]> GetHostingWebServiceNameDatabaseAvailableTypeAsync() {
            return default(Task<_hosting_web_database.DatabaseTypeEnum[]>);
        }
        
        // Path: /hosting/web/{serviceName}/databaseAvailableVersion
        private Task<_hosting_web_database.AvailableVersionStruct> GetHostingWebServiceNameDatabaseAvailableVersionAsync() {
            return default(Task<_hosting_web_database.AvailableVersionStruct>);
        }
        
        // Path: /hosting/web/{serviceName}/databaseCreationCapabilities
        private Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetHostingWebServiceNameDatabaseCreationCapabilitiesAsync() {
            return default(Task<_hosting_web_database.CreationDatabaseCapabilities[]>);
        }
        
        // Path: /hosting/web/{serviceName}/dump
        private Task<System.Int64[]> GetHostingWebServiceNameDumpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/dump/{id}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameDumpIdAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/dump/{id}
        private Task<_hosting_web.dump> GetHostingWebServiceNameDumpIdAsync() {
            return default(Task<_hosting_web.dump>);
        }
        
        // Path: /hosting/web/{serviceName}/email
        private Task<_hosting_web.email> GetHostingWebServiceNameEmailAsync() {
            return default(Task<_hosting_web.email>);
        }
        
        // Path: /hosting/web/{serviceName}/email
        private void PutHostingWebServiceNameEmailAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/email/bounces
        private Task<_hosting_web_mail.Bounce[]> GetHostingWebServiceNameEmailBouncesAsync() {
            return default(Task<_hosting_web_mail.Bounce[]>);
        }
        
        // Path: /hosting/web/{serviceName}/email/request
        private Task<System.String> PostHostingWebServiceNameEmailRequestAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/email/volumes
        private Task<_hosting_web_mail.VolumeHistory[]> GetHostingWebServiceNameEmailVolumesAsync() {
            return default(Task<_hosting_web_mail.VolumeHistory[]>);
        }
        
        // Path: /hosting/web/{serviceName}/emailOption
        private Task<System.Int64[]> GetHostingWebServiceNameEmailOptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}
        private Task<_hosting_web.emailoption> GetHostingWebServiceNameEmailOptionIdAsync() {
            return default(Task<_hosting_web.emailoption>);
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}/serviceInfos
        private Task<_services.Service> GetHostingWebServiceNameEmailOptionIdServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/web/{serviceName}/emailOption/{id}/terminate
        private Task<System.String> PostHostingWebServiceNameEmailOptionIdTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar
        private Task<System.String[]> GetHostingWebServiceNameEnvVarAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameEnvVarAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        private Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameEnvVarKeyAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        private Task<_hosting_web.EnvVar> GetHostingWebServiceNameEnvVarKeyAsync() {
            return default(Task<_hosting_web.EnvVar>);
        }
        
        // Path: /hosting/web/{serviceName}/envVar/{key}
        private Task<_hosting_web.PublicTask> PutHostingWebServiceNameEnvVarKeyAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso
        private Task<System.String[]> GetHostingWebServiceNameExtraSqlPersoAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}
        private Task<_hosting_web.extrasqlperso> GetHostingWebServiceNameExtraSqlPersoNameAsync() {
            return default(Task<_hosting_web.extrasqlperso>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/databases
        private Task<System.String[]> GetHostingWebServiceNameExtraSqlPersoNameDatabasesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfos
        private Task<_services.Service> GetHostingWebServiceNameExtraSqlPersoNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/serviceInfosUpdate
        private void PostHostingWebServiceNameExtraSqlPersoNameServiceInfosUpdateAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/extraSqlPerso/{name}/terminate
        private Task<System.String> PostHostingWebServiceNameExtraSqlPersoNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/freedom
        private Task<System.String[]> GetHostingWebServiceNameFreedomAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/freedom/{domain}
        private void DeleteHostingWebServiceNameFreedomDomainAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/freedom/{domain}
        private Task<_hosting_web.freedom> GetHostingWebServiceNameFreedomDomainAsync() {
            return default(Task<_hosting_web.freedom>);
        }
        
        // Path: /hosting/web/{serviceName}/indy
        private Task<System.String[]> GetHostingWebServiceNameIndyAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/indy/{login}
        private Task<_hosting_web.indy> GetHostingWebServiceNameIndyLoginAsync() {
            return default(Task<_hosting_web.indy>);
        }
        
        // Path: /hosting/web/{serviceName}/key/ssh
        private Task<_hosting_web.Key> GetHostingWebServiceNameKeySshAsync() {
            return default(Task<_hosting_web.Key>);
        }
        
        // Path: /hosting/web/{serviceName}/key/ssh
        private Task<_hosting_web.Key> PostHostingWebServiceNameKeySshAsync() {
            return default(Task<_hosting_web.Key>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account
        private Task<System.Int64[]> GetHostingWebServiceNameLocalSeoAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account/{id}
        private Task<_hosting_web.localSeo_account> GetHostingWebServiceNameLocalSeoAccountIdAsync() {
            return default(Task<_hosting_web.localSeo_account>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/account/{id}/login
        private Task<System.String> PostHostingWebServiceNameLocalSeoAccountIdLoginAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/emailAvailability
        private Task<_hosting_web_localSeo.EmailAvailability> GetHostingWebServiceNameLocalSeoEmailAvailabilityAsync() {
            return default(Task<_hosting_web_localSeo.EmailAvailability>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location
        private Task<System.Int64[]> GetHostingWebServiceNameLocalSeoLocationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}
        private Task<_hosting_web.localSeo_location> GetHostingWebServiceNameLocalSeoLocationIdAsync() {
            return default(Task<_hosting_web.localSeo_location>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/serviceInfos
        private Task<_services.Service> GetHostingWebServiceNameLocalSeoLocationIdServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/serviceInfosUpdate
        private void PostHostingWebServiceNameLocalSeoLocationIdServiceInfosUpdateAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/localSeo/location/{id}/terminate
        private Task<System.String> PostHostingWebServiceNameLocalSeoLocationIdTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/metricsToken
        private Task<_hosting_web.MetricsToken> GetHostingWebServiceNameMetricsTokenAsync() {
            return default(Task<_hosting_web.MetricsToken>);
        }
        
        // Path: /hosting/web/{serviceName}/module
        private Task<System.Int64[]> GetHostingWebServiceNameModuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/module
        private Task<_hosting_web.task> PostHostingWebServiceNameModuleAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameModuleIdAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}
        private Task<_hosting_web.module> GetHostingWebServiceNameModuleIdAsync() {
            return default(Task<_hosting_web.module>);
        }
        
        // Path: /hosting/web/{serviceName}/module/{id}/changePassword
        private Task<_hosting_web.task> PostHostingWebServiceNameModuleIdChangePasswordAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig
        private Task<System.Int64[]> GetHostingWebServiceNameOvhConfigAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}
        private Task<_hosting_web.ovhConfig> GetHostingWebServiceNameOvhConfigIdAsync() {
            return default(Task<_hosting_web.ovhConfig>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}/changeConfiguration
        private Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigIdChangeConfigurationAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfig/{id}/rollback
        private Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigIdRollbackAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigCapabilities
        private Task<_hosting_web.OvhConfigCapabilities[]> GetHostingWebServiceNameOvhConfigCapabilitiesAsync() {
            return default(Task<_hosting_web.OvhConfigCapabilities[]>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigRecommendedValues
        private Task<_hosting_web.OvhConfigRecommendedValues> GetHostingWebServiceNameOvhConfigRecommendedValuesAsync() {
            return default(Task<_hosting_web.OvhConfigRecommendedValues>);
        }
        
        // Path: /hosting/web/{serviceName}/ovhConfigRefresh
        private Task<_hosting_web.task> PostHostingWebServiceNameOvhConfigRefreshAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs
        private Task<System.Int64[]> GetHostingWebServiceNameOwnLogsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}
        private Task<_hosting_web.ownLogs> GetHostingWebServiceNameOwnLogsIdAsync() {
            return default(Task<_hosting_web.ownLogs>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs
        private Task<System.String[]> GetHostingWebServiceNameOwnLogsIdUserLogsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs
        private Task<System.String> PostHostingWebServiceNameOwnLogsIdUserLogsAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        private Task<System.String> DeleteHostingWebServiceNameOwnLogsIdUserLogsLoginAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        private Task<_hosting_web.userLogs> GetHostingWebServiceNameOwnLogsIdUserLogsLoginAsync() {
            return default(Task<_hosting_web.userLogs>);
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}
        private void PutHostingWebServiceNameOwnLogsIdUserLogsLoginAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/ownLogs/{id}/userLogs/{login}/changePassword
        private Task<System.String> PostHostingWebServiceNameOwnLogsIdUserLogsLoginChangePasswordAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/privateDatabaseCreationCapabilities
        private Task<_hosting_web_database.CreationDatabaseCapabilities[]> GetHostingWebServiceNamePrivateDatabaseCreationCapabilitiesAsync() {
            return default(Task<_hosting_web_database.CreationDatabaseCapabilities[]>);
        }
        
        // Path: /hosting/web/{serviceName}/privateDatabases
        private Task<System.String[]> GetHostingWebServiceNamePrivateDatabasesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/request
        private Task<_hosting_web.task> PostHostingWebServiceNameRequestAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/requestBoost
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameRequestBoostAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/restoreSnapshot
        private Task<_hosting_web.task> PostHostingWebServiceNameRestoreSnapshotAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime
        private Task<System.Int64[]> GetHostingWebServiceNameRuntimeAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime
        private Task<_hosting_web.task> PostHostingWebServiceNameRuntimeAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameRuntimeIdAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        private Task<_hosting_web.runtime> GetHostingWebServiceNameRuntimeIdAsync() {
            return default(Task<_hosting_web.runtime>);
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}
        private void PutHostingWebServiceNameRuntimeIdAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/runtime/{id}/attachedDomains
        private Task<System.String[]> GetHostingWebServiceNameRuntimeIdAttachedDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/runtimeAvailableTypes
        private Task<_hosting_web_runtime.TypeEnum[]> GetHostingWebServiceNameRuntimeAvailableTypesAsync() {
            return default(Task<_hosting_web_runtime.TypeEnum[]>);
        }
        
        // Path: /hosting/web/{serviceName}/serviceInfos
        private Task<_services.Service> GetHostingWebServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /hosting/web/{serviceName}/serviceInfos
        private void PutHostingWebServiceNameServiceInfosAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        private Task<_hosting_web.SSL> DeleteHostingWebServiceNameSslAsync() {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        private Task<_hosting_web.SSL> GetHostingWebServiceNameSslAsync() {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl
        private Task<_hosting_web.SSL> PostHostingWebServiceNameSslAsync() {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl/domains
        private Task<System.String[]> GetHostingWebServiceNameSslDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl/regenerate
        private Task<_hosting_web.SSL> PostHostingWebServiceNameSslRegenerateAsync() {
            return default(Task<_hosting_web.SSL>);
        }
        
        // Path: /hosting/web/{serviceName}/ssl/report
        private Task<_hosting_web_ssl.Report> GetHostingWebServiceNameSslReportAsync() {
            return default(Task<_hosting_web_ssl.Report>);
        }
        
        // Path: /hosting/web/{serviceName}/statistics
        private Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>> GetHostingWebServiceNameStatisticsAsync() {
            return default(Task<_complexType.ChartSerie<_complexType.ChartTimestampValue>>);
        }
        
        // Path: /hosting/web/{serviceName}/tasks
        private Task<System.Int64[]> GetHostingWebServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/tasks/{id}
        private Task<_hosting_web.PublicTask> GetHostingWebServiceNameTasksIdAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/terminate
        private Task<System.String> PostHostingWebServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/token
        private Task<System.String> GetHostingWebServiceNameTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/user
        private Task<System.String[]> GetHostingWebServiceNameUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/user
        private Task<_hosting_web.task> PostHostingWebServiceNameUserAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        private Task<_hosting_web.task> DeleteHostingWebServiceNameUserLoginAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        private Task<_hosting_web.user> GetHostingWebServiceNameUserLoginAsync() {
            return default(Task<_hosting_web.user>);
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}
        private void PutHostingWebServiceNameUserLoginAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/user/{login}/changePassword
        private Task<_hosting_web.task> PostHostingWebServiceNameUserLoginChangePasswordAsync() {
            return default(Task<_hosting_web.task>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs
        private Task<System.String[]> GetHostingWebServiceNameUserLogsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs
        private Task<System.String> PostHostingWebServiceNameUserLogsAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        private Task<System.String> DeleteHostingWebServiceNameUserLogsLoginAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        private Task<_hosting_web.userLogs> GetHostingWebServiceNameUserLogsLoginAsync() {
            return default(Task<_hosting_web.userLogs>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}
        private void PutHostingWebServiceNameUserLogsLoginAsync() {
        }
        
        // Path: /hosting/web/{serviceName}/userLogs/{login}/changePassword
        private Task<System.String> PostHostingWebServiceNameUserLogsLoginChangePasswordAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/userLogsToken
        private Task<System.String> GetHostingWebServiceNameUserLogsTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /hosting/web/{serviceName}/vcs/webhooks
        private Task<_hosting_web.VcsWebhooks> GetHostingWebServiceNameVcsWebhooksAsync() {
            return default(Task<_hosting_web.VcsWebhooks>);
        }
        
        // Path: /hosting/web/{serviceName}/website
        private Task<System.Int64[]> GetHostingWebServiceNameWebsiteAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/website
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameWebsiteAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        private Task<_hosting_web.PublicTask> DeleteHostingWebServiceNameWebsiteIdAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        private Task<_hosting_web.Website> GetHostingWebServiceNameWebsiteIdAsync() {
            return default(Task<_hosting_web.Website>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}
        private Task<_hosting_web.Website> PutHostingWebServiceNameWebsiteIdAsync() {
            return default(Task<_hosting_web.Website>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deploy
        private Task<_hosting_web.PublicTask> PostHostingWebServiceNameWebsiteIdDeployAsync() {
            return default(Task<_hosting_web.PublicTask>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment
        private Task<System.Int64[]> GetHostingWebServiceNameWebsiteIdDeploymentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}
        private Task<_hosting_web_website.Deployment> GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdAsync() {
            return default(Task<_hosting_web_website.Deployment>);
        }
        
        // Path: /hosting/web/{serviceName}/website/{id}/deployment/{deploymentId}/logs
        private Task<_hosting_web_website_deployment.LogsMessage[]> GetHostingWebServiceNameWebsiteIdDeploymentDeploymentIdLogsAsync() {
            return default(Task<_hosting_web_website_deployment.LogsMessage[]>);
        }
        
        // Path: /hosting/web/{serviceName}/websiteCreationCapabilities
        private Task<_hosting_web.WebsiteCreationCapabilities> GetHostingWebServiceNameWebsiteCreationCapabilitiesAsync() {
            return default(Task<_hosting_web.WebsiteCreationCapabilities>);
        }
        
        // Path: /ip
        private Task<System.Net.IPNetwork[]> GetIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /ip/campus
        private Task<_ip.Campus[]> GetIpCampusAsync() {
            return default(Task<_ip.Campus[]>);
        }
        
        // Path: /ip/service
        private Task<System.String[]> GetIpServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/service/{serviceName}
        private Task<_ip.ServiceIpWithIAM> GetIpServiceServiceNameAsync() {
            return default(Task<_ip.ServiceIpWithIAM>);
        }
        
        // Path: /ip/service/{serviceName}
        private void PutIpServiceServiceNameAsync() {
        }
        
        // Path: /ip/service/{serviceName}/changeContact
        private Task<System.Int64[]> PostIpServiceServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/service/{serviceName}/confirmTermination
        private Task<System.String> PostIpServiceServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ip/service/{serviceName}/serviceInfos
        private Task<_services.Service> GetIpServiceServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /ip/service/{serviceName}/serviceInfos
        private void PutIpServiceServiceNameServiceInfosAsync() {
        }
        
        // Path: /ip/service/{serviceName}/terminate
        private Task<System.String> PostIpServiceServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ip/{ip}
        private Task<_ip.IpWithIAM> GetIpIpAsync() {
            return default(Task<_ip.IpWithIAM>);
        }
        
        // Path: /ip/{ip}
        private void PutIpIpAsync() {
        }
        
        // Path: /ip/{ip}/antihack
        private Task<System.Net.IPAddress[]> GetIpIpAntihackAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/antihack/{ipBlocked}
        private Task<_ip.BlockedIp> GetIpIpAntihackIpBlockedAsync() {
            return default(Task<_ip.BlockedIp>);
        }
        
        // Path: /ip/{ip}/antihack/{ipBlocked}/unblock
        private void PostIpIpAntihackIpBlockedUnblockAsync() {
        }
        
        // Path: /ip/{ip}/arp
        private Task<System.Net.IPAddress[]> GetIpIpArpAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/arp/{ipBlocked}
        private Task<_ip.ArpBlockedIp> GetIpIpArpIpBlockedAsync() {
            return default(Task<_ip.ArpBlockedIp>);
        }
        
        // Path: /ip/{ip}/arp/{ipBlocked}/unblock
        private void PostIpIpArpIpBlockedUnblockAsync() {
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/aggregate
        private Task<_ip.ByoipAggregationPreview[]> GetIpIpBringYourOwnIpAggregateAsync() {
            return default(Task<_ip.ByoipAggregationPreview[]>);
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/aggregate
        private Task<_ip.IpTask> PostIpIpBringYourOwnIpAggregateAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/slice
        private Task<_ip.ByoipSlicingPreview[]> GetIpIpBringYourOwnIpSliceAsync() {
            return default(Task<_ip.ByoipSlicingPreview[]>);
        }
        
        // Path: /ip/{ip}/bringYourOwnIp/slice
        private Task<_ip.IpTask> PostIpIpBringYourOwnIpSliceAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/changeOrg
        private Task<_ip.IpTask> PostIpIpChangeOrgAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/delegation
        private Task<System.String[]> GetIpIpDelegationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/delegation
        private Task<_ip.ReverseDelegation> PostIpIpDelegationAsync() {
            return default(Task<_ip.ReverseDelegation>);
        }
        
        // Path: /ip/{ip}/delegation/{target}
        private void DeleteIpIpDelegationTargetAsync() {
        }
        
        // Path: /ip/{ip}/delegation/{target}
        private Task<_ip.ReverseDelegation> GetIpIpDelegationTargetAsync() {
            return default(Task<_ip.ReverseDelegation>);
        }
        
        // Path: /ip/{ip}/firewall
        private Task<System.Net.IPAddress[]> GetIpIpFirewallAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/firewall
        private Task<_ip.FirewallIp> PostIpIpFirewallAsync() {
            return default(Task<_ip.FirewallIp>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        private Task<System.String> DeleteIpIpFirewallIpOnFirewallAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        private Task<_ip.FirewallIp> GetIpIpFirewallIpOnFirewallAsync() {
            return default(Task<_ip.FirewallIp>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}
        private void PutIpIpFirewallIpOnFirewallAsync() {
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule
        private Task<System.Int64[]> GetIpIpFirewallIpOnFirewallRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule
        private Task<_ip.FirewallNetworkRule> PostIpIpFirewallIpOnFirewallRuleAsync() {
            return default(Task<_ip.FirewallNetworkRule>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        private Task<_ip.FirewallNetworkRule> DeleteIpIpFirewallIpOnFirewallRuleSequenceAsync() {
            return default(Task<_ip.FirewallNetworkRule>);
        }
        
        // Path: /ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}
        private Task<_ip.FirewallNetworkRule> GetIpIpFirewallIpOnFirewallRuleSequenceAsync() {
            return default(Task<_ip.FirewallNetworkRule>);
        }
        
        // Path: /ip/{ip}/game
        private Task<System.Net.IPAddress[]> GetIpIpGameAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}
        private Task<_ip.GameMitigation> GetIpIpGameIpOnGameAsync() {
            return default(Task<_ip.GameMitigation>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}
        private void PutIpIpGameIpOnGameAsync() {
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule
        private Task<System.Int64[]> GetIpIpGameIpOnGameRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule
        private Task<_ip.GameMitigationRule> PostIpIpGameIpOnGameRuleAsync() {
            return default(Task<_ip.GameMitigationRule>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule/{id}
        private Task<_ip.GameMitigationRule> DeleteIpIpGameIpOnGameRuleIdAsync() {
            return default(Task<_ip.GameMitigationRule>);
        }
        
        // Path: /ip/{ip}/game/{ipOnGame}/rule/{id}
        private Task<_ip.GameMitigationRule> GetIpIpGameIpOnGameRuleIdAsync() {
            return default(Task<_ip.GameMitigationRule>);
        }
        
        // Path: /ip/{ip}/license/cloudLinux
        private Task<System.String[]> GetIpIpLicenseCloudLinuxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/cpanel
        private Task<System.String[]> GetIpIpLicenseCpanelAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/directadmin
        private Task<System.String[]> GetIpIpLicenseDirectadminAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/plesk
        private Task<System.String[]> GetIpIpLicensePleskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/sqlserver
        private Task<System.String[]> GetIpIpLicenseSqlserverAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/virtuozzo
        private Task<System.String[]> GetIpIpLicenseVirtuozzoAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/windows
        private Task<System.String[]> GetIpIpLicenseWindowsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/license/worklight
        private Task<System.String[]> GetIpIpLicenseWorklightAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ip/{ip}/migrationToken
        private Task<_ip.IpMigrationToken> GetIpIpMigrationTokenAsync() {
            return default(Task<_ip.IpMigrationToken>);
        }
        
        // Path: /ip/{ip}/migrationToken
        private Task<_ip.IpMigrationToken> PostIpIpMigrationTokenAsync() {
            return default(Task<_ip.IpMigrationToken>);
        }
        
        // Path: /ip/{ip}/mitigation
        private Task<System.Net.IPAddress[]> GetIpIpMitigationAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/mitigation
        private Task<_ip.MitigationIp> PostIpIpMitigationAsync() {
            return default(Task<_ip.MitigationIp>);
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        private Task<_ip.MitigationIp> DeleteIpIpMitigationIpOnMitigationAsync() {
            return default(Task<_ip.MitigationIp>);
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        private Task<_ip.MitigationIp> GetIpIpMitigationIpOnMitigationAsync() {
            return default(Task<_ip.MitigationIp>);
        }
        
        // Path: /ip/{ip}/mitigation/{ipOnMitigation}
        private void PutIpIpMitigationIpOnMitigationAsync() {
        }
        
        // Path: /ip/{ip}/mitigationProfiles
        private Task<System.Net.IPAddress[]> GetIpIpMitigationProfilesAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/mitigationProfiles
        private Task<_ip.MitigationProfile> PostIpIpMitigationProfilesAsync() {
            return default(Task<_ip.MitigationProfile>);
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        private void DeleteIpIpMitigationProfilesIpMitigationProfileAsync() {
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        private Task<_ip.MitigationProfile> GetIpIpMitigationProfilesIpMitigationProfileAsync() {
            return default(Task<_ip.MitigationProfile>);
        }
        
        // Path: /ip/{ip}/mitigationProfiles/{ipMitigationProfile}
        private void PutIpIpMitigationProfilesIpMitigationProfileAsync() {
        }
        
        // Path: /ip/{ip}/move
        private Task<_ip.Destinations> GetIpIpMoveAsync() {
            return default(Task<_ip.Destinations>);
        }
        
        // Path: /ip/{ip}/move
        private Task<_ip.IpTask> PostIpIpMoveAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/park
        private Task<_ip.IpTask> PostIpIpParkAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/phishing
        private Task<System.Int64[]> GetIpIpPhishingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/{ip}/phishing/{id}
        private Task<_ip.Antiphishing> GetIpIpPhishingIdAsync() {
            return default(Task<_ip.Antiphishing>);
        }
        
        // Path: /ip/{ip}/reverse
        private Task<System.Net.IPAddress[]> GetIpIpReverseAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/reverse
        private Task<_ip.ReverseIp> PostIpIpReverseAsync() {
            return default(Task<_ip.ReverseIp>);
        }
        
        // Path: /ip/{ip}/reverse/{ipReverse}
        private void DeleteIpIpReverseIpReverseAsync() {
        }
        
        // Path: /ip/{ip}/reverse/{ipReverse}
        private Task<_ip.ReverseIp> GetIpIpReverseIpReverseAsync() {
            return default(Task<_ip.ReverseIp>);
        }
        
        // Path: /ip/{ip}/ripe
        private Task<_ip.RipeInfos> GetIpIpRipeAsync() {
            return default(Task<_ip.RipeInfos>);
        }
        
        // Path: /ip/{ip}/ripe
        private void PutIpIpRipeAsync() {
        }
        
        // Path: /ip/{ip}/spam
        private Task<System.Net.IPAddress[]> GetIpIpSpamAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}
        private Task<_ip.SpamIp> GetIpIpSpamIpSpammingAsync() {
            return default(Task<_ip.SpamIp>);
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}/stats
        private Task<_ip.SpamStats[]> GetIpIpSpamIpSpammingStatsAsync() {
            return default(Task<_ip.SpamStats[]>);
        }
        
        // Path: /ip/{ip}/spam/{ipSpamming}/unblock
        private Task<_ip.SpamIp> PostIpIpSpamIpSpammingUnblockAsync() {
            return default(Task<_ip.SpamIp>);
        }
        
        // Path: /ip/{ip}/task
        private Task<System.Int64[]> GetIpIpTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ip/{ip}/task/{taskId}
        private Task<_ip.IpTask> GetIpIpTaskTaskIdAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ip/{ip}/terminate
        private Task<_ip.IpTask> PostIpIpTerminateAsync() {
            return default(Task<_ip.IpTask>);
        }
        
        // Path: /ipLoadbalancing
        private Task<System.String[]> GetIpLoadbalancingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/availableZones
        private Task<System.String[]> GetIpLoadbalancingAvailableZonesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}
        private Task<_ipLoadbalancing.IpWithIAM> GetIpLoadbalancingServiceNameAsync() {
            return default(Task<_ipLoadbalancing.IpWithIAM>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}
        private void PutIpLoadbalancingServiceNameAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFarmProbes
        private Task<_ipLoadbalancing.FarmAvailableProbe[]> GetIpLoadbalancingServiceNameAvailableFarmProbesAsync() {
            return default(Task<_ipLoadbalancing.FarmAvailableProbe[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFarmType
        private Task<System.String[]> GetIpLoadbalancingServiceNameAvailableFarmTypeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableFrontendType
        private Task<System.String[]> GetIpLoadbalancingServiceNameAvailableFrontendTypeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableRouteActions
        private Task<_ipLoadbalancing.RouteAvailableAction[]> GetIpLoadbalancingServiceNameAvailableRouteActionsAsync() {
            return default(Task<_ipLoadbalancing.RouteAvailableAction[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/availableRouteRules
        private Task<_ipLoadbalancing.RouteAvailableRule[]> GetIpLoadbalancingServiceNameAvailableRouteRulesAsync() {
            return default(Task<_ipLoadbalancing.RouteAvailableRule[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/changeContact
        private Task<System.Int64[]> PostIpLoadbalancingServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/confirmTermination
        private Task<System.String> PostIpLoadbalancingServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedFarms
        private Task<_ipLoadbalancing.DefinedFarm[]> GetIpLoadbalancingServiceNameDefinedFarmsAsync() {
            return default(Task<_ipLoadbalancing.DefinedFarm[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedFrontends
        private Task<_ipLoadbalancing.DefinedFrontend[]> GetIpLoadbalancingServiceNameDefinedFrontendsAsync() {
            return default(Task<_ipLoadbalancing.DefinedFrontend[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/definedRoutes
        private Task<_ipLoadbalancing.DefinedRoute[]> GetIpLoadbalancingServiceNameDefinedRoutesAsync() {
            return default(Task<_ipLoadbalancing.DefinedRoute[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/failover
        private Task<System.Net.IPNetwork[]> GetIpLoadbalancingServiceNameFailoverAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/freeCertificate
        private Task<_ipLoadbalancing_Task.Task> PostIpLoadbalancingServiceNameFreeCertificateAsync() {
            return default(Task<_ipLoadbalancing_Task.Task>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFarmAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm
        private Task<_ipLoadbalancing_backendHttp.BackendHttp> PostIpLoadbalancingServiceNameHttpFarmAsync() {
            return default(Task<_ipLoadbalancing_backendHttp.BackendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        private void DeleteIpLoadbalancingServiceNameHttpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        private Task<_ipLoadbalancing_backendHttp.BackendHttp> GetIpLoadbalancingServiceNameHttpFarmFarmIdAsync() {
            return default(Task<_ipLoadbalancing_backendHttp.BackendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}
        private void PutIpLoadbalancingServiceNameHttpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFarmFarmIdServerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server
        private Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> PostIpLoadbalancingServiceNameHttpFarmFarmIdServerAsync() {
            return default(Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        private void DeleteIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        private Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer> GetIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync() {
            return default(Task<_ipLoadbalancing_backendHttpCustomerServer.BackendHTTPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}
        private void PutIpLoadbalancingServiceNameHttpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpFrontendAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend
        private Task<_ipLoadbalancing_frontendHttp.FrontendHttp> PostIpLoadbalancingServiceNameHttpFrontendAsync() {
            return default(Task<_ipLoadbalancing_frontendHttp.FrontendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        private void DeleteIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        private Task<_ipLoadbalancing_frontendHttp.FrontendHttp> GetIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync() {
            return default(Task<_ipLoadbalancing_frontendHttp.FrontendHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/frontend/{frontendId}
        private void PutIpLoadbalancingServiceNameHttpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpRouteAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route
        private Task<_ipLoadbalancing_RouteHttp.RouteHttp> PostIpLoadbalancingServiceNameHttpRouteAsync() {
            return default(Task<_ipLoadbalancing_RouteHttp.RouteHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        private void DeleteIpLoadbalancingServiceNameHttpRouteRouteIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        private Task<_ipLoadbalancing_RouteHttp.RouteHttp> GetIpLoadbalancingServiceNameHttpRouteRouteIdAsync() {
            return default(Task<_ipLoadbalancing_RouteHttp.RouteHttp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}
        private void PutIpLoadbalancingServiceNameHttpRouteRouteIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule
        private Task<_ipLoadbalancing_RouteRule.RouteRule> PostIpLoadbalancingServiceNameHttpRouteRouteIdRuleAsync() {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        private void DeleteIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        private Task<_ipLoadbalancing_RouteRule.RouteRule> GetIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync() {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}
        private void PutIpLoadbalancingServiceNameHttpRouteRouteIdRuleRuleIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/instancesState
        private Task<_ipLoadbalancing.InstancesState[]> GetIpLoadbalancingServiceNameInstancesStateAsync() {
            return default(Task<_ipLoadbalancing.InstancesState[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/metricsToken
        private Task<_ipLoadbalancing.MetricsToken> GetIpLoadbalancingServiceNameMetricsTokenAsync() {
            return default(Task<_ipLoadbalancing.MetricsToken>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/natIp
        private Task<_ipLoadbalancing.NatIps[]> GetIpLoadbalancingServiceNameNatIpAsync() {
            return default(Task<_ipLoadbalancing.NatIps[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/pendingChanges
        private Task<_ipLoadbalancing.PendingChanges[]> GetIpLoadbalancingServiceNamePendingChangesAsync() {
            return default(Task<_ipLoadbalancing.PendingChanges[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota
        private Task<System.String[]> GetIpLoadbalancingServiceNameQuotaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota/{zone}
        private Task<_ipLoadbalancing_Quota.Quota> GetIpLoadbalancingServiceNameQuotaZoneAsync() {
            return default(Task<_ipLoadbalancing_Quota.Quota>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quota/{zone}
        private void PutIpLoadbalancingServiceNameQuotaZoneAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quotaHistory
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameQuotaHistoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/quotaHistory/{id}
        private Task<_ipLoadbalancing_QuotaHistory.QuotaHistory> GetIpLoadbalancingServiceNameQuotaHistoryIdAsync() {
            return default(Task<_ipLoadbalancing_QuotaHistory.QuotaHistory>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/refresh
        private Task<_ipLoadbalancing_Task.Task> PostIpLoadbalancingServiceNameRefreshAsync() {
            return default(Task<_ipLoadbalancing_Task.Task>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/serviceInfos
        private Task<_services.Service> GetIpLoadbalancingServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/serviceInfos
        private void PutIpLoadbalancingServiceNameServiceInfosAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameSslAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl
        private Task<_ipLoadbalancing_Ssl.Ssl> PostIpLoadbalancingServiceNameSslAsync() {
            return default(Task<_ipLoadbalancing_Ssl.Ssl>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        private void DeleteIpLoadbalancingServiceNameSslIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        private Task<_ipLoadbalancing_Ssl.Ssl> GetIpLoadbalancingServiceNameSslIdAsync() {
            return default(Task<_ipLoadbalancing_Ssl.Ssl>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/ssl/{id}
        private void PutIpLoadbalancingServiceNameSslIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/status
        private Task<_ipLoadbalancing.Status> GetIpLoadbalancingServiceNameStatusAsync() {
            return default(Task<_ipLoadbalancing.Status>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/task
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/task/{id}
        private Task<_ipLoadbalancing_Task.Task> GetIpLoadbalancingServiceNameTaskIdAsync() {
            return default(Task<_ipLoadbalancing_Task.Task>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFarmAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm
        private Task<_ipLoadbalancing_backendTcp.BackendTcp> PostIpLoadbalancingServiceNameTcpFarmAsync() {
            return default(Task<_ipLoadbalancing_backendTcp.BackendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        private void DeleteIpLoadbalancingServiceNameTcpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        private Task<_ipLoadbalancing_backendTcp.BackendTcp> GetIpLoadbalancingServiceNameTcpFarmFarmIdAsync() {
            return default(Task<_ipLoadbalancing_backendTcp.BackendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}
        private void PutIpLoadbalancingServiceNameTcpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFarmFarmIdServerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server
        private Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> PostIpLoadbalancingServiceNameTcpFarmFarmIdServerAsync() {
            return default(Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        private void DeleteIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        private Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer> GetIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync() {
            return default(Task<_ipLoadbalancing_backendTcpCustomerServer.BackendTCPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}
        private void PutIpLoadbalancingServiceNameTcpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpFrontendAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend
        private Task<_ipLoadbalancing_frontendTcp.FrontendTcp> PostIpLoadbalancingServiceNameTcpFrontendAsync() {
            return default(Task<_ipLoadbalancing_frontendTcp.FrontendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        private void DeleteIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        private Task<_ipLoadbalancing_frontendTcp.FrontendTcp> GetIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync() {
            return default(Task<_ipLoadbalancing_frontendTcp.FrontendTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}
        private void PutIpLoadbalancingServiceNameTcpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpRouteAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route
        private Task<_ipLoadbalancing_RouteTcp.RouteTcp> PostIpLoadbalancingServiceNameTcpRouteAsync() {
            return default(Task<_ipLoadbalancing_RouteTcp.RouteTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        private void DeleteIpLoadbalancingServiceNameTcpRouteRouteIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        private Task<_ipLoadbalancing_RouteTcp.RouteTcp> GetIpLoadbalancingServiceNameTcpRouteRouteIdAsync() {
            return default(Task<_ipLoadbalancing_RouteTcp.RouteTcp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}
        private void PutIpLoadbalancingServiceNameTcpRouteRouteIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule
        private Task<_ipLoadbalancing_RouteRule.RouteRule> PostIpLoadbalancingServiceNameTcpRouteRouteIdRuleAsync() {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        private void DeleteIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        private Task<_ipLoadbalancing_RouteRule.RouteRule> GetIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync() {
            return default(Task<_ipLoadbalancing_RouteRule.RouteRule>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}
        private void PutIpLoadbalancingServiceNameTcpRouteRouteIdRuleRuleIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/terminate
        private Task<System.String> PostIpLoadbalancingServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFarmAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm
        private Task<_ipLoadbalancing_backendUdp.BackendUdp> PostIpLoadbalancingServiceNameUdpFarmAsync() {
            return default(Task<_ipLoadbalancing_backendUdp.BackendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        private void DeleteIpLoadbalancingServiceNameUdpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        private Task<_ipLoadbalancing_backendUdp.BackendUdp> GetIpLoadbalancingServiceNameUdpFarmFarmIdAsync() {
            return default(Task<_ipLoadbalancing_backendUdp.BackendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}
        private void PutIpLoadbalancingServiceNameUdpFarmFarmIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFarmFarmIdServerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server
        private Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> PostIpLoadbalancingServiceNameUdpFarmFarmIdServerAsync() {
            return default(Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        private void DeleteIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        private Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer> GetIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync() {
            return default(Task<_ipLoadbalancing_backendUdpCustomerServer.BackendUDPServer>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}
        private void PutIpLoadbalancingServiceNameUdpFarmFarmIdServerServerIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameUdpFrontendAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend
        private Task<_ipLoadbalancing_frontendUdp.FrontendUdp> PostIpLoadbalancingServiceNameUdpFrontendAsync() {
            return default(Task<_ipLoadbalancing_frontendUdp.FrontendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        private void DeleteIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        private Task<_ipLoadbalancing_frontendUdp.FrontendUdp> GetIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync() {
            return default(Task<_ipLoadbalancing_frontendUdp.FrontendUdp>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}
        private void PutIpLoadbalancingServiceNameUdpFrontendFrontendIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network
        private Task<System.Int64[]> GetIpLoadbalancingServiceNameVrackNetworkAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network
        private Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostIpLoadbalancingServiceNameVrackNetworkAsync() {
            return default(Task<_ipLoadbalancing_VrackNetwork.VrackNetwork>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        private void DeleteIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        private Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> GetIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync() {
            return default(Task<_ipLoadbalancing_VrackNetwork.VrackNetwork>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}
        private void PutIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}/updateFarmId
        private Task<_ipLoadbalancing_VrackNetwork.VrackNetwork> PostIpLoadbalancingServiceNameVrackNetworkVrackNetworkIdUpdateFarmIdAsync() {
            return default(Task<_ipLoadbalancing_VrackNetwork.VrackNetwork>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/networkCreationRules
        private Task<_ipLoadbalancing.VrackNetworkCreationRules> GetIpLoadbalancingServiceNameVrackNetworkCreationRulesAsync() {
            return default(Task<_ipLoadbalancing.VrackNetworkCreationRules>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/vrack/status
        private Task<_ipLoadbalancing.VrackInformation> GetIpLoadbalancingServiceNameVrackStatusAsync() {
            return default(Task<_ipLoadbalancing.VrackInformation>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone
        private Task<System.String[]> GetIpLoadbalancingServiceNameZoneAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}
        private Task<_ipLoadbalancing_Zone.Zone> GetIpLoadbalancingServiceNameZoneNameAsync() {
            return default(Task<_ipLoadbalancing_Zone.Zone>);
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}/cancelTermination
        private void PostIpLoadbalancingServiceNameZoneNameCancelTerminationAsync() {
        }
        
        // Path: /ipLoadbalancing/{serviceName}/zone/{name}/terminate
        private void PostIpLoadbalancingServiceNameZoneNameTerminateAsync() {
        }
        
        // Path: /license/cloudLinux
        private Task<System.String[]> GetLicenseCloudLinuxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/cloudLinux/orderableVersions
        private Task<_license.CloudLinuxOrderConfiguration[]> GetLicenseCloudLinuxOrderableVersionsAsync() {
            return default(Task<_license.CloudLinuxOrderConfiguration[]>);
        }
        
        // Path: /license/cloudLinux/{serviceName}
        private Task<_license_cloudLinux.CloudLinuxWithIAM> GetLicenseCloudLinuxServiceNameAsync() {
            return default(Task<_license_cloudLinux.CloudLinuxWithIAM>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseCloudLinuxServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseCloudLinuxServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/serviceInfos
        private void PutLicenseCloudLinuxServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/cloudLinux/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseCloudLinuxServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseCloudLinuxServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/cloudLinux/{serviceName}/terminate
        private Task<System.String> PostLicenseCloudLinuxServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/cpanel
        private Task<System.String[]> GetLicenseCpanelAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/cpanel/orderableVersions
        private Task<_license.CpanelOrderConfiguration[]> GetLicenseCpanelOrderableVersionsAsync() {
            return default(Task<_license.CpanelOrderConfiguration[]>);
        }
        
        // Path: /license/cpanel/{serviceName}
        private Task<_license_cpanel.CpanelWithIAM> GetLicenseCpanelServiceNameAsync() {
            return default(Task<_license_cpanel.CpanelWithIAM>);
        }
        
        // Path: /license/cpanel/{serviceName}
        private void PutLicenseCpanelServiceNameAsync() {
        }
        
        // Path: /license/cpanel/{serviceName}/allowedDestinationIp
        private Task<System.Net.IPNetwork[]> GetLicenseCpanelServiceNameAllowedDestinationIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /license/cpanel/{serviceName}/canLicenseBeMovedTo
        private Task<_license.ChangeIpStatus> GetLicenseCpanelServiceNameCanLicenseBeMovedToAsync() {
            return default(Task<_license.ChangeIpStatus>);
        }
        
        // Path: /license/cpanel/{serviceName}/changeIp
        private Task<_license.Task> PostLicenseCpanelServiceNameChangeIpAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/cpanel/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseCpanelServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/cpanel/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseCpanelServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/cpanel/{serviceName}/serviceInfos
        private void PutLicenseCpanelServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/cpanel/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseCpanelServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/cpanel/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseCpanelServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/cpanel/{serviceName}/terminate
        private Task<System.String> PostLicenseCpanelServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/directadmin
        private Task<System.String[]> GetLicenseDirectadminAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/directadmin/orderableVersions
        private Task<_license.DirectAdminOrderConfiguration[]> GetLicenseDirectadminOrderableVersionsAsync() {
            return default(Task<_license.DirectAdminOrderConfiguration[]>);
        }
        
        // Path: /license/directadmin/{serviceName}
        private Task<_license_directadmin.DirectAdminWithIAM> GetLicenseDirectadminServiceNameAsync() {
            return default(Task<_license_directadmin.DirectAdminWithIAM>);
        }
        
        // Path: /license/directadmin/{serviceName}
        private void PutLicenseDirectadminServiceNameAsync() {
        }
        
        // Path: /license/directadmin/{serviceName}/allowedDestinationIp
        private Task<System.Net.IPNetwork[]> GetLicenseDirectadminServiceNameAllowedDestinationIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /license/directadmin/{serviceName}/canLicenseBeMovedTo
        private Task<_license.ChangeIpStatus> GetLicenseDirectadminServiceNameCanLicenseBeMovedToAsync() {
            return default(Task<_license.ChangeIpStatus>);
        }
        
        // Path: /license/directadmin/{serviceName}/changeIp
        private Task<_license.Task> PostLicenseDirectadminServiceNameChangeIpAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/directadmin/{serviceName}/changeOs
        private Task<_license.Task> PostLicenseDirectadminServiceNameChangeOsAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/directadmin/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseDirectadminServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/directadmin/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseDirectadminServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/directadmin/{serviceName}/serviceInfos
        private void PutLicenseDirectadminServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/directadmin/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseDirectadminServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/directadmin/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseDirectadminServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/directadmin/{serviceName}/terminate
        private Task<System.String> PostLicenseDirectadminServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/office
        private Task<System.String[]> GetLicenseOfficeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/office/{serviceName}
        private Task<_license_office.OfficeTenantNativeWithIAM> GetLicenseOfficeServiceNameAsync() {
            return default(Task<_license_office.OfficeTenantNativeWithIAM>);
        }
        
        // Path: /license/office/{serviceName}
        private void PutLicenseOfficeServiceNameAsync() {
        }
        
        // Path: /license/office/{serviceName}/domain
        private Task<System.String[]> GetLicenseOfficeServiceNameDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/office/{serviceName}/domain/{domainName}
        private Task<_license_office.DomainNative> GetLicenseOfficeServiceNameDomainDomainNameAsync() {
            return default(Task<_license_office.DomainNative>);
        }
        
        // Path: /license/office/{serviceName}/pendingTask
        private Task<System.Int64[]> GetLicenseOfficeServiceNamePendingTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/office/{serviceName}/pendingTask/{id}
        private Task<_license_office.OfficeTaskNative> GetLicenseOfficeServiceNamePendingTaskIdAsync() {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/office/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseOfficeServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/office/{serviceName}/serviceInfos
        private void PutLicenseOfficeServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/office/{serviceName}/usageStatistics
        private Task<_license_office.OfficeCurrentStatisticsNative[]> GetLicenseOfficeServiceNameUsageStatisticsAsync() {
            return default(Task<_license_office.OfficeCurrentStatisticsNative[]>);
        }
        
        // Path: /license/office/{serviceName}/user
        private Task<System.String[]> GetLicenseOfficeServiceNameUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/office/{serviceName}/user
        private Task<_license_office.OfficeTaskNative> PostLicenseOfficeServiceNameUserAsync() {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        private Task<_license_office.OfficeTaskNative> DeleteLicenseOfficeServiceNameUserActivationEmailAsync() {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        private Task<_license_office.OfficeUserNative> GetLicenseOfficeServiceNameUserActivationEmailAsync() {
            return default(Task<_license_office.OfficeUserNative>);
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}
        private void PutLicenseOfficeServiceNameUserActivationEmailAsync() {
        }
        
        // Path: /license/office/{serviceName}/user/{activationEmail}/changePassword
        private Task<_license_office.OfficeTaskNative> PostLicenseOfficeServiceNameUserActivationEmailChangePasswordAsync() {
            return default(Task<_license_office.OfficeTaskNative>);
        }
        
        // Path: /license/officePrepaid
        private Task<System.String[]> GetLicenseOfficePrepaidAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/officePrepaid/{serviceName}
        private Task<_license_officePrepaid.OfficeUserNativeWithIAM> GetLicenseOfficePrepaidServiceNameAsync() {
            return default(Task<_license_officePrepaid.OfficeUserNativeWithIAM>);
        }
        
        // Path: /license/officePrepaid/{serviceName}
        private void PutLicenseOfficePrepaidServiceNameAsync() {
        }
        
        // Path: /license/officePrepaid/{serviceName}/changePassword
        private Task<_license_officePrepaid.OfficeTaskNative> PostLicenseOfficePrepaidServiceNameChangePasswordAsync() {
            return default(Task<_license_officePrepaid.OfficeTaskNative>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseOfficePrepaidServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/parentTenant
        private Task<_license_office.OfficeTenant> GetLicenseOfficePrepaidServiceNameParentTenantAsync() {
            return default(Task<_license_office.OfficeTenant>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/parentTenant
        private void PutLicenseOfficePrepaidServiceNameParentTenantAsync() {
        }
        
        // Path: /license/officePrepaid/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseOfficePrepaidServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/serviceInfos
        private void PutLicenseOfficePrepaidServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantPendingTask
        private Task<System.Int64[]> GetLicenseOfficePrepaidServiceNameTenantPendingTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantPendingTask/{id}
        private Task<_license_officePrepaid.OfficeTaskNative> GetLicenseOfficePrepaidServiceNameTenantPendingTaskIdAsync() {
            return default(Task<_license_officePrepaid.OfficeTaskNative>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/tenantUsageStatistics
        private Task<_license_officePrepaid.OfficeCurrentStatisticsNative[]> GetLicenseOfficePrepaidServiceNameTenantUsageStatisticsAsync() {
            return default(Task<_license_officePrepaid.OfficeCurrentStatisticsNative[]>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/terminate
        private Task<System.String> PostLicenseOfficePrepaidServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/officePrepaid/{serviceName}/unconfigure
        private Task<_license_officePrepaid.OfficeTaskNative> PostLicenseOfficePrepaidServiceNameUnconfigureAsync() {
            return default(Task<_license_officePrepaid.OfficeTaskNative>);
        }
        
        // Path: /license/plesk
        private Task<System.String[]> GetLicensePleskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/plesk/orderableVersions
        private Task<_license.PleskOrderConfiguration[]> GetLicensePleskOrderableVersionsAsync() {
            return default(Task<_license.PleskOrderConfiguration[]>);
        }
        
        // Path: /license/plesk/{serviceName}
        private Task<_license_plesk.PleskWithIAM> GetLicensePleskServiceNameAsync() {
            return default(Task<_license_plesk.PleskWithIAM>);
        }
        
        // Path: /license/plesk/{serviceName}
        private void PutLicensePleskServiceNameAsync() {
        }
        
        // Path: /license/plesk/{serviceName}/allowedDestinationIp
        private Task<System.Net.IPNetwork[]> GetLicensePleskServiceNameAllowedDestinationIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /license/plesk/{serviceName}/canLicenseBeMovedTo
        private Task<_license.ChangeIpStatus> GetLicensePleskServiceNameCanLicenseBeMovedToAsync() {
            return default(Task<_license.ChangeIpStatus>);
        }
        
        // Path: /license/plesk/{serviceName}/changeIp
        private Task<_license.Task> PostLicensePleskServiceNameChangeIpAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/plesk/{serviceName}/confirmTermination
        private Task<System.String> PostLicensePleskServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/plesk/{serviceName}/option
        private Task<_license.OptionLabel[]> GetLicensePleskServiceNameOptionAsync() {
            return default(Task<_license.OptionLabel[]>);
        }
        
        // Path: /license/plesk/{serviceName}/option/{label}
        private Task<_license.Task> DeleteLicensePleskServiceNameOptionLabelAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/plesk/{serviceName}/option/{label}
        private Task<_license.Option> GetLicensePleskServiceNameOptionLabelAsync() {
            return default(Task<_license.Option>);
        }
        
        // Path: /license/plesk/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicensePleskServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/plesk/{serviceName}/serviceInfos
        private void PutLicensePleskServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/plesk/{serviceName}/tasks
        private Task<System.Int64[]> GetLicensePleskServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/plesk/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicensePleskServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/plesk/{serviceName}/terminate
        private Task<System.String> PostLicensePleskServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/redhat
        private Task<System.String[]> GetLicenseRedhatAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/redhat/{serviceName}
        private Task<_license_redhat.RedHatWithIAM> GetLicenseRedhatServiceNameAsync() {
            return default(Task<_license_redhat.RedHatWithIAM>);
        }
        
        // Path: /license/redhat/{serviceName}
        private void PutLicenseRedhatServiceNameAsync() {
        }
        
        // Path: /license/redhat/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseRedhatServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/redhat/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseRedhatServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/redhat/{serviceName}/serviceInfos
        private void PutLicenseRedhatServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/redhat/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseRedhatServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/redhat/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseRedhatServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/redhat/{serviceName}/terminate
        private Task<System.String> PostLicenseRedhatServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/sqlserver
        private Task<System.String[]> GetLicenseSqlserverAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/sqlserver/orderableVersions
        private Task<_license.SqlServerOrderConfiguration[]> GetLicenseSqlserverOrderableVersionsAsync() {
            return default(Task<_license.SqlServerOrderConfiguration[]>);
        }
        
        // Path: /license/sqlserver/{serviceName}
        private Task<_license_sqlserver.SqlServerWithIAM> GetLicenseSqlserverServiceNameAsync() {
            return default(Task<_license_sqlserver.SqlServerWithIAM>);
        }
        
        // Path: /license/sqlserver/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseSqlserverServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/sqlserver/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseSqlserverServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/sqlserver/{serviceName}/serviceInfos
        private void PutLicenseSqlserverServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/sqlserver/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseSqlserverServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/sqlserver/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseSqlserverServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/sqlserver/{serviceName}/terminate
        private Task<System.String> PostLicenseSqlserverServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/virtuozzo
        private Task<System.String[]> GetLicenseVirtuozzoAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/virtuozzo/orderableVersions
        private Task<_license.VirtuozzoOrderConfiguration[]> GetLicenseVirtuozzoOrderableVersionsAsync() {
            return default(Task<_license.VirtuozzoOrderConfiguration[]>);
        }
        
        // Path: /license/virtuozzo/{serviceName}
        private Task<_license_virtuozzo.VirtuozzoWithIAM> GetLicenseVirtuozzoServiceNameAsync() {
            return default(Task<_license_virtuozzo.VirtuozzoWithIAM>);
        }
        
        // Path: /license/virtuozzo/{serviceName}
        private void PutLicenseVirtuozzoServiceNameAsync() {
        }
        
        // Path: /license/virtuozzo/{serviceName}/allowedDestinationIp
        private Task<System.Net.IPNetwork[]> GetLicenseVirtuozzoServiceNameAllowedDestinationIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/canLicenseBeMovedTo
        private Task<_license.ChangeIpStatus> GetLicenseVirtuozzoServiceNameCanLicenseBeMovedToAsync() {
            return default(Task<_license.ChangeIpStatus>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/changeIp
        private Task<_license.Task> PostLicenseVirtuozzoServiceNameChangeIpAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseVirtuozzoServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/option
        private Task<_license.OptionLabel[]> GetLicenseVirtuozzoServiceNameOptionAsync() {
            return default(Task<_license.OptionLabel[]>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/option/{label}
        private Task<_license.Task> DeleteLicenseVirtuozzoServiceNameOptionLabelAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/option/{label}
        private Task<_license.Option> GetLicenseVirtuozzoServiceNameOptionLabelAsync() {
            return default(Task<_license.Option>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseVirtuozzoServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/serviceInfos
        private void PutLicenseVirtuozzoServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/virtuozzo/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseVirtuozzoServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseVirtuozzoServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/virtuozzo/{serviceName}/terminate
        private Task<System.String> PostLicenseVirtuozzoServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/windows
        private Task<System.String[]> GetLicenseWindowsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/windows/orderableVersions
        private Task<_license.WindowsOrderConfiguration[]> GetLicenseWindowsOrderableVersionsAsync() {
            return default(Task<_license.WindowsOrderConfiguration[]>);
        }
        
        // Path: /license/windows/{serviceName}
        private Task<_license_windows.WindowsWithIAM> GetLicenseWindowsServiceNameAsync() {
            return default(Task<_license_windows.WindowsWithIAM>);
        }
        
        // Path: /license/windows/{serviceName}
        private void PutLicenseWindowsServiceNameAsync() {
        }
        
        // Path: /license/windows/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseWindowsServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/windows/{serviceName}/option
        private Task<_license.OptionLabel[]> GetLicenseWindowsServiceNameOptionAsync() {
            return default(Task<_license.OptionLabel[]>);
        }
        
        // Path: /license/windows/{serviceName}/option/{label}
        private Task<_license.Task> DeleteLicenseWindowsServiceNameOptionLabelAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/windows/{serviceName}/option/{label}
        private Task<_license.Option> GetLicenseWindowsServiceNameOptionLabelAsync() {
            return default(Task<_license.Option>);
        }
        
        // Path: /license/windows/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseWindowsServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/windows/{serviceName}/serviceInfos
        private void PutLicenseWindowsServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/windows/{serviceName}/sqlServer
        private Task<_license.Task> PostLicenseWindowsServiceNameSqlServerAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/windows/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseWindowsServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/windows/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseWindowsServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/windows/{serviceName}/terminate
        private Task<System.String> PostLicenseWindowsServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/worklight
        private Task<System.String[]> GetLicenseWorklightAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /license/worklight/orderableVersions
        private Task<_license.WorkLightOrderConfiguration[]> GetLicenseWorklightOrderableVersionsAsync() {
            return default(Task<_license.WorkLightOrderConfiguration[]>);
        }
        
        // Path: /license/worklight/{serviceName}
        private Task<_license_worklight.WorkLightWithIAM> GetLicenseWorklightServiceNameAsync() {
            return default(Task<_license_worklight.WorkLightWithIAM>);
        }
        
        // Path: /license/worklight/{serviceName}
        private void PutLicenseWorklightServiceNameAsync() {
        }
        
        // Path: /license/worklight/{serviceName}/allowedDestinationIp
        private Task<System.Net.IPNetwork[]> GetLicenseWorklightServiceNameAllowedDestinationIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /license/worklight/{serviceName}/canLicenseBeMovedTo
        private Task<_license.ChangeIpStatus> GetLicenseWorklightServiceNameCanLicenseBeMovedToAsync() {
            return default(Task<_license.ChangeIpStatus>);
        }
        
        // Path: /license/worklight/{serviceName}/changeIp
        private Task<_license.Task> PostLicenseWorklightServiceNameChangeIpAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/worklight/{serviceName}/confirmTermination
        private Task<System.String> PostLicenseWorklightServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /license/worklight/{serviceName}/serviceInfos
        private Task<_services.Service> GetLicenseWorklightServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /license/worklight/{serviceName}/serviceInfos
        private void PutLicenseWorklightServiceNameServiceInfosAsync() {
        }
        
        // Path: /license/worklight/{serviceName}/tasks
        private Task<System.Int64[]> GetLicenseWorklightServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /license/worklight/{serviceName}/tasks/{taskId}
        private Task<_license.Task> GetLicenseWorklightServiceNameTasksTaskIdAsync() {
            return default(Task<_license.Task>);
        }
        
        // Path: /license/worklight/{serviceName}/terminate
        private Task<System.String> PostLicenseWorklightServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /me
        private Task<_nichandle.Nichandle> GetMeAsync() {
            return default(Task<_nichandle.Nichandle>);
        }
        
        // Path: /me
        private void PutMeAsync() {
        }
        
        // Path: /me/abuse
        private Task<System.String[]> GetMeAbuseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/abuse/{id}
        private Task<_me_abuse.Abuse> GetMeAbuseIdAsync() {
            return default(Task<_me_abuse.Abuse>);
        }
        
        // Path: /me/accessRestriction/backupCode
        private void DeleteMeAccessRestrictionBackupCodeAsync() {
        }
        
        // Path: /me/accessRestriction/backupCode
        private Task<_nichandle_accessRestriction.SOTPAccount> GetMeAccessRestrictionBackupCodeAsync() {
            return default(Task<_nichandle_accessRestriction.SOTPAccount>);
        }
        
        // Path: /me/accessRestriction/backupCode
        private Task<_nichandle_accessRestriction.SOTPSecret> PostMeAccessRestrictionBackupCodeAsync() {
            return default(Task<_nichandle_accessRestriction.SOTPSecret>);
        }
        
        // Path: /me/accessRestriction/backupCode/disable
        private void PostMeAccessRestrictionBackupCodeDisableAsync() {
        }
        
        // Path: /me/accessRestriction/backupCode/enable
        private void PostMeAccessRestrictionBackupCodeEnableAsync() {
        }
        
        // Path: /me/accessRestriction/backupCode/validate
        private Task<_nichandle_accessRestriction.SOTPValidate> PostMeAccessRestrictionBackupCodeValidateAsync() {
            return default(Task<_nichandle_accessRestriction.SOTPValidate>);
        }
        
        // Path: /me/accessRestriction/developerMode
        private Task<_nichandle.DeveloperModeRestriction> GetMeAccessRestrictionDeveloperModeAsync() {
            return default(Task<_nichandle.DeveloperModeRestriction>);
        }
        
        // Path: /me/accessRestriction/developerMode
        private void PutMeAccessRestrictionDeveloperModeAsync() {
        }
        
        // Path: /me/accessRestriction/ip
        private Task<System.Int64[]> GetMeAccessRestrictionIpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/accessRestriction/ip
        private void PostMeAccessRestrictionIpAsync() {
        }
        
        // Path: /me/accessRestriction/ip/{id}
        private void DeleteMeAccessRestrictionIpIdAsync() {
        }
        
        // Path: /me/accessRestriction/ip/{id}
        private Task<_nichandle.IpRestriction> GetMeAccessRestrictionIpIdAsync() {
            return default(Task<_nichandle.IpRestriction>);
        }
        
        // Path: /me/accessRestriction/ip/{id}
        private void PutMeAccessRestrictionIpIdAsync() {
        }
        
        // Path: /me/accessRestriction/ipDefaultRule
        private Task<_nichandle.IpRestrictionDefaultRule> GetMeAccessRestrictionIpDefaultRuleAsync() {
            return default(Task<_nichandle.IpRestrictionDefaultRule>);
        }
        
        // Path: /me/accessRestriction/ipDefaultRule
        private void PutMeAccessRestrictionIpDefaultRuleAsync() {
        }
        
        // Path: /me/accessRestriction/sms
        private Task<System.Int64[]> GetMeAccessRestrictionSmsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/accessRestriction/sms
        private Task<_nichandle_accessRestriction.SmsSecret> PostMeAccessRestrictionSmsAsync() {
            return default(Task<_nichandle_accessRestriction.SmsSecret>);
        }
        
        // Path: /me/accessRestriction/sms/{id}
        private void DeleteMeAccessRestrictionSmsIdAsync() {
        }
        
        // Path: /me/accessRestriction/sms/{id}
        private Task<_nichandle_accessRestriction.SmsAccount> GetMeAccessRestrictionSmsIdAsync() {
            return default(Task<_nichandle_accessRestriction.SmsAccount>);
        }
        
        // Path: /me/accessRestriction/sms/{id}
        private void PutMeAccessRestrictionSmsIdAsync() {
        }
        
        // Path: /me/accessRestriction/sms/{id}/disable
        private void PostMeAccessRestrictionSmsIdDisableAsync() {
        }
        
        // Path: /me/accessRestriction/sms/{id}/enable
        private void PostMeAccessRestrictionSmsIdEnableAsync() {
        }
        
        // Path: /me/accessRestriction/sms/{id}/sendCode
        private Task<_nichandle_accessRestriction.SmsCode> PostMeAccessRestrictionSmsIdSendCodeAsync() {
            return default(Task<_nichandle_accessRestriction.SmsCode>);
        }
        
        // Path: /me/accessRestriction/sms/{id}/validate
        private void PostMeAccessRestrictionSmsIdValidateAsync() {
        }
        
        // Path: /me/accessRestriction/totp
        private Task<System.Int64[]> GetMeAccessRestrictionTotpAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/accessRestriction/totp
        private Task<_nichandle_accessRestriction.TOTPSecret> PostMeAccessRestrictionTotpAsync() {
            return default(Task<_nichandle_accessRestriction.TOTPSecret>);
        }
        
        // Path: /me/accessRestriction/totp/{id}
        private void DeleteMeAccessRestrictionTotpIdAsync() {
        }
        
        // Path: /me/accessRestriction/totp/{id}
        private Task<_nichandle_accessRestriction.TOTPAccount> GetMeAccessRestrictionTotpIdAsync() {
            return default(Task<_nichandle_accessRestriction.TOTPAccount>);
        }
        
        // Path: /me/accessRestriction/totp/{id}
        private void PutMeAccessRestrictionTotpIdAsync() {
        }
        
        // Path: /me/accessRestriction/totp/{id}/disable
        private void PostMeAccessRestrictionTotpIdDisableAsync() {
        }
        
        // Path: /me/accessRestriction/totp/{id}/enable
        private void PostMeAccessRestrictionTotpIdEnableAsync() {
        }
        
        // Path: /me/accessRestriction/totp/{id}/validate
        private void PostMeAccessRestrictionTotpIdValidateAsync() {
        }
        
        // Path: /me/accessRestriction/u2f
        private Task<System.Int64[]> GetMeAccessRestrictionU2fAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/accessRestriction/u2f
        private Task<_nichandle_accessRestriction.U2FRegisterChallenge> PostMeAccessRestrictionU2fAsync() {
            return default(Task<_nichandle_accessRestriction.U2FRegisterChallenge>);
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        private void DeleteMeAccessRestrictionU2fIdAsync() {
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        private Task<_nichandle_accessRestriction.U2FAccount> GetMeAccessRestrictionU2fIdAsync() {
            return default(Task<_nichandle_accessRestriction.U2FAccount>);
        }
        
        // Path: /me/accessRestriction/u2f/{id}
        private void PutMeAccessRestrictionU2fIdAsync() {
        }
        
        // Path: /me/accessRestriction/u2f/{id}/disable
        private void PostMeAccessRestrictionU2fIdDisableAsync() {
        }
        
        // Path: /me/accessRestriction/u2f/{id}/enable
        private void PostMeAccessRestrictionU2fIdEnableAsync() {
        }
        
        // Path: /me/accessRestriction/u2f/{id}/validate
        private void PostMeAccessRestrictionU2fIdValidateAsync() {
        }
        
        // Path: /me/agreements
        private Task<System.Int64[]> GetMeAgreementsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/agreements/{id}
        private Task<_agreements.ContractAgreement> GetMeAgreementsIdAsync() {
            return default(Task<_agreements.ContractAgreement>);
        }
        
        // Path: /me/agreements/{id}/accept
        private Task<System.String> PostMeAgreementsIdAcceptAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /me/agreements/{id}/contract
        private Task<_agreements.Contract> GetMeAgreementsIdContractAsync() {
            return default(Task<_agreements.Contract>);
        }
        
        // Path: /me/api/application
        private Task<System.Int64[]> GetMeApiApplicationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/api/application/{applicationId}
        private void DeleteMeApiApplicationApplicationIdAsync() {
        }
        
        // Path: /me/api/application/{applicationId}
        private Task<_auth.ApiApplication> GetMeApiApplicationApplicationIdAsync() {
            return default(Task<_auth.ApiApplication>);
        }
        
        // Path: /me/api/credential
        private Task<System.Int64[]> GetMeApiCredentialAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/api/credential/{credentialId}
        private void DeleteMeApiCredentialCredentialIdAsync() {
        }
        
        // Path: /me/api/credential/{credentialId}
        private Task<_auth.ApiCredential> GetMeApiCredentialCredentialIdAsync() {
            return default(Task<_auth.ApiCredential>);
        }
        
        // Path: /me/api/credential/{credentialId}
        private void PutMeApiCredentialCredentialIdAsync() {
        }
        
        // Path: /me/api/credential/{credentialId}/application
        private Task<_auth.ApiApplication> GetMeApiCredentialCredentialIdApplicationAsync() {
            return default(Task<_auth.ApiApplication>);
        }
        
        // Path: /me/api/log/kind
        private Task<System.String[]> GetMeApiLogKindAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/api/log/kind/{name}
        private Task<_dbaas_logs.LogKind> GetMeApiLogKindNameAsync() {
            return default(Task<_dbaas_logs.LogKind>);
        }
        
        // Path: /me/api/log/subscription
        private Task<System.Guid[]> GetMeApiLogSubscriptionAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /me/api/log/subscription
        private Task<_dbaas_logs.LogSubscriptionResponse> PostMeApiLogSubscriptionAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /me/api/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscriptionResponse> DeleteMeApiLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscriptionResponse>);
        }
        
        // Path: /me/api/log/subscription/{subscriptionId}
        private Task<_dbaas_logs.LogSubscription> GetMeApiLogSubscriptionSubscriptionIdAsync() {
            return default(Task<_dbaas_logs.LogSubscription>);
        }
        
        // Path: /me/api/log/url
        private Task<_dbaas_logs.TemporaryLogsLink> PostMeApiLogUrlAsync() {
            return default(Task<_dbaas_logs.TemporaryLogsLink>);
        }
        
        // Path: /me/api/logs/forward
        private Task<_apilogs.ForwardResponse> PostMeApiLogsForwardAsync() {
            return default(Task<_apilogs.ForwardResponse>);
        }
        
        // Path: /me/api/logs/self
        private Task<System.Int64[]> GetMeApiLogsSelfAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/api/logs/self/{logId}
        private Task<_api.Log> GetMeApiLogsSelfLogIdAsync() {
            return default(Task<_api.Log>);
        }
        
        // Path: /me/api/logs/services
        private Task<System.Int64[]> GetMeApiLogsServicesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/api/logs/services/{logId}
        private Task<_api.Log> GetMeApiLogsServicesLogIdAsync() {
            return default(Task<_api.Log>);
        }
        
        // Path: /me/api/oauth2/client
        private Task<System.String[]> GetMeApiOauth2ClientAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/api/oauth2/client
        private Task<_oauth2.clientSecret> PostMeApiOauth2ClientAsync() {
            return default(Task<_oauth2.clientSecret>);
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        private void DeleteMeApiOauth2ClientClientIdAsync() {
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        private Task<_oauth2.client> GetMeApiOauth2ClientClientIdAsync() {
            return default(Task<_oauth2.client>);
        }
        
        // Path: /me/api/oauth2/client/{clientId}
        private void PutMeApiOauth2ClientClientIdAsync() {
        }
        
        // Path: /me/autorenew
        private Task<_nichandle.NicAutorenewInfos> GetMeAutorenewAsync() {
            return default(Task<_nichandle.NicAutorenewInfos>);
        }
        
        // Path: /me/autorenew
        private void PostMeAutorenewAsync() {
        }
        
        // Path: /me/autorenew
        private void PutMeAutorenewAsync() {
        }
        
        // Path: /me/availableAutomaticPaymentMeans
        private Task<_billing.AutomaticPaymentMean> GetMeAvailableAutomaticPaymentMeansAsync() {
            return default(Task<_billing.AutomaticPaymentMean>);
        }
        
        // Path: /me/bill
        private Task<System.String[]> GetMeBillAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/bill/export
        private void PostMeBillExportAsync() {
        }
        
        // Path: /me/bill/{billId}
        private Task<_billing.Bill> GetMeBillBillIdAsync() {
            return default(Task<_billing.Bill>);
        }
        
        // Path: /me/bill/{billId}/debt
        private Task<_debt.Debt> GetMeBillBillIdDebtAsync() {
            return default(Task<_debt.Debt>);
        }
        
        // Path: /me/bill/{billId}/debt/operation
        private Task<System.Int64[]> GetMeBillBillIdDebtOperationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/bill/{billId}/debt/operation/{operationId}
        private Task<_debt.Operation> GetMeBillBillIdDebtOperationOperationIdAsync() {
            return default(Task<_debt.Operation>);
        }
        
        // Path: /me/bill/{billId}/debt/operation/{operationId}/associatedObject
        private Task<_debt_entry.AssociatedObject> GetMeBillBillIdDebtOperationOperationIdAssociatedObjectAsync() {
            return default(Task<_debt_entry.AssociatedObject>);
        }
        
        // Path: /me/bill/{billId}/debt/pay
        private Task<_billing.Order> PostMeBillBillIdDebtPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/bill/{billId}/details
        private Task<System.String[]> GetMeBillBillIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/bill/{billId}/details/{billDetailId}
        private Task<_billing.BillDetail> GetMeBillBillIdDetailsBillDetailIdAsync() {
            return default(Task<_billing.BillDetail>);
        }
        
        // Path: /me/bill/{billId}/payment
        private Task<_billing.Payment> GetMeBillBillIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/billing/group
        private Task<System.Int64[]> GetMeBillingGroupAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/billing/group
        private Task<_me_billing_group.BillingGroup> PostMeBillingGroupAsync() {
            return default(Task<_me_billing_group.BillingGroup>);
        }
        
        // Path: /me/billing/group/{groupId}
        private void DeleteMeBillingGroupGroupIdAsync() {
        }
        
        // Path: /me/billing/group/{groupId}
        private Task<_me_billing_group.BillingGroup> GetMeBillingGroupGroupIdAsync() {
            return default(Task<_me_billing_group.BillingGroup>);
        }
        
        // Path: /me/billing/group/{groupId}
        private void PutMeBillingGroupGroupIdAsync() {
        }
        
        // Path: /me/billing/group/{groupId}/service
        private Task<System.Int64[]> GetMeBillingGroupGroupIdServiceAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/billing/group/{groupId}/service
        private Task<_me_billing_group.Service> PostMeBillingGroupGroupIdServiceAsync() {
            return default(Task<_me_billing_group.Service>);
        }
        
        // Path: /me/billing/group/{groupId}/service/{serviceId}
        private void DeleteMeBillingGroupGroupIdServiceServiceIdAsync() {
        }
        
        // Path: /me/billing/group/{groupId}/service/{serviceId}
        private Task<_me_billing_group.Service> GetMeBillingGroupGroupIdServiceServiceIdAsync() {
            return default(Task<_me_billing_group.Service>);
        }
        
        // Path: /me/billing/invoicesByPostalMail
        private Task<System.Boolean> GetMeBillingInvoicesByPostalMailAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /me/billing/invoicesByPostalMail
        private void PostMeBillingInvoicesByPostalMailAsync() {
        }
        
        // Path: /me/billing/purchaseOrder
        private Task<System.Int64[]> GetMeBillingPurchaseOrderAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/billing/purchaseOrder
        private Task<_me_billing_purchaseOrder.PurchaseOrder> PostMeBillingPurchaseOrderAsync() {
            return default(Task<_me_billing_purchaseOrder.PurchaseOrder>);
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        private void DeleteMeBillingPurchaseOrderIdAsync() {
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        private Task<_me_billing_purchaseOrder.PurchaseOrder> GetMeBillingPurchaseOrderIdAsync() {
            return default(Task<_me_billing_purchaseOrder.PurchaseOrder>);
        }
        
        // Path: /me/billing/purchaseOrder/{id}
        private void PutMeBillingPurchaseOrderIdAsync() {
        }
        
        // Path: /me/billing/report/consumption
        private Task<System.String[]> GetMeBillingReportConsumptionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/billing/report/consumption
        private Task<_me_billing_report_consumption.CreationResponse> PostMeBillingReportConsumptionAsync() {
            return default(Task<_me_billing_report_consumption.CreationResponse>);
        }
        
        // Path: /me/billing/report/consumption/{taskId}
        private Task<_me_billing_report.Consumption> GetMeBillingReportConsumptionTaskIdAsync() {
            return default(Task<_me_billing_report.Consumption>);
        }
        
        // Path: /me/bringYourOwnIp/token
        private Task<System.String> GetMeBringYourOwnIpTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /me/carbonCalculator/hasInvoice
        private Task<_carbonCalculator.HasInvoiceResponse> GetMeCarbonCalculatorHasInvoiceAsync() {
            return default(Task<_carbonCalculator.HasInvoiceResponse>);
        }
        
        // Path: /me/carbonCalculator/task
        private Task<_carbonCalculator.Task[]> GetMeCarbonCalculatorTaskAsync() {
            return default(Task<_carbonCalculator.Task[]>);
        }
        
        // Path: /me/carbonCalculator/task
        private Task<_carbonCalculator.CalculationResponse> PostMeCarbonCalculatorTaskAsync() {
            return default(Task<_carbonCalculator.CalculationResponse>);
        }
        
        // Path: /me/carbonCalculator/task/{taskID}
        private Task<_carbonCalculator.Task> GetMeCarbonCalculatorTaskTaskIDAsync() {
            return default(Task<_carbonCalculator.Task>);
        }
        
        // Path: /me/certificates
        private Task<System.String[]> GetMeCertificatesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/changeEmail
        private Task<_nichandle_emailChange.Task> PostMeChangeEmailAsync() {
            return default(Task<_nichandle_emailChange.Task>);
        }
        
        // Path: /me/changePassword
        private void PostMeChangePasswordAsync() {
        }
        
        // Path: /me/consent
        private Task<_me_consent.Campaign[]> GetMeConsentAsync() {
            return default(Task<_me_consent.Campaign[]>);
        }
        
        // Path: /me/consent/{campaignName}
        private Task<_me_consent.Campaign> GetMeConsentCampaignNameAsync() {
            return default(Task<_me_consent.Campaign>);
        }
        
        // Path: /me/consent/{campaignName}/decision
        private Task<_me_consent.Consent> GetMeConsentCampaignNameDecisionAsync() {
            return default(Task<_me_consent.Consent>);
        }
        
        // Path: /me/consent/{campaignName}/decision
        private void PutMeConsentCampaignNameDecisionAsync() {
        }
        
        // Path: /me/consumption/usage/current
        private Task<_me_consumption.Transaction[]> GetMeConsumptionUsageCurrentAsync() {
            return default(Task<_me_consumption.Transaction[]>);
        }
        
        // Path: /me/consumption/usage/forecast
        private Task<_me_consumption.Transaction[]> GetMeConsumptionUsageForecastAsync() {
            return default(Task<_me_consumption.Transaction[]>);
        }
        
        // Path: /me/consumption/usage/history
        private Task<_me_consumption.Transaction[]> GetMeConsumptionUsageHistoryAsync() {
            return default(Task<_me_consumption.Transaction[]>);
        }
        
        // Path: /me/contact
        private Task<System.Int64[]> GetMeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/contact
        private Task<_me_contact.Contact> PostMeContactAsync() {
            return default(Task<_me_contact.Contact>);
        }
        
        // Path: /me/contact/{contactId}
        private Task<_me_contact.Contact> GetMeContactContactIdAsync() {
            return default(Task<_me_contact.Contact>);
        }
        
        // Path: /me/contact/{contactId}
        private Task<_me_contact.Contact> PutMeContactContactIdAsync() {
            return default(Task<_me_contact.Contact>);
        }
        
        // Path: /me/contact/{contactId}/fields
        private Task<_me_contact.FieldInformation[]> GetMeContactContactIdFieldsAsync() {
            return default(Task<_me_contact.FieldInformation[]>);
        }
        
        // Path: /me/credit/balance
        private Task<System.String[]> GetMeCreditBalanceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/credit/balance/{balanceName}
        private Task<_me_credit.Balance> GetMeCreditBalanceBalanceNameAsync() {
            return default(Task<_me_credit.Balance>);
        }
        
        // Path: /me/credit/balance/{balanceName}/movement
        private Task<System.Int64[]> GetMeCreditBalanceBalanceNameMovementAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/credit/balance/{balanceName}/movement/{movementId}
        private Task<_me_credit_balance.Movement> GetMeCreditBalanceBalanceNameMovementMovementIdAsync() {
            return default(Task<_me_credit_balance.Movement>);
        }
        
        // Path: /me/credit/code
        private Task<_me_credit_balance.Movement> PostMeCreditCodeAsync() {
            return default(Task<_me_credit_balance.Movement>);
        }
        
        // Path: /me/debtAccount
        private Task<_debt.Balance> GetMeDebtAccountAsync() {
            return default(Task<_debt.Balance>);
        }
        
        // Path: /me/debtAccount/debt
        private Task<System.Int64[]> GetMeDebtAccountDebtAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/debtAccount/debt/{debtId}
        private Task<_debt.Debt> GetMeDebtAccountDebtDebtIdAsync() {
            return default(Task<_debt.Debt>);
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation
        private Task<System.Int64[]> GetMeDebtAccountDebtDebtIdOperationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation/{operationId}
        private Task<_debt.Operation> GetMeDebtAccountDebtDebtIdOperationOperationIdAsync() {
            return default(Task<_debt.Operation>);
        }
        
        // Path: /me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject
        private Task<_debt_entry.AssociatedObject> GetMeDebtAccountDebtDebtIdOperationOperationIdAssociatedObjectAsync() {
            return default(Task<_debt_entry.AssociatedObject>);
        }
        
        // Path: /me/debtAccount/debt/{debtId}/pay
        private Task<_billing.Order> PostMeDebtAccountDebtDebtIdPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/debtAccount/pay
        private Task<_billing.Order> PostMeDebtAccountPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/deposit
        private Task<System.String[]> GetMeDepositAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/deposit/{depositId}
        private Task<_billing.Deposit> GetMeDepositDepositIdAsync() {
            return default(Task<_billing.Deposit>);
        }
        
        // Path: /me/deposit/{depositId}/details
        private Task<System.String[]> GetMeDepositDepositIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/deposit/{depositId}/details/{depositDetailId}
        private Task<_billing.DepositDetail> GetMeDepositDepositIdDetailsDepositDetailIdAsync() {
            return default(Task<_billing.DepositDetail>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills
        private Task<System.String[]> GetMeDepositDepositIdPaidBillsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}
        private Task<_billing.Bill> GetMeDepositDepositIdPaidBillsBillIdAsync() {
            return default(Task<_billing.Bill>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt
        private Task<_debt.Debt> GetMeDepositDepositIdPaidBillsBillIdDebtAsync() {
            return default(Task<_debt.Debt>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation
        private Task<System.Int64[]> GetMeDepositDepositIdPaidBillsBillIdDebtOperationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}
        private Task<_debt.Operation> GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAsync() {
            return default(Task<_debt.Operation>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject
        private Task<_debt_entry.AssociatedObject> GetMeDepositDepositIdPaidBillsBillIdDebtOperationOperationIdAssociatedObjectAsync() {
            return default(Task<_debt_entry.AssociatedObject>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/debt/pay
        private Task<_billing.Order> PostMeDepositDepositIdPaidBillsBillIdDebtPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/details
        private Task<System.String[]> GetMeDepositDepositIdPaidBillsBillIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}
        private Task<_billing.BillDetail> GetMeDepositDepositIdPaidBillsBillIdDetailsBillDetailIdAsync() {
            return default(Task<_billing.BillDetail>);
        }
        
        // Path: /me/deposit/{depositId}/paidBills/{billId}/payment
        private Task<_billing.Payment> GetMeDepositDepositIdPaidBillsBillIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/deposit/{depositId}/payment
        private Task<_billing.Payment> GetMeDepositDepositIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/document
        private Task<System.Guid[]> GetMeDocumentAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /me/document
        private Task<_nichandle_document.Document> PostMeDocumentAsync() {
            return default(Task<_nichandle_document.Document>);
        }
        
        // Path: /me/document/cors
        private void PostMeDocumentCorsAsync() {
        }
        
        // Path: /me/document/{id}
        private void DeleteMeDocumentIdAsync() {
        }
        
        // Path: /me/document/{id}
        private Task<_nichandle_document.Document> GetMeDocumentIdAsync() {
            return default(Task<_nichandle_document.Document>);
        }
        
        // Path: /me/document/{id}
        private void PutMeDocumentIdAsync() {
        }
        
        // Path: /me/fax/customDomains
        private Task<System.Int64[]> GetMeFaxCustomDomainsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/fax/customDomains
        private Task<_telephony.MailDomain2Service> PostMeFaxCustomDomainsAsync() {
            return default(Task<_telephony.MailDomain2Service>);
        }
        
        // Path: /me/fax/customDomains/{id}
        private void DeleteMeFaxCustomDomainsIdAsync() {
        }
        
        // Path: /me/fax/customDomains/{id}
        private Task<_telephony.MailDomain2Service> GetMeFaxCustomDomainsIdAsync() {
            return default(Task<_telephony.MailDomain2Service>);
        }
        
        // Path: /me/fidelityAccount
        private Task<_billing.FidelityAccount> GetMeFidelityAccountAsync() {
            return default(Task<_billing.FidelityAccount>);
        }
        
        // Path: /me/fidelityAccount
        private void PutMeFidelityAccountAsync() {
        }
        
        // Path: /me/fidelityAccount/creditOrder
        private Task<_billing.Order> PostMeFidelityAccountCreditOrderAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/fidelityAccount/movements
        private Task<System.Int64[]> GetMeFidelityAccountMovementsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/fidelityAccount/movements/{movementId}
        private Task<_billing.FidelityMovement> GetMeFidelityAccountMovementsMovementIdAsync() {
            return default(Task<_billing.FidelityMovement>);
        }
        
        // Path: /me/geolocation
        private Task<_me_geolocation.ContinentCountryLocation> PostMeGeolocationAsync() {
            return default(Task<_me_geolocation.ContinentCountryLocation>);
        }
        
        // Path: /me/identity/group
        private Task<System.String[]> GetMeIdentityGroupAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/identity/group
        private Task<_auth.Group> PostMeIdentityGroupAsync() {
            return default(Task<_auth.Group>);
        }
        
        // Path: /me/identity/group/{group}
        private void DeleteMeIdentityGroupGroupAsync() {
        }
        
        // Path: /me/identity/group/{group}
        private Task<_auth.Group> GetMeIdentityGroupGroupAsync() {
            return default(Task<_auth.Group>);
        }
        
        // Path: /me/identity/group/{group}
        private void PutMeIdentityGroupGroupAsync() {
        }
        
        // Path: /me/identity/provider
        private void DeleteMeIdentityProviderAsync() {
        }
        
        // Path: /me/identity/provider
        private Task<_auth.Provider> GetMeIdentityProviderAsync() {
            return default(Task<_auth.Provider>);
        }
        
        // Path: /me/identity/provider
        private Task<_auth.Provider> PostMeIdentityProviderAsync() {
            return default(Task<_auth.Provider>);
        }
        
        // Path: /me/identity/provider
        private void PutMeIdentityProviderAsync() {
        }
        
        // Path: /me/identity/user
        private Task<System.String[]> GetMeIdentityUserAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/identity/user
        private void PostMeIdentityUserAsync() {
        }
        
        // Path: /me/identity/user/{user}
        private void DeleteMeIdentityUserUserAsync() {
        }
        
        // Path: /me/identity/user/{user}
        private Task<_auth.User> GetMeIdentityUserUserAsync() {
            return default(Task<_auth.User>);
        }
        
        // Path: /me/identity/user/{user}
        private void PutMeIdentityUserUserAsync() {
        }
        
        // Path: /me/identity/user/{user}/disable
        private void PostMeIdentityUserUserDisableAsync() {
        }
        
        // Path: /me/identity/user/{user}/enable
        private void PostMeIdentityUserUserEnableAsync() {
        }
        
        // Path: /me/incident/sbg/migrateServices
        private Task<_me_incident.ServiceMigration[]> GetMeIncidentSbgMigrateServicesAsync() {
            return default(Task<_me_incident.ServiceMigration[]>);
        }
        
        // Path: /me/incident/sbg/migrateServices
        private Task<_me_incident.Order> PostMeIncidentSbgMigrateServicesAsync() {
            return default(Task<_me_incident.Order>);
        }
        
        // Path: /me/insight
        private Task<_me_insight.Access> GetMeInsightAsync() {
            return default(Task<_me_insight.Access>);
        }
        
        // Path: /me/installationTemplate
        private Task<System.String[]> GetMeInstallationTemplateAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/installationTemplate
        private void PostMeInstallationTemplateAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}
        private void DeleteMeInstallationTemplateTemplateNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}
        private Task<_dedicated_installationTemplate.Templates> GetMeInstallationTemplateTemplateNameAsync() {
            return default(Task<_dedicated_installationTemplate.Templates>);
        }
        
        // Path: /me/installationTemplate/{templateName}
        private void PutMeInstallationTemplateTemplateNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/checkIntegrity
        private void PostMeInstallationTemplateTemplateNameCheckIntegrityAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme
        private Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme
        private void PostMeInstallationTemplateTemplateNamePartitionSchemeAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        private void DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        private Task<_dedicated_installationTemplate.templatePartitioningSchemes> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync() {
            return default(Task<_dedicated_installationTemplate.templatePartitioningSchemes>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}
        private void PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        private Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid
        private void PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        private void DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        private Task<_dedicated_installationTemplate.hardwareRaid> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync() {
            return default(Task<_dedicated_installationTemplate.hardwareRaid>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}
        private void PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        private Task<System.String[]> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition
        private void PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        private void DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync() {
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        private Task<_dedicated_installationTemplate.templatePartitions> GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync() {
            return default(Task<_dedicated_installationTemplate.templatePartitions>);
        }
        
        // Path: /me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}
        private void PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointAsync() {
        }
        
        // Path: /me/ipOrganisation
        private Task<System.String[]> GetMeIpOrganisationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/ipOrganisation
        private void PostMeIpOrganisationAsync() {
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        private void DeleteMeIpOrganisationOrganisationIdAsync() {
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        private Task<_nichandle.Ipv4Org> GetMeIpOrganisationOrganisationIdAsync() {
            return default(Task<_nichandle.Ipv4Org>);
        }
        
        // Path: /me/ipOrganisation/{organisationId}
        private void PutMeIpOrganisationOrganisationIdAsync() {
        }
        
        // Path: /me/logs/audit
        private Task<_audit.Log[]> GetMeLogsAuditAsync() {
            return default(Task<_audit.Log[]>);
        }
        
        // Path: /me/logs/audit/forward
        private Task<_audit_log.ForwardResponse> PostMeLogsAuditForwardAsync() {
            return default(Task<_audit_log.ForwardResponse>);
        }
        
        // Path: /me/mailingList/availableLists
        private Task<System.String[]> GetMeMailingListAvailableListsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/mailingList/subscribe
        private void PostMeMailingListSubscribeAsync() {
        }
        
        // Path: /me/marketing
        private Task<_me_marketing.Consent> GetMeMarketingAsync() {
            return default(Task<_me_marketing.Consent>);
        }
        
        // Path: /me/marketing
        private Task<_me_marketing.Consent> PutMeMarketingAsync() {
            return default(Task<_me_marketing.Consent>);
        }
        
        // Path: /me/migration
        private Task<System.Int64[]> GetMeMigrationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/migration/{migrationId}
        private Task<_me.Migration> GetMeMigrationMigrationIdAsync() {
            return default(Task<_me.Migration>);
        }
        
        // Path: /me/migration/{migrationId}/contract
        private Task<System.Int64[]> GetMeMigrationMigrationIdContractAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}
        private Task<_me_migration.Contract> GetMeMigrationMigrationIdContractContractIdAsync() {
            return default(Task<_me_migration.Contract>);
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}/accept
        private Task<_me_agreements.ContractAgreement> PostMeMigrationMigrationIdContractContractIdAcceptAsync() {
            return default(Task<_me_agreements.ContractAgreement>);
        }
        
        // Path: /me/migration/{migrationId}/contract/{contractId}/agreement
        private Task<_me_agreements.ContractAgreement> GetMeMigrationMigrationIdContractContractIdAgreementAsync() {
            return default(Task<_me_agreements.ContractAgreement>);
        }
        
        // Path: /me/notification/email/history
        private Task<System.Int64[]> GetMeNotificationEmailHistoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/notification/email/history/{id}
        private Task<_nichandle.EmailNotification> GetMeNotificationEmailHistoryIdAsync() {
            return default(Task<_nichandle.EmailNotification>);
        }
        
        // Path: /me/order
        private Task<System.Int64[]> GetMeOrderAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/order/{orderId}
        private Task<_billing.Order> GetMeOrderOrderIdAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/order/{orderId}/associatedObject
        private Task<_billing_order.AssociatedObject> GetMeOrderOrderIdAssociatedObjectAsync() {
            return default(Task<_billing_order.AssociatedObject>);
        }
        
        // Path: /me/order/{orderId}/availableRegisteredPaymentMean
        private Task<_billing_order.RegisteredPaymentMean[]> GetMeOrderOrderIdAvailableRegisteredPaymentMeanAsync() {
            return default(Task<_billing_order.RegisteredPaymentMean[]>);
        }
        
        // Path: /me/order/{orderId}/balance
        private Task<System.String[]> GetMeOrderOrderIdBalanceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/order/{orderId}/balance
        private Task<_billing.CreditBalance> PostMeOrderOrderIdBalanceAsync() {
            return default(Task<_billing.CreditBalance>);
        }
        
        // Path: /me/order/{orderId}/balance/{balanceName}
        private void DeleteMeOrderOrderIdBalanceBalanceNameAsync() {
        }
        
        // Path: /me/order/{orderId}/balance/{balanceName}
        private Task<_billing.CreditBalance> GetMeOrderOrderIdBalanceBalanceNameAsync() {
            return default(Task<_billing.CreditBalance>);
        }
        
        // Path: /me/order/{orderId}/consumption/details
        private Task<_billing_order.ConsumptionDetails> GetMeOrderOrderIdConsumptionDetailsAsync() {
            return default(Task<_billing_order.ConsumptionDetails>);
        }
        
        // Path: /me/order/{orderId}/debt
        private Task<_debt.Debt> GetMeOrderOrderIdDebtAsync() {
            return default(Task<_debt.Debt>);
        }
        
        // Path: /me/order/{orderId}/debt/operation
        private Task<System.Int64[]> GetMeOrderOrderIdDebtOperationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/order/{orderId}/debt/operation/{operationId}
        private Task<_debt.Operation> GetMeOrderOrderIdDebtOperationOperationIdAsync() {
            return default(Task<_debt.Operation>);
        }
        
        // Path: /me/order/{orderId}/debt/operation/{operationId}/associatedObject
        private Task<_debt_entry.AssociatedObject> GetMeOrderOrderIdDebtOperationOperationIdAssociatedObjectAsync() {
            return default(Task<_debt_entry.AssociatedObject>);
        }
        
        // Path: /me/order/{orderId}/debt/pay
        private Task<_billing.Order> PostMeOrderOrderIdDebtPayAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/order/{orderId}/details
        private Task<System.Int64[]> GetMeOrderOrderIdDetailsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/order/{orderId}/details/{orderDetailId}
        private Task<_billing.OrderDetail> GetMeOrderOrderIdDetailsOrderDetailIdAsync() {
            return default(Task<_billing.OrderDetail>);
        }
        
        // Path: /me/order/{orderId}/details/{orderDetailId}/extension
        private Task<_billing.ItemDetail> GetMeOrderOrderIdDetailsOrderDetailIdExtensionAsync() {
            return default(Task<_billing.ItemDetail>);
        }
        
        // Path: /me/order/{orderId}/followUp
        private Task<_billing_order.FollowUp[]> GetMeOrderOrderIdFollowUpAsync() {
            return default(Task<_billing_order.FollowUp[]>);
        }
        
        // Path: /me/order/{orderId}/pay
        private void PostMeOrderOrderIdPayAsync() {
        }
        
        // Path: /me/order/{orderId}/payWithRegisteredPaymentMean
        private void PostMeOrderOrderIdPayWithRegisteredPaymentMeanAsync() {
        }
        
        // Path: /me/order/{orderId}/payment
        private Task<_billing.Payment> GetMeOrderOrderIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/order/{orderId}/paymentMeans
        private Task<_billing_order.PaymentMeans> GetMeOrderOrderIdPaymentMeansAsync() {
            return default(Task<_billing_order.PaymentMeans>);
        }
        
        // Path: /me/order/{orderId}/paymentMethods
        private Task<_billing_order.PaymentMethods> GetMeOrderOrderIdPaymentMethodsAsync() {
            return default(Task<_billing_order.PaymentMethods>);
        }
        
        // Path: /me/order/{orderId}/retraction
        private void PostMeOrderOrderIdRetractionAsync() {
        }
        
        // Path: /me/order/{orderId}/status
        private Task<_billing_order.OrderStatusEnum> GetMeOrderOrderIdStatusAsync() {
            return default(Task<_billing_order.OrderStatusEnum>);
        }
        
        // Path: /me/order/{orderId}/waiveRetraction
        private void PostMeOrderOrderIdWaiveRetractionAsync() {
        }
        
        // Path: /me/ovhAccount
        private Task<System.String[]> GetMeOvhAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}
        private Task<_billing.OvhAccount> GetMeOvhAccountOvhAccountIdAsync() {
            return default(Task<_billing.OvhAccount>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}
        private void PutMeOvhAccountOvhAccountIdAsync() {
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/creditOrder
        private Task<_billing.Order> PostMeOvhAccountOvhAccountIdCreditOrderAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements
        private Task<System.Int64[]> GetMeOvhAccountOvhAccountIdMovementsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements/{movementId}
        private Task<_billing.Movement> GetMeOvhAccountOvhAccountIdMovementsMovementIdAsync() {
            return default(Task<_billing.Movement>);
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund
        private void PostMeOvhAccountOvhAccountIdMovementsMovementIdRequestRefundAsync() {
        }
        
        // Path: /me/ovhAccount/{ovhAccountId}/retrieveMoney
        private Task<_billing.Order> PostMeOvhAccountOvhAccountIdRetrieveMoneyAsync() {
            return default(Task<_billing.Order>);
        }
        
        // Path: /me/partnerLevel
        private Task<_me_partnerLevel.Level> GetMePartnerLevelAsync() {
            return default(Task<_me_partnerLevel.Level>);
        }
        
        // Path: /me/passwordRecover
        private void PostMePasswordRecoverAsync() {
        }
        
        // Path: /me/payment/availableMethods
        private Task<_me_payment.AvailablePaymentMethod[]> GetMePaymentAvailableMethodsAsync() {
            return default(Task<_me_payment.AvailablePaymentMethod[]>);
        }
        
        // Path: /me/payment/method
        private Task<System.Int64[]> GetMePaymentMethodAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/payment/method
        private Task<_me_payment_method.Validation> PostMePaymentMethodAsync() {
            return default(Task<_me_payment_method.Validation>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        private Task<_me_payment.PaymentMethod> DeleteMePaymentMethodPaymentMethodIdAsync() {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        private Task<_me_payment.PaymentMethod> GetMePaymentMethodPaymentMethodIdAsync() {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}
        private Task<_me_payment.PaymentMethod> PutMePaymentMethodPaymentMethodIdAsync() {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}/challenge
        private void PostMePaymentMethodPaymentMethodIdChallengeAsync() {
        }
        
        // Path: /me/payment/method/{paymentMethodId}/details
        private Task<_me_payment_method.Validation> PostMePaymentMethodPaymentMethodIdDetailsAsync() {
            return default(Task<_me_payment_method.Validation>);
        }
        
        // Path: /me/payment/method/{paymentMethodId}/finalize
        private Task<_me_payment.PaymentMethod> PostMePaymentMethodPaymentMethodIdFinalizeAsync() {
            return default(Task<_me_payment.PaymentMethod>);
        }
        
        // Path: /me/payment/transaction
        private Task<System.Int64[]> GetMePaymentTransactionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/payment/transaction/{transactionId}
        private Task<_me_payment.Transaction> GetMePaymentTransactionTransactionIdAsync() {
            return default(Task<_me_payment.Transaction>);
        }
        
        // Path: /me/paymentMean/bankAccount
        private Task<System.Int64[]> GetMePaymentMeanBankAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/paymentMean/bankAccount
        private Task<_me_paymentMean.BankAccountValidation> PostMePaymentMeanBankAccountAsync() {
            return default(Task<_me_paymentMean.BankAccountValidation>);
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        private void DeleteMePaymentMeanBankAccountIdAsync() {
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        private Task<_me_paymentMean.BankAccount> GetMePaymentMeanBankAccountIdAsync() {
            return default(Task<_me_paymentMean.BankAccount>);
        }
        
        // Path: /me/paymentMean/bankAccount/{id}
        private void PutMePaymentMeanBankAccountIdAsync() {
        }
        
        // Path: /me/paymentMean/bankAccount/{id}/challenge
        private void PostMePaymentMeanBankAccountIdChallengeAsync() {
        }
        
        // Path: /me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean
        private void PostMePaymentMeanBankAccountIdChooseAsDefaultPaymentMeanAsync() {
        }
        
        // Path: /me/paymentMean/creditCard
        private Task<System.Int64[]> GetMePaymentMeanCreditCardAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/paymentMean/creditCard
        private Task<_me_paymentMean.CreditCardValidation> PostMePaymentMeanCreditCardAsync() {
            return default(Task<_me_paymentMean.CreditCardValidation>);
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        private void DeleteMePaymentMeanCreditCardIdAsync() {
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        private Task<_me_paymentMean.CreditCard> GetMePaymentMeanCreditCardIdAsync() {
            return default(Task<_me_paymentMean.CreditCard>);
        }
        
        // Path: /me/paymentMean/creditCard/{id}
        private void PutMePaymentMeanCreditCardIdAsync() {
        }
        
        // Path: /me/paymentMean/creditCard/{id}/challenge
        private void PostMePaymentMeanCreditCardIdChallengeAsync() {
        }
        
        // Path: /me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean
        private void PostMePaymentMeanCreditCardIdChooseAsDefaultPaymentMeanAsync() {
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount
        private Task<System.Int64[]> GetMePaymentMeanDeferredPaymentAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}
        private Task<_me_paymentMean.Deferred> GetMePaymentMeanDeferredPaymentAccountIdAsync() {
            return default(Task<_me_paymentMean.Deferred>);
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}
        private void PutMePaymentMeanDeferredPaymentAccountIdAsync() {
        }
        
        // Path: /me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean
        private void PostMePaymentMeanDeferredPaymentAccountIdChooseAsDefaultPaymentMeanAsync() {
        }
        
        // Path: /me/paymentMean/paypal
        private Task<System.Int64[]> GetMePaymentMeanPaypalAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/paymentMean/paypal
        private Task<_me_paymentMean.PaypalValidation> PostMePaymentMeanPaypalAsync() {
            return default(Task<_me_paymentMean.PaypalValidation>);
        }
        
        // Path: /me/paymentMean/paypal/{id}
        private void DeleteMePaymentMeanPaypalIdAsync() {
        }
        
        // Path: /me/paymentMean/paypal/{id}
        private Task<_me_paymentMean.Paypal> GetMePaymentMeanPaypalIdAsync() {
            return default(Task<_me_paymentMean.Paypal>);
        }
        
        // Path: /me/paymentMean/paypal/{id}
        private void PutMePaymentMeanPaypalIdAsync() {
        }
        
        // Path: /me/paymentMean/paypal/{id}/challenge
        private void PostMePaymentMeanPaypalIdChallengeAsync() {
        }
        
        // Path: /me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean
        private void PostMePaymentMeanPaypalIdChooseAsDefaultPaymentMeanAsync() {
        }
        
        // Path: /me/recommendations
        private Task<_recommendations.Recommendations> GetMeRecommendationsAsync() {
            return default(Task<_recommendations.Recommendations>);
        }
        
        // Path: /me/refund
        private Task<System.String[]> GetMeRefundAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/refund/export
        private void PostMeRefundExportAsync() {
        }
        
        // Path: /me/refund/{refundId}
        private Task<_billing.Refund> GetMeRefundRefundIdAsync() {
            return default(Task<_billing.Refund>);
        }
        
        // Path: /me/refund/{refundId}/details
        private Task<System.String[]> GetMeRefundRefundIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/refund/{refundId}/details/{refundDetailId}
        private Task<_billing.RefundDetail> GetMeRefundRefundIdDetailsRefundDetailIdAsync() {
            return default(Task<_billing.RefundDetail>);
        }
        
        // Path: /me/refund/{refundId}/payment
        private Task<_billing.Payment> GetMeRefundRefundIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/reverseBill
        private Task<System.String[]> GetMeReverseBillAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/reverseBill/{reverseBillId}
        private Task<_billing.ReverseBill> GetMeReverseBillReverseBillIdAsync() {
            return default(Task<_billing.ReverseBill>);
        }
        
        // Path: /me/reverseBill/{reverseBillId}/details
        private Task<System.String[]> GetMeReverseBillReverseBillIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}
        private Task<_billing.ReversableBillDetail> GetMeReverseBillReverseBillIdDetailsReverseBillDetailIdAsync() {
            return default(Task<_billing.ReversableBillDetail>);
        }
        
        // Path: /me/reverseBill/{reverseBillId}/payment
        private Task<_billing.Payment> GetMeReverseBillReverseBillIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/sla
        private Task<System.Int64[]> GetMeSlaAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/sla/{id}
        private Task<_billing.SlaOperation> GetMeSlaIdAsync() {
            return default(Task<_billing.SlaOperation>);
        }
        
        // Path: /me/sla/{id}/apply
        private void PostMeSlaIdApplyAsync() {
        }
        
        // Path: /me/sla/{id}/canBeApplied
        private Task<System.Boolean> GetMeSlaIdCanBeAppliedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /me/sla/{id}/services
        private Task<_billing.SlaOperationService[]> GetMeSlaIdServicesAsync() {
            return default(Task<_billing.SlaOperationService[]>);
        }
        
        // Path: /me/sla/{id}/status
        private Task<System.String> GetMeSlaIdStatusAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /me/sshKey
        private Task<System.String[]> GetMeSshKeyAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/sshKey
        private void PostMeSshKeyAsync() {
        }
        
        // Path: /me/sshKey/{keyName}
        private void DeleteMeSshKeyKeyNameAsync() {
        }
        
        // Path: /me/sshKey/{keyName}
        private Task<_nichandle.sshKey> GetMeSshKeyKeyNameAsync() {
            return default(Task<_nichandle.sshKey>);
        }
        
        // Path: /me/subAccount
        private Task<System.Int64[]> GetMeSubAccountAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/subAccount
        private Task<System.Int64> PostMeSubAccountAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /me/subAccount/{id}
        private Task<_nichandle.SubAccount> GetMeSubAccountIdAsync() {
            return default(Task<_nichandle.SubAccount>);
        }
        
        // Path: /me/subAccount/{id}
        private void PutMeSubAccountIdAsync() {
        }
        
        // Path: /me/subAccount/{id}/createConsumerKey
        private Task<_nichandle.SubAccountConsumerKey> PostMeSubAccountIdCreateConsumerKeyAsync() {
            return default(Task<_nichandle.SubAccountConsumerKey>);
        }
        
        // Path: /me/subscription
        private Task<System.String[]> GetMeSubscriptionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/subscription/{subscriptionType}
        private Task<_nichandle.Subscription> GetMeSubscriptionSubscriptionTypeAsync() {
            return default(Task<_nichandle.Subscription>);
        }
        
        // Path: /me/subscription/{subscriptionType}
        private void PutMeSubscriptionSubscriptionTypeAsync() {
        }
        
        // Path: /me/supportLevel
        private Task<_me_SupportLevel.Level> GetMeSupportLevelAsync() {
            return default(Task<_me_SupportLevel.Level>);
        }
        
        // Path: /me/tag
        private Task<System.String[]> GetMeTagAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/tag
        private Task<_me_tag.Tag> PostMeTagAsync() {
            return default(Task<_me_tag.Tag>);
        }
        
        // Path: /me/tag/available
        private Task<_me_tag.AvailableTag[]> GetMeTagAvailableAsync() {
            return default(Task<_me_tag.AvailableTag[]>);
        }
        
        // Path: /me/tag/{tag}
        private Task<_me_tag.Tag> DeleteMeTagTagAsync() {
            return default(Task<_me_tag.Tag>);
        }
        
        // Path: /me/tag/{tag}
        private Task<_me_tag.Tag> GetMeTagTagAsync() {
            return default(Task<_me_tag.Tag>);
        }
        
        // Path: /me/task/contactChange
        private Task<System.Int64[]> GetMeTaskContactChangeAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/task/contactChange/{id}
        private Task<_nichandle_contactChange.Task> GetMeTaskContactChangeIdAsync() {
            return default(Task<_nichandle_contactChange.Task>);
        }
        
        // Path: /me/task/contactChange/{id}/accept
        private void PostMeTaskContactChangeIdAcceptAsync() {
        }
        
        // Path: /me/task/contactChange/{id}/refuse
        private void PostMeTaskContactChangeIdRefuseAsync() {
        }
        
        // Path: /me/task/contactChange/{id}/resendEmail
        private void PostMeTaskContactChangeIdResendEmailAsync() {
        }
        
        // Path: /me/task/dns
        private Task<System.Int64[]> GetMeTaskDnsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/task/dns/{id}
        private Task<_me_dns.Task> GetMeTaskDnsIdAsync() {
            return default(Task<_me_dns.Task>);
        }
        
        // Path: /me/task/dns/{id}/accelerate
        private void PostMeTaskDnsIdAccelerateAsync() {
        }
        
        // Path: /me/task/dns/{id}/cancel
        private void PostMeTaskDnsIdCancelAsync() {
        }
        
        // Path: /me/task/dns/{id}/relaunch
        private void PostMeTaskDnsIdRelaunchAsync() {
        }
        
        // Path: /me/task/domain
        private Task<System.Int64[]> GetMeTaskDomainAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/task/domain/{id}
        private Task<_domain.Task> GetMeTaskDomainIdAsync() {
            return default(Task<_domain.Task>);
        }
        
        // Path: /me/task/domain/{id}/accelerate
        private void PostMeTaskDomainIdAccelerateAsync() {
        }
        
        // Path: /me/task/domain/{id}/argument
        private Task<System.String[]> GetMeTaskDomainIdArgumentAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/task/domain/{id}/argument/{key}
        private Task<_nichandle.DomainTaskArgument> GetMeTaskDomainIdArgumentKeyAsync() {
            return default(Task<_nichandle.DomainTaskArgument>);
        }
        
        // Path: /me/task/domain/{id}/argument/{key}
        private void PutMeTaskDomainIdArgumentKeyAsync() {
        }
        
        // Path: /me/task/domain/{id}/cancel
        private void PostMeTaskDomainIdCancelAsync() {
        }
        
        // Path: /me/task/domain/{id}/progressbar
        private Task<_nichandle.DomainTaskProgressBar> GetMeTaskDomainIdProgressbarAsync() {
            return default(Task<_nichandle.DomainTaskProgressBar>);
        }
        
        // Path: /me/task/domain/{id}/relaunch
        private void PostMeTaskDomainIdRelaunchAsync() {
        }
        
        // Path: /me/task/emailChange
        private Task<System.Int64[]> GetMeTaskEmailChangeAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/task/emailChange/{id}
        private Task<_nichandle_emailChange.Task> GetMeTaskEmailChangeIdAsync() {
            return default(Task<_nichandle_emailChange.Task>);
        }
        
        // Path: /me/task/emailChange/{id}/accept
        private void PostMeTaskEmailChangeIdAcceptAsync() {
        }
        
        // Path: /me/task/emailChange/{id}/refuse
        private void PostMeTaskEmailChangeIdRefuseAsync() {
        }
        
        // Path: /me/telephony/defaultIpRestriction
        private Task<System.Int64[]> GetMeTelephonyDefaultIpRestrictionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /me/telephony/defaultIpRestriction
        private Task<_telephony.DefaultIpRestriction> PostMeTelephonyDefaultIpRestrictionAsync() {
            return default(Task<_telephony.DefaultIpRestriction>);
        }
        
        // Path: /me/telephony/defaultIpRestriction/{id}
        private void DeleteMeTelephonyDefaultIpRestrictionIdAsync() {
        }
        
        // Path: /me/telephony/defaultIpRestriction/{id}
        private Task<_telephony.DefaultIpRestriction> GetMeTelephonyDefaultIpRestrictionIdAsync() {
            return default(Task<_telephony.DefaultIpRestriction>);
        }
        
        // Path: /me/telephony/settings
        private Task<_telephony.Settings> GetMeTelephonySettingsAsync() {
            return default(Task<_telephony.Settings>);
        }
        
        // Path: /me/telephony/settings
        private void PostMeTelephonySettingsAsync() {
        }
        
        // Path: /me/vipStatus
        private Task<_nichandle.VipStatus> GetMeVipStatusAsync() {
            return default(Task<_nichandle.VipStatus>);
        }
        
        // Path: /me/voucher/checkValidity
        private Task<_nichandle.VoucherStatus> PostMeVoucherCheckValidityAsync() {
            return default(Task<_nichandle.VoucherStatus>);
        }
        
        // Path: /me/withdrawal
        private Task<System.String[]> GetMeWithdrawalAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/withdrawal/{withdrawalId}
        private Task<_billing.Withdrawal> GetMeWithdrawalWithdrawalIdAsync() {
            return default(Task<_billing.Withdrawal>);
        }
        
        // Path: /me/withdrawal/{withdrawalId}/details
        private Task<System.String[]> GetMeWithdrawalWithdrawalIdDetailsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}
        private Task<_billing.WithdrawalDetail> GetMeWithdrawalWithdrawalIdDetailsWithdrawalDetailIdAsync() {
            return default(Task<_billing.WithdrawalDetail>);
        }
        
        // Path: /me/withdrawal/{withdrawalId}/payment
        private Task<_billing.Payment> GetMeWithdrawalWithdrawalIdPaymentAsync() {
            return default(Task<_billing.Payment>);
        }
        
        // Path: /me/xdsl/setting
        private Task<_xdsl.Setting> GetMeXdslSettingAsync() {
            return default(Task<_xdsl.Setting>);
        }
        
        // Path: /me/xdsl/setting
        private void PostMeXdslSettingAsync() {
        }
        
        // Path: /metrics
        private Task<System.String[]> GetMetricsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /metrics/{serviceName}
        private Task<_metrics_api.ServiceWithIAM> GetMetricsServiceNameAsync() {
            return default(Task<_metrics_api.ServiceWithIAM>);
        }
        
        // Path: /metrics/{serviceName}
        private Task<_metrics_api.Service> PutMetricsServiceNameAsync() {
            return default(Task<_metrics_api.Service>);
        }
        
        // Path: /metrics/{serviceName}/changeContact
        private Task<System.Int64[]> PostMetricsServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /metrics/{serviceName}/confirmTermination
        private Task<System.String> PostMetricsServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/consumption
        private Task<_metrics_api.Consumption> GetMetricsServiceNameConsumptionAsync() {
            return default(Task<_metrics_api.Consumption>);
        }
        
        // Path: /metrics/{serviceName}/lookup/token
        private Task<System.String[]> PostMetricsServiceNameLookupTokenAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /metrics/{serviceName}/quota
        private Task<System.String> PutMetricsServiceNameQuotaAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/serviceInfos
        private Task<_services.Service> GetMetricsServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /metrics/{serviceName}/serviceInfos
        private void PutMetricsServiceNameServiceInfosAsync() {
        }
        
        // Path: /metrics/{serviceName}/terminate
        private Task<System.String> PostMetricsServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /metrics/{serviceName}/token
        private Task<System.String[]> GetMetricsServiceNameTokenAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /metrics/{serviceName}/token
        private Task<_metrics_api.Token> PostMetricsServiceNameTokenAsync() {
            return default(Task<_metrics_api.Token>);
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        private void DeleteMetricsServiceNameTokenTokenIdAsync() {
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        private Task<_metrics_api.Token> GetMetricsServiceNameTokenTokenIdAsync() {
            return default(Task<_metrics_api.Token>);
        }
        
        // Path: /metrics/{serviceName}/token/{tokenId}
        private Task<_metrics_api.Token> PutMetricsServiceNameTokenTokenIdAsync() {
            return default(Task<_metrics_api.Token>);
        }
        
        // Path: /msServices
        private Task<System.String[]> GetMsServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /msServices/sharepoint
        private Task<System.String[]> GetMsServicesSharepointAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /msServices/sharepoint/{domain}
        private Task<_msServices.SharepointServiceInfoWithIAM> GetMsServicesSharepointDomainAsync() {
            return default(Task<_msServices.SharepointServiceInfoWithIAM>);
        }
        
        // Path: /msServices/sharepoint/{domain}/serviceInfos
        private Task<_services.Service> GetMsServicesSharepointDomainServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /msServices/sharepoint/{domain}/serviceInfos
        private void PutMsServicesSharepointDomainServiceInfosAsync() {
        }
        
        // Path: /msServices/{serviceName}
        private Task<_msServices.ActiveDirectoryOrganizationalUnitWithIAM> GetMsServicesServiceNameAsync() {
            return default(Task<_msServices.ActiveDirectoryOrganizationalUnitWithIAM>);
        }
        
        // Path: /msServices/{serviceName}
        private void PutMsServicesServiceNameAsync() {
        }
        
        // Path: /msServices/{serviceName}/account
        private Task<System.String[]> GetMsServicesServiceNameAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}
        private Task<_msServices.Account> GetMsServicesServiceNameAccountUserPrincipalNameAsync() {
            return default(Task<_msServices.Account>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}
        private void PutMsServicesServiceNameAccountUserPrincipalNameAsync() {
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/changePassword
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameChangePasswordAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange
        private Task<_msServices.ExchangeInformation> GetMsServicesServiceNameAccountUserPrincipalNameExchangeAsync() {
            return default(Task<_msServices.ExchangeInformation>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange
        private void PutMsServicesServiceNameAccountUserPrincipalNameExchangeAsync() {
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/exchange/configure
        private Task<_msServices.exchangeTask> PostMsServicesServiceNameAccountUserPrincipalNameExchangeConfigureAsync() {
            return default(Task<_msServices.exchangeTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        private Task<_msServices.Task> DeleteMsServicesServiceNameAccountUserPrincipalNameMfaAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        private Task<_msServices.MfaInformation> GetMsServicesServiceNameAccountUserPrincipalNameMfaAsync() {
            return default(Task<_msServices.MfaInformation>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/disable
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaDisableAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/enable
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaEnableAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/mfa/reset
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameMfaResetAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        private Task<_msServices.SharepointInformation> GetMsServicesServiceNameAccountUserPrincipalNameSharepointAsync() {
            return default(Task<_msServices.SharepointInformation>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint
        private void PutMsServicesServiceNameAccountUserPrincipalNameSharepointAsync() {
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint/clearSpace
        private Task<_msServices.sharepointTask> PostMsServicesServiceNameAccountUserPrincipalNameSharepointClearSpaceAsync() {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sharepoint/configure
        private Task<_msServices.sharepointTask> PostMsServicesServiceNameAccountUserPrincipalNameSharepointConfigureAsync() {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        private Task<_msServices.Task> DeleteMsServicesServiceNameAccountUserPrincipalNameSyncAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        private Task<_msServices.SyncInformation> GetMsServicesServiceNameAccountUserPrincipalNameSyncAsync() {
            return default(Task<_msServices.SyncInformation>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameSyncAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/account/{userPrincipalName}/sync/configure
        private Task<_msServices.Task> PostMsServicesServiceNameAccountUserPrincipalNameSyncConfigureAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/changeContact
        private Task<System.Int64[]> PostMsServicesServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /msServices/{serviceName}/createMfaOnAllUsers
        private Task<_msServices.Task> PostMsServicesServiceNameCreateMfaOnAllUsersAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/exchange
        private Task<_msServices.ExchangeService> GetMsServicesServiceNameExchangeAsync() {
            return default(Task<_msServices.ExchangeService>);
        }
        
        // Path: /msServices/{serviceName}/exchange
        private void PutMsServicesServiceNameExchangeAsync() {
        }
        
        // Path: /msServices/{serviceName}/exchange/billingMigrated
        private Task<System.Boolean> GetMsServicesServiceNameExchangeBillingMigratedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /msServices/{serviceName}/exchange/task
        private Task<System.Int64[]> GetMsServicesServiceNameExchangeTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /msServices/{serviceName}/exchange/task/{id}
        private Task<_msServices.exchangeTask> GetMsServicesServiceNameExchangeTaskIdAsync() {
            return default(Task<_msServices.exchangeTask>);
        }
        
        // Path: /msServices/{serviceName}/removeMfaOnAllUsers
        private Task<_msServices.Task> PostMsServicesServiceNameRemoveMfaOnAllUsersAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint
        private Task<_msServices.SharepointService> GetMsServicesServiceNameSharepointAsync() {
            return default(Task<_msServices.SharepointService>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint
        private void PutMsServicesServiceNameSharepointAsync() {
        }
        
        // Path: /msServices/{serviceName}/sharepoint/billingMigrated
        private Task<System.Boolean> GetMsServicesServiceNameSharepointBillingMigratedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint/license
        private Task<_msServices.SharepointDailyLicense[]> GetMsServicesServiceNameSharepointLicenseAsync() {
            return default(Task<_msServices.SharepointDailyLicense[]>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint/restoreAdminRights
        private Task<_msServices.sharepointTask> PostMsServicesServiceNameSharepointRestoreAdminRightsAsync() {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint/task
        private Task<System.Int64[]> GetMsServicesServiceNameSharepointTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /msServices/{serviceName}/sharepoint/task/{id}
        private Task<_msServices.sharepointTask> GetMsServicesServiceNameSharepointTaskIdAsync() {
            return default(Task<_msServices.sharepointTask>);
        }
        
        // Path: /msServices/{serviceName}/sync
        private Task<_msServices.Task> DeleteMsServicesServiceNameSyncAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync
        private Task<_msServices.SyncService> GetMsServicesServiceNameSyncAsync() {
            return default(Task<_msServices.SyncService>);
        }
        
        // Path: /msServices/{serviceName}/sync/changePassword
        private Task<_msServices.Task> PostMsServicesServiceNameSyncChangePasswordAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync/clientSoftwareURL
        private Task<_msServices.ActiveDirectorySyncClientUrl> GetMsServicesServiceNameSyncClientSoftwareURLAsync() {
            return default(Task<_msServices.ActiveDirectorySyncClientUrl>);
        }
        
        // Path: /msServices/{serviceName}/sync/clientSoftwareURL
        private Task<_msServices.Task> PostMsServicesServiceNameSyncClientSoftwareURLAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/sync/license
        private Task<_msServices.SyncDailyLicense[]> GetMsServicesServiceNameSyncLicenseAsync() {
            return default(Task<_msServices.SyncDailyLicense[]>);
        }
        
        // Path: /msServices/{serviceName}/task
        private Task<System.Int64[]> GetMsServicesServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /msServices/{serviceName}/task/{id}
        private Task<_msServices.Task> GetMsServicesServiceNameTaskIdAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix
        private Task<System.String[]> GetMsServicesServiceNameUpnSuffixAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix
        private Task<_msServices.Task> PostMsServicesServiceNameUpnSuffixAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix/{suffix}
        private Task<_msServices.Task> DeleteMsServicesServiceNameUpnSuffixSuffixAsync() {
            return default(Task<_msServices.Task>);
        }
        
        // Path: /msServices/{serviceName}/upnSuffix/{suffix}
        private Task<_msServices.upnSuffix> GetMsServicesServiceNameUpnSuffixSuffixAsync() {
            return default(Task<_msServices.upnSuffix>);
        }
        
        // Path: /newAccount
        private Task<_nichandle.NewAccountAndToken> PostNewAccountAsync() {
            return default(Task<_nichandle.NewAccountAndToken>);
        }
        
        // Path: /newAccount/area
        private Task<System.String[]> GetNewAccountAreaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /newAccount/contracts
        private Task<_order.Contract[]> GetNewAccountContractsAsync() {
            return default(Task<_order.Contract[]>);
        }
        
        // Path: /newAccount/corporationType
        private Task<System.String[]> GetNewAccountCorporationTypeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /newAccount/countries
        private Task<_nichandle.CountryEnum[]> GetNewAccountCountriesAsync() {
            return default(Task<_nichandle.CountryEnum[]>);
        }
        
        // Path: /newAccount/creationRules
        private Task<_nichandle.CreationRules> GetNewAccountCreationRulesAsync() {
            return default(Task<_nichandle.CreationRules>);
        }
        
        // Path: /newAccount/legalform
        private Task<System.String[]> GetNewAccountLegalformAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /newAccount/rules
        private Task<_nichandle.CreationRule[]> PostNewAccountRulesAsync() {
            return default(Task<_nichandle.CreationRule[]>);
        }
        
        // Path: /nutanix
        private Task<System.String[]> GetNutanixAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /nutanix/availabilities
        private Task<_nutanix.availability[]> GetNutanixAvailabilitiesAsync() {
            return default(Task<_nutanix.availability[]>);
        }
        
        // Path: /nutanix/availabilities/raw
        private Task<_nutanix.AvailabilitiesRaw[]> GetNutanixAvailabilitiesRawAsync() {
            return default(Task<_nutanix.AvailabilitiesRaw[]>);
        }
        
        // Path: /nutanix/availableVersions
        private Task<System.String[]> GetNutanixAvailableVersionsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /nutanix/requirements
        private Task<_nutanix.Requirements> GetNutanixRequirementsAsync() {
            return default(Task<_nutanix.Requirements>);
        }
        
        // Path: /nutanix/{serviceName}
        private Task<_nutanix.stateWithIAM> GetNutanixServiceNameAsync() {
            return default(Task<_nutanix.stateWithIAM>);
        }
        
        // Path: /nutanix/{serviceName}
        private Task<_nutanix.state> PutNutanixServiceNameAsync() {
            return default(Task<_nutanix.state>);
        }
        
        // Path: /nutanix/{serviceName}/changeContact
        private Task<System.Int64[]> PostNutanixServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /nutanix/{serviceName}/confirmTermination
        private Task<System.String> PostNutanixServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /nutanix/{serviceName}/serviceInfos
        private Task<_services.Service> GetNutanixServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /nutanix/{serviceName}/serviceInfos
        private void PutNutanixServiceNameServiceInfosAsync() {
        }
        
        // Path: /nutanix/{serviceName}/terminate
        private Task<System.String> PostNutanixServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /order/cart
        private Task<System.String[]> GetOrderCartAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cart
        private Task<_order_cart.Cart> PostOrderCartAsync() {
            return default(Task<_order_cart.Cart>);
        }
        
        // Path: /order/cart/{cartId}
        private void DeleteOrderCartCartIdAsync() {
        }
        
        // Path: /order/cart/{cartId}
        private Task<_order_cart.Cart> GetOrderCartCartIdAsync() {
            return default(Task<_order_cart.Cart>);
        }
        
        // Path: /order/cart/{cartId}
        private Task<_order_cart.Cart> PutOrderCartCartIdAsync() {
            return default(Task<_order_cart.Cart>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesHostingWebAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesHostingWebAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesHostingWebOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesHostingWeb/options
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesHostingWebOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesPublicCloudAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesPublicCloudAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesPublicCloud/options
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesPublicCloudOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAdvisoryServicesTelecomAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesTelecomAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAdvisoryServicesTelecomOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/advisoryServicesTelecom/options
        private Task<_order_cart.Item> PostOrderCartCartIdAdvisoryServicesTelecomOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/analytics
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdAnalyticsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/analytics
        private Task<_order_cart.Item> PostOrderCartCartIdAnalyticsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/analytics/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdAnalyticsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/analytics/options
        private Task<_order_cart.Item> PostOrderCartCartIdAnalyticsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/assign
        private void PostOrderCartCartIdAssignAsync() {
        }
        
        // Path: /order/cart/{cartId}/baremetalServers
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdBaremetalServersAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/baremetalServers
        private Task<_order_cart.Item> PostOrderCartCartIdBaremetalServersAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/baremetalServers/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdBaremetalServersOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/baremetalServers/options
        private Task<_order_cart.Item> PostOrderCartCartIdBaremetalServersOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/bringYourOwnIp
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdBringYourOwnIpAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/bringYourOwnIp
        private Task<_order_cart.Item> PostOrderCartCartIdBringYourOwnIpAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cdn
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCdnAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cdn
        private Task<_order_cart.Item> PostOrderCartCartIdCdnAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cdn/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCdnOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cdn/options
        private Task<_order_cart.Item> PostOrderCartCartIdCdnOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cephaas
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCephaasAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cephaas
        private Task<_order_cart.Item> PostOrderCartCartIdCephaasAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cephaas/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCephaasOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cephaas/options
        private Task<_order_cart.Item> PostOrderCartCartIdCephaasOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/checkout
        private Task<_order.Order> GetOrderCartCartIdCheckoutAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cart/{cartId}/checkout
        private Task<_order.Order> PostOrderCartCartIdCheckoutAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cart/{cartId}/cloud
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cloud
        private Task<_order_cart.Item> PostOrderCartCartIdCloudAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloud/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCloudOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cloud/options
        private Task<_order_cart.Item> PostOrderCartCartIdCloudOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudDB
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudDBAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cloudDB
        private Task<_order_cart.Item> PostOrderCartCartIdCloudDBAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCloudwebAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb
        private Task<_order_cart.Item> PostOrderCartCartIdCloudwebAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCloudwebOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/cloudweb/options
        private Task<_order_cart.Item> PostOrderCartCartIdCloudwebOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/coupon
        private void DeleteOrderCartCartIdCouponAsync() {
        }
        
        // Path: /order/cart/{cartId}/coupon
        private Task<System.String[]> GetOrderCartCartIdCouponAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cart/{cartId}/coupon
        private Task<System.String[]> PostOrderCartCartIdCouponAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cart/{cartId}/csp2
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdCsp2Async() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/csp2
        private Task<_order_cart.Item> PostOrderCartCartIdCsp2Async() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/csp2/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdCsp2OptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/csp2/options
        private Task<_order_cart.Item> PostOrderCartCartIdCsp2OptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dbaasTimeseries
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDbaasTimeseriesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dbaasTimeseries
        private Task<_order_cart.Item> PostOrderCartCartIdDbaasTimeseriesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicated
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicated
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicated/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicated/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedCloudAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedCloudAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedCloudOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedCloud/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedCloudOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedDirectSalesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedDirectSalesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedDirectSalesOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedDirectSales/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedDirectSalesOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedLabsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedLabsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedLabsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLabs/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedLabsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedLegacyAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedLegacyAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedLegacyOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedLegacy/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedLegacyOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedPciVpsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedPciVpsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedPciVpsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedPciVps/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedPciVpsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDedicatedResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDedicatedResellerOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dedicatedReseller/options
        private Task<_order_cart.Item> PostOrderCartCartIdDedicatedResellerOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/deskaas
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDeskaasAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/deskaas
        private Task<_order_cart.Item> PostOrderCartCartIdDeskaasAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/discover
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDiscoverAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/discover
        private Task<_order_cart.Item> PostOrderCartCartIdDiscoverAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/discover/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDiscoverOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/discover/options
        private Task<_order_cart.Item> PostOrderCartCartIdDiscoverOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dns
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDnsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dns
        private Task<_order_cart.Item> PostOrderCartCartIdDnsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/dns/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDnsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/dns/options
        private Task<_order_cart.Item> PostOrderCartCartIdDnsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domain
        private Task<_order_cart.ProductInformation[]> GetOrderCartCartIdDomainAsync() {
            return default(Task<_order_cart.ProductInformation[]>);
        }
        
        // Path: /order/cart/{cartId}/domain
        private Task<_order_cart.Item> PostOrderCartCartIdDomainAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domain/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdDomainOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/domain/options
        private Task<_order_cart.Item> PostOrderCartCartIdDomainOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domainPacks
        private Task<_order_cart.DomainPacksProductInformation[]> GetOrderCartCartIdDomainPacksAsync() {
            return default(Task<_order_cart.DomainPacksProductInformation[]>);
        }
        
        // Path: /order/cart/{cartId}/domainPacks
        private Task<_order_cart.Item> PostOrderCartCartIdDomainPacksAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/domainRestore
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdDomainRestoreAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/eco
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEcoAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/eco
        private Task<_order_cart.Item> PostOrderCartCartIdEcoAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/eco/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdEcoOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/eco/options
        private Task<_order_cart.Item> PostOrderCartCartIdEcoOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailDomain
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEmailDomainAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/emailDomain
        private Task<_order_cart.Item> PostOrderCartCartIdEmailDomainAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailpro
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdEmailproAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/emailpro
        private Task<_order_cart.Item> PostOrderCartCartIdEmailproAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/emailpro/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdEmailproOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/emailpro/options
        private Task<_order_cart.Item> PostOrderCartCartIdEmailproOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchange
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdExchangeAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/exchange
        private Task<_order_cart.Item> PostOrderCartCartIdExchangeAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchange/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdExchangeOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/exchange/options
        private Task<_order_cart.Item> PostOrderCartCartIdExchangeOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdExchangeEnterpriseAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise
        private Task<_order_cart.Item> PostOrderCartCartIdExchangeEnterpriseAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdExchangeEnterpriseOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/exchangeEnterprise/options
        private Task<_order_cart.Item> PostOrderCartCartIdExchangeEnterpriseOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ip
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ip
        private Task<_order_cart.Item> PostOrderCartCartIdIpAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ip/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIpOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ip/options
        private Task<_order_cart.Item> PostOrderCartCartIdIpOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpLoadbalancingAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing
        private Task<_order_cart.Item> PostOrderCartCartIdIpLoadbalancingAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIpLoadbalancingOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ipLoadbalancing/options
        private Task<_order_cart.Item> PostOrderCartCartIdIpLoadbalancingOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ipReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIpResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ipReseller
        private Task<_order_cart.Item> PostOrderCartCartIdIpResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIspPublicAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic
        private Task<_order_cart.Item> PostOrderCartCartIdIspPublicAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIspPublicOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ispPublic/options
        private Task<_order_cart.Item> PostOrderCartCartIdIspPublicOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdIspResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller
        private Task<_order_cart.Item> PostOrderCartCartIdIspResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdIspResellerOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ispReseller/options
        private Task<_order_cart.Item> PostOrderCartCartIdIspResellerOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/item
        private Task<System.Int64[]> GetOrderCartCartIdItemAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        private void DeleteOrderCartCartIdItemItemIdAsync() {
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        private Task<_order_cart.Item> GetOrderCartCartIdItemItemIdAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}
        private Task<_order_cart.Item> PutOrderCartCartIdItemItemIdAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration
        private Task<System.Int64[]> GetOrderCartCartIdItemItemIdConfigurationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration
        private Task<_order_cart.ConfigurationItem> PostOrderCartCartIdItemItemIdConfigurationAsync() {
            return default(Task<_order_cart.ConfigurationItem>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        private void DeleteOrderCartCartIdItemItemIdConfigurationConfigurationIdAsync() {
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/configuration/{configurationId}
        private Task<_order_cart.ConfigurationItem> GetOrderCartCartIdItemItemIdConfigurationConfigurationIdAsync() {
            return default(Task<_order_cart.ConfigurationItem>);
        }
        
        // Path: /order/cart/{cartId}/item/{itemId}/requiredConfiguration
        private Task<_order_cart.ConfigurationRequirements[]> GetOrderCartCartIdItemItemIdRequiredConfigurationAsync() {
            return default(Task<_order_cart.ConfigurationRequirements[]>);
        }
        
        // Path: /order/cart/{cartId}/kubernetes
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdKubernetesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/kubernetes
        private Task<_order_cart.Item> PostOrderCartCartIdKubernetesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/kubernetes/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdKubernetesOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/kubernetes/options
        private Task<_order_cart.Item> PostOrderCartCartIdKubernetesOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseCloudLinux
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseCloudLinuxAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseCloudLinux
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseCloudLinuxAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseDirectadmin
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseDirectadminAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseDirectadmin
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseDirectadminAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicensePleskAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk
        private Task<_order_cart.Item> PostOrderCartCartIdLicensePleskAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdLicensePleskOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licensePlesk/options
        private Task<_order_cart.Item> PostOrderCartCartIdLicensePleskOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseSqlServer
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseSqlServerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseSqlServer
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseSqlServerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseVirtuozzo
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseVirtuozzoAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseVirtuozzo
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseVirtuozzoAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseWindows
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseWindowsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseWindows
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseWindowsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licenseWorklight
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicenseWorklightAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licenseWorklight
        private Task<_order_cart.Item> PostOrderCartCartIdLicenseWorklightAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/licensecPanel
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLicensecPanelAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/licensecPanel
        private Task<_order_cart.Item> PostOrderCartCartIdLicensecPanelAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/logs
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdLogsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/logs
        private Task<_order_cart.Item> PostOrderCartCartIdLogsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/logs/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdLogsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/logs/options
        private Task<_order_cart.Item> PostOrderCartCartIdLogsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/managedServices
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdManagedServicesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/managedServices
        private Task<_order_cart.Item> PostOrderCartCartIdManagedServicesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/managedServices/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdManagedServicesOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/managedServices/options
        private Task<_order_cart.Item> PostOrderCartCartIdManagedServicesOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/metrics
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdMetricsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/metrics
        private Task<_order_cart.Item> PostOrderCartCartIdMetricsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/metrics/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdMetricsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/metrics/options
        private Task<_order_cart.Item> PostOrderCartCartIdMetricsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/microsoft
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdMicrosoftAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/microsoft
        private Task<_order_cart.Item> PostOrderCartCartIdMicrosoftAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/microsoft/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdMicrosoftOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/microsoft/options
        private Task<_order_cart.Item> PostOrderCartCartIdMicrosoftOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nasha
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNashaAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/nasha
        private Task<_order_cart.Item> PostOrderCartCartIdNashaAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nasha/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNashaOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/nasha/options
        private Task<_order_cart.Item> PostOrderCartCartIdNashaOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/netapp
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNetappAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/netapp
        private Task<_order_cart.Item> PostOrderCartCartIdNetappAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/netapp/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNetappOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/netapp/options
        private Task<_order_cart.Item> PostOrderCartCartIdNetappOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nutanix
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdNutanixAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/nutanix
        private Task<_order_cart.Item> PostOrderCartCartIdNutanixAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/nutanix/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdNutanixOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/nutanix/options
        private Task<_order_cart.Item> PostOrderCartCartIdNutanixOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOffice365Async() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/office365
        private Task<_order_cart.Item> PostOrderCartCartIdOffice365Async() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOffice365OptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/office365/options
        private Task<_order_cart.Item> PostOrderCartCartIdOffice365OptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOffice365PrepaidAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid
        private Task<_order_cart.Item> PostOrderCartCartIdOffice365PrepaidAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOffice365PrepaidOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/office365Prepaid/options
        private Task<_order_cart.Item> PostOrderCartCartIdOffice365PrepaidOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOfficePrepaidAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid
        private Task<_order_cart.Item> PostOrderCartCartIdOfficePrepaidAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOfficePrepaidOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/officePrepaid/options
        private Task<_order_cart.Item> PostOrderCartCartIdOfficePrepaidOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/okms
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOkmsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/okms
        private Task<_order_cart.Item> PostOrderCartCartIdOkmsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otb
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOtbAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/otb
        private Task<_order_cart.Item> PostOrderCartCartIdOtbAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otb/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOtbOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/otb/options
        private Task<_order_cart.Item> PostOrderCartCartIdOtbOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOtbResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller
        private Task<_order_cart.Item> PostOrderCartCartIdOtbResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdOtbResellerOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/otbReseller/options
        private Task<_order_cart.Item> PostOrderCartCartIdOtbResellerOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/ovhCloudConnect
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdOvhCloudConnectAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/ovhCloudConnect
        private Task<_order_cart.Item> PostOrderCartCartIdOvhCloudConnectAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/paasmon
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPaasmonAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/paasmon
        private Task<_order_cart.Item> PostOrderCartCartIdPaasmonAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPacksProfessionalServicesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices
        private Task<_order_cart.Item> PostOrderCartCartIdPacksProfessionalServicesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPacksProfessionalServicesOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/packsProfessionalServices/options
        private Task<_order_cart.Item> PostOrderCartCartIdPacksProfessionalServicesOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/powerHosting
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPowerHostingAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/powerHosting
        private Task<_order_cart.Item> PostOrderCartCartIdPowerHostingAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloud/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudCDIAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudCDIAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudCDIOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudCDI/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudCDIOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudDCAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudDCAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudDCOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudDC/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudDCOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudEnterpriseAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudEnterpriseAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudEnterpriseOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudEnterprise/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudEnterpriseOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudResellerOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudReseller/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudResellerEnterpriseAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerEnterpriseAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudResellerEnterprise/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudResellerEnterpriseOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateCloudSDDCAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudSDDCAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdPrivateCloudSDDCOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateCloudSDDC/options
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateCloudSDDCOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/privateSQL
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdPrivateSQLAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/privateSQL
        private Task<_order_cart.Item> PostOrderCartCartIdPrivateSQLAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/reseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/reseller
        private Task<_order_cart.Item> PostOrderCartCartIdResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSharepointAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint
        private Task<_order_cart.Item> PostOrderCartCartIdSharepointAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSharepointOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sharepoint/options
        private Task<_order_cart.Item> PostOrderCartCartIdSharepointOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sms
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSmsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sms
        private Task<_order_cart.Item> PostOrderCartCartIdSmsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSslComodoAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo
        private Task<_order_cart.Item> PostOrderCartCartIdSslComodoAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSslComodoOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sslComodo/options
        private Task<_order_cart.Item> PostOrderCartCartIdSslComodoOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSslGatewayAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway
        private Task<_order_cart.Item> PostOrderCartCartIdSslGatewayAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdSslGatewayOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/sslGateway/options
        private Task<_order_cart.Item> PostOrderCartCartIdSslGatewayOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/summary
        private Task<_order.Order> GetOrderCartCartIdSummaryAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cart/{cartId}/support
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdSupportAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/support
        private Task<_order_cart.Item> PostOrderCartCartIdSupportAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/telephony
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdTelephonyAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/telephony
        private Task<_order_cart.Item> PostOrderCartCartIdTelephonyAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/telephony/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdTelephonyOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/telephony/options
        private Task<_order_cart.Item> PostOrderCartCartIdTelephonyOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vco
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVcoAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vco
        private Task<_order_cart.Item> PostOrderCartCartIdVcoAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vdi
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVdiAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vdi
        private Task<_order_cart.Item> PostOrderCartCartIdVdiAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vdi/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVdiOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vdi/options
        private Task<_order_cart.Item> PostOrderCartCartIdVdiOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVeeamEnterpriseAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise
        private Task<_order_cart.Item> PostOrderCartCartIdVeeamEnterpriseAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVeeamEnterpriseOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/veeamEnterprise/options
        private Task<_order_cart.Item> PostOrderCartCartIdVeeamEnterpriseOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVeeamccAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc
        private Task<_order_cart.Item> PostOrderCartCartIdVeeamccAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVeeamccOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/veeamcc/options
        private Task<_order_cart.Item> PostOrderCartCartIdVeeamccOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vps
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVpsAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vps
        private Task<_order_cart.Item> PostOrderCartCartIdVpsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vps/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdVpsOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vps/options
        private Task<_order_cart.Item> PostOrderCartCartIdVpsOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrack
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vrack
        private Task<_order_cart.Item> PostOrderCartCartIdVrackAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrackReseller
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackResellerAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vrackReseller
        private Task<_order_cart.Item> PostOrderCartCartIdVrackResellerAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/vrackServices
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdVrackServicesAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/vrackServices
        private Task<_order_cart.Item> PostOrderCartCartIdVrackServicesAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webHosting
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdWebHostingAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/webHosting
        private Task<_order_cart.Item> PostOrderCartCartIdWebHostingAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webHosting/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdWebHostingOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/webHosting/options
        private Task<_order_cart.Item> PostOrderCartCartIdWebHostingOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdWebPaaSAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS
        private Task<_order_cart.Item> PostOrderCartCartIdWebPaaSAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdWebPaaSOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/webPaaS/options
        private Task<_order_cart.Item> PostOrderCartCartIdWebPaaSOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/xdsl
        private Task<_order_cart.GenericProductDefinition[]> GetOrderCartCartIdXdslAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/xdsl
        private Task<_order_cart.Item> PostOrderCartCartIdXdslAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cart/{cartId}/xdsl/options
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartCartIdXdslOptionsAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cart/{cartId}/xdsl/options
        private Task<_order_cart.Item> PostOrderCartCartIdXdslOptionsAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/baremetalServers
        private Task<System.String[]> GetOrderCartServiceOptionBaremetalServersAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/baremetalServers/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionBaremetalServersServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/baremetalServers/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionBaremetalServersServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/cloud
        private Task<System.String[]> GetOrderCartServiceOptionCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/cloud/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionCloudServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/cloud/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionCloudServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/dedicated
        private Task<System.String[]> GetOrderCartServiceOptionDedicatedAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/dedicated/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDedicatedServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/dedicated/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionDedicatedServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/dns
        private Task<System.String[]> GetOrderCartServiceOptionDnsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/dns/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDnsServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/dns/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionDnsServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/domain
        private Task<System.String[]> GetOrderCartServiceOptionDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/domain/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionDomainServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/domain/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionDomainServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/emailpro
        private Task<System.String[]> GetOrderCartServiceOptionEmailproAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/emailpro/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionEmailproServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/emailpro/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionEmailproServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing
        private Task<System.String[]> GetOrderCartServiceOptionIpLoadbalancingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionIpLoadbalancingServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/ipLoadbalancing/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionIpLoadbalancingServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/logs
        private Task<System.String[]> GetOrderCartServiceOptionLogsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/logs/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionLogsServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/logs/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionLogsServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/microsoft
        private Task<System.String[]> GetOrderCartServiceOptionMicrosoftAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/microsoft/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionMicrosoftServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/microsoft/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionMicrosoftServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/microsoftExchange
        private Task<System.String[]> GetOrderCartServiceOptionMicrosoftExchangeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/microsoftExchange/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionMicrosoftExchangeServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/microsoftExchange/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionMicrosoftExchangeServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/nutanix
        private Task<System.String[]> GetOrderCartServiceOptionNutanixAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/nutanix/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionNutanixServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/nutanix/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionNutanixServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/office365Prepaid
        private Task<System.String[]> GetOrderCartServiceOptionOffice365PrepaidAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/office365Prepaid/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionOffice365PrepaidServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/office365Prepaid/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionOffice365PrepaidServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/officePrepaid
        private Task<System.String[]> GetOrderCartServiceOptionOfficePrepaidAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/officePrepaid/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionOfficePrepaidServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/officePrepaid/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionOfficePrepaidServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloud
        private Task<System.String[]> GetOrderCartServiceOptionPrivateCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloud/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloud/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise
        private Task<System.String[]> GetOrderCartServiceOptionPrivateCloudEnterpriseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudEnterprise/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudEnterpriseServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller
        private Task<System.String[]> GetOrderCartServiceOptionPrivateCloudResellerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudResellerServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudReseller/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudResellerServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise
        private Task<System.String[]> GetOrderCartServiceOptionPrivateCloudResellerEnterpriseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/privateCloudResellerEnterprise/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionPrivateCloudResellerEnterpriseServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sharepoint
        private Task<System.String[]> GetOrderCartServiceOptionSharepointAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/sharepoint/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSharepointServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/sharepoint/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionSharepointServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sms
        private Task<System.String[]> GetOrderCartServiceOptionSmsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/sms/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSmsServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/sms/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionSmsServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/sslGateway
        private Task<System.String[]> GetOrderCartServiceOptionSslGatewayAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/sslGateway/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionSslGatewayServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/sslGateway/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionSslGatewayServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vdi
        private Task<System.String[]> GetOrderCartServiceOptionVdiAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/vdi/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVdiServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/vdi/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionVdiServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector
        private Task<System.String[]> GetOrderCartServiceOptionVmwareCloudDirectorAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVmwareCloudDirectorServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirector/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionVmwareCloudDirectorServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirectorBackup
        private Task<System.String[]> GetOrderCartServiceOptionVmwareCloudDirectorBackupAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/vmwareCloudDirectorBackup/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVmwareCloudDirectorBackupServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/vps
        private Task<System.String[]> GetOrderCartServiceOptionVpsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/vps/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionVpsServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/vps/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionVpsServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/webHosting
        private Task<System.String[]> GetOrderCartServiceOptionWebHostingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/webHosting/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionWebHostingServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/webHosting/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionWebHostingServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/cartServiceOption/webPaaS
        private Task<System.String[]> GetOrderCartServiceOptionWebPaaSAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cartServiceOption/webPaaS/{serviceName}
        private Task<_order_cart.GenericOptionDefinition[]> GetOrderCartServiceOptionWebPaaSServiceNameAsync() {
            return default(Task<_order_cart.GenericOptionDefinition[]>);
        }
        
        // Path: /order/cartServiceOption/webPaaS/{serviceName}
        private Task<_order_cart.Item> PostOrderCartServiceOptionWebPaaSServiceNameAsync() {
            return default(Task<_order_cart.Item>);
        }
        
        // Path: /order/catalog/formatted
        private Task<System.String[]> GetOrderCatalogFormattedAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/catalog/formatted/bringYourOwnIp
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedBringYourOwnIpAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/cloud
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedCloudAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/dedicated
        private Task<_order_catalog_dedicated.Catalog> GetOrderCatalogFormattedDedicatedAsync() {
            return default(Task<_order_catalog_dedicated.Catalog>);
        }
        
        // Path: /order/catalog/formatted/discover
        private Task<_order_catalog_dedicated.Catalog> GetOrderCatalogFormattedDiscoverAsync() {
            return default(Task<_order_catalog_dedicated.Catalog>);
        }
        
        // Path: /order/catalog/formatted/ip
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedIpAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseCloudLinux
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseCloudLinuxAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseDirectadmin
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseDirectadminAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licensePlesk
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicensePleskAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseSqlServer
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseSqlServerAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseVirtuozzo
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseVirtuozzoAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseWindows
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseWindowsAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licenseWorklight
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicenseWorklightAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/licensecPanel
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLicensecPanelAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/logs
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedLogsAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloud
        private Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudAsync() {
            return default(Task<_order_catalog_pcc.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudCDI
        private Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudCDIAsync() {
            return default(Task<_order_catalog_privateCloud.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudDC
        private Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudDCAsync() {
            return default(Task<_order_catalog_privateCloud.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudEnterprise
        private Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudEnterpriseAsync() {
            return default(Task<_order_catalog_pcc.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudReseller
        private Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudResellerAsync() {
            return default(Task<_order_catalog_pcc.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudResellerEnterprise
        private Task<_order_catalog_pcc.Catalog> GetOrderCatalogFormattedPrivateCloudResellerEnterpriseAsync() {
            return default(Task<_order_catalog_pcc.Catalog>);
        }
        
        // Path: /order/catalog/formatted/privateCloudSDDC
        private Task<_order_catalog_privateCloud.Catalog> GetOrderCatalogFormattedPrivateCloudSDDCAsync() {
            return default(Task<_order_catalog_privateCloud.Catalog>);
        }
        
        // Path: /order/catalog/formatted/reseller
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedResellerAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/formatted/vps
        private Task<_order_catalog.Catalog> GetOrderCatalogFormattedVpsAsync() {
            return default(Task<_order_catalog.Catalog>);
        }
        
        // Path: /order/catalog/private/privateCloud
        private Task<_order_catalog_pcc.Catalog> GetOrderCatalogPrivatePrivateCloudAsync() {
            return default(Task<_order_catalog_pcc.Catalog>);
        }
        
        // Path: /order/catalog/public/advisoryServicesHostingWeb
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesHostingWebAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/advisoryServicesPublicCloud
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesPublicCloudAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/advisoryServicesTelecom
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicAdvisoryServicesTelecomAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/baremetalServers
        private Task<_order_catalog_public.DedicatedServerCatalog> GetOrderCatalogPublicBaremetalServersAsync() {
            return default(Task<_order_catalog_public.DedicatedServerCatalog>);
        }
        
        // Path: /order/catalog/public/cloud
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicCloudAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/cloudDB
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicCloudDBAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/dns
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicDnsAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/domain
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicDomainAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/eco
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEcoAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/emailDomain
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEmailDomainAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/emailpro
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicEmailproAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/exchange
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicExchangeAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/ipLoadbalancing
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicIpLoadbalancingAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/licensecPanel
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicLicensecPanelAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/logs
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicLogsAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/nasha
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNashaAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/netapp
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNetappAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/nutanix
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicNutanixAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/office365Prepaid
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOffice365PrepaidAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/officePrepaid
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOfficePrepaidAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/okms
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOkmsAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/ovhCloudConnect
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicOvhCloudConnectAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/packsProfessionalServices
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPacksProfessionalServicesAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/privateCloud
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateCloudAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/privateCloudEnterprise
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateCloudEnterpriseAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/privateSQL
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicPrivateSQLAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/telephony
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicTelephonyAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/vps
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicVpsAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/webHosting
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicWebHostingAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/catalog/public/webPaaS
        private Task<_order_catalog_public.Catalog> GetOrderCatalogPublicWebPaaSAsync() {
            return default(Task<_order_catalog_public.Catalog>);
        }
        
        // Path: /order/cdn/dedicated
        private Task<System.String[]> GetOrderCdnDedicatedAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/new
        private Task<System.String[]> GetOrderCdnDedicatedNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/new/{duration}
        private Task<_order.Order> GetOrderCdnDedicatedNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/new/{duration}
        private Task<_order.Order> PostOrderCdnDedicatedNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}
        private Task<System.String[]> GetOrderCdnDedicatedServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend
        private Task<System.String[]> GetOrderCdnDedicatedServiceNameBackendAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend/{duration}
        private Task<_order.Order> GetOrderCdnDedicatedServiceNameBackendDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/backend/{duration}
        private Task<_order.Order> PostOrderCdnDedicatedServiceNameBackendDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule
        private Task<System.String[]> GetOrderCdnDedicatedServiceNameCacheRuleAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        private Task<_order.Order> GetOrderCdnDedicatedServiceNameCacheRuleDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/cacheRule/{duration}
        private Task<_order.Order> PostOrderCdnDedicatedServiceNameCacheRuleDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota
        private Task<System.String[]> GetOrderCdnDedicatedServiceNameQuotaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota/{duration}
        private Task<_order.Order> GetOrderCdnDedicatedServiceNameQuotaDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cdn/dedicated/{serviceName}/quota/{duration}
        private Task<_order.Order> PostOrderCdnDedicatedServiceNameQuotaDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cloud/project
        private Task<System.String[]> GetOrderCloudProjectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cloud/project/{serviceName}
        private Task<System.String[]> GetOrderCloudProjectServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/cloud/project/{serviceName}/credit
        private Task<_order.Order> GetOrderCloudProjectServiceNameCreditAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/cloud/project/{serviceName}/credit
        private Task<_order.Order> PostOrderCloudProjectServiceNameCreditAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/housing
        private Task<System.String[]> GetOrderDedicatedHousingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/housing/{serviceName}
        private Task<System.String[]> GetOrderDedicatedHousingServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC
        private Task<System.String[]> GetOrderDedicatedHousingServiceNameAPCAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC/{duration}
        private Task<_order.Order> GetOrderDedicatedHousingServiceNameAPCDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/housing/{serviceName}/APC/{duration}
        private Task<_order.Order> PostOrderDedicatedHousingServiceNameAPCDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server
        private Task<System.String[]> GetOrderDedicatedServerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}
        private Task<System.String[]> GetOrderDedicatedServerServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage
        private Task<System.String[]> GetOrderDedicatedServerServiceNameBackupStorageAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameBackupStorageDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/backupStorage/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameBackupStorageDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth
        private Task<System.String[]> GetOrderDedicatedServerServiceNameBandwidthAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameBandwidthDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidth/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameBandwidthDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack
        private Task<System.String[]> GetOrderDedicatedServerServiceNameBandwidthvRackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameBandwidthvRackDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/bandwidthvRack/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameBandwidthvRackDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature
        private Task<System.String[]> GetOrderDedicatedServerServiceNameFeatureAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameFeatureDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/feature/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameFeatureDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall
        private Task<System.String[]> GetOrderDedicatedServerServiceNameFirewallAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameFirewallDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/firewall/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameFirewallDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration
        private Task<System.String[]> GetOrderDedicatedServerServiceNameIpMigrationAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameIpMigrationDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/ipMigration/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameIpMigrationDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm
        private Task<System.String[]> GetOrderDedicatedServerServiceNameKvmAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameKvmDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvm/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameKvmDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress
        private Task<System.String[]> GetOrderDedicatedServerServiceNameKvmExpressAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameKvmExpressDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/kvmExpress/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameKvmExpressDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse
        private Task<System.String[]> GetOrderDedicatedServerServiceNameProfessionalUseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameProfessionalUseDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/professionalUse/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameProfessionalUseDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic
        private Task<System.String[]> GetOrderDedicatedServerServiceNameTrafficAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameTrafficDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/traffic/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameTrafficDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey
        private Task<System.String[]> GetOrderDedicatedServerServiceNameUsbKeyAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey/{duration}
        private Task<_order.Order> GetOrderDedicatedServerServiceNameUsbKeyDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicated/server/{serviceName}/usbKey/{duration}
        private Task<_order.Order> PostOrderDedicatedServerServiceNameUsbKeyDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud
        private Task<System.String[]> GetOrderDedicatedCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameAdditionalBandwidthAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/additionalBandwidth/{duration}
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameAdditionalBandwidthDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameFilerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer/{duration}
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameFilerDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/filer/{duration}
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameFilerDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameHostAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host/{duration}
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameHostDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/host/{duration}
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameHostDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameIpAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip/{duration}
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameIpDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/ip/{duration}
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameIpDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/spla
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameSplaAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/spla
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameSplaAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource
        private Task<System.String[]> GetOrderDedicatedCloudServiceNameUpgradeRessourceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/upgradeRessource/{duration}
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameUpgradeRessourceDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/vdi
        private Task<_order.Order> GetOrderDedicatedCloudServiceNameVdiAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/dedicatedCloud/{serviceName}/vdi
        private Task<_order.Order> PostOrderDedicatedCloudServiceNameVdiAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone
        private Task<System.String[]> GetOrderDomainZoneAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/domain/zone/new
        private Task<_order.Order> GetOrderDomainZoneNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone/new
        private Task<_order.Order> PostOrderDomainZoneNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone/{zoneName}
        private Task<System.String[]> GetOrderDomainZoneZoneNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast
        private Task<System.String[]> GetOrderDomainZoneZoneNameDnsAnycastAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast/{duration}
        private Task<_order.Order> GetOrderDomainZoneZoneNameDnsAnycastDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/domain/zone/{zoneName}/dnsAnycast/{duration}
        private Task<_order.Order> PostOrderDomainZoneZoneNameDnsAnycastDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain
        private Task<System.String[]> GetOrderEmailDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/domain/new
        private Task<System.String[]> GetOrderEmailDomainNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/domain/new/{duration}
        private Task<_order.Order> GetOrderEmailDomainNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain/new/{duration}
        private Task<_order.Order> PostOrderEmailDomainNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain/{domain}
        private Task<System.String[]> GetOrderEmailDomainDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/domain/{domain}/upgrade
        private Task<System.String[]> GetOrderEmailDomainDomainUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/domain/{domain}/upgrade/{duration}
        private Task<_order.Order> GetOrderEmailDomainDomainUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/domain/{domain}/upgrade/{duration}
        private Task<_order.Order> PostOrderEmailDomainDomainUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange
        private Task<System.String[]> GetOrderEmailExchangeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service
        private Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}
        private Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account
        private Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        private Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/account/{duration}
        private Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade
        private Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        private Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/accountUpgrade/{duration}
        private Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceAccountUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        private Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/diskSpace
        private Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceDiskSpaceAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook
        private Task<System.String[]> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        private Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/outlook/{duration}
        private Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceOutlookDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        private Task<_order.Order> GetOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/exchange/{organizationName}/service/{exchangeService}/upgrade
        private Task<_order.Order> PostOrderEmailExchangeOrganizationNameServiceExchangeServiceUpgradeAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/pro
        private Task<System.String[]> GetOrderEmailProAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/pro/{service}
        private Task<System.String[]> GetOrderEmailProServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/pro/{service}/account
        private Task<System.String[]> GetOrderEmailProServiceAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/email/pro/{service}/account/{duration}
        private Task<_order.Order> GetOrderEmailProServiceAccountDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/email/pro/{service}/account/{duration}
        private Task<_order.Order> PostOrderEmailProServiceAccountDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax
        private Task<System.String[]> GetOrderFreefaxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/freefax/new
        private Task<_order.Order> GetOrderFreefaxNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax/new
        private Task<_order.Order> PostOrderFreefaxNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax/{serviceName}
        private Task<System.String[]> GetOrderFreefaxServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/freefax/{serviceName}/convertToVoicefax
        private Task<_order.Order> GetOrderFreefaxServiceNameConvertToVoicefaxAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/freefax/{serviceName}/convertToVoicefax
        private Task<_order.Order> PostOrderFreefaxServiceNameConvertToVoicefaxAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/hosting/web
        private Task<System.String[]> GetOrderHostingWebAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/hosting/web/{serviceName}
        private Task<System.String[]> GetOrderHostingWebServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade
        private Task<System.String[]> GetOrderHostingWebServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderHostingWebServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/hosting/web/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderHostingWebServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cloudLinux/new
        private Task<System.String[]> GetOrderLicenseCloudLinuxNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/cloudLinux/new/{duration}
        private Task<_order.Order> GetOrderLicenseCloudLinuxNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cloudLinux/new/{duration}
        private Task<_order.Order> PostOrderLicenseCloudLinuxNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel
        private Task<System.String[]> GetOrderLicenseCpanelAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/cpanel/new
        private Task<System.String[]> GetOrderLicenseCpanelNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/cpanel/new/{duration}
        private Task<_order.Order> GetOrderLicenseCpanelNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel/new/{duration}
        private Task<_order.Order> PostOrderLicenseCpanelNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel/{serviceName}
        private Task<System.String[]> GetOrderLicenseCpanelServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicenseCpanelServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicenseCpanelServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/cpanel/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicenseCpanelServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/directadmin/new
        private Task<System.String[]> GetOrderLicenseDirectadminNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/directadmin/new/{duration}
        private Task<_order.Order> GetOrderLicenseDirectadminNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/directadmin/new/{duration}
        private Task<_order.Order> PostOrderLicenseDirectadminNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/office/new
        private Task<System.String[]> GetOrderLicenseOfficeNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/office/new/{duration}
        private Task<_order.Order> GetOrderLicenseOfficeNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/office/new/{duration}
        private Task<_order.Order> PostOrderLicenseOfficeNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk
        private Task<System.String[]> GetOrderLicensePleskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/plesk/new
        private Task<System.String[]> GetOrderLicensePleskNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/plesk/new/{duration}
        private Task<_order.Order> GetOrderLicensePleskNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk/new/{duration}
        private Task<_order.Order> PostOrderLicensePleskNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk/{serviceName}
        private Task<System.String[]> GetOrderLicensePleskServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicensePleskServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicensePleskServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/plesk/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicensePleskServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver
        private Task<System.String[]> GetOrderLicenseSqlserverAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/sqlserver/new
        private Task<System.String[]> GetOrderLicenseSqlserverNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/sqlserver/new/{duration}
        private Task<_order.Order> GetOrderLicenseSqlserverNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver/new/{duration}
        private Task<_order.Order> PostOrderLicenseSqlserverNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver/{serviceName}
        private Task<System.String[]> GetOrderLicenseSqlserverServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicenseSqlserverServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicenseSqlserverServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/sqlserver/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicenseSqlserverServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo
        private Task<System.String[]> GetOrderLicenseVirtuozzoAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/virtuozzo/new
        private Task<System.String[]> GetOrderLicenseVirtuozzoNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/virtuozzo/new/{duration}
        private Task<_order.Order> GetOrderLicenseVirtuozzoNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo/new/{duration}
        private Task<_order.Order> PostOrderLicenseVirtuozzoNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo/{serviceName}
        private Task<System.String[]> GetOrderLicenseVirtuozzoServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicenseVirtuozzoServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicenseVirtuozzoServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/virtuozzo/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicenseVirtuozzoServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows
        private Task<System.String[]> GetOrderLicenseWindowsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/windows/new
        private Task<System.String[]> GetOrderLicenseWindowsNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/windows/new/{duration}
        private Task<_order.Order> GetOrderLicenseWindowsNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows/new/{duration}
        private Task<_order.Order> PostOrderLicenseWindowsNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows/{serviceName}
        private Task<System.String[]> GetOrderLicenseWindowsServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicenseWindowsServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicenseWindowsServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/windows/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicenseWindowsServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight
        private Task<System.String[]> GetOrderLicenseWorklightAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/worklight/new
        private Task<System.String[]> GetOrderLicenseWorklightNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/worklight/new/{duration}
        private Task<_order.Order> GetOrderLicenseWorklightNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight/new/{duration}
        private Task<_order.Order> PostOrderLicenseWorklightNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight/{serviceName}
        private Task<System.String[]> GetOrderLicenseWorklightServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade
        private Task<System.String[]> GetOrderLicenseWorklightServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderLicenseWorklightServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/license/worklight/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderLicenseWorklightServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox
        private Task<System.String[]> GetOrderOverTheBoxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/overTheBox/new
        private Task<System.String[]> GetOrderOverTheBoxNewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/overTheBox/new/{duration}
        private Task<_order.Order> GetOrderOverTheBoxNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox/new/{duration}
        private Task<_order.Order> PostOrderOverTheBoxNewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox/{serviceName}
        private Task<System.String[]> GetOrderOverTheBoxServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/overTheBox/{serviceName}/migrate
        private Task<_order.Order> GetOrderOverTheBoxServiceNameMigrateAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/overTheBox/{serviceName}/migrate
        private Task<_order.Order> PostOrderOverTheBoxServiceNameMigrateAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/saas/csp2/new
        private Task<System.String[]> GetOrderSaasCsp2NewAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/saas/csp2/new/{duration}
        private Task<_order.Order> GetOrderSaasCsp2NewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/saas/csp2/new/{duration}
        private Task<_order.Order> PostOrderSaasCsp2NewDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms
        private Task<System.String[]> GetOrderSmsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/sms/new
        private Task<_order.Order> GetOrderSmsNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms/new
        private Task<_order.Order> PostOrderSmsNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms/{serviceName}
        private Task<System.String[]> GetOrderSmsServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/sms/{serviceName}/credits
        private Task<_order.Order> GetOrderSmsServiceNameCreditsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/sms/{serviceName}/credits
        private Task<_order.Order> PostOrderSmsServiceNameCreditsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony
        private Task<System.String[]> GetOrderTelephonyAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/lines
        private Task<System.String[]> GetOrderTelephonyLinesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/lines/{serviceName}
        private Task<System.String[]> GetOrderTelephonyLinesServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/addSimultaneousLines
        private Task<_order.Order> GetOrderTelephonyLinesServiceNameAddSimultaneousLinesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/addSimultaneousLines
        private Task<_order.Order> PostOrderTelephonyLinesServiceNameAddSimultaneousLinesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/hardware
        private Task<_order.Order> GetOrderTelephonyLinesServiceNameHardwareAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/hardware
        private Task<_order.Order> PostOrderTelephonyLinesServiceNameHardwareAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/updateSimultaneousChannels
        private Task<_order.Order> GetOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/lines/{serviceName}/updateSimultaneousChannels
        private Task<_order.Order> PostOrderTelephonyLinesServiceNameUpdateSimultaneousChannelsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/new
        private Task<_order.Order> GetOrderTelephonyNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/new
        private Task<_order.Order> PostOrderTelephonyNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/spare/new
        private Task<_order.Order> GetOrderTelephonySpareNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/spare/new
        private Task<_order.Order> PostOrderTelephonySpareNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks
        private Task<System.String[]> GetOrderTelephonyTrunksAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}
        private Task<System.String[]> GetOrderTelephonyTrunksServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/addSimultaneousLines
        private Task<_order.Order> GetOrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/addSimultaneousLines
        private Task<_order.Order> PostOrderTelephonyTrunksServiceNameAddSimultaneousLinesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/hardware
        private Task<_order.Order> GetOrderTelephonyTrunksServiceNameHardwareAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/hardware
        private Task<_order.Order> PostOrderTelephonyTrunksServiceNameHardwareAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        private Task<_order.Order> GetOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/trunks/{serviceName}/updateSimultaneousChannels
        private Task<_order.Order> PostOrderTelephonyTrunksServiceNameUpdateSimultaneousChannelsAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}
        private Task<System.String[]> GetOrderTelephonyBillingAccountAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/telephony/{billingAccount}/accessories
        private Task<_order.Order> GetOrderTelephonyBillingAccountAccessoriesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/accessories
        private Task<_order.Order> PostOrderTelephonyBillingAccountAccessoriesAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/line
        private Task<_order.Order> GetOrderTelephonyBillingAccountLineAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/line
        private Task<_order.Order> PostOrderTelephonyBillingAccountLineAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberGeographic
        private Task<_order.Order> GetOrderTelephonyBillingAccountNumberGeographicAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberGeographic
        private Task<_order.Order> PostOrderTelephonyBillingAccountNumberGeographicAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberNogeographic
        private Task<_order.Order> GetOrderTelephonyBillingAccountNumberNogeographicAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberNogeographic
        private Task<_order.Order> PostOrderTelephonyBillingAccountNumberNogeographicAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberSpecial
        private Task<_order.Order> GetOrderTelephonyBillingAccountNumberSpecialAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/numberSpecial
        private Task<_order.Order> PostOrderTelephonyBillingAccountNumberSpecialAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/portability
        private Task<_order.Order> GetOrderTelephonyBillingAccountPortabilityAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/portability
        private Task<_order.Order> PostOrderTelephonyBillingAccountPortabilityAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/securityDeposit
        private Task<_order.Order> GetOrderTelephonyBillingAccountSecurityDepositAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/telephony/{billingAccount}/securityDeposit
        private Task<_order.Order> PostOrderTelephonyBillingAccountSecurityDepositAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth
        private Task<System.String[]> GetOrderUpgradeBaremetalPrivateBandwidthAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeBaremetalPrivateBandwidthServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/baremetalPrivateBandwidth/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeBaremetalPrivateBandwidthServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth
        private Task<System.String[]> GetOrderUpgradeBaremetalPublicBandwidthAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeBaremetalPublicBandwidthServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/baremetalPublicBandwidth/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeBaremetalPublicBandwidthServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cephaas
        private Task<System.String[]> GetOrderUpgradeCephaasAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeCephaasServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeCephaasServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cephaas/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeCephaasServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cloudDB
        private Task<System.String[]> GetOrderUpgradeCloudDBAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/cloudDB/{domain}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeCloudDBDomainAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/cloudDB/{domain}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeCloudDBDomainPlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/cloudDB/{domain}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeCloudDBDomainPlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/emailDomain
        private Task<System.String[]> GetOrderUpgradeEmailDomainAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeEmailDomainServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeEmailDomainServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/emailDomain/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeEmailDomainServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/ipLoadbalancing
        private Task<System.String[]> GetOrderUpgradeIpLoadbalancingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeIpLoadbalancingServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/ipLoadbalancing/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeIpLoadbalancingServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensePlesk
        private Task<System.String[]> GetOrderUpgradeLicensePleskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLicensePleskServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLicensePleskServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensePlesk/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLicensePleskServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensecPanel
        private Task<System.String[]> GetOrderUpgradeLicensecPanelAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLicensecPanelServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLicensecPanelServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/licensecPanel/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLicensecPanelServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/logs
        private Task<System.String[]> GetOrderUpgradeLogsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/logs/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeLogsServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/logs/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeLogsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/logs/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeLogsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/metrics
        private Task<System.String[]> GetOrderUpgradeMetricsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/metrics/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeMetricsServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/metrics/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeMetricsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/metrics/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeMetricsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/microsoftExchange
        private Task<System.String[]> GetOrderUpgradeMicrosoftExchangeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeMicrosoftExchangeServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/microsoftExchange/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeMicrosoftExchangeServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloud
        private Task<System.String[]> GetOrderUpgradePrivateCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateCloudServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateCloudServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloud/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateCloudServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloudManagementFee
        private Task<System.String[]> GetOrderUpgradePrivateCloudManagementFeeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateCloudManagementFeeServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateCloudManagementFee/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateCloudManagementFeeServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateSQL
        private Task<System.String[]> GetOrderUpgradePrivateSQLAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/privateSQL/{domain}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradePrivateSQLDomainAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/privateSQL/{domain}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradePrivateSQLDomainPlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/privateSQL/{domain}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradePrivateSQLDomainPlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/sslGateway
        private Task<System.String[]> GetOrderUpgradeSslGatewayAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeSslGatewayServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeSslGatewayServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/sslGateway/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeSslGatewayServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vps
        private Task<System.String[]> GetOrderUpgradeVpsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/vps/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeVpsServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/vps/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeVpsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vps/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeVpsServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk
        private Task<System.String[]> GetOrderUpgradeVpsAdditionalDiskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeVpsAdditionalDiskServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/vpsAdditionalDisk/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeVpsAdditionalDiskServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webHosting
        private Task<System.String[]> GetOrderUpgradeWebHostingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeWebHostingServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeWebHostingServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webHosting/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeWebHostingServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webPaaS
        private Task<System.String[]> GetOrderUpgradeWebPaaSAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}
        private Task<_order_cart.GenericProductDefinition[]> GetOrderUpgradeWebPaaSServiceNameAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> GetOrderUpgradeWebPaaSServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/upgrade/webPaaS/{serviceName}/{planCode}
        private Task<_order_upgrade.OperationAndOrder> PostOrderUpgradeWebPaaSServiceNamePlanCodeAsync() {
            return default(Task<_order_upgrade.OperationAndOrder>);
        }
        
        // Path: /order/veeamCloudConnect
        private Task<System.String[]> GetOrderVeeamCloudConnectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}
        private Task<System.String[]> GetOrderVeeamCloudConnectServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade
        private Task<System.String[]> GetOrderVeeamCloudConnectServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderVeeamCloudConnectServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/veeamCloudConnect/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderVeeamCloudConnectServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps
        private Task<System.String[]> GetOrderVpsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}
        private Task<System.String[]> GetOrderVpsServiceNameAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk
        private Task<System.String[]> GetOrderVpsServiceNameAdditionalDiskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameAdditionalDiskDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/additionalDisk/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameAdditionalDiskDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup
        private Task<System.String[]> GetOrderVpsServiceNameAutomatedBackupAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameAutomatedBackupDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/automatedBackup/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameAutomatedBackupDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/cpanel
        private Task<System.String[]> GetOrderVpsServiceNameCpanelAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/cpanel/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameCpanelDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/cpanel/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameCpanelDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup
        private Task<System.String[]> GetOrderVpsServiceNameFtpbackupAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameFtpbackupDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/ftpbackup/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameFtpbackupDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/plesk
        private Task<System.String[]> GetOrderVpsServiceNamePleskAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/plesk/{duration}
        private Task<_order.Order> GetOrderVpsServiceNamePleskDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/plesk/{duration}
        private Task<_order.Order> PostOrderVpsServiceNamePleskDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/snapshot
        private Task<System.String[]> GetOrderVpsServiceNameSnapshotAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/snapshot/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameSnapshotDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/snapshot/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameSnapshotDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/upgrade
        private Task<System.String[]> GetOrderVpsServiceNameUpgradeAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/upgrade/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/upgrade/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameUpgradeDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/veeam
        private Task<System.String[]> GetOrderVpsServiceNameVeeamAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/veeam/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameVeeamDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/veeam/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameVeeamDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/windows
        private Task<System.String[]> GetOrderVpsServiceNameWindowsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /order/vps/{serviceName}/windows/{duration}
        private Task<_order.Order> GetOrderVpsServiceNameWindowsDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/vps/{serviceName}/windows/{duration}
        private Task<_order.Order> PostOrderVpsServiceNameWindowsDurationAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/xdsl/spare/new
        private Task<_order.Order> GetOrderXdslSpareNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /order/xdsl/spare/new
        private Task<_order.Order> PostOrderXdslSpareNewAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /overTheBox
        private Task<System.String[]> GetOverTheBoxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/availableOffers
        private Task<_price_OverTheBox.OfferEnum[]> GetOverTheBoxAvailableOffersAsync() {
            return default(Task<_price_OverTheBox.OfferEnum[]>);
        }
        
        // Path: /overTheBox/devices
        private Task<_overTheBox.DeviceForRegistration[]> PostOverTheBoxDevicesAsync() {
            return default(Task<_overTheBox.DeviceForRegistration[]>);
        }
        
        // Path: /overTheBox/hardware
        private Task<System.String[]> GetOverTheBoxHardwareAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/hardware/available
        private Task<System.String[]> GetOverTheBoxHardwareAvailableAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/hardware/{hardwareName}
        private Task<_overTheBox.HardwareWithIAM> GetOverTheBoxHardwareHardwareNameAsync() {
            return default(Task<_overTheBox.HardwareWithIAM>);
        }
        
        // Path: /overTheBox/{serviceName}
        private void DeleteOverTheBoxServiceNameAsync() {
        }
        
        // Path: /overTheBox/{serviceName}
        private Task<_overTheBox.ServiceWithIAM> GetOverTheBoxServiceNameAsync() {
            return default(Task<_overTheBox.ServiceWithIAM>);
        }
        
        // Path: /overTheBox/{serviceName}
        private void PutOverTheBoxServiceNameAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/autoMTU
        private void PutOverTheBoxServiceNameAutoMTUAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/availableReleaseChannels
        private Task<System.String[]> GetOverTheBoxServiceNameAvailableReleaseChannelsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/{serviceName}/backups
        private Task<System.String[]> GetOverTheBoxServiceNameBackupsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/{serviceName}/backups/{backupId}
        private void DeleteOverTheBoxServiceNameBackupsBackupIdAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/backups/{backupId}
        private Task<_overTheBox.Backup> GetOverTheBoxServiceNameBackupsBackupIdAsync() {
            return default(Task<_overTheBox.Backup>);
        }
        
        // Path: /overTheBox/{serviceName}/cancelResiliation
        private void PostOverTheBoxServiceNameCancelResiliationAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/changeContact
        private Task<System.Int64[]> PostOverTheBoxServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /overTheBox/{serviceName}/device
        private void DeleteOverTheBoxServiceNameDeviceAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/device
        private Task<_overTheBox.Device> GetOverTheBoxServiceNameDeviceAsync() {
            return default(Task<_overTheBox.Device>);
        }
        
        // Path: /overTheBox/{serviceName}/device/actions
        private Task<System.String[]> GetOverTheBoxServiceNameDeviceActionsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/{serviceName}/device/actions
        private Task<_overTheBox.DeviceAction> PostOverTheBoxServiceNameDeviceActionsAsync() {
            return default(Task<_overTheBox.DeviceAction>);
        }
        
        // Path: /overTheBox/{serviceName}/device/actions/{actionId}
        private Task<_overTheBox.DeviceAction> GetOverTheBoxServiceNameDeviceActionsActionIdAsync() {
            return default(Task<_overTheBox.DeviceAction>);
        }
        
        // Path: /overTheBox/{serviceName}/device/availableActions
        private Task<_overTheBox.AvailableDeviceAction[]> GetOverTheBoxServiceNameDeviceAvailableActionsAsync() {
            return default(Task<_overTheBox.AvailableDeviceAction[]>);
        }
        
        // Path: /overTheBox/{serviceName}/device/backup
        private Task<_overTheBox.DeviceAction> PostOverTheBoxServiceNameDeviceBackupAsync() {
            return default(Task<_overTheBox.DeviceAction>);
        }
        
        // Path: /overTheBox/{serviceName}/device/hardware
        private Task<_overTheBox.Hardware> GetOverTheBoxServiceNameDeviceHardwareAsync() {
            return default(Task<_overTheBox.Hardware>);
        }
        
        // Path: /overTheBox/{serviceName}/device/logs
        private Task<_overTheBox.TemporaryLogsLink> PostOverTheBoxServiceNameDeviceLogsAsync() {
            return default(Task<_overTheBox.TemporaryLogsLink>);
        }
        
        // Path: /overTheBox/{serviceName}/device/restoreBackup
        private Task<_overTheBox.DeviceAction[]> PostOverTheBoxServiceNameDeviceRestoreBackupAsync() {
            return default(Task<_overTheBox.DeviceAction[]>);
        }
        
        // Path: /overTheBox/{serviceName}/linkDevice
        private void PostOverTheBoxServiceNameLinkDeviceAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/linkHardware
        private void PostOverTheBoxServiceNameLinkHardwareAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/migration/changeOffers
        private Task<_overTheBox.OrderMigration> PostOverTheBoxServiceNameMigrationChangeOffersAsync() {
            return default(Task<_overTheBox.OrderMigration>);
        }
        
        // Path: /overTheBox/{serviceName}/migration/offers
        private Task<_overTheBox.AvailableMigrationOffer[]> GetOverTheBoxServiceNameMigrationOffersAsync() {
            return default(Task<_overTheBox.AvailableMigrationOffer[]>);
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses
        private Task<System.String[]> GetOverTheBoxServiceNameRemoteAccessesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses
        private Task<_overTheBox.RemoteAccess> PostOverTheBoxServiceNameRemoteAccessesAsync() {
            return default(Task<_overTheBox.RemoteAccess>);
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        private void DeleteOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}
        private Task<_overTheBox.RemoteAccess> GetOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAsync() {
            return default(Task<_overTheBox.RemoteAccess>);
        }
        
        // Path: /overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}/authorize
        private void PostOverTheBoxServiceNameRemoteAccessesRemoteAccessIdAuthorizeAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/serviceInfos
        private Task<_services.Service> GetOverTheBoxServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /overTheBox/{serviceName}/serviceInfos
        private void PutOverTheBoxServiceNameServiceInfosAsync() {
        }
        
        // Path: /overTheBox/{serviceName}/statistics
        private Task<_otb_device.statistics[]> GetOverTheBoxServiceNameStatisticsAsync() {
            return default(Task<_otb_device.statistics[]>);
        }
        
        // Path: /overTheBox/{serviceName}/tasks
        private Task<System.String[]> GetOverTheBoxServiceNameTasksAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /overTheBox/{serviceName}/tasks/{taskId}
        private Task<_overTheBox.Task> GetOverTheBoxServiceNameTasksTaskIdAsync() {
            return default(Task<_overTheBox.Task>);
        }
        
        // Path: /ovhCloudConnect
        private Task<System.Guid[]> GetOvhCloudConnectAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}
        private Task<_ovhcloudconnect.ServiceWithIAM> GetOvhCloudConnectServiceNameAsync() {
            return default(Task<_ovhcloudconnect.ServiceWithIAM>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}
        private void PutOvhCloudConnectServiceNameAsync() {
        }
        
        // Path: /ovhCloudConnect/{serviceName}/changeContact
        private Task<System.Int64[]> PostOvhCloudConnectServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop
        private Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}
        private Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}
        private Task<_ovhcloudconnect.PopConfig> GetOvhCloudConnectServiceNameConfigPopPopIdAsync() {
            return default(Task<_ovhcloudconnect.PopConfig>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter
        private Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        private Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}
        private Task<_ovhcloudconnect.DatacenterConfig> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdAsync() {
            return default(Task<_ovhcloudconnect.DatacenterConfig>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra
        private Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        private Task<_ovhcloudconnect.Task> DeleteOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/config/pop/{popId}/datacenter/{datacenterId}/extra/{extraId}
        private Task<_ovhcloudconnect.DatacenterExtraConfig> GetOvhCloudConnectServiceNameConfigPopPopIdDatacenterDatacenterIdExtraExtraIdAsync() {
            return default(Task<_ovhcloudconnect.DatacenterExtraConfig>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/confirmTermination
        private Task<System.String> PostOvhCloudConnectServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/datacenter
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameDatacenterAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/datacenter/{id}
        private Task<_ovhcloudconnect.Datacenter> GetOvhCloudConnectServiceNameDatacenterIdAsync() {
            return default(Task<_ovhcloudconnect.Datacenter>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameDiagnosticAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic
        private Task<_ovhcloudconnect.Diagnostic> PostOvhCloudConnectServiceNameDiagnosticAsync() {
            return default(Task<_ovhcloudconnect.Diagnostic>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/diagnostic/{id}
        private Task<_ovhcloudconnect.Diagnostic> GetOvhCloudConnectServiceNameDiagnosticIdAsync() {
            return default(Task<_ovhcloudconnect.Diagnostic>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/incident
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameIncidentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/incident/{id}
        private Task<_ovhcloudconnect.Incident> GetOvhCloudConnectServiceNameIncidentIdAsync() {
            return default(Task<_ovhcloudconnect.Incident>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameInterfaceAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}
        private Task<_ovhcloudconnect.Interface> GetOvhCloudConnectServiceNameInterfaceIdAsync() {
            return default(Task<_ovhcloudconnect.Interface>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/lock
        private Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameInterfaceIdLockAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/statistics
        private Task<_ovhcloudconnect.Metrics[]> GetOvhCloudConnectServiceNameInterfaceIdStatisticsAsync() {
            return default(Task<_ovhcloudconnect.Metrics[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/interface/{id}/unlock
        private Task<_ovhcloudconnect.Task> PostOvhCloudConnectServiceNameInterfaceIdUnlockAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/loa
        private Task<System.String> PostOvhCloudConnectServiceNameLoaAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        private void DeleteOvhCloudConnectServiceNameMonitoringAsync() {
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        private Task<_ovhcloudconnect.Monitoring[]> GetOvhCloudConnectServiceNameMonitoringAsync() {
            return default(Task<_ovhcloudconnect.Monitoring[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/monitoring
        private void PostOvhCloudConnectServiceNameMonitoringAsync() {
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceInfos
        private Task<_services.Service> GetOvhCloudConnectServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceInfos
        private void PutOvhCloudConnectServiceNameServiceInfosAsync() {
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameServiceKeyAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}
        private Task<_ovhcloudconnect.Key> GetOvhCloudConnectServiceNameServiceKeyServiceKeyIdAsync() {
            return default(Task<_ovhcloudconnect.Key>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/regenerate
        private Task<_ovhcloudconnect.Key> PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdRegenerateAsync() {
            return default(Task<_ovhcloudconnect.Key>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/serviceKey/{serviceKeyId}/send
        private Task<_ovhcloudconnect.SendKeyAnswer> PostOvhCloudConnectServiceNameServiceKeyServiceKeyIdSendAsync() {
            return default(Task<_ovhcloudconnect.SendKeyAnswer>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/task
        private Task<System.Int64[]> GetOvhCloudConnectServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/task/{id}
        private Task<_ovhcloudconnect.Task> GetOvhCloudConnectServiceNameTaskIdAsync() {
            return default(Task<_ovhcloudconnect.Task>);
        }
        
        // Path: /ovhCloudConnect/{serviceName}/terminate
        private Task<System.String> PostOvhCloudConnectServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /pack/siptrunk
        private Task<System.String[]> GetPackSiptrunkAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/siptrunk/{packName}
        private Task<_pack_siptrunk.PackSipTrunkWithIAM> GetPackSiptrunkPackNameAsync() {
            return default(Task<_pack_siptrunk.PackSipTrunkWithIAM>);
        }
        
        // Path: /pack/siptrunk/{packName}/changeContact
        private Task<System.Int64[]> PostPackSiptrunkPackNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /pack/siptrunk/{packName}/serviceInfos
        private Task<_services.Service> GetPackSiptrunkPackNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /pack/siptrunk/{packName}/serviceInfos
        private void PutPackSiptrunkPackNameServiceInfosAsync() {
        }
        
        // Path: /pack/xdsl
        private Task<System.String[]> GetPackXdslAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}
        private Task<_pack_xdsl.PackAdslWithIAM> GetPackXdslPackNameAsync() {
            return default(Task<_pack_xdsl.PackAdslWithIAM>);
        }
        
        // Path: /pack/xdsl/{packName}
        private void PutPackXdslPackNameAsync() {
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/moveOffer
        private Task<_pack_xdsl.AsyncTask<long>> PostPackXdslPackNameAddressMoveMoveOfferAsync() {
            return default(Task<_pack_xdsl.AsyncTask<long>>);
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/offers
        private Task<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>> PostPackXdslPackNameAddressMoveOffersAsync() {
            return default(Task<_pack_xdsl.AsyncTask<_pack_xdsl_addressMove.MoveOfferResponse>>);
        }
        
        // Path: /pack/xdsl/{packName}/addressMove/servicesToDeleteUnpackTerms
        private Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostPackXdslPackNameAddressMoveServicesToDeleteUnpackTermsAsync() {
            return default(Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]>);
        }
        
        // Path: /pack/xdsl/{packName}/canCancelResiliation
        private Task<System.Boolean> GetPackXdslPackNameCanCancelResiliationAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /pack/xdsl/{packName}/cancelResiliation
        private void PostPackXdslPackNameCancelResiliationAsync() {
        }
        
        // Path: /pack/xdsl/{packName}/changeContact
        private Task<System.Int64[]> PostPackXdslPackNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /pack/xdsl/{packName}/contactOwner
        private Task<_pack_xdsl.ContactInfos> GetPackXdslPackNameContactOwnerAsync() {
            return default(Task<_pack_xdsl.ContactInfos>);
        }
        
        // Path: /pack/xdsl/{packName}/domain/options/tlds
        private Task<System.String[]> GetPackXdslPackNameDomainOptionsTldsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/domain/services
        private Task<System.String[]> GetPackXdslPackNameDomainServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/domain/services
        private Task<_pack_xdsl.Task> PostPackXdslPackNameDomainServicesAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/options/domains
        private Task<System.String[]> GetPackXdslPackNameEmailProOptionsDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/options/isEmailAvailable
        private Task<System.Boolean> GetPackXdslPackNameEmailProOptionsIsEmailAvailableAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/services
        private Task<System.String[]> GetPackXdslPackNameEmailProServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/emailPro/services
        private Task<_pack_xdsl.Task> PostPackXdslPackNameEmailProServicesAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeAccount/services
        private Task<System.String[]> GetPackXdslPackNameExchangeAccountServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeAccount/services/{domain}
        private Task<_pack_xdsl.ExchangeAccountService> GetPackXdslPackNameExchangeAccountServicesDomainAsync() {
            return default(Task<_pack_xdsl.ExchangeAccountService>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeIndividual/options/domains
        private Task<System.String[]> GetPackXdslPackNameExchangeIndividualOptionsDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeIndividual/options/isEmailAvailable
        private Task<System.Boolean> GetPackXdslPackNameExchangeIndividualOptionsIsEmailAvailableAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /pack/xdsl/{packName}/exchangeOrganization/services
        private Task<System.String[]> GetPackXdslPackNameExchangeOrganizationServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/options/domains
        private Task<System.String[]> GetPackXdslPackNameHostedEmailOptionsDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services
        private Task<System.String[]> GetPackXdslPackNameHostedEmailServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services
        private Task<_pack_xdsl.Task> PostPackXdslPackNameHostedEmailServicesAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}
        private void DeletePackXdslPackNameHostedEmailServicesDomainAsync() {
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}
        private Task<_pack_xdsl.HostedEmailService> GetPackXdslPackNameHostedEmailServicesDomainAsync() {
            return default(Task<_pack_xdsl.HostedEmailService>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/account
        private Task<_pack_xdsl_HostedEmail.Account> GetPackXdslPackNameHostedEmailServicesDomainAccountAsync() {
            return default(Task<_pack_xdsl_HostedEmail.Account>);
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/changePassword
        private void PostPackXdslPackNameHostedEmailServicesDomainChangePasswordAsync() {
        }
        
        // Path: /pack/xdsl/{packName}/hostedEmail/services/{domain}/configuration
        private Task<_pack_xdsl_HostedEmail.Configuration> GetPackXdslPackNameHostedEmailServicesDomainConfigurationAsync() {
            return default(Task<_pack_xdsl_HostedEmail.Configuration>);
        }
        
        // Path: /pack/xdsl/{packName}/migration/migrate
        private Task<_pack_xdsl.Task> PostPackXdslPackNameMigrationMigrateAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/migration/offers
        private Task<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>> PostPackXdslPackNameMigrationOffersAsync() {
            return default(Task<_pack_xdsl.AsyncTask<_pack_xdsl_migration.MigrationOfferResponse>>);
        }
        
        // Path: /pack/xdsl/{packName}/migration/servicesToDeleteUnpackTerms
        private Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]> PostPackXdslPackNameMigrationServicesToDeleteUnpackTermsAsync() {
            return default(Task<_pack_xdsl_migration.SubServicesDetailsToDelete[]>);
        }
        
        // Path: /pack/xdsl/{packName}/promotionCode/capabilities
        private Task<_pack_xdsl_promotionCode.Capabilities> GetPackXdslPackNamePromotionCodeCapabilitiesAsync() {
            return default(Task<_pack_xdsl_promotionCode.Capabilities>);
        }
        
        // Path: /pack/xdsl/{packName}/promotionCode/generate
        private Task<_pack_xdsl.Task> PostPackXdslPackNamePromotionCodeGenerateAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/resiliate
        private Task<_pack_xdsl.ResiliationFollowUpDetail> PostPackXdslPackNameResiliateAsync() {
            return default(Task<_pack_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /pack/xdsl/{packName}/resiliationFollowUp
        private Task<_pack_xdsl.ResiliationFollowUpDetail> GetPackXdslPackNameResiliationFollowUpAsync() {
            return default(Task<_pack_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /pack/xdsl/{packName}/resiliationTerms
        private Task<_pack_xdsl.ResiliationTerms> GetPackXdslPackNameResiliationTermsAsync() {
            return default(Task<_pack_xdsl.ResiliationTerms>);
        }
        
        // Path: /pack/xdsl/{packName}/serviceInfos
        private Task<_services.Service> GetPackXdslPackNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /pack/xdsl/{packName}/serviceInfos
        private void PutPackXdslPackNameServiceInfosAsync() {
        }
        
        // Path: /pack/xdsl/{packName}/services
        private Task<_pack_xdsl.ServiceInformation[]> GetPackXdslPackNameServicesAsync() {
            return default(Task<_pack_xdsl.ServiceInformation[]>);
        }
        
        // Path: /pack/xdsl/{packName}/shippingAddresses
        private Task<_pack_xdsl.ShippingAddress[]> GetPackXdslPackNameShippingAddressesAsync() {
            return default(Task<_pack_xdsl.ShippingAddress[]>);
        }
        
        // Path: /pack/xdsl/{packName}/subServices
        private Task<System.String[]> GetPackXdslPackNameSubServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/subServices/{domain}
        private Task<_pack_xdsl.Service> GetPackXdslPackNameSubServicesDomainAsync() {
            return default(Task<_pack_xdsl.Service>);
        }
        
        // Path: /pack/xdsl/{packName}/subServices/{domain}/keepServiceTerms
        private Task<_pack_xdsl.UnpackTerms> GetPackXdslPackNameSubServicesDomainKeepServiceTermsAsync() {
            return default(Task<_pack_xdsl.UnpackTerms>);
        }
        
        // Path: /pack/xdsl/{packName}/tasks
        private Task<System.Int64[]> GetPackXdslPackNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /pack/xdsl/{packName}/tasks/{id}
        private Task<_pack_xdsl.Task> GetPackXdslPackNameTasksIdAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/voipBillingAccount/services
        private Task<System.String[]> GetPackXdslPackNameVoipBillingAccountServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/voipEcofax/services
        private Task<System.String[]> GetPackXdslPackNameVoipEcofaxServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/voipEcofax/services
        private Task<_pack_xdsl.Task> PostPackXdslPackNameVoipEcofaxServicesAsync() {
            return default(Task<_pack_xdsl.Task>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/customShippingAddress
        private Task<System.Int64> PostPackXdslPackNameVoipLineOptionsCustomShippingAddressAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/hardwares
        private Task<_pack_xdsl.VoIPHardware[]> GetPackXdslPackNameVoipLineOptionsHardwaresAsync() {
            return default(Task<_pack_xdsl.VoIPHardware[]>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/options/shippingAddresses
        private Task<_pack_xdsl.ShippingAddress[]> GetPackXdslPackNameVoipLineOptionsShippingAddressesAsync() {
            return default(Task<_pack_xdsl.ShippingAddress[]>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services
        private Task<System.String[]> GetPackXdslPackNameVoipLineServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services
        private Task<_pack_xdsl.VoIPLineOrder> PostPackXdslPackNameVoipLineServicesAsync() {
            return default(Task<_pack_xdsl.VoIPLineOrder>);
        }
        
        // Path: /pack/xdsl/{packName}/voipLine/services/{domain}
        private Task<_pack_xdsl.VoipLineService> GetPackXdslPackNameVoipLineServicesDomainAsync() {
            return default(Task<_pack_xdsl.VoipLineService>);
        }
        
        // Path: /pack/xdsl/{packName}/xdslAccess/services
        private Task<System.String[]> GetPackXdslPackNameXdslAccessServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /partner
        private Task<_partner2.Partner> GetPartnerAsync() {
            return default(Task<_partner2.Partner>);
        }
        
        // Path: /partner
        private void PostPartnerAsync() {
        }
        
        // Path: /price/dedicated/server/antiDDoSPro/{commercialRange}
        private Task<_order.Price> GetPriceDedicatedServerAntiDDoSProCommercialRangeAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicated/server/backupStorage/{capacity}
        private Task<_order.Price> GetPriceDedicatedServerBackupStorageCapacityAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicated/server/firewall/{firewallModel}
        private Task<_order.Price> GetPriceDedicatedServerFirewallFirewallModelAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicated/server/ip/{routedTo}
        private Task<_order.Price> GetPriceDedicatedServerIpRoutedToAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/bhs1a/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Bhs1aHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/rbx2a/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Rbx2aHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2013v1/sbg1a/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2013v1Sbg1aHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v1Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2014v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2014v2Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v1Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v2Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v3Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v4Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v5Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v6Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/enterprise/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aEnterpriseHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2016v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2016v7Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v1/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v1Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v2/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v2Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v3/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v3Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v4/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v4Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v5/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v5Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v6/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v6Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/bhs1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Bhs1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/eri1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Eri1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/lim1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Lim1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2b/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2bInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/rbx2d/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Rbx2dInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/sbg1a/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Sbg1aInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/hourly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureFilerHourlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/filer/monthly/{filerProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureFilerMonthlyFilerProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/host/hourly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureHostHourlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/dedicatedCloud/2018v7/waw1c/infrastructure/host/monthly/{hostProfile}
        private Task<_order.Price> GetPriceDedicatedCloud2018v7Waw1cInfrastructureHostMonthlyHostProfileAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/domain/zone/option/{optionName}
        private Task<_order.Price> GetPriceDomainZoneOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/hosting/privateDatabase/{privateDatabaseName}
        private Task<_order.Price> GetPriceHostingPrivateDatabasePrivateDatabaseNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/hosting/web/cdn/{cdnName}
        private Task<_order.Price> GetPriceHostingWebCdnCdnNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/hosting/web/extraSqlPerso/{extraSqlPersoName}
        private Task<_order.Price> GetPriceHostingWebExtraSqlPersoExtraSqlPersoNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/hosting/web/ssl/{sslName}
        private Task<_order.Price> GetPriceHostingWebSslSslNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/license/office/{officeName}
        private Task<_order.Price> GetPriceLicenseOfficeOfficeNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/overTheBox/offer/{offerName}
        private Task<_order.Price> GetPriceOverTheBoxOfferOfferNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/saas/csp2/license/{licenseName}
        private Task<_order.Price> GetPriceSaasCsp2LicenseLicenseNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2013v1/classic/model/{modelName}
        private Task<_order.Price> GetPriceVps2013v1ClassicModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2013v1/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2013v1CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2013v1/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2013v1CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2013v1/lowlat/model/{modelName}
        private Task<_order.Price> GetPriceVps2013v1LowlatModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2014v1/classic/model/{modelName}
        private Task<_order.Price> GetPriceVps2014v1ClassicModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2014v1/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2014v1CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2014v1/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2014v1CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2015v1CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2015v1CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/cloudram/model/{modelName}
        private Task<_order.Price> GetPriceVps2015v1CloudramModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/cloudram/option/{optionName}
        private Task<_order.Price> GetPriceVps2015v1CloudramOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2015v1SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2015v1/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2015v1SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v1/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v1SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v1/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v1SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v2CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v2CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/cloudram/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v2CloudramModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/cloudram/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v2CloudramOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v2SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v2/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v2SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v3CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v3CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/cloudram/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v3CloudramModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/cloudram/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v3CloudramOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2017v3SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2017v3/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2017v3SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVps2018v1CloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVps2018v1CloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/cloudram/model/{modelName}
        private Task<_order.Price> GetPriceVps2018v1CloudramModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/cloudram/option/{optionName}
        private Task<_order.Price> GetPriceVps2018v1CloudramOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2018v1SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v1/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2018v1SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v2/ssd/model/{modelName}
        private Task<_order.Price> GetPriceVps2018v2SsdModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/2018v2/ssd/option/{optionName}
        private Task<_order.Price> GetPriceVps2018v2SsdOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/classic/model/{modelName}
        private Task<_order.Price> GetPriceVpsClassicModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/cloud/model/{modelName}
        private Task<_order.Price> GetPriceVpsCloudModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/cloud/option/{optionName}
        private Task<_order.Price> GetPriceVpsCloudOptionOptionNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/vps/lowlat/model/{modelName}
        private Task<_order.Price> GetPriceVpsLowlatModelModelNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/addressMove/fee/{option}
        private Task<_order.Price> GetPriceXdslAddressMoveFeeOptionAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/installation/{offer}
        private Task<_order.Price> GetPriceXdslInstallationOfferAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/offers/{offersName}
        private Task<_order.Price> GetPriceXdslOffersOffersNameAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/options/installation/{option}
        private Task<_order.Price> GetPriceXdslOptionsInstallationOptionAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/options/ipv4/{ipRange}
        private Task<_order.Price> GetPriceXdslOptionsIpv4IpRangeAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /price/xdsl/options/line/{lineAction}
        private Task<_order.Price> GetPriceXdslOptionsLineLineActionAsync() {
            return default(Task<_order.Price>);
        }
        
        // Path: /products/catalog
        private Task<System.Int64[]> GetProductsCatalogAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /products/catalog/{catalogId}
        private Task<_products_catalog.Catalog> GetProductsCatalogCatalogIdAsync() {
            return default(Task<_products_catalog.Catalog>);
        }
        
        // Path: /products/catalog/{catalogId}/addons
        private Task<_products_catalog.Plan[]> GetProductsCatalogCatalogIdAddonsAsync() {
            return default(Task<_products_catalog.Plan[]>);
        }
        
        // Path: /products/catalog/{catalogId}/fullPlans
        private Task<_products_catalog.PlanFull[]> GetProductsCatalogCatalogIdFullPlansAsync() {
            return default(Task<_products_catalog.PlanFull[]>);
        }
        
        // Path: /products/catalog/{catalogId}/plans
        private Task<_products_catalog.Plan[]> GetProductsCatalogCatalogIdPlansAsync() {
            return default(Task<_products_catalog.Plan[]>);
        }
        
        // Path: /products/catalog/{catalogId}/products
        private Task<_products_catalog.Product[]> GetProductsCatalogCatalogIdProductsAsync() {
            return default(Task<_products_catalog.Product[]>);
        }
        
        // Path: /saas/csp2
        private Task<System.String[]> GetSaasCsp2Async() {
            return default(Task<System.String[]>);
        }
        
        // Path: /saas/csp2/{serviceName}
        private Task<_saas_csp2.OfficeTenantWithIAM> GetSaasCsp2ServiceNameAsync() {
            return default(Task<_saas_csp2.OfficeTenantWithIAM>);
        }
        
        // Path: /saas/csp2/{serviceName}
        private void PutSaasCsp2ServiceNameAsync() {
        }
        
        // Path: /saas/csp2/{serviceName}/billingPeriodPeaks
        private Task<_saas_csp2.BillingStatistics> GetSaasCsp2ServiceNameBillingPeriodPeaksAsync() {
            return default(Task<_saas_csp2.BillingStatistics>);
        }
        
        // Path: /saas/csp2/{serviceName}/orderableLicenses
        private Task<System.Int64[]> GetSaasCsp2ServiceNameOrderableLicensesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /saas/csp2/{serviceName}/orderableLicenses/{id}
        private Task<_saas_csp2.OfficeLicence> GetSaasCsp2ServiceNameOrderableLicensesIdAsync() {
            return default(Task<_saas_csp2.OfficeLicence>);
        }
        
        // Path: /saas/csp2/{serviceName}/serviceInfos
        private Task<_services.Service> GetSaasCsp2ServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /saas/csp2/{serviceName}/serviceInfos
        private void PutSaasCsp2ServiceNameServiceInfosAsync() {
        }
        
        // Path: /saas/csp2/{serviceName}/subscription
        private Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription
        private Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionAsync() {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}
        private Task<_saas_csp2.OfficeTask> DeleteSaasCsp2ServiceNameSubscriptionIdAsync() {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}
        private Task<_saas_csp2.OfficeSubscription> GetSaasCsp2ServiceNameSubscriptionIdAsync() {
            return default(Task<_saas_csp2.OfficeSubscription>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/addonsSubscriptionIds
        private Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionIdAddonsSubscriptionIdsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/availableAddonLicenses
        private Task<System.Int64[]> GetSaasCsp2ServiceNameSubscriptionIdAvailableAddonLicensesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/changeQuantity
        private Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionIdChangeQuantityAsync() {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/subscription/{id}/orderAddon
        private Task<_saas_csp2.OfficeTask> PostSaasCsp2ServiceNameSubscriptionIdOrderAddonAsync() {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/task
        private Task<System.Int64[]> GetSaasCsp2ServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /saas/csp2/{serviceName}/task/{id}
        private Task<_saas_csp2.OfficeTask> GetSaasCsp2ServiceNameTaskIdAsync() {
            return default(Task<_saas_csp2.OfficeTask>);
        }
        
        // Path: /saas/csp2/{serviceName}/usageStatistics
        private Task<_saas_csp2.Statistics[]> GetSaasCsp2ServiceNameUsageStatisticsAsync() {
            return default(Task<_saas_csp2.Statistics[]>);
        }
        
        // Path: /secret/retrieve
        private Task<_secret.Secret> PostSecretRetrieveAsync() {
            return default(Task<_secret.Secret>);
        }
        
        // Path: /service
        private Task<System.Int64[]> GetServiceAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /service/{serviceId}
        private Task<_serviceList.Service> GetServiceServiceIdAsync() {
            return default(Task<_serviceList.Service>);
        }
        
        // Path: /service/{serviceId}
        private void PutServiceServiceIdAsync() {
        }
        
        // Path: /service/{serviceId}/renew
        private Task<_service_renew.RenewDescription[]> GetServiceServiceIdRenewAsync() {
            return default(Task<_service_renew.RenewDescription[]>);
        }
        
        // Path: /service/{serviceId}/renew
        private Task<_service_renew.RenewOrder> PostServiceServiceIdRenewAsync() {
            return default(Task<_service_renew.RenewOrder>);
        }
        
        // Path: /service/{serviceId}/reopen
        private void PostServiceServiceIdReopenAsync() {
        }
        
        // Path: /service/{serviceId}/suspend
        private void PostServiceServiceIdSuspendAsync() {
        }
        
        // Path: /service/{serviceId}/terminate
        private void PostServiceServiceIdTerminateAsync() {
        }
        
        // Path: /services
        private Task<System.Int64[]> GetServicesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /services/{serviceId}
        private Task<_services_expanded.Service> GetServicesServiceIdAsync() {
            return default(Task<_services_expanded.Service>);
        }
        
        // Path: /services/{serviceId}
        private void PutServicesServiceIdAsync() {
        }
        
        // Path: /services/{serviceId}/billing/engagement
        private Task<_services_billing_engagement.Engagement> GetServicesServiceIdBillingEngagementAsync() {
            return default(Task<_services_billing_engagement.Engagement>);
        }
        
        // Path: /services/{serviceId}/billing/engagement/available
        private Task<_services_billing.Pricing[]> GetServicesServiceIdBillingEngagementAvailableAsync() {
            return default(Task<_services_billing.Pricing[]>);
        }
        
        // Path: /services/{serviceId}/billing/engagement/endRule
        private void PutServicesServiceIdBillingEngagementEndRuleAsync() {
        }
        
        // Path: /services/{serviceId}/billing/engagement/flush
        private Task<_services_billing_engagement.EngagementFlushOrder> PostServicesServiceIdBillingEngagementFlushAsync() {
            return default(Task<_services_billing_engagement.EngagementFlushOrder>);
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        private void DeleteServicesServiceIdBillingEngagementRequestAsync() {
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        private Task<_services_billing_engagement.EngagementRequest> GetServicesServiceIdBillingEngagementRequestAsync() {
            return default(Task<_services_billing_engagement.EngagementRequest>);
        }
        
        // Path: /services/{serviceId}/billing/engagement/request
        private Task<_services_billing_engagement.EngagementRequest> PostServicesServiceIdBillingEngagementRequestAsync() {
            return default(Task<_services_billing_engagement.EngagementRequest>);
        }
        
        // Path: /services/{serviceId}/consumption
        private Task<_services_consumption.Summary> GetServicesServiceIdConsumptionAsync() {
            return default(Task<_services_consumption.Summary>);
        }
        
        // Path: /services/{serviceId}/consumption/element
        private Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionElementAsync() {
            return default(Task<_services_consumption.Element[]>);
        }
        
        // Path: /services/{serviceId}/consumption/forecast
        private Task<_services_consumption.Summary> GetServicesServiceIdConsumptionForecastAsync() {
            return default(Task<_services_consumption.Summary>);
        }
        
        // Path: /services/{serviceId}/consumption/forecast/element
        private Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionForecastElementAsync() {
            return default(Task<_services_consumption.Element[]>);
        }
        
        // Path: /services/{serviceId}/consumption/history
        private Task<System.Int64[]> GetServicesServiceIdConsumptionHistoryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /services/{serviceId}/consumption/history/{id}
        private Task<_services_consumption.Summary> GetServicesServiceIdConsumptionHistoryIdAsync() {
            return default(Task<_services_consumption.Summary>);
        }
        
        // Path: /services/{serviceId}/consumption/history/{id}/element
        private Task<_services_consumption.Element[]> GetServicesServiceIdConsumptionHistoryIdElementAsync() {
            return default(Task<_services_consumption.Element[]>);
        }
        
        // Path: /services/{serviceId}/detach
        private Task<_order_cart.GenericProductDefinition[]> GetServicesServiceIdDetachAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /services/{serviceId}/detach/{planCode}
        private Task<_order_cart.GenericProductDefinition> GetServicesServiceIdDetachPlanCodeAsync() {
            return default(Task<_order_cart.GenericProductDefinition>);
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/execute
        private Task<_services_operation.Order> PostServicesServiceIdDetachPlanCodeExecuteAsync() {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/options
        private Task<_services_operation.DetachOptionsDefinition[]> GetServicesServiceIdDetachPlanCodeOptionsAsync() {
            return default(Task<_services_operation.DetachOptionsDefinition[]>);
        }
        
        // Path: /services/{serviceId}/detach/{planCode}/simulate
        private Task<_services_operation.Order> PostServicesServiceIdDetachPlanCodeSimulateAsync() {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/form
        private Task<_services_form.Description[]> GetServicesServiceIdFormAsync() {
            return default(Task<_services_form.Description[]>);
        }
        
        // Path: /services/{serviceId}/form/{formName}
        private Task<_services_form.Description> GetServicesServiceIdFormFormNameAsync() {
            return default(Task<_services_form.Description>);
        }
        
        // Path: /services/{serviceId}/form/{formName}/answer
        private Task<_services_form.Response> PostServicesServiceIdFormFormNameAnswerAsync() {
            return default(Task<_services_form.Response>);
        }
        
        // Path: /services/{serviceId}/options
        private Task<_services_expanded.Service[]> GetServicesServiceIdOptionsAsync() {
            return default(Task<_services_expanded.Service[]>);
        }
        
        // Path: /services/{serviceId}/renewPeriodCapacities
        private Task<System.TimeSpan[]> GetServicesServiceIdRenewPeriodCapacitiesAsync() {
            return default(Task<System.TimeSpan[]>);
        }
        
        // Path: /services/{serviceId}/technicalDetails
        private Task<_services_expanded.TechnicalDetails> GetServicesServiceIdTechnicalDetailsAsync() {
            return default(Task<_services_expanded.TechnicalDetails>);
        }
        
        // Path: /services/{serviceId}/terminate
        private Task<_services_terminate.TerminationAnswer> PostServicesServiceIdTerminateAsync() {
            return default(Task<_services_terminate.TerminationAnswer>);
        }
        
        // Path: /services/{serviceId}/terminate/confirm
        private Task<_services_terminate.TerminationAnswer> PostServicesServiceIdTerminateConfirmAsync() {
            return default(Task<_services_terminate.TerminationAnswer>);
        }
        
        // Path: /services/{serviceId}/upgrade
        private Task<_order_cart.GenericProductDefinition[]> GetServicesServiceIdUpgradeAsync() {
            return default(Task<_order_cart.GenericProductDefinition[]>);
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}
        private Task<_order_cart.GenericProductDefinition> GetServicesServiceIdUpgradePlanCodeAsync() {
            return default(Task<_order_cart.GenericProductDefinition>);
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}/execute
        private Task<_services_operation.Order> PostServicesServiceIdUpgradePlanCodeExecuteAsync() {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /services/{serviceId}/upgrade/{planCode}/simulate
        private Task<_services_operation.Order> PostServicesServiceIdUpgradePlanCodeSimulateAsync() {
            return default(Task<_services_operation.Order>);
        }
        
        // Path: /sms
        private Task<System.String[]> GetSmsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/estimate
        private Task<_sms.JobEstimate> PostSmsEstimateAsync() {
            return default(Task<_sms.JobEstimate>);
        }
        
        // Path: /sms/ptts
        private Task<_sms.PttDetails> GetSmsPttsAsync() {
            return default(Task<_sms.PttDetails>);
        }
        
        // Path: /sms/rates/destinations
        private Task<_sms.DestinationRates> GetSmsRatesDestinationsAsync() {
            return default(Task<_sms.DestinationRates>);
        }
        
        // Path: /sms/rates/packs
        private Task<_sms.PackDetails[]> GetSmsRatesPacksAsync() {
            return default(Task<_sms.PackDetails[]>);
        }
        
        // Path: /sms/virtualNumbers
        private Task<System.String[]> GetSmsVirtualNumbersAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/virtualNumbers/{number}
        private Task<_sms.VirtualNumberGenericServiceWithIAM> GetSmsVirtualNumbersNumberAsync() {
            return default(Task<_sms.VirtualNumberGenericServiceWithIAM>);
        }
        
        // Path: /sms/virtualNumbers/{number}/serviceInfos
        private Task<_services.Service> GetSmsVirtualNumbersNumberServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /sms/virtualNumbers/{number}/serviceInfos
        private void PutSmsVirtualNumbersNumberServiceInfosAsync() {
        }
        
        // Path: /sms/{serviceName}
        private Task<_sms.AccountWithIAM> GetSmsServiceNameAsync() {
            return default(Task<_sms.AccountWithIAM>);
        }
        
        // Path: /sms/{serviceName}
        private void PutSmsServiceNameAsync() {
        }
        
        // Path: /sms/{serviceName}/batches
        private Task<_sms.Batch[]> GetSmsServiceNameBatchesAsync() {
            return default(Task<_sms.Batch[]>);
        }
        
        // Path: /sms/{serviceName}/batches
        private Task<_sms.Batch> PostSmsServiceNameBatchesAsync() {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        private void DeleteSmsServiceNameBatchesIdAsync() {
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        private Task<_sms.Batch> GetSmsServiceNameBatchesIdAsync() {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}
        private Task<_sms.Batch> PutSmsServiceNameBatchesIdAsync() {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}/cancel
        private Task<_sms.Batch> PostSmsServiceNameBatchesIdCancelAsync() {
            return default(Task<_sms.Batch>);
        }
        
        // Path: /sms/{serviceName}/batches/{id}/statistics
        private Task<_sms.BatchStatistics> GetSmsServiceNameBatchesIdStatisticsAsync() {
            return default(Task<_sms.BatchStatistics>);
        }
        
        // Path: /sms/{serviceName}/blacklists
        private Task<System.String[]> GetSmsServiceNameBlacklistsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/blacklists/{number}
        private void DeleteSmsServiceNameBlacklistsNumberAsync() {
        }
        
        // Path: /sms/{serviceName}/blacklists/{number}
        private Task<_sms.Blacklist> GetSmsServiceNameBlacklistsNumberAsync() {
            return default(Task<_sms.Blacklist>);
        }
        
        // Path: /sms/{serviceName}/document
        private Task<System.String> GetSmsServiceNameDocumentAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/exceptions
        private Task<_sms.Exception[]> GetSmsServiceNameExceptionsAsync() {
            return default(Task<_sms.Exception[]>);
        }
        
        // Path: /sms/{serviceName}/hlr
        private Task<System.Int64[]> GetSmsServiceNameHlrAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/hlr
        private Task<_sms.SmsSendingReport> PostSmsServiceNameHlrAsync() {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/hlr/{id}
        private Task<_sms.HlrLookupNumber> GetSmsServiceNameHlrIdAsync() {
            return default(Task<_sms.HlrLookupNumber>);
        }
        
        // Path: /sms/{serviceName}/hlr/{id}/operator
        private Task<_sms.Hlr> GetSmsServiceNameHlrIdOperatorAsync() {
            return default(Task<_sms.Hlr>);
        }
        
        // Path: /sms/{serviceName}/incoming
        private Task<System.Int64[]> GetSmsServiceNameIncomingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/incoming/{id}
        private void DeleteSmsServiceNameIncomingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/incoming/{id}
        private Task<_sms.Incoming> GetSmsServiceNameIncomingIdAsync() {
            return default(Task<_sms.Incoming>);
        }
        
        // Path: /sms/{serviceName}/jobs
        private Task<System.Int64[]> GetSmsServiceNameJobsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/jobs
        private Task<_sms.SmsSendingReport> PostSmsServiceNameJobsAsync() {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/jobs/{id}
        private void DeleteSmsServiceNameJobsIdAsync() {
        }
        
        // Path: /sms/{serviceName}/jobs/{id}
        private Task<_sms.Job> GetSmsServiceNameJobsIdAsync() {
            return default(Task<_sms.Job>);
        }
        
        // Path: /sms/{serviceName}/outgoing
        private Task<System.Int64[]> GetSmsServiceNameOutgoingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}
        private void DeleteSmsServiceNameOutgoingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}
        private Task<_sms.Outgoing> GetSmsServiceNameOutgoingIdAsync() {
            return default(Task<_sms.Outgoing>);
        }
        
        // Path: /sms/{serviceName}/outgoing/{id}/hlr
        private Task<_sms.Hlr> GetSmsServiceNameOutgoingIdHlrAsync() {
            return default(Task<_sms.Hlr>);
        }
        
        // Path: /sms/{serviceName}/phonebooks
        private Task<System.String[]> GetSmsServiceNamePhonebooksAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/phonebooks
        private Task<System.String> PostSmsServiceNamePhonebooksAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        private void DeleteSmsServiceNamePhonebooksBookKeyAsync() {
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        private Task<_sms.Phonebook> GetSmsServiceNamePhonebooksBookKeyAsync() {
            return default(Task<_sms.Phonebook>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}
        private void PutSmsServiceNamePhonebooksBookKeyAsync() {
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/export
        private Task<_telephony.PcsFile> GetSmsServiceNamePhonebooksBookKeyExportAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/import
        private Task<_telephony.Task> PostSmsServiceNamePhonebooksBookKeyImportAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        private Task<System.Int64[]> GetSmsServiceNamePhonebooksBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact
        private Task<System.Int64> PostSmsServiceNamePhonebooksBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        private void DeleteSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        private Task<_sms.PhonebookContact> GetSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync() {
            return default(Task<_sms.PhonebookContact>);
        }
        
        // Path: /sms/{serviceName}/phonebooks/{bookKey}/phonebookContact/{id}
        private void PutSmsServiceNamePhonebooksBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /sms/{serviceName}/receivers
        private Task<System.Int64[]> GetSmsServiceNameReceiversAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/receivers
        private Task<_sms.Receiver> PostSmsServiceNameReceiversAsync() {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        private void DeleteSmsServiceNameReceiversSlotIdAsync() {
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        private Task<_sms.Receiver> GetSmsServiceNameReceiversSlotIdAsync() {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}
        private void PutSmsServiceNameReceiversSlotIdAsync() {
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}/clean
        private Task<_sms.ReceiversAsynchronousCleanReport> PostSmsServiceNameReceiversSlotIdCleanAsync() {
            return default(Task<_sms.ReceiversAsynchronousCleanReport>);
        }
        
        // Path: /sms/{serviceName}/receivers/{slotId}/csv
        private Task<System.String> GetSmsServiceNameReceiversSlotIdCsvAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/seeOffers
        private Task<_sms.PackOffer[]> GetSmsServiceNameSeeOffersAsync() {
            return default(Task<_sms.PackOffer[]>);
        }
        
        // Path: /sms/{serviceName}/senders
        private Task<System.String[]> GetSmsServiceNameSendersAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/senders
        private Task<System.String> PostSmsServiceNameSendersAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        private void DeleteSmsServiceNameSendersSenderAsync() {
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        private Task<_sms.Sender> GetSmsServiceNameSendersSenderAsync() {
            return default(Task<_sms.Sender>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}
        private void PutSmsServiceNameSendersSenderAsync() {
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents
        private Task<System.Guid[]> GetSmsServiceNameSendersSenderDocumentsAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents
        private Task<_sms.SenderDocument> PostSmsServiceNameSendersSenderDocumentsAsync() {
            return default(Task<_sms.SenderDocument>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents/{documentID}
        private Task<_sms.SenderDocument> GetSmsServiceNameSendersSenderDocumentsDocumentIDAsync() {
            return default(Task<_sms.SenderDocument>);
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/documents/{documentID}
        private void PutSmsServiceNameSendersSenderDocumentsDocumentIDAsync() {
        }
        
        // Path: /sms/{serviceName}/senders/{sender}/validate
        private void PostSmsServiceNameSendersSenderValidateAsync() {
        }
        
        // Path: /sms/{serviceName}/sendersAvailableForValidation
        private Task<_sms.SenderAvailable[]> GetSmsServiceNameSendersAvailableForValidationAsync() {
            return default(Task<_sms.SenderAvailable[]>);
        }
        
        // Path: /sms/{serviceName}/serviceInfos
        private Task<_services.Service> GetSmsServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /sms/{serviceName}/serviceInfos
        private void PutSmsServiceNameServiceInfosAsync() {
        }
        
        // Path: /sms/{serviceName}/smpp/allowedIPs
        private Task<System.Net.IPAddress[]> GetSmsServiceNameSmppAllowedIPsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /sms/{serviceName}/smpp/allowedIPs
        private Task<System.Net.IPAddress[]> PutSmsServiceNameSmppAllowedIPsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /sms/{serviceName}/smpp/password
        private void PostSmsServiceNameSmppPasswordAsync() {
        }
        
        // Path: /sms/{serviceName}/smpp/settings
        private Task<_sms.Settings> GetSmsServiceNameSmppSettingsAsync() {
            return default(Task<_sms.Settings>);
        }
        
        // Path: /sms/{serviceName}/task
        private Task<System.Int64[]> GetSmsServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/task/{taskId}
        private Task<_sms.Task> GetSmsServiceNameTaskTaskIdAsync() {
            return default(Task<_sms.Task>);
        }
        
        // Path: /sms/{serviceName}/templatesControl
        private Task<System.String[]> GetSmsServiceNameTemplatesControlAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/templatesControl
        private void PostSmsServiceNameTemplatesControlAsync() {
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        private void DeleteSmsServiceNameTemplatesControlNameAsync() {
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        private Task<_sms.TemplateControl> GetSmsServiceNameTemplatesControlNameAsync() {
            return default(Task<_sms.TemplateControl>);
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}
        private void PutSmsServiceNameTemplatesControlNameAsync() {
        }
        
        // Path: /sms/{serviceName}/templatesControl/{name}/relaunchValidation
        private void PostSmsServiceNameTemplatesControlNameRelaunchValidationAsync() {
        }
        
        // Path: /sms/{serviceName}/transferCredits
        private void PostSmsServiceNameTransferCreditsAsync() {
        }
        
        // Path: /sms/{serviceName}/users
        private Task<System.String[]> GetSmsServiceNameUsersAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/users
        private void PostSmsServiceNameUsersAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}
        private void DeleteSmsServiceNameUsersLoginAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}
        private Task<_sms.User> GetSmsServiceNameUsersLoginAsync() {
            return default(Task<_sms.User>);
        }
        
        // Path: /sms/{serviceName}/users/{login}
        private void PutSmsServiceNameUsersLoginAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/document
        private Task<System.String> GetSmsServiceNameUsersLoginDocumentAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming
        private Task<System.Int64[]> GetSmsServiceNameUsersLoginIncomingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming/{id}
        private void DeleteSmsServiceNameUsersLoginIncomingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/incoming/{id}
        private Task<_sms.Incoming> GetSmsServiceNameUsersLoginIncomingIdAsync() {
            return default(Task<_sms.Incoming>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs
        private Task<System.Int64[]> GetSmsServiceNameUsersLoginJobsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs
        private Task<_sms.SmsSendingReport> PostSmsServiceNameUsersLoginJobsAsync() {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs/{id}
        private void DeleteSmsServiceNameUsersLoginJobsIdAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/jobs/{id}
        private Task<_sms.Job> GetSmsServiceNameUsersLoginJobsIdAsync() {
            return default(Task<_sms.Job>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing
        private Task<System.Int64[]> GetSmsServiceNameUsersLoginOutgoingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}
        private void DeleteSmsServiceNameUsersLoginOutgoingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}
        private Task<_sms.Outgoing> GetSmsServiceNameUsersLoginOutgoingIdAsync() {
            return default(Task<_sms.Outgoing>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/outgoing/{id}/hlr
        private Task<_sms.Hlr> GetSmsServiceNameUsersLoginOutgoingIdHlrAsync() {
            return default(Task<_sms.Hlr>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers
        private Task<System.Int64[]> GetSmsServiceNameUsersLoginReceiversAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers
        private Task<_sms.Receiver> PostSmsServiceNameUsersLoginReceiversAsync() {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        private void DeleteSmsServiceNameUsersLoginReceiversSlotIdAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        private Task<_sms.Receiver> GetSmsServiceNameUsersLoginReceiversSlotIdAsync() {
            return default(Task<_sms.Receiver>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}
        private void PutSmsServiceNameUsersLoginReceiversSlotIdAsync() {
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}/clean
        private Task<_sms.ReceiversAsynchronousCleanReport> PostSmsServiceNameUsersLoginReceiversSlotIdCleanAsync() {
            return default(Task<_sms.ReceiversAsynchronousCleanReport>);
        }
        
        // Path: /sms/{serviceName}/users/{login}/receivers/{slotId}/csv
        private Task<System.String> GetSmsServiceNameUsersLoginReceiversSlotIdCsvAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers
        private Task<System.String[]> GetSmsServiceNameVirtualNumbersAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}
        private Task<_sms.VirtualNumber> GetSmsServiceNameVirtualNumbersNumberAsync() {
            return default(Task<_sms.VirtualNumber>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        private void DeleteSmsServiceNameVirtualNumbersNumberChatAccessAsync() {
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        private Task<_sms.ChatAccess> GetSmsServiceNameVirtualNumbersNumberChatAccessAsync() {
            return default(Task<_sms.ChatAccess>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/chatAccess
        private Task<_sms.ChatAccess> PostSmsServiceNameVirtualNumbersNumberChatAccessAsync() {
            return default(Task<_sms.ChatAccess>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming
        private Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberIncomingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        private void DeleteSmsServiceNameVirtualNumbersNumberIncomingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/incoming/{id}
        private Task<_sms.Incoming> GetSmsServiceNameVirtualNumbersNumberIncomingIdAsync() {
            return default(Task<_sms.Incoming>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs
        private Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberJobsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs
        private Task<_sms.SmsSendingReport> PostSmsServiceNameVirtualNumbersNumberJobsAsync() {
            return default(Task<_sms.SmsSendingReport>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        private void DeleteSmsServiceNameVirtualNumbersNumberJobsIdAsync() {
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/jobs/{id}
        private Task<_sms.VirtualNumberJob> GetSmsServiceNameVirtualNumbersNumberJobsIdAsync() {
            return default(Task<_sms.VirtualNumberJob>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing
        private Task<System.Int64[]> GetSmsServiceNameVirtualNumbersNumberOutgoingAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        private void DeleteSmsServiceNameVirtualNumbersNumberOutgoingIdAsync() {
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}
        private Task<_sms.Outgoing> GetSmsServiceNameVirtualNumbersNumberOutgoingIdAsync() {
            return default(Task<_sms.Outgoing>);
        }
        
        // Path: /sms/{serviceName}/virtualNumbers/{number}/outgoing/{id}/hlr
        private Task<_sms.Hlr> GetSmsServiceNameVirtualNumbersNumberOutgoingIdHlrAsync() {
            return default(Task<_sms.Hlr>);
        }
        
        // Path: /ssl
        private Task<System.String[]> GetSslAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /ssl/{serviceName}
        private Task<_ssl.CertificateWithIAM> GetSslServiceNameAsync() {
            return default(Task<_ssl.CertificateWithIAM>);
        }
        
        // Path: /ssl/{serviceName}/serviceInfos
        private Task<_services.Service> GetSslServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /ssl/{serviceName}/serviceInfos
        private void PutSslServiceNameServiceInfosAsync() {
        }
        
        // Path: /ssl/{serviceName}/tasks
        private Task<System.Int64[]> GetSslServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /ssl/{serviceName}/tasks/{taskId}
        private Task<_ssl.Operation> GetSslServiceNameTasksTaskIdAsync() {
            return default(Task<_ssl.Operation>);
        }
        
        // Path: /sslGateway
        private Task<System.String[]> GetSslGatewayAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sslGateway/availableZones
        private Task<System.String[]> GetSslGatewayAvailableZonesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sslGateway/eligibility
        private Task<_sslGateway.EligibilityStatus> GetSslGatewayEligibilityAsync() {
            return default(Task<_sslGateway.EligibilityStatus>);
        }
        
        // Path: /sslGateway/{serviceName}
        private Task<_sslGateway.SslGatewayWithIAM> GetSslGatewayServiceNameAsync() {
            return default(Task<_sslGateway.SslGatewayWithIAM>);
        }
        
        // Path: /sslGateway/{serviceName}
        private void PutSslGatewayServiceNameAsync() {
        }
        
        // Path: /sslGateway/{serviceName}/changeContact
        private Task<System.Int64[]> PostSslGatewayServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sslGateway/{serviceName}/confirmTermination
        private Task<System.String> PostSslGatewayServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /sslGateway/{serviceName}/domain
        private Task<System.Int64[]> GetSslGatewayServiceNameDomainAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sslGateway/{serviceName}/domain
        private Task<_sslGateway.Domain> PostSslGatewayServiceNameDomainAsync() {
            return default(Task<_sslGateway.Domain>);
        }
        
        // Path: /sslGateway/{serviceName}/domain/{id}
        private void DeleteSslGatewayServiceNameDomainIdAsync() {
        }
        
        // Path: /sslGateway/{serviceName}/domain/{id}
        private Task<_sslGateway.Domain> GetSslGatewayServiceNameDomainIdAsync() {
            return default(Task<_sslGateway.Domain>);
        }
        
        // Path: /sslGateway/{serviceName}/natIp
        private Task<_sslGateway.NatIps[]> GetSslGatewayServiceNameNatIpAsync() {
            return default(Task<_sslGateway.NatIps[]>);
        }
        
        // Path: /sslGateway/{serviceName}/renewCertificate
        private Task<System.String[]> PostSslGatewayServiceNameRenewCertificateAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /sslGateway/{serviceName}/server
        private Task<System.Int64[]> GetSslGatewayServiceNameServerAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sslGateway/{serviceName}/server
        private Task<_sslGateway.Server> PostSslGatewayServiceNameServerAsync() {
            return default(Task<_sslGateway.Server>);
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        private void DeleteSslGatewayServiceNameServerIdAsync() {
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        private Task<_sslGateway.Server> GetSslGatewayServiceNameServerIdAsync() {
            return default(Task<_sslGateway.Server>);
        }
        
        // Path: /sslGateway/{serviceName}/server/{id}
        private void PutSslGatewayServiceNameServerIdAsync() {
        }
        
        // Path: /sslGateway/{serviceName}/serviceInfos
        private Task<_services.Service> GetSslGatewayServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /sslGateway/{serviceName}/serviceInfos
        private void PutSslGatewayServiceNameServiceInfosAsync() {
        }
        
        // Path: /sslGateway/{serviceName}/task
        private Task<System.Int64[]> GetSslGatewayServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /sslGateway/{serviceName}/task/{id}
        private Task<_sslGateway.Task> GetSslGatewayServiceNameTaskIdAsync() {
            return default(Task<_sslGateway.Task>);
        }
        
        // Path: /sslGateway/{serviceName}/terminate
        private Task<System.String> PostSslGatewayServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /stack/mis
        private Task<System.String[]> GetStackMisAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /stack/mis/{serviceName}
        private Task<_stack_mis.productWithIAM> GetStackMisServiceNameAsync() {
            return default(Task<_stack_mis.productWithIAM>);
        }
        
        // Path: /stack/mis/{serviceName}/serviceInfos
        private Task<_services.Service> GetStackMisServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /stack/mis/{serviceName}/serviceInfos
        private void PutStackMisServiceNameServiceInfosAsync() {
        }
        
        // Path: /startup
        private Task<_startup.startup> GetStartupAsync() {
            return default(Task<_startup.startup>);
        }
        
        // Path: /startup
        private void PostStartupAsync() {
        }
        
        // Path: /storage/netapp
        private Task<_storage.NetAppServiceWithIAM[]> GetStorageNetappAsync() {
            return default(Task<_storage.NetAppServiceWithIAM[]>);
        }
        
        // Path: /storage/netapp/{serviceName}
        private Task<_storage.NetAppServiceWithIAM> GetStorageNetappServiceNameAsync() {
            return default(Task<_storage.NetAppServiceWithIAM>);
        }
        
        // Path: /storage/netapp/{serviceName}
        private Task<_storage.NetAppService> PutStorageNetappServiceNameAsync() {
            return default(Task<_storage.NetAppService>);
        }
        
        // Path: /storage/netapp/{serviceName}/changeContact
        private Task<System.Int64[]> PostStorageNetappServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/confirmTermination
        private Task<System.String> PostStorageNetappServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /storage/netapp/{serviceName}/network
        private Task<_storage.NetAppNetwork[]> GetStorageNetappServiceNameNetworkAsync() {
            return default(Task<_storage.NetAppNetwork[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/network/{networkId}
        private Task<_storage.NetAppNetwork> GetStorageNetappServiceNameNetworkNetworkIdAsync() {
            return default(Task<_storage.NetAppNetwork>);
        }
        
        // Path: /storage/netapp/{serviceName}/serviceInfos
        private Task<_services.Service> GetStorageNetappServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /storage/netapp/{serviceName}/serviceInfos
        private void PutStorageNetappServiceNameServiceInfosAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share
        private Task<_storage.NetAppShare[]> GetStorageNetappServiceNameShareAsync() {
            return default(Task<_storage.NetAppShare[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/share
        private Task<_storage.NetAppShare> PostStorageNetappServiceNameShareAsync() {
            return default(Task<_storage.NetAppShare>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        private void DeleteStorageNetappServiceNameShareShareIdAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        private Task<_storage.NetAppShare> GetStorageNetappServiceNameShareShareIdAsync() {
            return default(Task<_storage.NetAppShare>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}
        private Task<_storage.NetAppShare> PutStorageNetappServiceNameShareShareIdAsync() {
            return default(Task<_storage.NetAppShare>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/accessPath
        private Task<_storage.NetAppShareAccessPath[]> GetStorageNetappServiceNameShareShareIdAccessPathAsync() {
            return default(Task<_storage.NetAppShareAccessPath[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/accessPath/{accessPathId}
        private Task<_storage.NetAppShareAccessPath> GetStorageNetappServiceNameShareShareIdAccessPathAccessPathIdAsync() {
            return default(Task<_storage.NetAppShareAccessPath>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl
        private Task<_storage.NetAppShareACLRule[]> GetStorageNetappServiceNameShareShareIdAclAsync() {
            return default(Task<_storage.NetAppShareACLRule[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl
        private Task<_storage.NetAppShareACLRule> PostStorageNetappServiceNameShareShareIdAclAsync() {
            return default(Task<_storage.NetAppShareACLRule>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        private void DeleteStorageNetappServiceNameShareShareIdAclAclRuleIdAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/acl/{aclRuleId}
        private Task<_storage.NetAppShareACLRule> GetStorageNetappServiceNameShareShareIdAclAclRuleIdAsync() {
            return default(Task<_storage.NetAppShareACLRule>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/extend
        private void PostStorageNetappServiceNameShareShareIdExtendAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/revert
        private void PostStorageNetappServiceNameShareShareIdRevertAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/shrink
        private void PostStorageNetappServiceNameShareShareIdShrinkAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot
        private Task<_storage.NetAppShareSnapshot[]> GetStorageNetappServiceNameShareShareIdSnapshotAsync() {
            return default(Task<_storage.NetAppShareSnapshot[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot
        private Task<_storage.NetAppShareSnapshot> PostStorageNetappServiceNameShareShareIdSnapshotAsync() {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        private void DeleteStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        private Task<_storage.NetAppShareSnapshot> GetStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync() {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}
        private Task<_storage.NetAppShareSnapshot> PutStorageNetappServiceNameShareShareIdSnapshotSnapshotIdAsync() {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshot/{snapshotId}/hold
        private Task<_storage.NetAppShareSnapshot> PostStorageNetappServiceNameShareShareIdSnapshotSnapshotIdHoldAsync() {
            return default(Task<_storage.NetAppShareSnapshot>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        private Task<_storage.NetAppShareSnapshotPolicy> GetStorageNetappServiceNameShareShareIdSnapshotPolicyAsync() {
            return default(Task<_storage.NetAppShareSnapshotPolicy>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotPolicy
        private void PutStorageNetappServiceNameShareShareIdSnapshotPolicyAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        private Task<_storage.NetAppShareSnapshotReserve> GetStorageNetappServiceNameShareShareIdSnapshotReserveAsync() {
            return default(Task<_storage.NetAppShareSnapshotReserve>);
        }
        
        // Path: /storage/netapp/{serviceName}/share/{shareId}/snapshotReserve
        private void PutStorageNetappServiceNameShareShareIdSnapshotReserveAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy
        private Task<_storage.NetAppSnapshotPolicy[]> GetStorageNetappServiceNameSnapshotPolicyAsync() {
            return default(Task<_storage.NetAppSnapshotPolicy[]>);
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy
        private Task<_storage.NetAppSnapshotPolicy> PostStorageNetappServiceNameSnapshotPolicyAsync() {
            return default(Task<_storage.NetAppSnapshotPolicy>);
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        private void DeleteStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        private Task<_storage.NetAppSnapshotPolicy> GetStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync() {
            return default(Task<_storage.NetAppSnapshotPolicy>);
        }
        
        // Path: /storage/netapp/{serviceName}/snapshotPolicy/{snapshotPolicyId}
        private void PutStorageNetappServiceNameSnapshotPolicySnapshotPolicyIdAsync() {
        }
        
        // Path: /storage/netapp/{serviceName}/terminate
        private Task<System.String> PostStorageNetappServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /supply/mondialRelay
        private Task<_supply.MondialRelayReturn> PostSupplyMondialRelayAsync() {
            return default(Task<_supply.MondialRelayReturn>);
        }
        
        // Path: /support/tickets
        private Task<System.Int64[]> GetSupportTicketsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /support/tickets/create
        private Task<_support.NewMessageInfo> PostSupportTicketsCreateAsync() {
            return default(Task<_support.NewMessageInfo>);
        }
        
        // Path: /support/tickets/{ticketId}
        private Task<_support.Ticket> GetSupportTicketsTicketIdAsync() {
            return default(Task<_support.Ticket>);
        }
        
        // Path: /support/tickets/{ticketId}/canBeScored
        private Task<System.Boolean> GetSupportTicketsTicketIdCanBeScoredAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /support/tickets/{ticketId}/close
        private void PostSupportTicketsTicketIdCloseAsync() {
        }
        
        // Path: /support/tickets/{ticketId}/messages
        private Task<_support.Message[]> GetSupportTicketsTicketIdMessagesAsync() {
            return default(Task<_support.Message[]>);
        }
        
        // Path: /support/tickets/{ticketId}/reopen
        private void PostSupportTicketsTicketIdReopenAsync() {
        }
        
        // Path: /support/tickets/{ticketId}/reply
        private void PostSupportTicketsTicketIdReplyAsync() {
        }
        
        // Path: /support/tickets/{ticketId}/score
        private void PostSupportTicketsTicketIdScoreAsync() {
        }
        
        // Path: /telephony
        private Task<System.String[]> GetTelephonyAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/accessories
        private Task<_telephony.AccessoryOffer[]> GetTelephonyAccessoriesAsync() {
            return default(Task<_telephony.AccessoryOffer[]>);
        }
        
        // Path: /telephony/aliases
        private Task<System.String[]> GetTelephonyAliasesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/aliases/{serviceName}
        private Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyAliasesServiceNameAsync() {
            return default(Task<_telephony.TelephonyGenericServiceWithIAM>);
        }
        
        // Path: /telephony/aliases/{serviceName}/changeContact
        private Task<System.Int64[]> PostTelephonyAliasesServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/aliases/{serviceName}/serviceInfos
        private Task<_services.Service> GetTelephonyAliasesServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /telephony/aliases/{serviceName}/serviceInfos
        private void PutTelephonyAliasesServiceNameServiceInfosAsync() {
        }
        
        // Path: /telephony/availableDefaultSipDomains
        private Task<_telephony.DefaultSipDomains[]> GetTelephonyAvailableDefaultSipDomainsAsync() {
            return default(Task<_telephony.DefaultSipDomains[]>);
        }
        
        // Path: /telephony/currentOrderIds
        private Task<System.Int64[]> GetTelephonyCurrentOrderIdsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/directories/availableZipCodes
        private Task<System.String[]> GetTelephonyDirectoriesAvailableZipCodesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/directories/cities
        private Task<_telephony.City[]> GetTelephonyDirectoriesCitiesAsync() {
            return default(Task<_telephony.City[]>);
        }
        
        // Path: /telephony/fax/offers
        private Task<_telephony.LineOffer[]> GetTelephonyFaxOffersAsync() {
            return default(Task<_telephony.LineOffer[]>);
        }
        
        // Path: /telephony/line/offer/phones
        private Task<_telephony.LinePhone[]> GetTelephonyLineOfferPhonesAsync() {
            return default(Task<_telephony.LinePhone[]>);
        }
        
        // Path: /telephony/line/offers
        private Task<_telephony.LineOffer[]> GetTelephonyLineOffersAsync() {
            return default(Task<_telephony.LineOffer[]>);
        }
        
        // Path: /telephony/lines
        private Task<System.String[]> GetTelephonyLinesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/lines/{serviceName}
        private Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyLinesServiceNameAsync() {
            return default(Task<_telephony.TelephonyGenericServiceWithIAM>);
        }
        
        // Path: /telephony/lines/{serviceName}/changeContact
        private Task<System.Int64[]> PostTelephonyLinesServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/lines/{serviceName}/serviceInfos
        private Task<_services.Service> GetTelephonyLinesServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /telephony/lines/{serviceName}/serviceInfos
        private void PutTelephonyLinesServiceNameServiceInfosAsync() {
        }
        
        // Path: /telephony/number/detailedZones
        private Task<_telephony.NumberDetailedZone[]> GetTelephonyNumberDetailedZonesAsync() {
            return default(Task<_telephony.NumberDetailedZone[]>);
        }
        
        // Path: /telephony/number/ranges
        private Task<System.String[]> GetTelephonyNumberRangesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/number/specificNumbers
        private Task<_telephony.SpecificNumber[]> GetTelephonyNumberSpecificNumbersAsync() {
            return default(Task<_telephony.SpecificNumber[]>);
        }
        
        // Path: /telephony/number/zones
        private Task<System.String[]> GetTelephonyNumberZonesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/procedure
        private Task<System.Int64[]> GetTelephonyProcedureAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/procedure
        private Task<_telephony.Procedure> PostTelephonyProcedureAsync() {
            return default(Task<_telephony.Procedure>);
        }
        
        // Path: /telephony/procedure/required
        private Task<System.Boolean> GetTelephonyProcedureRequiredAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/procedure/{id}
        private Task<_telephony.Procedure> GetTelephonyProcedureIdAsync() {
            return default(Task<_telephony.Procedure>);
        }
        
        // Path: /telephony/procedure/{id}/cancel
        private void PostTelephonyProcedureIdCancelAsync() {
        }
        
        // Path: /telephony/resellerPanel/generatePassword
        private void PostTelephonyResellerPanelGeneratePasswordAsync() {
        }
        
        // Path: /telephony/resellerPanel/status
        private Task<_telephony.ResellerPanelStatus> GetTelephonyResellerPanelStatusAsync() {
            return default(Task<_telephony.ResellerPanelStatus>);
        }
        
        // Path: /telephony/searchServices
        private Task<_telephony.TelephonySearchService[]> GetTelephonySearchServicesAsync() {
            return default(Task<_telephony.TelephonySearchService[]>);
        }
        
        // Path: /telephony/setDefaultSipDomain
        private void PostTelephonySetDefaultSipDomainAsync() {
        }
        
        // Path: /telephony/softphoneBetaEligibility
        private Task<_telephony.SoftphoneBetaEligibility> GetTelephonySoftphoneBetaEligibilityAsync() {
            return default(Task<_telephony.SoftphoneBetaEligibility>);
        }
        
        // Path: /telephony/sounds
        private Task<System.Int64[]> GetTelephonySoundsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/sounds
        private Task<_telephony.Sound> PostTelephonySoundsAsync() {
            return default(Task<_telephony.Sound>);
        }
        
        // Path: /telephony/sounds/{id}
        private void DeleteTelephonySoundsIdAsync() {
        }
        
        // Path: /telephony/sounds/{id}
        private Task<_telephony.Sound> GetTelephonySoundsIdAsync() {
            return default(Task<_telephony.Sound>);
        }
        
        // Path: /telephony/sounds/{id}
        private void PutTelephonySoundsIdAsync() {
        }
        
        // Path: /telephony/spare
        private Task<System.String[]> GetTelephonySpareAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/spare/brands
        private Task<System.String[]> GetTelephonySpareBrandsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/spare/{spare}
        private void DeleteTelephonySpareSpareAsync() {
        }
        
        // Path: /telephony/spare/{spare}
        private Task<_spare_telephony.TelephonySpareWithIAM> GetTelephonySpareSpareAsync() {
            return default(Task<_spare_telephony.TelephonySpareWithIAM>);
        }
        
        // Path: /telephony/spare/{spare}/compatibleReplacement
        private Task<System.String[]> GetTelephonySpareSpareCompatibleReplacementAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/spare/{spare}/replace
        private void PostTelephonySpareSpareReplaceAsync() {
        }
        
        // Path: /telephony/spare/{spare}/serviceInfos
        private Task<_services.Service> GetTelephonySpareSpareServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /telephony/spare/{spare}/serviceInfos
        private void PutTelephonySpareSpareServiceInfosAsync() {
        }
        
        // Path: /telephony/trunks
        private Task<System.String[]> GetTelephonyTrunksAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/trunks/{serviceName}
        private Task<_telephony.TelephonyGenericServiceWithIAM> GetTelephonyTrunksServiceNameAsync() {
            return default(Task<_telephony.TelephonyGenericServiceWithIAM>);
        }
        
        // Path: /telephony/trunks/{serviceName}/changeContact
        private Task<System.Int64[]> PostTelephonyTrunksServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/trunks/{serviceName}/serviceInfos
        private Task<_services.Service> GetTelephonyTrunksServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /telephony/trunks/{serviceName}/serviceInfos
        private void PutTelephonyTrunksServiceNameServiceInfosAsync() {
        }
        
        // Path: /telephony/{billingAccount}
        private void DeleteTelephonyBillingAccountAsync() {
        }
        
        // Path: /telephony/{billingAccount}
        private Task<_telephony.BillingAccountWithIAM> GetTelephonyBillingAccountAsync() {
            return default(Task<_telephony.BillingAccountWithIAM>);
        }
        
        // Path: /telephony/{billingAccount}
        private void PutTelephonyBillingAccountAsync() {
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber
        private Task<System.Int64[]> GetTelephonyBillingAccountAbbreviatedNumberAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber
        private Task<_telephony.AbbreviatedNumberGroup> PostTelephonyBillingAccountAbbreviatedNumberAsync() {
            return default(Task<_telephony.AbbreviatedNumberGroup>);
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        private void DeleteTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        private Task<_telephony.AbbreviatedNumberGroup> GetTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync() {
            return default(Task<_telephony.AbbreviatedNumberGroup>);
        }
        
        // Path: /telephony/{billingAccount}/abbreviatedNumber/{abbreviatedNumber}
        private void PutTelephonyBillingAccountAbbreviatedNumberAbbreviatedNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/allowedCreditThreshold
        private Task<_order.Price[]> GetTelephonyBillingAccountAllowedCreditThresholdAsync() {
            return default(Task<_order.Price[]>);
        }
        
        // Path: /telephony/{billingAccount}/amountSecurityDeposit
        private Task<_order.Price[]> GetTelephonyBillingAccountAmountSecurityDepositAsync() {
            return default(Task<_order.Price[]>);
        }
        
        // Path: /telephony/{billingAccount}/billingAccountSite
        private Task<System.String> GetTelephonyBillingAccountBillingAccountSiteAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/billingAccountSite
        private void PostTelephonyBillingAccountBillingAccountSiteAsync() {
        }
        
        // Path: /telephony/{billingAccount}/canTransferSecurityDeposit
        private Task<System.Boolean> PostTelephonyBillingAccountCanTransferSecurityDepositAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/cancelTermination
        private void PostTelephonyBillingAccountCancelTerminationAsync() {
        }
        
        // Path: /telephony/{billingAccount}/carrierSip
        private Task<System.String[]> GetTelephonyBillingAccountCarrierSipAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}
        private Task<_telephony.CarrierSip> GetTelephonyBillingAccountCarrierSipServiceNameAsync() {
            return default(Task<_telephony.CarrierSip>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/cdrs
        private Task<_telephony.Document> GetTelephonyBillingAccountCarrierSipServiceNameCdrsAsync() {
            return default(Task<_telephony.Document>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/clusterDetails
        private Task<_telephony.CarrierSipClusterInfo> GetTelephonyBillingAccountCarrierSipServiceNameClusterDetailsAsync() {
            return default(Task<_telephony.CarrierSipClusterInfo>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/endpoints
        private Task<System.Int64[]> GetTelephonyBillingAccountCarrierSipServiceNameEndpointsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/endpoints/{id}
        private Task<_telephony.CarrierSipCustomerEndpoint> GetTelephonyBillingAccountCarrierSipServiceNameEndpointsIdAsync() {
            return default(Task<_telephony.CarrierSipCustomerEndpoint>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/settings
        private Task<_telephony.CarrierSipDetails> GetTelephonyBillingAccountCarrierSipServiceNameSettingsAsync() {
            return default(Task<_telephony.CarrierSipDetails>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/settings
        private void PutTelephonyBillingAccountCarrierSipServiceNameSettingsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno
        private Task<System.String[]> GetTelephonyBillingAccountCarrierSipServiceNameVnoAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}
        private Task<_telephony.CarrierSipVnoMandate> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceAsync() {
            return default(Task<_telephony.CarrierSipVnoMandate>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges
        private Task<System.String[]> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        private Task<_telephony.CarrierSipVnoRange> GetTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync() {
            return default(Task<_telephony.CarrierSipVnoRange>);
        }
        
        // Path: /telephony/{billingAccount}/carrierSip/{serviceName}/vno/{contractReference}/ranges/{prefix}
        private void PutTelephonyBillingAccountCarrierSipServiceNameVnoContractReferenceRangesPrefixAsync() {
        }
        
        // Path: /telephony/{billingAccount}/changeContact
        private Task<System.Int64[]> PostTelephonyBillingAccountChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference
        private Task<System.String[]> GetTelephonyBillingAccountConferenceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}
        private Task<_telephony.Conference> GetTelephonyBillingAccountConferenceServiceNameAsync() {
            return default(Task<_telephony.Conference>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/announceUpload
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameAnnounceUploadAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/histories
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameHistoriesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/histories/{id}
        private Task<_telephony.ConferenceHistory> GetTelephonyBillingAccountConferenceServiceNameHistoriesIdAsync() {
            return default(Task<_telephony.ConferenceHistory>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/informations
        private Task<_telephony.ConferenceInformations> GetTelephonyBillingAccountConferenceServiceNameInformationsAsync() {
            return default(Task<_telephony.ConferenceInformations>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/lock
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameLockAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameParticipantsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}
        private Task<_telephony.ConferenceParticipants> GetTelephonyBillingAccountConferenceServiceNameParticipantsIdAsync() {
            return default(Task<_telephony.ConferenceParticipants>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/deaf
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdDeafAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/energy
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdEnergyAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/kick
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdKickAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/mute
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdMuteAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/undeaf
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUndeafAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/participants/{id}/unmute
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameParticipantsIdUnmuteAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms
        private Task<_telephony.ConferenceRoom> PostTelephonyBillingAccountConferenceServiceNameRoomsAsync() {
            return default(Task<_telephony.ConferenceRoom>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        private Task<_telephony.ConferenceRoom> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync() {
            return default(Task<_telephony.ConferenceRoom>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}
        private void PutTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/histories/{id}
        private Task<_telephony.ConferenceHistory> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberHistoriesIdAsync() {
            return default(Task<_telephony.ConferenceHistory>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/lock
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberLockAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}
        private Task<_telephony.ConferenceParticipants> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdAsync() {
            return default(Task<_telephony.ConferenceParticipants>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/deaf
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdDeafAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/energy
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdEnergyAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/kick
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdKickAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/mute
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdMuteAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/undeaf
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUndeafAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/participants/{id}/unmute
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberParticipantsIdUnmuteAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/unlock
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberUnlockAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess
        private Task<_telephony.ConferenceWebAccess> PostTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessAsync() {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        private void DeleteTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/rooms/{roomNumber}/webAccess/{id}
        private Task<_telephony.ConferenceWebAccess> GetTelephonyBillingAccountConferenceServiceNameRoomsRoomNumberWebAccessIdAsync() {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/roomsStats
        private Task<_telephony.ConferenceRoomsStatistics> GetTelephonyBillingAccountConferenceServiceNameRoomsStatsAsync() {
            return default(Task<_telephony.ConferenceRoomsStatistics>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/settings
        private Task<_telephony.ConferenceProperties> GetTelephonyBillingAccountConferenceServiceNameSettingsAsync() {
            return default(Task<_telephony.ConferenceProperties>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/settings
        private void PutTelephonyBillingAccountConferenceServiceNameSettingsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/unlock
        private Task<_telephony.Task> PostTelephonyBillingAccountConferenceServiceNameUnlockAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess
        private Task<System.Int64[]> GetTelephonyBillingAccountConferenceServiceNameWebAccessAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess
        private Task<_telephony.ConferenceWebAccess> PostTelephonyBillingAccountConferenceServiceNameWebAccessAsync() {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        private void DeleteTelephonyBillingAccountConferenceServiceNameWebAccessIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/conference/{serviceName}/webAccess/{id}
        private Task<_telephony.ConferenceWebAccess> GetTelephonyBillingAccountConferenceServiceNameWebAccessIdAsync() {
            return default(Task<_telephony.ConferenceWebAccess>);
        }
        
        // Path: /telephony/{billingAccount}/ddi
        private Task<System.String[]> GetTelephonyBillingAccountDdiAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}
        private Task<_telephony.Ddi> GetTelephonyBillingAccountDdiServiceNameAsync() {
            return default(Task<_telephony.Ddi>);
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}
        private void PutTelephonyBillingAccountDdiServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ddi/{serviceName}/changeDestination
        private Task<_telephony.Task> PostTelephonyBillingAccountDdiServiceNameChangeDestinationAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting
        private Task<System.String[]> GetTelephonyBillingAccountEasyHuntingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}
        private Task<_telephony.EasyHunting> GetTelephonyBillingAccountEasyHuntingServiceNameAsync() {
            return default(Task<_telephony.EasyHunting>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        private Task<_telephony.OvhPabxHunting> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAsync() {
            return default(Task<_telephony.OvhPabxHunting>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting
        private void PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent
        private Task<_telephony.OvhPabxHuntingAgent> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        private Task<_telephony.OvhPabxHuntingAgent> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private Task<_telephony.BannerAccess> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync() {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private Task<_telephony.BannerAccess> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdBannerAccessAsync() {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}
        private Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveCalls>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHangupAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdHoldAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdInterceptAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdTransferAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdCallsIdWhisperAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/eventToken
        private Task<System.String> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue
        private Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus
        private Task<_telephony.OvhPabxCustomStatus> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusAsync() {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/customStatus/{id}
        private Task<_telephony.OvhPabxCustomStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingCustomStatusIdAsync() {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/eventToken
        private Task<System.String> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue
        private Task<_telephony.OvhPabxHuntingQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        private Task<_telephony.OvhPabxHuntingQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent
        private Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        private Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveCalls>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/hunting/queue/{queueId}/liveStatistics
        private Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetTelephonyBillingAccountEasyHuntingServiceNameHuntingQueueQueueIdLiveStatisticsAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveStatistics>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameRecordsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/records/{id}
        private Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountEasyHuntingServiceNameRecordsIdAsync() {
            return default(Task<_telephony.OvhPabxRecord>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        private Task<_telephony.EasyHuntingScreenListsConditionsSettings> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync() {
            return default(Task<_telephony.EasyHuntingScreenListsConditionsSettings>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions
        private void PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions
        private Task<_telephony.EasyHuntingScreenListsConditions> PostTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsAsync() {
            return default(Task<_telephony.EasyHuntingScreenListsConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        private Task<_telephony.EasyHuntingScreenListsConditions> GetTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync() {
            return default(Task<_telephony.EasyHuntingScreenListsConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/screenListConditions/conditions/{conditionId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameScreenListConditionsConditionsConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameSoundAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/sound/{soundId}
        private Task<_telephony.OvhPabxSound> GetTelephonyBillingAccountEasyHuntingServiceNameSoundSoundIdAsync() {
            return default(Task<_telephony.OvhPabxSound>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/soundUpload
        private Task<_telephony.Task> PostTelephonyBillingAccountEasyHuntingServiceNameSoundUploadAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        private Task<_telephony.EasyHuntingTimeConditionsSettings> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync() {
            return default(Task<_telephony.EasyHuntingTimeConditionsSettings>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions
        private void PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        private Task<System.Int64[]> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions
        private Task<_telephony.EasyHuntingTimeConditions> PostTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsAsync() {
            return default(Task<_telephony.EasyHuntingTimeConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        private void DeleteTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        private Task<_telephony.EasyHuntingTimeConditions> GetTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync() {
            return default(Task<_telephony.EasyHuntingTimeConditions>);
        }
        
        // Path: /telephony/{billingAccount}/easyHunting/{serviceName}/timeConditions/conditions/{conditionId}
        private void PutTelephonyBillingAccountEasyHuntingServiceNameTimeConditionsConditionsConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        private void DeleteTelephonyBillingAccountEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/eventToken
        private Task<System.String> PostTelephonyBillingAccountEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/fax
        private Task<System.String[]> GetTelephonyBillingAccountFaxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}
        private Task<_telephony.Fax> GetTelephonyBillingAccountFaxServiceNameAsync() {
            return default(Task<_telephony.Fax>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}
        private void PutTelephonyBillingAccountFaxServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns
        private Task<System.Int64[]> GetTelephonyBillingAccountFaxServiceNameCampaignsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns
        private Task<_telephony.FaxCampaign> PostTelephonyBillingAccountFaxServiceNameCampaignsAsync() {
            return default(Task<_telephony.FaxCampaign>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        private void DeleteTelephonyBillingAccountFaxServiceNameCampaignsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}
        private Task<_telephony.FaxCampaign> GetTelephonyBillingAccountFaxServiceNameCampaignsIdAsync() {
            return default(Task<_telephony.FaxCampaign>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/detail
        private Task<_telephony.FaxCampaignDetail> GetTelephonyBillingAccountFaxServiceNameCampaignsIdDetailAsync() {
            return default(Task<_telephony.FaxCampaignDetail>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/start
        private void PostTelephonyBillingAccountFaxServiceNameCampaignsIdStartAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/campaigns/{id}/stop
        private void PostTelephonyBillingAccountFaxServiceNameCampaignsIdStopAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        private void DeleteTelephonyBillingAccountFaxServiceNameScreenListsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        private Task<_telephony.FaxScreen> GetTelephonyBillingAccountFaxServiceNameScreenListsAsync() {
            return default(Task<_telephony.FaxScreen>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        private Task<_telephony.FaxScreen> PostTelephonyBillingAccountFaxServiceNameScreenListsAsync() {
            return default(Task<_telephony.FaxScreen>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists
        private void PutTelephonyBillingAccountFaxServiceNameScreenListsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/screenLists/reset
        private void PostTelephonyBillingAccountFaxServiceNameScreenListsResetAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings
        private Task<_telephony.FaxProperties> GetTelephonyBillingAccountFaxServiceNameSettingsAsync() {
            return default(Task<_telephony.FaxProperties>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings
        private void PutTelephonyBillingAccountFaxServiceNameSettingsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings/changePassword
        private Task<System.String> PostTelephonyBillingAccountFaxServiceNameSettingsChangePasswordAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/fax/{serviceName}/settings/sendFax
        private Task<_telephony.Task> PostTelephonyBillingAccountFaxServiceNameSettingsSendFaxAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/hasSpecialNumbers
        private Task<System.Boolean> GetTelephonyBillingAccountHasSpecialNumbersAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption
        private Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryConsumptionAsync() {
            return default(Task<System.DateOnly[]>);
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption/{date}
        private Task<_telephony.HistoryConsumption> GetTelephonyBillingAccountHistoryConsumptionDateAsync() {
            return default(Task<_telephony.HistoryConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/historyConsumption/{date}/file
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryConsumptionDateFileAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption
        private Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryRepaymentConsumptionAsync() {
            return default(Task<System.DateOnly[]>);
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption
        private Task<_telephony.HistoryRepaymentConsumption> PostTelephonyBillingAccountHistoryRepaymentConsumptionAsync() {
            return default(Task<_telephony.HistoryRepaymentConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption/{date}
        private Task<_telephony.HistoryRepaymentConsumption> GetTelephonyBillingAccountHistoryRepaymentConsumptionDateAsync() {
            return default(Task<_telephony.HistoryRepaymentConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/historyRepaymentConsumption/{date}/document
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryRepaymentConsumptionDateDocumentAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption
        private Task<System.DateOnly[]> GetTelephonyBillingAccountHistoryTollfreeConsumptionAsync() {
            return default(Task<System.DateOnly[]>);
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption/{date}
        private Task<_telephony.HistoryTollfreeConsumption> GetTelephonyBillingAccountHistoryTollfreeConsumptionDateAsync() {
            return default(Task<_telephony.HistoryTollfreeConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/historyTollfreeConsumption/{date}/document
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountHistoryTollfreeConsumptionDateDocumentAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/line
        private Task<System.String[]> GetTelephonyBillingAccountLineAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}
        private Task<_telephony.Line> GetTelephonyBillingAccountLineServiceNameAsync() {
            return default(Task<_telephony.Line>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}
        private void PutTelephonyBillingAccountLineServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber
        private Task<_telephony.AbbreviatedNumber> PostTelephonyBillingAccountLineServiceNameAbbreviatedNumberAsync() {
            return default(Task<_telephony.AbbreviatedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        private void DeleteTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        private Task<_telephony.AbbreviatedNumber> GetTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync() {
            return default(Task<_telephony.AbbreviatedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/abbreviatedNumber/{abbreviatedNumber}
        private void PutTelephonyBillingAccountLineServiceNameAbbreviatedNumberAbbreviatedNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        private void GetTelephonyBillingAccountLineServiceNameActivateNewPhoneAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/activateNewPhone
        private void PostTelephonyBillingAccountLineServiceNameActivateNewPhoneAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/antihack
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAntihackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/antihack
        private void PostTelephonyBillingAccountLineServiceNameAntihackAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/associateDevice
        private void PostTelephonyBillingAccountLineServiceNameAssociateDeviceAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAutomaticCallAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall
        private Task<System.String> PostTelephonyBillingAccountLineServiceNameAutomaticCallAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/automaticCall/{identifier}
        private Task<_telephony.CallsGenerated> GetTelephonyBillingAccountLineServiceNameAutomaticCallIdentifierAsync() {
            return default(Task<_telephony.CallsGenerated>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/availableSipDomains
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNameAvailableSipDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/block
        private void PostTelephonyBillingAccountLineServiceNameBlockAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameCallsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}
        private Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountLineServiceNameCallsIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveCalls>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/eavesdrop
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdEavesdropAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/hangup
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdHangupAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/hold
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdHoldAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/intercept
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdInterceptAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/transfer
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdTransferAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/calls/{id}/whisper
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameCallsIdWhisperAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/canChangePassword
        private Task<System.Boolean> GetTelephonyBillingAccountLineServiceNameCanChangePasswordAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/cancelConvertToNumber
        private void PostTelephonyBillingAccountLineServiceNameCancelConvertToNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/changePassword
        private void PostTelephonyBillingAccountLineServiceNameChangePasswordAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2Call
        private void PostTelephonyBillingAccountLineServiceNameClick2CallAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameClick2CallUserAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser
        private Task<System.Int64> PostTelephonyBillingAccountLineServiceNameClick2CallUserAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        private void DeleteTelephonyBillingAccountLineServiceNameClick2CallUserIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}
        private Task<_telephony.Click2CallUser> GetTelephonyBillingAccountLineServiceNameClick2CallUserIdAsync() {
            return default(Task<_telephony.Click2CallUser>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/changePassword
        private void PostTelephonyBillingAccountLineServiceNameClick2CallUserIdChangePasswordAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/click2CallUser/{id}/click2Call
        private void PostTelephonyBillingAccountLineServiceNameClick2CallUserIdClick2CallAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/convertToNumber
        private Task<_telephony.OfferTask> PostTelephonyBillingAccountLineServiceNameConvertToNumberAsync() {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/dissociateDevice
        private void PostTelephonyBillingAccountLineServiceNameDissociateDeviceAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/ips
        private Task<_telephony.DatetimeAndIpvalue[]> GetTelephonyBillingAccountLineServiceNameIpsAsync() {
            return default(Task<_telephony.DatetimeAndIpvalue[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/lastRegistrations
        private Task<_telephony.RegistrationInformations[]> GetTelephonyBillingAccountLineServiceNameLastRegistrationsAsync() {
            return default(Task<_telephony.RegistrationInformations[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/listAssociablePhones
        private Task<_telephony.LinePhoneAssociable[]> GetTelephonyBillingAccountLineServiceNameListAssociablePhonesAsync() {
            return default(Task<_telephony.LinePhoneAssociable[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/maximumAvailableSimultaneousLines
        private Task<System.Int64> GetTelephonyBillingAccountLineServiceNameMaximumAvailableSimultaneousLinesAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/offer
        private Task<_telephony.LineOffer> GetTelephonyBillingAccountLineServiceNameOfferAsync() {
            return default(Task<_telephony.LineOffer>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options
        private Task<_telephony.LineOptions> GetTelephonyBillingAccountLineServiceNameOptionsAsync() {
            return default(Task<_telephony.LineOptions>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options
        private void PutTelephonyBillingAccountLineServiceNameOptionsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options/availableCodecs
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNameOptionsAvailableCodecsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/options/defaultCodecs
        private Task<System.String> GetTelephonyBillingAccountLineServiceNameOptionsDefaultCodecsAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone
        private Task<_telephony.Phone> GetTelephonyBillingAccountLineServiceNamePhoneAsync() {
            return default(Task<_telephony.Phone>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone
        private void PutTelephonyBillingAccountLineServiceNamePhoneAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/adminCredentials
        private Task<_telephony.PhoneCredentials> GetTelephonyBillingAccountLineServiceNamePhoneAdminCredentialsAsync() {
            return default(Task<_telephony.PhoneCredentials>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/changePhoneConfiguration
        private void PostTelephonyBillingAccountLineServiceNamePhoneChangePhoneConfigurationAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        private Task<_telephony.FunctionKey> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync() {
            return default(Task<_telephony.FunctionKey>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}
        private void PutTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/functionKey/{keyNum}/availableFunction
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhoneFunctionKeyKeyNumAvailableFunctionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/merchandiseAvailable
        private Task<_telephony.HardwareOffer[]> GetTelephonyBillingAccountLineServiceNamePhoneMerchandiseAvailableAsync() {
            return default(Task<_telephony.HardwareOffer[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhonePhonebookAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook
        private Task<System.String> PostTelephonyBillingAccountLineServiceNamePhonePhonebookAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        private void DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        private Task<_telephony.Phonebook> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync() {
            return default(Task<_telephony.Phonebook>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}
        private void PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/export
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyExportAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/import
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyImportAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact
        private Task<System.Int64> PostTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        private void DeleteTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        private Task<_telephony.PhonebookContact> GetTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync() {
            return default(Task<_telephony.PhonebookContact>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/phonebook/{bookKey}/phonebookContact/{id}
        private void PutTelephonyBillingAccountLineServiceNamePhonePhonebookBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/reboot
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhoneRebootAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/refreshScreen
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNamePhoneRefreshScreenAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/resetConfig
        private Task<_telephony.ResetPhoneInfo> PostTelephonyBillingAccountLineServiceNamePhoneResetConfigAsync() {
            return default(Task<_telephony.ResetPhoneInfo>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma
        private Task<System.String[]> GetTelephonyBillingAccountLineServiceNamePhoneRmaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma
        private Task<_telephony.RmaReturn> PostTelephonyBillingAccountLineServiceNamePhoneRmaAsync() {
            return default(Task<_telephony.RmaReturn>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        private void DeleteTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        private Task<_telephony.Rma> GetTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync() {
            return default(Task<_telephony.Rma>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}
        private void PutTelephonyBillingAccountLineServiceNamePhoneRmaIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/rma/{id}/changeType
        private void PostTelephonyBillingAccountLineServiceNamePhoneRmaIdChangeTypeAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phone/supportsPhonebook
        private Task<System.Boolean> GetTelephonyBillingAccountLineServiceNamePhoneSupportsPhonebookAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/phoneCanBeAssociable
        private Task<_telephony.LinePhone[]> GetTelephonyBillingAccountLineServiceNamePhoneCanBeAssociableAsync() {
            return default(Task<_telephony.LinePhone[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameRecordsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records/{id}
        private void DeleteTelephonyBillingAccountLineServiceNameRecordsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/records/{id}
        private Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountLineServiceNameRecordsIdAsync() {
            return default(Task<_telephony.OvhPabxRecord>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/removeSimultaneousLines
        private void PostTelephonyBillingAccountLineServiceNameRemoveSimultaneousLinesAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/simultaneousChannelsDetails
        private Task<_telephony.SimultaneousChannelsDetails> GetTelephonyBillingAccountLineServiceNameSimultaneousChannelsDetailsAsync() {
            return default(Task<_telephony.SimultaneousChannelsDetails>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta
        private Task<_telephony.SoftphoneBetaStatus> GetTelephonyBillingAccountLineServiceNameSoftphoneBetaAsync() {
            return default(Task<_telephony.SoftphoneBetaStatus>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta
        private Task<_telephony.SoftphoneBetaStatus> PutTelephonyBillingAccountLineServiceNameSoftphoneBetaAsync() {
            return default(Task<_telephony.SoftphoneBetaStatus>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/softphone/beta/regenerateToken
        private void PostTelephonyBillingAccountLineServiceNameSoftphoneBetaRegenerateTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/statistics
        private Task<_complexType.UnitAndValues<_telephony.TimestampAndValue>> GetTelephonyBillingAccountLineServiceNameStatisticsAsync() {
            return default(Task<_complexType.UnitAndValues<_telephony.TimestampAndValue>>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones
        private Task<_telephony.Tones> GetTelephonyBillingAccountLineServiceNameTonesAsync() {
            return default(Task<_telephony.Tones>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones
        private void PutTelephonyBillingAccountLineServiceNameTonesAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/tones/toneUpload
        private Task<_telephony.Task> PostTelephonyBillingAccountLineServiceNameTonesToneUploadAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        private Task<System.Int64[]> GetTelephonyBillingAccountLineServiceNameTrafficExtractsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts
        private Task<_telephony.trafficExtract> PostTelephonyBillingAccountLineServiceNameTrafficExtractsAsync() {
            return default(Task<_telephony.trafficExtract>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        private void DeleteTelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/trafficExtracts/{id}
        private Task<_telephony.trafficExtract> GetTelephonyBillingAccountLineServiceNameTrafficExtractsIdAsync() {
            return default(Task<_telephony.trafficExtract>);
        }
        
        // Path: /telephony/{billingAccount}/line/{serviceName}/unblock
        private void PostTelephonyBillingAccountLineServiceNameUnblockAsync() {
        }
        
        // Path: /telephony/{billingAccount}/number
        private Task<System.String[]> GetTelephonyBillingAccountNumberAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}
        private Task<_telephony.Number> GetTelephonyBillingAccountNumberServiceNameAsync() {
            return default(Task<_telephony.Number>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}
        private void PutTelephonyBillingAccountNumberServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/cancelConvertToLine
        private void PostTelephonyBillingAccountNumberServiceNameCancelConvertToLineAsync() {
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/changeFeatureType
        private Task<_telephony.Task> PostTelephonyBillingAccountNumberServiceNameChangeFeatureTypeAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/convertToLine
        private Task<_telephony.OfferTask> PostTelephonyBillingAccountNumberServiceNameConvertToLineAsync() {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/number/{serviceName}/convertToLineAvailableOffers
        private Task<_telephony.LineOffersAndContracts> GetTelephonyBillingAccountNumberServiceNameConvertToLineAvailableOffersAsync() {
            return default(Task<_telephony.LineOffersAndContracts>);
        }
        
        // Path: /telephony/{billingAccount}/offerTask
        private Task<System.Int64[]> GetTelephonyBillingAccountOfferTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/offerTask/{taskId}
        private Task<_telephony.OfferTask> GetTelephonyBillingAccountOfferTaskTaskIdAsync() {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/offerTask/{taskId}
        private void PutTelephonyBillingAccountOfferTaskTaskIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/oldPhone
        private Task<_telephony.OldPhone[]> GetTelephonyBillingAccountOldPhoneAsync() {
            return default(Task<_telephony.OldPhone[]>);
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification
        private Task<System.Int64[]> GetTelephonyBillingAccountOutplanNotificationAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification
        private Task<_telephony.ConsumptionThreshold> PostTelephonyBillingAccountOutplanNotificationAsync() {
            return default(Task<_telephony.ConsumptionThreshold>);
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification/{id}
        private void DeleteTelephonyBillingAccountOutplanNotificationIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/outplanNotification/{id}
        private Task<_telephony.ConsumptionThreshold> GetTelephonyBillingAccountOutplanNotificationIdAsync() {
            return default(Task<_telephony.ConsumptionThreshold>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx
        private Task<System.String[]> GetTelephonyBillingAccountOvhPabxAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}
        private Task<_telephony.OvhPabx> GetTelephonyBillingAccountOvhPabxServiceNameAsync() {
            return default(Task<_telephony.OvhPabx>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}
        private void PutTelephonyBillingAccountOvhPabxServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan
        private Task<_telephony.OvhPabxDialplan> PostTelephonyBillingAccountOvhPabxServiceNameDialplanAsync() {
            return default(Task<_telephony.OvhPabxDialplan>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        private Task<_telephony.OvhPabxDialplan> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync() {
            return default(Task<_telephony.OvhPabxDialplan>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension
        private Task<_telephony.OvhPabxDialplanExtension> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtension>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        private Task<_telephony.OvhPabxDialplanExtension> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtension>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList
        private Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionScreenList>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionScreenList/{conditionId}
        private Task<_telephony.OvhPabxDialplanExtensionConditionScreenList> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionScreenListConditionIdAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionScreenList>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime
        private Task<_telephony.OvhPabxDialplanExtensionConditionTime> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionTime>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        private Task<_telephony.OvhPabxDialplanExtensionConditionTime> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionConditionTime>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/conditionTime/{conditionId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdConditionTimeConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule
        private Task<_telephony.OvhPabxDialplanExtensionRule> PostTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionRule>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        private Task<_telephony.OvhPabxDialplanExtensionRule> GetTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync() {
            return default(Task<_telephony.OvhPabxDialplanExtensionRule>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/dialplan/{dialplanId}/extension/{extensionId}/rule/{ruleId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameDialplanDialplanIdExtensionExtensionIdRuleRuleIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        private Task<_telephony.OvhPabxHunting> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAsync() {
            return default(Task<_telephony.OvhPabxHunting>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting
        private void PutTelephonyBillingAccountOvhPabxServiceNameHuntingAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent
        private Task<_telephony.OvhPabxHuntingAgent> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        private Task<_telephony.OvhPabxHuntingAgent> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgent>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private Task<_telephony.BannerAccess> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync() {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/bannerAccess
        private Task<_telephony.BannerAccess> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdBannerAccessAsync() {
            return default(Task<_telephony.BannerAccess>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}
        private Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveCalls>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/eavesdrop
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdEavesdropAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hangup
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHangupAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/hold
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdHoldAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/intercept
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdInterceptAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/transfer
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdTransferAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/calls/{id}/whisper
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdCallsIdWhisperAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/eventToken
        private Task<System.String> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue
        private Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/agent/{agentId}/queue/{queueId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingAgentAgentIdQueueQueueIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus
        private Task<_telephony.OvhPabxCustomStatus> PostTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusAsync() {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/customStatus/{id}
        private Task<_telephony.OvhPabxCustomStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingCustomStatusIdAsync() {
            return default(Task<_telephony.OvhPabxCustomStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/eventToken
        private Task<System.String> PostTelephonyBillingAccountOvhPabxServiceNameHuntingEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue
        private Task<_telephony.OvhPabxHuntingQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        private Task<_telephony.OvhPabxHuntingQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent
        private Task<_telephony.OvhPabxHuntingAgentQueue> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private Task<_telephony.OvhPabxHuntingAgentQueue> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentQueue>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/agent/{agentId}/liveStatus
        private Task<_telephony.OvhPabxHuntingAgentLiveStatus> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdAgentAgentIdLiveStatusAsync() {
            return default(Task<_telephony.OvhPabxHuntingAgentLiveStatus>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}
        private Task<_telephony.OvhPabxHuntingQueueLiveCalls> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveCalls>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/eavesdrop
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdEavesdropAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hangup
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHangupAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/hold
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdHoldAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/intercept
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdInterceptAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/transfer
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdTransferAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveCalls/{id}/whisper
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveCallsIdWhisperAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/hunting/queue/{queueId}/liveStatistics
        private Task<_telephony.OvhPabxHuntingQueueLiveStatistics> GetTelephonyBillingAccountOvhPabxServiceNameHuntingQueueQueueIdLiveStatisticsAsync() {
            return default(Task<_telephony.OvhPabxHuntingQueueLiveStatistics>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameMenuAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu
        private Task<_telephony.OvhPabxMenu> PostTelephonyBillingAccountOvhPabxServiceNameMenuAsync() {
            return default(Task<_telephony.OvhPabxMenu>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        private Task<_telephony.OvhPabxMenu> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync() {
            return default(Task<_telephony.OvhPabxMenu>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry
        private Task<_telephony.OvhPabxMenuEntry> PostTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryAsync() {
            return default(Task<_telephony.OvhPabxMenuEntry>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        private Task<_telephony.OvhPabxMenuEntry> GetTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync() {
            return default(Task<_telephony.OvhPabxMenuEntry>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/menu/{menuId}/entry/{entryId}
        private void PutTelephonyBillingAccountOvhPabxServiceNameMenuMenuIdEntryEntryIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameRecordsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/records/{id}
        private Task<_telephony.OvhPabxRecord> GetTelephonyBillingAccountOvhPabxServiceNameRecordsIdAsync() {
            return default(Task<_telephony.OvhPabxRecord>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameSoundAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/sound/{soundId}
        private Task<_telephony.OvhPabxSound> GetTelephonyBillingAccountOvhPabxServiceNameSoundSoundIdAsync() {
            return default(Task<_telephony.OvhPabxSound>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/soundUpload
        private Task<_telephony.Task> PostTelephonyBillingAccountOvhPabxServiceNameSoundUploadAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        private Task<System.Int64[]> GetTelephonyBillingAccountOvhPabxServiceNameTtsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts
        private void PostTelephonyBillingAccountOvhPabxServiceNameTtsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        private void DeleteTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        private Task<_telephony.OvhPabxTts> GetTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync() {
            return default(Task<_telephony.OvhPabxTts>);
        }
        
        // Path: /telephony/{billingAccount}/ovhPabx/{serviceName}/tts/{id}
        private void PutTelephonyBillingAccountOvhPabxServiceNameTtsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/phonebook
        private Task<System.String[]> GetTelephonyBillingAccountPhonebookAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook
        private Task<System.String> PostTelephonyBillingAccountPhonebookAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        private void DeleteTelephonyBillingAccountPhonebookBookKeyAsync() {
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        private Task<_telephony.PhonebookMaster> GetTelephonyBillingAccountPhonebookBookKeyAsync() {
            return default(Task<_telephony.PhonebookMaster>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}
        private void PutTelephonyBillingAccountPhonebookBookKeyAsync() {
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/export
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountPhonebookBookKeyExportAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/import
        private Task<_telephony.Task> PostTelephonyBillingAccountPhonebookBookKeyImportAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        private Task<System.Int64[]> GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact
        private Task<System.Int64> PostTelephonyBillingAccountPhonebookBookKeyPhonebookContactAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        private void DeleteTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        private Task<_telephony.PhonebookContact> GetTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync() {
            return default(Task<_telephony.PhonebookContact>);
        }
        
        // Path: /telephony/{billingAccount}/phonebook/{bookKey}/phonebookContact/{id}
        private void PutTelephonyBillingAccountPhonebookBookKeyPhonebookContactIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability
        private Task<System.Int64[]> GetTelephonyBillingAccountPortabilityAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}
        private Task<_telephony.Portability> GetTelephonyBillingAccountPortabilityIdAsync() {
            return default(Task<_telephony.Portability>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/canBeCancelled
        private Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdCanBeCancelledAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/canBeExecuted
        private Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdCanBeExecutedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/cancel
        private void PostTelephonyBillingAccountPortabilityIdCancelAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/changeDate
        private void PostTelephonyBillingAccountPortabilityIdChangeDateAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/dateCanBeChanged
        private Task<System.Boolean> GetTelephonyBillingAccountPortabilityIdDateCanBeChangedAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document
        private Task<System.Int64[]> GetTelephonyBillingAccountPortabilityIdDocumentAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document
        private Task<_telephony.PortabilityDocument> PostTelephonyBillingAccountPortabilityIdDocumentAsync() {
            return default(Task<_telephony.PortabilityDocument>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        private void DeleteTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        private Task<_telephony.PortabilityDocument> GetTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync() {
            return default(Task<_telephony.PortabilityDocument>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/document/{documentId}
        private void PutTelephonyBillingAccountPortabilityIdDocumentDocumentIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/execute
        private void PostTelephonyBillingAccountPortabilityIdExecuteAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/relaunch
        private Task<_telephony.PortabilityFixErrorPossibleParameters> GetTelephonyBillingAccountPortabilityIdRelaunchAsync() {
            return default(Task<_telephony.PortabilityFixErrorPossibleParameters>);
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/relaunch
        private void PostTelephonyBillingAccountPortabilityIdRelaunchAsync() {
        }
        
        // Path: /telephony/{billingAccount}/portability/{id}/status
        private Task<_telephony.PortabilityStep[]> GetTelephonyBillingAccountPortabilityIdStatusAsync() {
            return default(Task<_telephony.PortabilityStep[]>);
        }
        
        // Path: /telephony/{billingAccount}/redirect
        private Task<System.String[]> GetTelephonyBillingAccountRedirectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}
        private Task<_telephony.Redirect> GetTelephonyBillingAccountRedirectServiceNameAsync() {
            return default(Task<_telephony.Redirect>);
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}
        private void PutTelephonyBillingAccountRedirectServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/redirect/{serviceName}/changeDestination
        private Task<_telephony.Task> PostTelephonyBillingAccountRedirectServiceNameChangeDestinationAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/rsva
        private Task<System.String[]> GetTelephonyBillingAccountRsvaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}
        private Task<_telephony.Rsva> GetTelephonyBillingAccountRsvaServiceNameAsync() {
            return default(Task<_telephony.Rsva>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}
        private void PutTelephonyBillingAccountRsvaServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/allowedRateCodes
        private Task<_telephony.RateCodeInformation[]> GetTelephonyBillingAccountRsvaServiceNameAllowedRateCodesAsync() {
            return default(Task<_telephony.RateCodeInformation[]>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/cancelScheduledRateCode
        private void PostTelephonyBillingAccountRsvaServiceNameCancelScheduledRateCodeAsync() {
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/currentRateCode
        private Task<_telephony.DetailedRateCodeInformation> GetTelephonyBillingAccountRsvaServiceNameCurrentRateCodeAsync() {
            return default(Task<_telephony.DetailedRateCodeInformation>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/scheduleRateCode
        private Task<_telephony.DetailedRateCodeInformation> PostTelephonyBillingAccountRsvaServiceNameScheduleRateCodeAsync() {
            return default(Task<_telephony.DetailedRateCodeInformation>);
        }
        
        // Path: /telephony/{billingAccount}/rsva/{serviceName}/scheduledRateCode
        private Task<_telephony.DetailedRateCodeInformation> GetTelephonyBillingAccountRsvaServiceNameScheduledRateCodeAsync() {
            return default(Task<_telephony.DetailedRateCodeInformation>);
        }
        
        // Path: /telephony/{billingAccount}/scheduler
        private Task<System.String[]> GetTelephonyBillingAccountSchedulerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}
        private Task<_telephony.Scheduler> GetTelephonyBillingAccountSchedulerServiceNameAsync() {
            return default(Task<_telephony.Scheduler>);
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}
        private void PutTelephonyBillingAccountSchedulerServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events
        private Task<System.String[]> GetTelephonyBillingAccountSchedulerServiceNameEventsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events
        private void PostTelephonyBillingAccountSchedulerServiceNameEventsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        private void DeleteTelephonyBillingAccountSchedulerServiceNameEventsUidAsync() {
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        private Task<_telephony.SchedulerEvent> GetTelephonyBillingAccountSchedulerServiceNameEventsUidAsync() {
            return default(Task<_telephony.SchedulerEvent>);
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/events/{uid}
        private void PutTelephonyBillingAccountSchedulerServiceNameEventsUidAsync() {
        }
        
        // Path: /telephony/{billingAccount}/scheduler/{serviceName}/importIcsCalendar
        private Task<_telephony.Task> PostTelephonyBillingAccountSchedulerServiceNameImportIcsCalendarAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/screen
        private Task<System.String[]> GetTelephonyBillingAccountScreenAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}
        private Task<_telephony.Screen> GetTelephonyBillingAccountScreenServiceNameAsync() {
            return default(Task<_telephony.Screen>);
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}
        private void PutTelephonyBillingAccountScreenServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists
        private Task<System.Int64[]> GetTelephonyBillingAccountScreenServiceNameScreenListsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists
        private void PostTelephonyBillingAccountScreenServiceNameScreenListsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        private void DeleteTelephonyBillingAccountScreenServiceNameScreenListsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/screen/{serviceName}/screenLists/{id}
        private Task<_telephony.ScreenList> GetTelephonyBillingAccountScreenServiceNameScreenListsIdAsync() {
            return default(Task<_telephony.ScreenList>);
        }
        
        // Path: /telephony/{billingAccount}/service
        private Task<System.String[]> GetTelephonyBillingAccountServiceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        private void DeleteTelephonyBillingAccountServiceServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        private Task<_telephony.TelephonyService> GetTelephonyBillingAccountServiceServiceNameAsync() {
            return default(Task<_telephony.TelephonyService>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}
        private void PutTelephonyBillingAccountServiceServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/cancelTermination
        private void PostTelephonyBillingAccountServiceServiceNameCancelTerminationAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/changeOfBillingAccount
        private void PostTelephonyBillingAccountServiceServiceNameChangeOfBillingAccountAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/diagnosticReports
        private Task<_telephony.DiagnosticReport[]> GetTelephonyBillingAccountServiceServiceNameDiagnosticReportsAsync() {
            return default(Task<_telephony.DiagnosticReport[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory
        private Task<_telephony.DirectoryInfo> GetTelephonyBillingAccountServiceServiceNameDirectoryAsync() {
            return default(Task<_telephony.DirectoryInfo>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory
        private void PutTelephonyBillingAccountServiceServiceNameDirectoryAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/fetchEntrepriseInformations
        private Task<_telephony.EntrepriseNumberInformationsTask> PostTelephonyBillingAccountServiceServiceNameDirectoryFetchEntrepriseInformationsAsync() {
            return default(Task<_telephony.EntrepriseNumberInformationsTask>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/getDirectoryServiceCode
        private Task<_telephony.DirectoryHeadingPJ[]> GetTelephonyBillingAccountServiceServiceNameDirectoryGetDirectoryServiceCodeAsync() {
            return default(Task<_telephony.DirectoryHeadingPJ[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/directory/getWayTypes
        private Task<_telephony.DirectoryWayType[]> GetTelephonyBillingAccountServiceServiceNameDirectoryGetWayTypesAsync() {
            return default(Task<_telephony.DirectoryWayType[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        private void DeleteTelephonyBillingAccountServiceServiceNameEventTokenAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        private Task<_telephony.EventToken> GetTelephonyBillingAccountServiceServiceNameEventTokenAsync() {
            return default(Task<_telephony.EventToken>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/eventToken
        private Task<System.String> PostTelephonyBillingAccountServiceServiceNameEventTokenAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/faxConsumption
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameFaxConsumptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/faxConsumption/{consumptionId}
        private Task<_telephony.FaxConsumption> GetTelephonyBillingAccountServiceServiceNameFaxConsumptionConsumptionIdAsync() {
            return default(Task<_telephony.FaxConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        private void DeleteTelephonyBillingAccountServiceServiceNameOfferChangeAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        private Task<_telephony.OfferChange> GetTelephonyBillingAccountServiceServiceNameOfferChangeAsync() {
            return default(Task<_telephony.OfferChange>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChange
        private void PostTelephonyBillingAccountServiceServiceNameOfferChangeAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerChanges
        private Task<_telephony.LineOffer[]> GetTelephonyBillingAccountServiceServiceNameOfferChangesAsync() {
            return default(Task<_telephony.LineOffer[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameOfferTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        private Task<_telephony.OfferTask> GetTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync() {
            return default(Task<_telephony.OfferTask>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/offerTask/{taskId}
        private void PutTelephonyBillingAccountServiceServiceNameOfferTaskTaskIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/previousVoiceConsumption/{consumptionId}
        private Task<_telephony.PreviousVoiceConsumption> GetTelephonyBillingAccountServiceServiceNamePreviousVoiceConsumptionConsumptionIdAsync() {
            return default(Task<_telephony.PreviousVoiceConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/repaymentConsumption
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/repaymentConsumption/{consumptionId}
        private Task<_telephony.RepaymentConsumption> GetTelephonyBillingAccountServiceServiceNameRepaymentConsumptionConsumptionIdAsync() {
            return default(Task<_telephony.RepaymentConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/task
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/task/{taskId}
        private Task<_telephony.Task> GetTelephonyBillingAccountServiceServiceNameTaskTaskIdAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/voiceConsumption
        private Task<System.Int64[]> GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/service/{serviceName}/voiceConsumption/{consumptionId}
        private Task<_telephony.VoiceConsumption> GetTelephonyBillingAccountServiceServiceNameVoiceConsumptionConsumptionIdAsync() {
            return default(Task<_telephony.VoiceConsumption>);
        }
        
        // Path: /telephony/{billingAccount}/serviceInfos
        private Task<_services.Service> GetTelephonyBillingAccountServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /telephony/{billingAccount}/serviceInfos
        private void PutTelephonyBillingAccountServiceInfosAsync() {
        }
        
        // Path: /telephony/{billingAccount}/task
        private Task<System.Int64[]> GetTelephonyBillingAccountTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/task/{taskId}
        private Task<_telephony.Task> GetTelephonyBillingAccountTaskTaskIdAsync() {
            return default(Task<_telephony.Task>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition
        private Task<System.String[]> GetTelephonyBillingAccountTimeConditionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}
        private Task<_telephony.GenericScreen> GetTelephonyBillingAccountTimeConditionServiceNameAsync() {
            return default(Task<_telephony.GenericScreen>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition
        private Task<System.Int64[]> GetTelephonyBillingAccountTimeConditionServiceNameConditionAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition
        private Task<_telephony.TimeCondition> PostTelephonyBillingAccountTimeConditionServiceNameConditionAsync() {
            return default(Task<_telephony.TimeCondition>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        private void DeleteTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        private Task<_telephony.TimeCondition> GetTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync() {
            return default(Task<_telephony.TimeCondition>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/condition/{id}
        private void PutTelephonyBillingAccountTimeConditionServiceNameConditionIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/options
        private Task<_telephony.TimeConditionOptions> GetTelephonyBillingAccountTimeConditionServiceNameOptionsAsync() {
            return default(Task<_telephony.TimeConditionOptions>);
        }
        
        // Path: /telephony/{billingAccount}/timeCondition/{serviceName}/options
        private void PutTelephonyBillingAccountTimeConditionServiceNameOptionsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/transferSecurityDeposit
        private void PostTelephonyBillingAccountTransferSecurityDepositAsync() {
        }
        
        // Path: /telephony/{billingAccount}/trunk
        private Task<System.String[]> GetTelephonyBillingAccountTrunkAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}
        private Task<_telephony.Trunk> GetTelephonyBillingAccountTrunkServiceNameAsync() {
            return default(Task<_telephony.Trunk>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/channelsPacksRepartition
        private Task<_telephony.TrunkSimultaneousPacksRepartition> GetTelephonyBillingAccountTrunkServiceNameChannelsPacksRepartitionAsync() {
            return default(Task<_telephony.TrunkSimultaneousPacksRepartition>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        private Task<System.String[]> GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber
        private Task<_telephony.TrunkExternalDisplayedNumber> PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberAsync() {
            return default(Task<_telephony.TrunkExternalDisplayedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        private void DeleteTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync() {
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}
        private Task<_telephony.TrunkExternalDisplayedNumber> GetTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberAsync() {
            return default(Task<_telephony.TrunkExternalDisplayedNumber>);
        }
        
        // Path: /telephony/{billingAccount}/trunk/{serviceName}/externalDisplayedNumber/{number}/validate
        private Task<_telephony.TrunkExternalDisplayedNumberValidation> PostTelephonyBillingAccountTrunkServiceNameExternalDisplayedNumberNumberValidateAsync() {
            return default(Task<_telephony.TrunkExternalDisplayedNumberValidation>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail
        private Task<System.String[]> GetTelephonyBillingAccountVoicemailAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}
        private Task<_telephony.Voicemail> GetTelephonyBillingAccountVoicemailServiceNameAsync() {
            return default(Task<_telephony.Voicemail>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}
        private void PutTelephonyBillingAccountVoicemailServiceNameAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories
        private Task<System.Int64[]> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        private void DeleteTelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}
        private Task<_telephony.VoicemailMessages> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdAsync() {
            return default(Task<_telephony.VoicemailMessages>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/download
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountVoicemailServiceNameDirectoriesIdDownloadAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/directories/{id}/move
        private void PostTelephonyBillingAccountVoicemailServiceNameDirectoriesIdMoveAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings
        private Task<System.Int64[]> GetTelephonyBillingAccountVoicemailServiceNameGreetingsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings
        private Task<System.Int64> PostTelephonyBillingAccountVoicemailServiceNameGreetingsAsync() {
            return default(Task<System.Int64>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        private void DeleteTelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}
        private Task<_telephony.VoicemailGreetings> GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdAsync() {
            return default(Task<_telephony.VoicemailGreetings>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/download
        private Task<_telephony.PcsFile> GetTelephonyBillingAccountVoicemailServiceNameGreetingsIdDownloadAsync() {
            return default(Task<_telephony.PcsFile>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/greetings/{id}/move
        private void PostTelephonyBillingAccountVoicemailServiceNameGreetingsIdMoveAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/migrateOnNewVersion
        private void PostTelephonyBillingAccountVoicemailServiceNameMigrateOnNewVersionAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings
        private Task<_telephony.VoicemailProperties> GetTelephonyBillingAccountVoicemailServiceNameSettingsAsync() {
            return default(Task<_telephony.VoicemailProperties>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings
        private void PutTelephonyBillingAccountVoicemailServiceNameSettingsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/changePassword
        private void PostTelephonyBillingAccountVoicemailServiceNameSettingsChangePasswordAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/changeRouting
        private void PostTelephonyBillingAccountVoicemailServiceNameSettingsChangeRoutingAsync() {
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/routing
        private Task<_telephony.VoicefaxRoutingEnum> GetTelephonyBillingAccountVoicemailServiceNameSettingsRoutingAsync() {
            return default(Task<_telephony.VoicefaxRoutingEnum>);
        }
        
        // Path: /telephony/{billingAccount}/voicemail/{serviceName}/settings/voicemailNumbers
        private Task<_telephony.VoicemailNumbers> GetTelephonyBillingAccountVoicemailServiceNameSettingsVoicemailNumbersAsync() {
            return default(Task<_telephony.VoicemailNumbers>);
        }
        
        // Path: /telephony/{billingAccount}/vxml
        private Task<System.String[]> GetTelephonyBillingAccountVxmlAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}
        private Task<_telephony.Vxml> GetTelephonyBillingAccountVxmlServiceNameAsync() {
            return default(Task<_telephony.Vxml>);
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings
        private Task<_telephony.VxmlProperties> GetTelephonyBillingAccountVxmlServiceNameSettingsAsync() {
            return default(Task<_telephony.VxmlProperties>);
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings
        private void PutTelephonyBillingAccountVxmlServiceNameSettingsAsync() {
        }
        
        // Path: /telephony/{billingAccount}/vxml/{serviceName}/settings/logs
        private Task<_telephony.TemporaryLogsLink> PostTelephonyBillingAccountVxmlServiceNameSettingsLogsAsync() {
            return default(Task<_telephony.TemporaryLogsLink>);
        }
        
        // Path: /veeam/veeamEnterprise
        private Task<System.String[]> GetVeeamVeeamEnterpriseAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}
        private Task<_veeam_veeamEnterprise.AccountWithIAM> GetVeeamVeeamEnterpriseServiceNameAsync() {
            return default(Task<_veeam_veeamEnterprise.AccountWithIAM>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/confirmTermination
        private Task<System.String> PostVeeamVeeamEnterpriseServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/register
        private Task<_veeam_veeamEnterprise.Task[]> PostVeeamVeeamEnterpriseServiceNameRegisterAsync() {
            return default(Task<_veeam_veeamEnterprise.Task[]>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/serviceInfos
        private Task<_services.Service> GetVeeamVeeamEnterpriseServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/serviceInfos
        private void PutVeeamVeeamEnterpriseServiceNameServiceInfosAsync() {
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/task
        private Task<System.Int64[]> GetVeeamVeeamEnterpriseServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/task/{taskId}
        private Task<_veeam_veeamEnterprise.Task> GetVeeamVeeamEnterpriseServiceNameTaskTaskIdAsync() {
            return default(Task<_veeam_veeamEnterprise.Task>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/terminate
        private Task<System.String> PostVeeamVeeamEnterpriseServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /veeam/veeamEnterprise/{serviceName}/update
        private Task<_veeam_veeamEnterprise.Task[]> PostVeeamVeeamEnterpriseServiceNameUpdateAsync() {
            return default(Task<_veeam_veeamEnterprise.Task[]>);
        }
        
        // Path: /veeamCloudConnect
        private Task<System.String[]> GetVeeamCloudConnectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}
        private Task<_veeamCloudConnect.AccountWithIAM> GetVeeamCloudConnectServiceNameAsync() {
            return default(Task<_veeamCloudConnect.AccountWithIAM>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository
        private Task<System.String[]> GetVeeamCloudConnectServiceNameBackupRepositoryAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository
        private Task<_veeamCloudConnect.Task[]> PostVeeamCloudConnectServiceNameBackupRepositoryAsync() {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        private Task<_veeamCloudConnect.Task[]> DeleteVeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync() {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}
        private Task<_veeamCloudConnect.BackupRepository> GetVeeamCloudConnectServiceNameBackupRepositoryInventoryNameAsync() {
            return default(Task<_veeamCloudConnect.BackupRepository>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/backupRepository/{inventoryName}/upgradeQuota
        private Task<_veeamCloudConnect.Task[]> PostVeeamCloudConnectServiceNameBackupRepositoryInventoryNameUpgradeQuotaAsync() {
            return default(Task<_veeamCloudConnect.Task[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/capabilities
        private Task<_veeamCloudConnect.offerCapabilities> GetVeeamCloudConnectServiceNameCapabilitiesAsync() {
            return default(Task<_veeamCloudConnect.offerCapabilities>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/orderableUpgrade
        private Task<_veeamCloudConnect.Offer[]> GetVeeamCloudConnectServiceNameOrderableUpgradeAsync() {
            return default(Task<_veeamCloudConnect.Offer[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/resetPassword
        private Task<_veeamCloudConnect.Task> PostVeeamCloudConnectServiceNameResetPasswordAsync() {
            return default(Task<_veeamCloudConnect.Task>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/serviceInfos
        private Task<_services.Service> GetVeeamCloudConnectServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/serviceInfos
        private void PutVeeamCloudConnectServiceNameServiceInfosAsync() {
        }
        
        // Path: /veeamCloudConnect/{serviceName}/task
        private Task<System.Int64[]> GetVeeamCloudConnectServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /veeamCloudConnect/{serviceName}/task/{taskId}
        private Task<_veeamCloudConnect.Task> GetVeeamCloudConnectServiceNameTaskTaskIdAsync() {
            return default(Task<_veeamCloudConnect.Task>);
        }
        
        // Path: /vip
        private Task<System.String[]> GetVipAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vip/{serviceName}
        private Task<_vip.SupportVipWithIAM> GetVipServiceNameAsync() {
            return default(Task<_vip.SupportVipWithIAM>);
        }
        
        // Path: /vip/{serviceName}/serviceInfos
        private Task<_services.Service> GetVipServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /vip/{serviceName}/serviceInfos
        private void PutVipServiceNameServiceInfosAsync() {
        }
        
        // Path: /vps
        private Task<System.String[]> GetVpsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vps/{serviceName}
        private Task<_vps.VPSWithIAM> GetVpsServiceNameAsync() {
            return default(Task<_vps.VPSWithIAM>);
        }
        
        // Path: /vps/{serviceName}
        private void PutVpsServiceNameAsync() {
        }
        
        // Path: /vps/{serviceName}/abortSnapshot
        private void PostVpsServiceNameAbortSnapshotAsync() {
        }
        
        // Path: /vps/{serviceName}/activeOptions
        private Task<_vps.VpsOptionEnum[]> GetVpsServiceNameActiveOptionsAsync() {
            return default(Task<_vps.VpsOptionEnum[]>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup
        private Task<_vps.AutomatedBackup> GetVpsServiceNameAutomatedBackupAsync() {
            return default(Task<_vps.AutomatedBackup>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/attachedBackup
        private Task<_vps_automatedBackup.Attached[]> GetVpsServiceNameAutomatedBackupAttachedBackupAsync() {
            return default(Task<_vps_automatedBackup.Attached[]>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/detachBackup
        private Task<_vps.Task> PostVpsServiceNameAutomatedBackupDetachBackupAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/reschedule
        private Task<_vps.Task> PostVpsServiceNameAutomatedBackupRescheduleAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/restore
        private Task<_vps.Task> PostVpsServiceNameAutomatedBackupRestoreAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/automatedBackup/restorePoints
        private Task<System.DateTime[]> GetVpsServiceNameAutomatedBackupRestorePointsAsync() {
            return default(Task<System.DateTime[]>);
        }
        
        // Path: /vps/{serviceName}/availableUpgrade
        private Task<_vps.Model[]> GetVpsServiceNameAvailableUpgradeAsync() {
            return default(Task<_vps.Model[]>);
        }
        
        // Path: /vps/{serviceName}/backupftp
        private Task<_vps.BackupFtp> GetVpsServiceNameBackupftpAsync() {
            return default(Task<_vps.BackupFtp>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access
        private Task<System.Net.IPNetwork[]> GetVpsServiceNameBackupftpAccessAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access
        private Task<_dedicated_server.Task> PostVpsServiceNameBackupftpAccessAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        private Task<_dedicated_server.Task> DeleteVpsServiceNameBackupftpAccessIpBlockAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        private Task<_dedicated_server.BackupFtpAcl> GetVpsServiceNameBackupftpAccessIpBlockAsync() {
            return default(Task<_dedicated_server.BackupFtpAcl>);
        }
        
        // Path: /vps/{serviceName}/backupftp/access/{ipBlock}
        private void PutVpsServiceNameBackupftpAccessIpBlockAsync() {
        }
        
        // Path: /vps/{serviceName}/backupftp/authorizableBlocks
        private Task<System.Net.IPNetwork[]> GetVpsServiceNameBackupftpAuthorizableBlocksAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vps/{serviceName}/backupftp/password
        private Task<_dedicated_server.Task> PostVpsServiceNameBackupftpPasswordAsync() {
            return default(Task<_dedicated_server.Task>);
        }
        
        // Path: /vps/{serviceName}/changeContact
        private Task<System.Int64[]> PostVpsServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/confirmTermination
        private Task<System.String> PostVpsServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/createSnapshot
        private Task<_vps.Task> PostVpsServiceNameCreateSnapshotAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/datacenter
        private Task<_vps.Datacenter> GetVpsServiceNameDatacenterAsync() {
            return default(Task<_vps.Datacenter>);
        }
        
        // Path: /vps/datacenter
        private Task<System.String[]> GetVpsDatacenterAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vps/{serviceName}/disks
        private Task<System.Int64[]> GetVpsServiceNameDisksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/disks/{id}
        private Task<_vps.Disk> GetVpsServiceNameDisksIdAsync() {
            return default(Task<_vps.Disk>);
        }
        
        // Path: /vps/{serviceName}/disks/{id}
        private void PutVpsServiceNameDisksIdAsync() {
        }
        
        // Path: /vps/{serviceName}/disks/{id}/monitoring
        private Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetVpsServiceNameDisksIdMonitoringAsync() {
            return default(Task<_complexType_UnitAndValues_vps.VpsTimestampValue>);
        }
        
        // Path: /vps/{serviceName}/disks/{id}/use
        private Task<_complexType.UnitAndValue_double> GetVpsServiceNameDisksIdUseAsync() {
            return default(Task<_complexType.UnitAndValue_double>);
        }
        
        // Path: /vps/{serviceName}/distribution
        private Task<_vps.Template> GetVpsServiceNameDistributionAsync() {
            return default(Task<_vps.Template>);
        }
        
        // Path: /vps/{serviceName}/distribution/software
        private Task<System.Int64[]> GetVpsServiceNameDistributionSoftwareAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/distribution/software/{softwareId}
        private Task<_vps.Software> GetVpsServiceNameDistributionSoftwareSoftwareIdAsync() {
            return default(Task<_vps.Software>);
        }
        
        // Path: /vps/{serviceName}/getConsoleUrl
        private Task<System.String> PostVpsServiceNameGetConsoleUrlAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/images/available
        private Task<System.String[]> GetVpsServiceNameImagesAvailableAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vps/{serviceName}/images/available/{id}
        private Task<_vps.Image> GetVpsServiceNameImagesAvailableIdAsync() {
            return default(Task<_vps.Image>);
        }
        
        // Path: /vps/{serviceName}/images/current
        private Task<_vps.Image> GetVpsServiceNameImagesCurrentAsync() {
            return default(Task<_vps.Image>);
        }
        
        // Path: /vps/{serviceName}/ipCountryAvailable
        private Task<_vps_ip.GeolocationEnum[]> GetVpsServiceNameIpCountryAvailableAsync() {
            return default(Task<_vps_ip.GeolocationEnum[]>);
        }
        
        // Path: /vps/{serviceName}/ips
        private Task<System.Net.IPAddress[]> GetVpsServiceNameIpsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        private void DeleteVpsServiceNameIpsIpAddressAsync() {
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        private Task<_vps.Ip> GetVpsServiceNameIpsIpAddressAsync() {
            return default(Task<_vps.Ip>);
        }
        
        // Path: /vps/{serviceName}/ips/{ipAddress}
        private void PutVpsServiceNameIpsIpAddressAsync() {
        }
        
        // Path: /vps/{serviceName}/migration2016
        private Task<_vps_migration.VPS2016to2020> GetVpsServiceNameMigration2016Async() {
            return default(Task<_vps_migration.VPS2016to2020>);
        }
        
        // Path: /vps/{serviceName}/migration2016
        private Task<_vps.Task> PostVpsServiceNameMigration2016Async() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/migration2018
        private Task<_vps_migration.VPS2018to2020> GetVpsServiceNameMigration2018Async() {
            return default(Task<_vps_migration.VPS2018to2020>);
        }
        
        // Path: /vps/{serviceName}/migration2018
        private Task<_vps.Task> PostVpsServiceNameMigration2018Async() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/models
        private Task<_vps.Model[]> GetVpsServiceNameModelsAsync() {
            return default(Task<_vps.Model[]>);
        }
        
        // Path: /vps/{serviceName}/monitoring
        private Task<_complexType_UnitAndValues_vps.VpsTimestampValue> GetVpsServiceNameMonitoringAsync() {
            return default(Task<_complexType_UnitAndValues_vps.VpsTimestampValue>);
        }
        
        // Path: /vps/{serviceName}/openConsoleAccess
        private Task<_vps.Vnc> PostVpsServiceNameOpenConsoleAccessAsync() {
            return default(Task<_vps.Vnc>);
        }
        
        // Path: /vps/{serviceName}/option
        private Task<_vps.VpsOptionEnum[]> GetVpsServiceNameOptionAsync() {
            return default(Task<_vps.VpsOptionEnum[]>);
        }
        
        // Path: /vps/{serviceName}/option/{option}
        private void DeleteVpsServiceNameOptionOptionAsync() {
        }
        
        // Path: /vps/{serviceName}/option/{option}
        private Task<_vps.Option> GetVpsServiceNameOptionOptionAsync() {
            return default(Task<_vps.Option>);
        }
        
        // Path: /vps/order/rule/datacenter
        private Task<_vps_order_rule.Datacenters> GetVpsOrderRuleDatacenterAsync() {
            return default(Task<_vps_order_rule.Datacenters>);
        }
        
        // Path: /vps/order/rule/osChoices
        private Task<_vps_order_rule.OSChoices> GetVpsOrderRuleOsChoicesAsync() {
            return default(Task<_vps_order_rule.OSChoices>);
        }
        
        // Path: /vps/{serviceName}/reboot
        private Task<_vps.Task> PostVpsServiceNameRebootAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/rebuild
        private Task<_vps.Task> PostVpsServiceNameRebuildAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/reinstall
        private Task<_vps.Task> PostVpsServiceNameReinstallAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains
        private Task<System.String[]> GetVpsServiceNameSecondaryDnsDomainsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains
        private void PostVpsServiceNameSecondaryDnsDomainsAsync() {
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        private void DeleteVpsServiceNameSecondaryDnsDomainsDomainAsync() {
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        private Task<_secondaryDns.SecondaryDNS> GetVpsServiceNameSecondaryDnsDomainsDomainAsync() {
            return default(Task<_secondaryDns.SecondaryDNS>);
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}
        private void PutVpsServiceNameSecondaryDnsDomainsDomainAsync() {
        }
        
        // Path: /vps/{serviceName}/secondaryDnsDomains/{domain}/dnsServer
        private Task<_secondaryDns.SecondaryDNSNameServer> GetVpsServiceNameSecondaryDnsDomainsDomainDnsServerAsync() {
            return default(Task<_secondaryDns.SecondaryDNSNameServer>);
        }
        
        // Path: /vps/{serviceName}/secondaryDnsNameServerAvailable
        private Task<_secondaryDns.SecondaryDNSNameServer> GetVpsServiceNameSecondaryDnsNameServerAvailableAsync() {
            return default(Task<_secondaryDns.SecondaryDNSNameServer>);
        }
        
        // Path: /vps/{serviceName}/serviceInfos
        private Task<_services.Service> GetVpsServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /vps/{serviceName}/serviceInfos
        private void PutVpsServiceNameServiceInfosAsync() {
        }
        
        // Path: /vps/{serviceName}/setPassword
        private Task<_vps.Task> PostVpsServiceNameSetPasswordAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/snapshot
        private Task<_vps.Task> DeleteVpsServiceNameSnapshotAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/snapshot
        private Task<_vps.Snapshot> GetVpsServiceNameSnapshotAsync() {
            return default(Task<_vps.Snapshot>);
        }
        
        // Path: /vps/{serviceName}/snapshot
        private void PutVpsServiceNameSnapshotAsync() {
        }
        
        // Path: /vps/{serviceName}/snapshot/download
        private Task<_vps.DownloadSnapshotURL> GetVpsServiceNameSnapshotDownloadAsync() {
            return default(Task<_vps.DownloadSnapshotURL>);
        }
        
        // Path: /vps/{serviceName}/snapshot/revert
        private Task<_vps.Task> PostVpsServiceNameSnapshotRevertAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/start
        private Task<_vps.Task> PostVpsServiceNameStartAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/statistics
        private Task<_vps.VpsMonitoringStatistics> GetVpsServiceNameStatisticsAsync() {
            return default(Task<_vps.VpsMonitoringStatistics>);
        }
        
        // Path: /vps/{serviceName}/status
        private Task<_vps_ip.ServiceStatus> GetVpsServiceNameStatusAsync() {
            return default(Task<_vps_ip.ServiceStatus>);
        }
        
        // Path: /vps/{serviceName}/stop
        private Task<_vps.Task> PostVpsServiceNameStopAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/tasks
        private Task<System.Int64[]> GetVpsServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/tasks/{id}
        private Task<_vps.Task> GetVpsServiceNameTasksIdAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/templates
        private Task<System.Int64[]> GetVpsServiceNameTemplatesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/templates/{id}
        private Task<_vps.Template> GetVpsServiceNameTemplatesIdAsync() {
            return default(Task<_vps.Template>);
        }
        
        // Path: /vps/{serviceName}/templates/{id}/software
        private Task<System.Int64[]> GetVpsServiceNameTemplatesIdSoftwareAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/templates/{id}/software/{softwareId}
        private Task<_vps.Software> GetVpsServiceNameTemplatesIdSoftwareSoftwareIdAsync() {
            return default(Task<_vps.Software>);
        }
        
        // Path: /vps/{serviceName}/terminate
        private Task<System.String> PostVpsServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /vps/{serviceName}/use
        private Task<_complexType.UnitAndValue_double> GetVpsServiceNameUseAsync() {
            return default(Task<_complexType.UnitAndValue_double>);
        }
        
        // Path: /vps/{serviceName}/veeam
        private Task<_vps.Veeam> GetVpsServiceNameVeeamAsync() {
            return default(Task<_vps.Veeam>);
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints
        private Task<System.Int64[]> GetVpsServiceNameVeeamRestorePointsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints/{id}
        private Task<_vps_veeam.RestorePoint> GetVpsServiceNameVeeamRestorePointsIdAsync() {
            return default(Task<_vps_veeam.RestorePoint>);
        }
        
        // Path: /vps/{serviceName}/veeam/restorePoints/{id}/restore
        private Task<_vps.Task> PostVpsServiceNameVeeamRestorePointsIdRestoreAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/veeam/restoredBackup
        private Task<_vps.Task> DeleteVpsServiceNameVeeamRestoredBackupAsync() {
            return default(Task<_vps.Task>);
        }
        
        // Path: /vps/{serviceName}/veeam/restoredBackup
        private Task<_vps_veeam.RestoredBackup> GetVpsServiceNameVeeamRestoredBackupAsync() {
            return default(Task<_vps_veeam.RestoredBackup>);
        }
        
        // Path: /vrack
        private Task<System.String[]> GetVrackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}
        private Task<_vrack.vrackWithIAM> GetVrackServiceNameAsync() {
            return default(Task<_vrack.vrackWithIAM>);
        }
        
        // Path: /vrack/{serviceName}
        private void PutVrackServiceNameAsync() {
        }
        
        // Path: /vrack/{serviceName}/allowedServices
        private Task<_vrack.AllowedServices> GetVrackServiceNameAllowedServicesAsync() {
            return default(Task<_vrack.AllowedServices>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject
        private Task<System.String[]> GetVrackServiceNameCloudProjectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject
        private Task<_vrack.Task> PostVrackServiceNameCloudProjectAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject/{project}
        private Task<_vrack.Task> DeleteVrackServiceNameCloudProjectProjectAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/cloudProject/{project}
        private Task<_vrack.cloudProject> GetVrackServiceNameCloudProjectProjectAsync() {
            return default(Task<_vrack.cloudProject>);
        }
        
        // Path: /vrack/{serviceName}/confirmTermination
        private Task<System.String> PostVrackServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud
        private Task<System.String[]> GetVrackServiceNameDedicatedCloudAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud
        private Task<_vrack.Task> PostVrackServiceNameDedicatedCloudAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        private Task<_vrack.Task> DeleteVrackServiceNameDedicatedCloudDedicatedCloudAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}
        private Task<_vrack.dedicatedCloud> GetVrackServiceNameDedicatedCloudDedicatedCloudAsync() {
            return default(Task<_vrack.dedicatedCloud>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter
        private Task<System.String[]> GetVrackServiceNameDedicatedCloudDatacenterAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}
        private Task<_vrack.pccDatacenter> GetVrackServiceNameDedicatedCloudDatacenterDatacenterAsync() {
            return default(Task<_vrack.pccDatacenter>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack
        private Task<System.String[]> GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/move
        private Task<_vrack.Task> PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect
        private Task<System.String[]> GetVrackServiceNameDedicatedConnectAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect/{name}
        private Task<_vrack.dedicatedConnect> GetVrackServiceNameDedicatedConnectNameAsync() {
            return default(Task<_vrack.dedicatedConnect>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedConnect/{name}
        private void PutVrackServiceNameDedicatedConnectNameAsync() {
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer
        private Task<System.String[]> GetVrackServiceNameDedicatedServerAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer
        private Task<_vrack.Task> PostVrackServiceNameDedicatedServerAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        private Task<_vrack.Task> DeleteVrackServiceNameDedicatedServerDedicatedServerAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}
        private Task<_vrack.dedicatedServer> GetVrackServiceNameDedicatedServerDedicatedServerAsync() {
            return default(Task<_vrack.dedicatedServer>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg
        private Task<_dedicated_server.MrtgTimestampValue[]> GetVrackServiceNameDedicatedServerDedicatedServerMrtgAsync() {
            return default(Task<_dedicated_server.MrtgTimestampValue[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface
        private Task<System.String[]> GetVrackServiceNameDedicatedServerInterfaceAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface
        private Task<_vrack.Task> PostVrackServiceNameDedicatedServerInterfaceAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        private Task<_vrack.Task> DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}
        private Task<_vrack.dedicatedServerInterface> GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceAsync() {
            return default(Task<_vrack.dedicatedServerInterface>);
        }
        
        // Path: /vrack/{serviceName}/dedicatedServerInterfaceDetails
        private Task<_vrack.AllowedDedicatedServerInterfaces[]> GetVrackServiceNameDedicatedServerInterfaceDetailsAsync() {
            return default(Task<_vrack.AllowedDedicatedServerInterfaces[]>);
        }
        
        // Path: /vrack/{serviceName}/eligibleServices
        private Task<_vrack.EligibleServicesResponse> GetVrackServiceNameEligibleServicesAsync() {
            return default(Task<_vrack.EligibleServicesResponse>);
        }
        
        // Path: /vrack/{serviceName}/ip
        private Task<System.Net.IPNetwork[]> GetVrackServiceNameIpAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vrack/{serviceName}/ip
        private Task<_vrack.Task> PostVrackServiceNameIpAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}
        private Task<_vrack.Task> DeleteVrackServiceNameIpIpAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}
        private Task<_vrack.ip> GetVrackServiceNameIpIpAsync() {
            return default(Task<_vrack.ip>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}/announceInZone
        private Task<_vrack.Task> PostVrackServiceNameIpIpAnnounceInZoneAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ip/{ip}/availableZone
        private Task<_vrack.VrackZoneEnum[]> GetVrackServiceNameIpIpAvailableZoneAsync() {
            return default(Task<_vrack.VrackZoneEnum[]>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing
        private Task<System.String[]> GetVrackServiceNameIpLoadbalancingAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing
        private Task<_vrack.Task> PostVrackServiceNameIpLoadbalancingAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        private Task<_vrack.Task> DeleteVrackServiceNameIpLoadbalancingIpLoadbalancingAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}
        private Task<_vrack.iplb> GetVrackServiceNameIpLoadbalancingIpLoadbalancingAsync() {
            return default(Task<_vrack.iplb>);
        }
        
        // Path: /vrack/{serviceName}/ipv6
        private Task<System.Net.IPNetwork[]> GetVrackServiceNameIpv6Async() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vrack/{serviceName}/ipv6
        private Task<_vrack.Task> PostVrackServiceNameIpv6Async() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}
        private Task<_vrack.Task> DeleteVrackServiceNameIpv6Ipv6Async() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}
        private Task<_vrack.ipv6> GetVrackServiceNameIpv6Ipv6Async() {
            return default(Task<_vrack.ipv6>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange
        private Task<System.Net.IPNetwork[]> GetVrackServiceNameIpv6Ipv6BridgedSubrangeAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        private Task<_vrack.bridgedSubrange> GetVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync() {
            return default(Task<_vrack.bridgedSubrange>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/bridgedSubrange/{bridgedSubrange}
        private Task<_vrack.Task> PutVrackServiceNameIpv6Ipv6BridgedSubrangeBridgedSubrangeAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        private Task<System.Net.IPNetwork[]> GetVrackServiceNameIpv6Ipv6RoutedSubrangeAsync() {
            return default(Task<System.Net.IPNetwork[]>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange
        private Task<_vrack.Task> PostVrackServiceNameIpv6Ipv6RoutedSubrangeAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        private Task<_vrack.Task> DeleteVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ipv6/{ipv6}/routedSubrange/{routedSubrange}
        private Task<_vrack.routedSubrange> GetVrackServiceNameIpv6Ipv6RoutedSubrangeRoutedSubrangeAsync() {
            return default(Task<_vrack.routedSubrange>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack
        private Task<System.String[]> GetVrackServiceNameLegacyVrackAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack
        private Task<_vrack.Task> PostVrackServiceNameLegacyVrackAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack/{legacyVrack}
        private Task<_vrack.Task> DeleteVrackServiceNameLegacyVrackLegacyVrackAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/legacyVrack/{legacyVrack}
        private Task<_vrack.legacyVrack> GetVrackServiceNameLegacyVrackLegacyVrackAsync() {
            return default(Task<_vrack.legacyVrack>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect
        private Task<System.Guid[]> GetVrackServiceNameOvhCloudConnectAsync() {
            return default(Task<System.Guid[]>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect
        private Task<_vrack.Task> PostVrackServiceNameOvhCloudConnectAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        private Task<_vrack.Task> DeleteVrackServiceNameOvhCloudConnectOvhCloudConnectAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/ovhCloudConnect/{ovhCloudConnect}
        private Task<_vrack.ovhCloudConnect> GetVrackServiceNameOvhCloudConnectOvhCloudConnectAsync() {
            return default(Task<_vrack.ovhCloudConnect>);
        }
        
        // Path: /vrack/{serviceName}/serviceInfos
        private Task<_services.NonExpiringService> GetVrackServiceNameServiceInfosAsync() {
            return default(Task<_services.NonExpiringService>);
        }
        
        // Path: /vrack/{serviceName}/task
        private Task<System.Int64[]> GetVrackServiceNameTaskAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /vrack/{serviceName}/task/{taskId}
        private Task<_vrack.Task> GetVrackServiceNameTaskTaskIdAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/terminate
        private Task<System.String> PostVrackServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices
        private Task<System.String[]> GetVrackServiceNameVrackServicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices
        private Task<_vrack.Task> PostVrackServiceNameVrackServicesAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices/{vrackServices}
        private Task<_vrack.Task> DeleteVrackServiceNameVrackServicesVrackServicesAsync() {
            return default(Task<_vrack.Task>);
        }
        
        // Path: /vrack/{serviceName}/vrackServices/{vrackServices}
        private Task<_vrack.vrackServices> GetVrackServiceNameVrackServicesVrackServicesAsync() {
            return default(Task<_vrack.vrackServices>);
        }
        
        // Path: /webPaaS/capabilities
        private Task<_webPaaS.Capabilities> GetWebPaaSCapabilitiesAsync() {
            return default(Task<_webPaaS.Capabilities>);
        }
        
        // Path: /webPaaS/subscription
        private Task<System.String[]> GetWebPaaSSubscriptionAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}
        private Task<_webPaaS.SubscriptionWithIAM> GetWebPaaSSubscriptionServiceNameAsync() {
            return default(Task<_webPaaS.SubscriptionWithIAM>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/confirmTermination
        private Task<System.String> PostWebPaaSSubscriptionServiceNameConfirmTerminationAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer
        private Task<_webPaaS_subscription.Customer[]> GetWebPaaSSubscriptionServiceNameCustomerAsync() {
            return default(Task<_webPaaS_subscription.Customer[]>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer
        private Task<_webPaaS_subscription.Customer> PostWebPaaSSubscriptionServiceNameCustomerAsync() {
            return default(Task<_webPaaS_subscription.Customer>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer/{customerId}
        private Task<_webPaaS_subscription.Customer> DeleteWebPaaSSubscriptionServiceNameCustomerCustomerIdAsync() {
            return default(Task<_webPaaS_subscription.Customer>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/customer/{customerId}
        private Task<_webPaaS_subscription.Customer> GetWebPaaSSubscriptionServiceNameCustomerCustomerIdAsync() {
            return default(Task<_webPaaS_subscription.Customer>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/serviceInfos
        private Task<_services.Service> GetWebPaaSSubscriptionServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /webPaaS/subscription/{serviceName}/serviceInfos
        private void PutWebPaaSSubscriptionServiceNameServiceInfosAsync() {
        }
        
        // Path: /webPaaS/subscription/{serviceName}/terminate
        private Task<System.String> PostWebPaaSSubscriptionServiceNameTerminateAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /xdsl
        private Task<System.String[]> GetXdslAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}
        private Task<_xdsl.AccessWithIAM> GetXdslServiceNameAsync() {
            return default(Task<_xdsl.AccessWithIAM>);
        }
        
        // Path: /xdsl/{serviceName}
        private void PutXdslServiceNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/addressMove/extraIpRange
        private Task<_xdsl.ExtraIpRangeMove> GetXdslServiceNameAddressMoveExtraIpRangeAsync() {
            return default(Task<_xdsl.ExtraIpRangeMove>);
        }
        
        // Path: /xdsl/{serviceName}/addressMove/extraIpRangeMove
        private Task<_xdsl.Task> PostXdslServiceNameAddressMoveExtraIpRangeMoveAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/antiSpams
        private Task<System.Net.IPAddress[]> GetXdslServiceNameAntiSpamsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /xdsl/{serviceName}/antiSpams/{ip}
        private Task<_xdsl.AntiSpam> GetXdslServiceNameAntiSpamsIpAsync() {
            return default(Task<_xdsl.AntiSpam>);
        }
        
        // Path: /xdsl/{serviceName}/antiSpams/{ip}/evidences
        private Task<_xdsl_antiSpam.EvidencesInfo> GetXdslServiceNameAntiSpamsIpEvidencesAsync() {
            return default(Task<_xdsl_antiSpam.EvidencesInfo>);
        }
        
        // Path: /xdsl/{serviceName}/applyTemplateToModem
        private Task<_xdsl.Task> PostXdslServiceNameApplyTemplateToModemAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/canCancelResiliation
        private Task<System.Boolean> GetXdslServiceNameCanCancelResiliationAsync() {
            return default(Task<System.Boolean>);
        }
        
        // Path: /xdsl/{serviceName}/cancelResiliation
        private void PostXdslServiceNameCancelResiliationAsync() {
        }
        
        // Path: /xdsl/{serviceName}/changeContact
        private Task<System.Int64[]> PostXdslServiceNameChangeContactAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/diagnostic
        private Task<_xdsl.AccessDiagnostic> GetXdslServiceNameDiagnosticAsync() {
            return default(Task<_xdsl.AccessDiagnostic>);
        }
        
        // Path: /xdsl/{serviceName}/diagnostic
        private Task<_xdsl.Task> PostXdslServiceNameDiagnosticAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/email/pro
        private Task<System.String[]> GetXdslEmailProAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/email/pro/{email}
        private void DeleteXdslEmailProEmailAsync() {
        }
        
        // Path: /xdsl/email/pro/{email}
        private Task<_xdsl.xdslEmailProWithIAM> GetXdslEmailProEmailAsync() {
            return default(Task<_xdsl.xdslEmailProWithIAM>);
        }
        
        // Path: /xdsl/email/pro/{email}
        private void PutXdslEmailProEmailAsync() {
        }
        
        // Path: /xdsl/email/pro/{email}/changePassword
        private Task<_xdsl_email_pro.Task> PostXdslEmailProEmailChangePasswordAsync() {
            return default(Task<_xdsl_email_pro.Task>);
        }
        
        // Path: /xdsl/{serviceName}/fiberEligibilities
        private Task<System.Int64[]> GetXdslServiceNameFiberEligibilitiesAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/fiberEligibilities/{id}
        private Task<_xdsl.FiberEligibility> GetXdslServiceNameFiberEligibilitiesIdAsync() {
            return default(Task<_xdsl.FiberEligibility>);
        }
        
        // Path: /xdsl/{serviceName}/incident
        private Task<_xdsl.Incident> GetXdslServiceNameIncidentAsync() {
            return default(Task<_xdsl.Incident>);
        }
        
        // Path: /xdsl/incidents
        private Task<System.Int64[]> GetXdslIncidentsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/incidents/{id}
        private Task<_xdsl.Incident> GetXdslIncidentsIdAsync() {
            return default(Task<_xdsl.Incident>);
        }
        
        // Path: /xdsl/{serviceName}/ips
        private Task<System.Net.IPAddress[]> GetXdslServiceNameIpsAsync() {
            return default(Task<System.Net.IPAddress[]>);
        }
        
        // Path: /xdsl/{serviceName}/ips
        private Task<_xdsl.Task> PostXdslServiceNameIpsAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/ips/{ip}
        private void DeleteXdslServiceNameIpsIpAsync() {
        }
        
        // Path: /xdsl/{serviceName}/ips/{ip}
        private Task<_xdsl.IP> GetXdslServiceNameIpsIpAsync() {
            return default(Task<_xdsl.IP>);
        }
        
        // Path: /xdsl/{serviceName}/ipv6
        private Task<_xdsl.Task> PostXdslServiceNameIpv6Async() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines
        private Task<System.String[]> GetXdslServiceNameLinesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}
        private Task<_xdsl.Line> GetXdslServiceNameLinesNumberAsync() {
            return default(Task<_xdsl.Line>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/diagnostic/cancel
        private void PostXdslServiceNameLinesNumberDiagnosticCancelAsync() {
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/diagnostic/run
        private Task<_xdsl_lineDiagnostic.Diagnostic> PostXdslServiceNameLinesNumberDiagnosticRunAsync() {
            return default(Task<_xdsl_lineDiagnostic.Diagnostic>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort
        private Task<_xdsl.DslamPort> GetXdslServiceNameLinesNumberDslamPortAsync() {
            return default(Task<_xdsl.DslamPort>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/availableProfiles
        private Task<_xdsl.DslamLineProfile[]> GetXdslServiceNameLinesNumberDslamPortAvailableProfilesAsync() {
            return default(Task<_xdsl.DslamLineProfile[]>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/changeProfile
        private Task<_xdsl.Task> PostXdslServiceNameLinesNumberDslamPortChangeProfileAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/logs
        private Task<_xdsl.DslamPortLog[]> GetXdslServiceNameLinesNumberDslamPortLogsAsync() {
            return default(Task<_xdsl.DslamPortLog[]>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/dslamPort/reset
        private Task<_xdsl.Task> PostXdslServiceNameLinesNumberDslamPortResetAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/lines/{number}/statistics
        private Task<_complexType_UnitAndValues_xdsl.TimestampAndValue> GetXdslServiceNameLinesNumberStatisticsAsync() {
            return default(Task<_complexType_UnitAndValues_xdsl.TimestampAndValue>);
        }
        
        // Path: /xdsl/{serviceName}/modem
        private Task<_xdsl.Modem> GetXdslServiceNameModemAsync() {
            return default(Task<_xdsl.Modem>);
        }
        
        // Path: /xdsl/{serviceName}/modem
        private void PutXdslServiceNameModemAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/availableACSBackend
        private Task<System.String[]> GetXdslServiceNameModemAvailableACSBackendAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/availableWLANChannel
        private Task<System.Int64[]> GetXdslServiceNameModemAvailableWLANChannelAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/blocIp
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemBlocIpAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/blocIp
        private Task<_xdsl.Task> PostXdslServiceNameModemBlocIpAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/callWaiting
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemCallWaitingAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/callWaiting
        private Task<_xdsl.Task> PostXdslServiceNameModemCallWaitingAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/comfortExchange
        private Task<_xdsl.ModemExchangeInfo> GetXdslServiceNameModemComfortExchangeAsync() {
            return default(Task<_xdsl.ModemExchangeInfo>);
        }
        
        // Path: /xdsl/{serviceName}/modem/comfortExchange
        private Task<_order.Order> PostXdslServiceNameModemComfortExchangeAsync() {
            return default(Task<_order.Order>);
        }
        
        // Path: /xdsl/{serviceName}/modem/connectedDevices
        private Task<System.String[]> GetXdslServiceNameModemConnectedDevicesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/connectedDevices/{macAddress}
        private Task<_xdsl.connectedDevice> GetXdslServiceNameModemConnectedDevicesMacAddressAsync() {
            return default(Task<_xdsl.connectedDevice>);
        }
        
        // Path: /xdsl/{serviceName}/modem/contentSharing
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemContentSharingAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/contentSharing
        private Task<_xdsl.Task> PostXdslServiceNameModemContentSharingAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/firmware
        private Task<System.String> GetXdslServiceNameModemFirmwareAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /xdsl/{serviceName}/modem/firmware
        private Task<_xdsl.Task> PostXdslServiceNameModemFirmwareAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/firmwareAvailable
        private Task<System.String[]> GetXdslServiceNameModemFirmwareAvailableAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/ftp
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemFtpAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/ftp
        private Task<_xdsl.Task> PostXdslServiceNameModemFtpAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/ipsecAlg
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemIpsecAlgAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/ipsecAlg
        private Task<_xdsl.Task> PostXdslServiceNameModemIpsecAlgAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan
        private Task<System.String[]> GetXdslServiceNameModemLanAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}
        private Task<_xdsl.LAN> GetXdslServiceNameModemLanLanNameAsync() {
            return default(Task<_xdsl.LAN>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}
        private void PutXdslServiceNameModemLanLanNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp
        private Task<System.String[]> GetXdslServiceNameModemLanLanNameDhcpAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        private Task<_xdsl.DHCP> GetXdslServiceNameModemLanLanNameDhcpDhcpNameAsync() {
            return default(Task<_xdsl.DHCP>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}
        private void PutXdslServiceNameModemLanLanNameDhcpDhcpNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        private Task<System.String[]> GetXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses
        private Task<_xdsl.DHCPStaticAddress> PostXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesAsync() {
            return default(Task<_xdsl.DHCPStaticAddress>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        private Task<_xdsl.Task> DeleteXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        private Task<_xdsl.DHCPStaticAddress> GetXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync() {
            return default(Task<_xdsl.DHCPStaticAddress>);
        }
        
        // Path: /xdsl/{serviceName}/modem/lan/{lanName}/dhcp/{dhcpName}/DHCPStaticAddresses/{MACAddress}
        private void PutXdslServiceNameModemLanLanNameDhcpDhcpNameDHCPStaticAddressesMACAddressAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings
        private Task<System.String[]> GetXdslServiceNameModemPortMappingsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings
        private Task<_xdsl.PortMapping> PostXdslServiceNameModemPortMappingsAsync() {
            return default(Task<_xdsl.PortMapping>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        private Task<_xdsl.Task> DeleteXdslServiceNameModemPortMappingsNameAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        private Task<_xdsl.PortMapping> GetXdslServiceNameModemPortMappingsNameAsync() {
            return default(Task<_xdsl.PortMapping>);
        }
        
        // Path: /xdsl/{serviceName}/modem/portMappings/{name}
        private void PutXdslServiceNameModemPortMappingsNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/reboot
        private Task<_xdsl.Task> PostXdslServiceNameModemRebootAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/reconfigureVoip
        private void PostXdslServiceNameModemReconfigureVoipAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/refreshConnectedDevices
        private Task<_xdsl.Task> PostXdslServiceNameModemRefreshConnectedDevicesAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/reset
        private Task<_xdsl.Task> PostXdslServiceNameModemResetAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/resetPortMappingConfig
        private void PostXdslServiceNameModemResetPortMappingConfigAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/retrieveInfo
        private Task<_xdsl_AsyncTask_xdsl.ModemInfo> PostXdslServiceNameModemRetrieveInfoAsync() {
            return default(Task<_xdsl_AsyncTask_xdsl.ModemInfo>);
        }
        
        // Path: /xdsl/{serviceName}/modem/sipAlg
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemSipAlgAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/sipAlg
        private Task<_xdsl.Task> PostXdslServiceNameModemSipAlgAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/upnp
        private Task<_xdsl.ServiceStatusEnum> GetXdslServiceNameModemUpnpAsync() {
            return default(Task<_xdsl.ServiceStatusEnum>);
        }
        
        // Path: /xdsl/{serviceName}/modem/upnp
        private Task<_xdsl.Task> PostXdslServiceNameModemUpnpAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi
        private Task<System.String[]> GetXdslServiceNameModemWifiAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}
        private Task<_xdsl.WLAN> GetXdslServiceNameModemWifiWifiNameAsync() {
            return default(Task<_xdsl.WLAN>);
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}
        private void PutXdslServiceNameModemWifiWifiNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/modem/wifi/{wifiName}/qrCode
        private Task<System.String> GetXdslServiceNameModemWifiWifiNameQrCodeAsync() {
            return default(Task<System.String>);
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications
        private Task<System.Int64[]> GetXdslServiceNameMonitoringNotificationsAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications
        private Task<_xdsl.MonitoringNotification> PostXdslServiceNameMonitoringNotificationsAsync() {
            return default(Task<_xdsl.MonitoringNotification>);
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        private void DeleteXdslServiceNameMonitoringNotificationsIdAsync() {
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        private Task<_xdsl.MonitoringNotification> GetXdslServiceNameMonitoringNotificationsIdAsync() {
            return default(Task<_xdsl.MonitoringNotification>);
        }
        
        // Path: /xdsl/{serviceName}/monitoringNotifications/{id}
        private void PutXdslServiceNameMonitoringNotificationsIdAsync() {
        }
        
        // Path: /xdsl/{serviceName}/ont
        private Task<_xdsl.Ont> GetXdslServiceNameOntAsync() {
            return default(Task<_xdsl.Ont>);
        }
        
        // Path: /xdsl/{serviceName}/orderFollowup
        private Task<_xdsl_orderFollowup.Step[]> GetXdslServiceNameOrderFollowupAsync() {
            return default(Task<_xdsl_orderFollowup.Step[]>);
        }
        
        // Path: /xdsl/{serviceName}/orderMeeting
        private void PostXdslServiceNameOrderMeetingAsync() {
        }
        
        // Path: /xdsl/{serviceName}/pendingAction
        private Task<_xdsl.PendingAction> GetXdslServiceNamePendingActionAsync() {
            return default(Task<_xdsl.PendingAction>);
        }
        
        // Path: /xdsl/{serviceName}/radiusConnectionLogs
        private Task<_xdsl.RadiusConnectionLog[]> GetXdslServiceNameRadiusConnectionLogsAsync() {
            return default(Task<_xdsl.RadiusConnectionLog[]>);
        }
        
        // Path: /xdsl/{serviceName}/requestPPPLoginMail
        private void PostXdslServiceNameRequestPPPLoginMailAsync() {
        }
        
        // Path: /xdsl/{serviceName}/requestTotalDeconsolidation
        private Task<_xdsl.Task> PostXdslServiceNameRequestTotalDeconsolidationAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/resiliate
        private Task<_xdsl.ResiliationFollowUpDetail> PostXdslServiceNameResiliateAsync() {
            return default(Task<_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /xdsl/{serviceName}/resiliationFollowup
        private Task<_xdsl.ResiliationFollowUpDetail> GetXdslServiceNameResiliationFollowupAsync() {
            return default(Task<_xdsl.ResiliationFollowUpDetail>);
        }
        
        // Path: /xdsl/{serviceName}/resiliationTerms
        private Task<_xdsl.ResiliationTerms> GetXdslServiceNameResiliationTermsAsync() {
            return default(Task<_xdsl.ResiliationTerms>);
        }
        
        // Path: /xdsl/{serviceName}/rma
        private Task<System.String[]> GetXdslServiceNameRmaAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        private void DeleteXdslServiceNameRmaIdAsync() {
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        private Task<_telephony.Rma> GetXdslServiceNameRmaIdAsync() {
            return default(Task<_telephony.Rma>);
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}
        private void PutXdslServiceNameRmaIdAsync() {
        }
        
        // Path: /xdsl/{serviceName}/rma/{id}/changeType
        private void PostXdslServiceNameRmaIdChangeTypeAsync() {
        }
        
        // Path: /xdsl/{serviceName}/searchOrderMeetings
        private Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings> PostXdslServiceNameSearchOrderMeetingsAsync() {
            return default(Task<_xdsl_AsyncTask_connectivity_eligibility.Meetings>);
        }
        
        // Path: /xdsl/{serviceName}/sendOrderToProvider
        private void PostXdslServiceNameSendOrderToProviderAsync() {
        }
        
        // Path: /xdsl/{serviceName}/serviceInfos
        private Task<_services.Service> GetXdslServiceNameServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /xdsl/{serviceName}/serviceInfos
        private void PutXdslServiceNameServiceInfosAsync() {
        }
        
        // Path: /xdsl/spare
        private Task<System.String[]> GetXdslSpareAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/spare/{spare}
        private void DeleteXdslSpareSpareAsync() {
        }
        
        // Path: /xdsl/spare/{spare}
        private Task<_spare_xdsl.XdslSpareWithIAM> GetXdslSpareSpareAsync() {
            return default(Task<_spare_xdsl.XdslSpareWithIAM>);
        }
        
        // Path: /xdsl/spare/brands
        private Task<System.String[]> GetXdslSpareBrandsAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/spare/{spare}/compatibleReplacement
        private Task<System.String[]> GetXdslSpareSpareCompatibleReplacementAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/spare/{spare}/replace
        private void PostXdslSpareSpareReplaceAsync() {
        }
        
        // Path: /xdsl/spare/{spare}/returnMerchandise
        private void PostXdslSpareSpareReturnMerchandiseAsync() {
        }
        
        // Path: /xdsl/spare/{spare}/serviceInfos
        private Task<_services.Service> GetXdslSpareSpareServiceInfosAsync() {
            return default(Task<_services.Service>);
        }
        
        // Path: /xdsl/spare/{spare}/serviceInfos
        private void PutXdslSpareSpareServiceInfosAsync() {
        }
        
        // Path: /xdsl/{serviceName}/statistics
        private Task<_complexType_UnitAndValues_xdsl.AccessLatency> GetXdslServiceNameStatisticsAsync() {
            return default(Task<_complexType_UnitAndValues_xdsl.AccessLatency>);
        }
        
        // Path: /xdsl/{serviceName}/tasks
        private Task<System.Int64[]> GetXdslServiceNameTasksAsync() {
            return default(Task<System.Int64[]>);
        }
        
        // Path: /xdsl/{serviceName}/tasks/{id}
        private Task<_xdsl.Task> GetXdslServiceNameTasksIdAsync() {
            return default(Task<_xdsl.Task>);
        }
        
        // Path: /xdsl/{serviceName}/tasks/{id}/archive
        private void PostXdslServiceNameTasksIdArchiveAsync() {
        }
        
        // Path: /xdsl/templateModem
        private Task<System.String[]> GetXdslTemplateModemAsync() {
            return default(Task<System.String[]>);
        }
        
        // Path: /xdsl/templateModem
        private Task<_xdsl.TemplateModem> PostXdslTemplateModemAsync() {
            return default(Task<_xdsl.TemplateModem>);
        }
        
        // Path: /xdsl/templateModem/{name}
        private void DeleteXdslTemplateModemNameAsync() {
        }
        
        // Path: /xdsl/templateModem/{name}
        private Task<_xdsl.TemplateModem> GetXdslTemplateModemNameAsync() {
            return default(Task<_xdsl.TemplateModem>);
        }
        
        // Path: /xdsl/templateModem/{name}
        private void PutXdslTemplateModemNameAsync() {
        }
        
        // Path: /xdsl/{serviceName}/totalDeconsolidationTerms
        private Task<_xdsl.DeconsolidationTerms> GetXdslServiceNameTotalDeconsolidationTermsAsync() {
            return default(Task<_xdsl.DeconsolidationTerms>);
        }
        
        // Path: /xdsl/{serviceName}/updateInvalidOrMissingRio
        private void PostXdslServiceNameUpdateInvalidOrMissingRioAsync() {
        }
    }
}
